{"expireTime":9007200836242257000,"key":"gatsby-plugin-mdx-entire-payload-ef07cf3954ee4953685a2d1db66cf27a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Creating Your Own Language","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":29,"offset":195},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":29,"offset":195},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Use Cases","position":{"start":{"line":10,"column":4,"offset":200},"end":{"line":10,"column":13,"offset":209},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":197},"end":{"line":10,"column":13,"offset":209},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Domain-Specific Languages: Terraform, Gemfiles","position":{"start":{"line":12,"column":4,"offset":214},"end":{"line":12,"column":50,"offset":260},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":214},"end":{"line":12,"column":50,"offset":260},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":211},"end":{"line":12,"column":50,"offset":260},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Templating languages: Handlebars, Pug","position":{"start":{"line":13,"column":4,"offset":264},"end":{"line":13,"column":41,"offset":301},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":264},"end":{"line":13,"column":41,"offset":301},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":261},"end":{"line":13,"column":41,"offset":301},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":211},"end":{"line":13,"column":41,"offset":301},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usecases at SendGrid","position":{"start":{"line":15,"column":4,"offset":306},"end":{"line":15,"column":24,"offset":326},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":303},"end":{"line":15,"column":24,"offset":326},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Drag + Drop editor takes HTML, parses it into an abstract syntax tree (AST) and manipulates it before serializing it back into HTML.","position":{"start":{"line":17,"column":3,"offset":330},"end":{"line":17,"column":135,"offset":462},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":330},"end":{"line":17,"column":135,"offset":462},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":328},"end":{"line":17,"column":135,"offset":462},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using it for own bespoke templating language for dynamic email templates.","position":{"start":{"line":18,"column":3,"offset":465},"end":{"line":18,"column":76,"offset":538},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":465},"end":{"line":18,"column":76,"offset":538},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":463},"end":{"line":18,"column":76,"offset":538},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Sync position in side-by-side editor by breaking HTML into an AST and rewriting the elements with information about their position in the text editor.","position":{"start":{"line":19,"column":3,"offset":541},"end":{"line":19,"column":153,"offset":691},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":541},"end":{"line":19,"column":153,"offset":691},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":539},"end":{"line":19,"column":153,"offset":691},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":328},"end":{"line":19,"column":153,"offset":691},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What is a compiler?","position":{"start":{"line":21,"column":4,"offset":696},"end":{"line":21,"column":23,"offset":715},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":693},"end":{"line":21,"column":23,"offset":715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Something that turns a higher-level language into a lower-level langauge","position":{"start":{"line":23,"column":1,"offset":717},"end":{"line":23,"column":73,"offset":789},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":23,"column":73,"offset":789},"end":{"line":23,"column":75,"offset":791},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":23,"column":75,"offset":791},"end":{"line":23,"column":76,"offset":792},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":717},"end":{"line":23,"column":76,"offset":792},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Todays example","position":{"start":{"line":25,"column":4,"offset":797},"end":{"line":25,"column":18,"offset":811},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":794},"end":{"line":25,"column":18,"offset":811},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this particular example, we will follow the course that builds the language ","position":{"start":{"line":27,"column":1,"offset":813},"end":{"line":27,"column":80,"offset":892},"indent":[]}},{"type":"inlineCode","value":"Dropbear","position":{"start":{"line":27,"column":80,"offset":892},"end":{"line":27,"column":90,"offset":902},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":27,"column":90,"offset":902},"end":{"line":27,"column":91,"offset":903},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":813},"end":{"line":27,"column":91,"offset":903},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Lisp-like langage","position":{"start":{"line":29,"column":3,"offset":907},"end":{"line":29,"column":20,"offset":924},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":907},"end":{"line":29,"column":20,"offset":924},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":905},"end":{"line":29,"column":20,"offset":924},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Leverage existing JavaScript run-time","position":{"start":{"line":30,"column":3,"offset":927},"end":{"line":30,"column":40,"offset":964},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":927},"end":{"line":30,"column":40,"offset":964},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":925},"end":{"line":30,"column":40,"offset":964},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":905},"end":{"line":30,"column":40,"offset":964},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"(add 1 2 (subtract 6 3))","position":{"start":{"line":32,"column":1,"offset":966},"end":{"line":34,"column":4,"offset":998},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inspiration Resources","position":{"start":{"line":36,"column":4,"offset":1003},"end":{"line":36,"column":25,"offset":1024},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1000},"end":{"line":36,"column":25,"offset":1024},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://norvig.com/lispy.html","children":[{"type":"text","value":"https://norvig.com/lispy.html","position":{"start":{"line":38,"column":3,"offset":1028},"end":{"line":38,"column":32,"offset":1057},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1028},"end":{"line":38,"column":32,"offset":1057},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1028},"end":{"line":38,"column":32,"offset":1057},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1026},"end":{"line":38,"column":32,"offset":1057},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://eloquentjavascript.net/12_language.html","children":[{"type":"text","value":"https://eloquentjavascript.net/12_language.html","position":{"start":{"line":39,"column":3,"offset":1060},"end":{"line":39,"column":50,"offset":1107},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1060},"end":{"line":39,"column":50,"offset":1107},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1060},"end":{"line":39,"column":50,"offset":1107},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1058},"end":{"line":39,"column":50,"offset":1107},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/jamiebuilds/the-super-tiny-compiler","children":[{"type":"text","value":"https://github.com/jamiebuilds/the-super-tiny-compiler","position":{"start":{"line":40,"column":3,"offset":1110},"end":{"line":40,"column":57,"offset":1164},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1110},"end":{"line":40,"column":57,"offset":1164},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1110},"end":{"line":40,"column":57,"offset":1164},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1108},"end":{"line":40,"column":57,"offset":1164},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1026},"end":{"line":40,"column":57,"offset":1164},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Stages of a Compiler","position":{"start":{"line":42,"column":4,"offset":1169},"end":{"line":42,"column":24,"offset":1189},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1166},"end":{"line":42,"column":24,"offset":1189},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Parsing: Take source code and turn it into representation of that code.","position":{"start":{"line":44,"column":4,"offset":1194},"end":{"line":44,"column":75,"offset":1265},"indent":[]}}],"position":{"start":{"line":44,"column":4,"offset":1194},"end":{"line":44,"column":75,"offset":1265},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1191},"end":{"line":44,"column":75,"offset":1265},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Transformation: Take source code and transforms it to do whatever the compiler wants it to do","position":{"start":{"line":45,"column":4,"offset":1269},"end":{"line":45,"column":97,"offset":1362},"indent":[]}}],"position":{"start":{"line":45,"column":4,"offset":1269},"end":{"line":45,"column":97,"offset":1362},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1266},"end":{"line":45,"column":97,"offset":1362},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Generation: Take the transformed representation and turns it into a new string of code","position":{"start":{"line":46,"column":4,"offset":1366},"end":{"line":46,"column":90,"offset":1452},"indent":[]}}],"position":{"start":{"line":46,"column":4,"offset":1366},"end":{"line":46,"column":90,"offset":1452},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1363},"end":{"line":46,"column":90,"offset":1452},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1191},"end":{"line":46,"column":90,"offset":1452},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Parsing","position":{"start":{"line":48,"column":4,"offset":1457},"end":{"line":48,"column":11,"offset":1464},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1454},"end":{"line":48,"column":11,"offset":1464},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Consists of ","position":{"start":{"line":50,"column":1,"offset":1466},"end":{"line":50,"column":13,"offset":1478},"indent":[]}},{"type":"inlineCode","value":"Lexical analysis","position":{"start":{"line":50,"column":13,"offset":1478},"end":{"line":50,"column":31,"offset":1496},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":50,"column":31,"offset":1496},"end":{"line":50,"column":36,"offset":1501},"indent":[]}},{"type":"inlineCode","value":"Syntactic analysis","position":{"start":{"line":50,"column":36,"offset":1501},"end":{"line":50,"column":56,"offset":1521},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":50,"column":56,"offset":1521},"end":{"line":50,"column":57,"offset":1522},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1466},"end":{"line":50,"column":57,"offset":1522},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: Lexing = Lexical analysis.","position":{"start":{"line":52,"column":1,"offset":1524},"end":{"line":52,"column":33,"offset":1556},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1524},"end":{"line":52,"column":33,"offset":1556},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Basically: take big string of code and turn it into ","position":{"start":{"line":54,"column":1,"offset":1558},"end":{"line":54,"column":53,"offset":1610},"indent":[]}},{"type":"inlineCode","value":"tokens","position":{"start":{"line":54,"column":53,"offset":1610},"end":{"line":54,"column":61,"offset":1618},"indent":[]}},{"type":"text","value":" where a ","position":{"start":{"line":54,"column":61,"offset":1618},"end":{"line":54,"column":70,"offset":1627},"indent":[]}},{"type":"inlineCode","value":"token","position":{"start":{"line":54,"column":70,"offset":1627},"end":{"line":54,"column":77,"offset":1634},"indent":[]}},{"type":"text","value":" is a small unit of the language.","position":{"start":{"line":54,"column":77,"offset":1634},"end":{"line":54,"column":110,"offset":1667},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1558},"end":{"line":54,"column":110,"offset":1667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How might a lexer work?","position":{"start":{"line":56,"column":1,"offset":1669},"end":{"line":56,"column":24,"offset":1692},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1669},"end":{"line":56,"column":24,"offset":1692},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Accept input string of code","position":{"start":{"line":58,"column":3,"offset":1696},"end":{"line":58,"column":30,"offset":1723},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":1696},"end":{"line":58,"column":30,"offset":1723},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1694},"end":{"line":58,"column":30,"offset":1723},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create var for tracking position (like cursor)","position":{"start":{"line":59,"column":3,"offset":1726},"end":{"line":59,"column":49,"offset":1772},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":1726},"end":{"line":59,"column":49,"offset":1772},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1724},"end":{"line":59,"column":49,"offset":1772},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Make an array of tokens","position":{"start":{"line":60,"column":3,"offset":1775},"end":{"line":60,"column":26,"offset":1798},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":1775},"end":{"line":60,"column":26,"offset":1798},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1773},"end":{"line":60,"column":26,"offset":1798},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Write a while loop that iterates through the source code input","position":{"start":{"line":61,"column":3,"offset":1801},"end":{"line":61,"column":65,"offset":1863},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":1801},"end":{"line":61,"column":65,"offset":1863},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1799},"end":{"line":61,"column":65,"offset":1863},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check each token, see if matches type","position":{"start":{"line":62,"column":3,"offset":1866},"end":{"line":62,"column":40,"offset":1903},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":1866},"end":{"line":62,"column":40,"offset":1903},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1864},"end":{"line":62,"column":40,"offset":1903},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add it to the array of token","position":{"start":{"line":63,"column":3,"offset":1906},"end":{"line":63,"column":31,"offset":1934},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":1906},"end":{"line":63,"column":31,"offset":1934},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1904},"end":{"line":63,"column":31,"offset":1934},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1694},"end":{"line":63,"column":31,"offset":1934},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using helpers","position":{"start":{"line":65,"column":5,"offset":1940},"end":{"line":65,"column":18,"offset":1953},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1936},"end":{"line":65,"column":18,"offset":1953},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const isWhitespace = character => /\\s/.test(character);\nconst isNumber = character => /[0-9]/.test(character);\nconst isOperator = character => /[\\+\\-\\*\\/]/.test(character);","position":{"start":{"line":67,"column":1,"offset":1955},"end":{"line":71,"column":4,"offset":2145},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Turning strings to tokens","position":{"start":{"line":73,"column":5,"offset":2151},"end":{"line":73,"column":30,"offset":2176},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2147},"end":{"line":73,"column":30,"offset":2176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that based on our syntax, we may need to collect multiple characters into a single token ie ","position":{"start":{"line":75,"column":1,"offset":2178},"end":{"line":75,"column":98,"offset":2275},"indent":[]}},{"type":"inlineCode","value":"22 + 23","position":{"start":{"line":75,"column":98,"offset":2275},"end":{"line":75,"column":107,"offset":2284},"indent":[]}},{"type":"text","value":" (which tokenizes as ","position":{"start":{"line":75,"column":107,"offset":2284},"end":{"line":75,"column":128,"offset":2305},"indent":[]}},{"type":"inlineCode","value":"['2','2','+','2','3']","position":{"start":{"line":75,"column":128,"offset":2305},"end":{"line":75,"column":151,"offset":2328},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":75,"column":151,"offset":2328},"end":{"line":75,"column":152,"offset":2329},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2178},"end":{"line":75,"column":152,"offset":2329},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const tokenize = input => {\n  let cursor = 0;\n  const tokens = [];\n\n  while (cursor < input.length) {\n    // Logic here\n    // Example for number helper\n    if (isNumber(character))\n  }\n\n  return tokens;\n};","position":{"start":{"line":77,"column":1,"offset":2331},"end":{"line":90,"column":4,"offset":2555},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":93,"column":1,"offset":2558},"end":{"line":93,"column":31,"offset":2588},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":93,"column":31,"offset":2588}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-your-own-language\"\n    }}>{`Creating Your Own Language`}</h1>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Domain-Specific Languages: Terraform, Gemfiles`}</li>\n      <li parentName=\"ol\">{`Templating languages: Handlebars, Pug`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"usecases-at-sendgrid\"\n    }}>{`Usecases at SendGrid`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Drag + Drop editor takes HTML, parses it into an abstract syntax tree (AST) and manipulates it before serializing it back into HTML.`}</li>\n      <li parentName=\"ul\">{`Using it for own bespoke templating language for dynamic email templates.`}</li>\n      <li parentName=\"ul\">{`Sync position in side-by-side editor by breaking HTML into an AST and rewriting the elements with information about their position in the text editor.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"what-is-a-compiler\"\n    }}>{`What is a compiler?`}</h2>\n    <p>{`Something that turns a higher-level language into a lower-level langauge`}{`*`}{`.`}</p>\n    <h2 {...{\n      \"id\": \"todays-example\"\n    }}>{`Todays example`}</h2>\n    <p>{`In this particular example, we will follow the course that builds the language `}<inlineCode parentName=\"p\">{`Dropbear`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Lisp-like langage`}</li>\n      <li parentName=\"ul\">{`Leverage existing JavaScript run-time`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`(add 1 2 (subtract 6 3))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inspiration-resources\"\n    }}>{`Inspiration Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://norvig.com/lispy.html\"\n        }}>{`https://norvig.com/lispy.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://eloquentjavascript.net/12_language.html\"\n        }}>{`https://eloquentjavascript.net/12_language.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/jamiebuilds/the-super-tiny-compiler\"\n        }}>{`https://github.com/jamiebuilds/the-super-tiny-compiler`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"stages-of-a-compiler\"\n    }}>{`Stages of a Compiler`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Parsing: Take source code and turn it into representation of that code.`}</li>\n      <li parentName=\"ol\">{`Transformation: Take source code and transforms it to do whatever the compiler wants it to do`}</li>\n      <li parentName=\"ol\">{`Generation: Take the transformed representation and turns it into a new string of code`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"parsing\"\n    }}>{`Parsing`}</h2>\n    <p>{`Consists of `}<inlineCode parentName=\"p\">{`Lexical analysis`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Syntactic analysis`}</inlineCode>{`.`}</p>\n    <p>{`Note: Lexing = Lexical analysis.`}</p>\n    <p>{`Basically: take big string of code and turn it into `}<inlineCode parentName=\"p\">{`tokens`}</inlineCode>{` where a `}<inlineCode parentName=\"p\">{`token`}</inlineCode>{` is a small unit of the language.`}</p>\n    <p>{`How might a lexer work?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Accept input string of code`}</li>\n      <li parentName=\"ul\">{`Create var for tracking position (like cursor)`}</li>\n      <li parentName=\"ul\">{`Make an array of tokens`}</li>\n      <li parentName=\"ul\">{`Write a while loop that iterates through the source code input`}</li>\n      <li parentName=\"ul\">{`Check each token, see if matches type`}</li>\n      <li parentName=\"ul\">{`Add it to the array of token`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"using-helpers\"\n    }}>{`Using helpers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const isWhitespace = character => /\\\\s/.test(character);\nconst isNumber = character => /[0-9]/.test(character);\nconst isOperator = character => /[\\\\+\\\\-\\\\*\\\\/]/.test(character);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"turning-strings-to-tokens\"\n    }}>{`Turning strings to tokens`}</h3>\n    <p>{`Note that based on our syntax, we may need to collect multiple characters into a single token ie `}<inlineCode parentName=\"p\">{`22 + 23`}</inlineCode>{` (which tokenizes as `}<inlineCode parentName=\"p\">{`['2','2','+','2','3']`}</inlineCode>{`)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const tokenize = input => {\n  let cursor = 0;\n  const tokens = [];\n\n  while (cursor < input.length) {\n    // Logic here\n    // Example for number helper\n    if (isNumber(character))\n  }\n\n  return tokens;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}