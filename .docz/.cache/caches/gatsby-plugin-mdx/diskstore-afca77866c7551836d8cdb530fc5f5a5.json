{"expireTime":9007200840733831000,"key":"gatsby-plugin-mdx-entire-payload-4389ad03006de7d20eb429f946470694-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Exploring Service Workers","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":28,"offset":194},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":28,"offset":194},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/service-workers/","children":[{"type":"text","value":"Exploring Service Workers","position":{"start":{"line":10,"column":5,"offset":200},"end":{"line":10,"column":30,"offset":225},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":199},"end":{"line":10,"column":85,"offset":280},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":199},"end":{"line":10,"column":85,"offset":280},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":10,"column":85,"offset":280},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/FrontendMasters/service-workers-offline","children":[{"type":"text","value":"Service worker GitHub Materials","position":{"start":{"line":11,"column":5,"offset":285},"end":{"line":11,"column":36,"offset":316},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":284},"end":{"line":11,"column":97,"offset":377},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":284},"end":{"line":11,"column":97,"offset":377},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":281},"end":{"line":11,"column":97,"offset":377},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/FrontendMasters/web-workers","children":[{"type":"text","value":"Web worker GitHub Materials","position":{"start":{"line":12,"column":5,"offset":382},"end":{"line":12,"column":32,"offset":409},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":381},"end":{"line":12,"column":81,"offset":458},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":381},"end":{"line":12,"column":81,"offset":458},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":378},"end":{"line":12,"column":81,"offset":458},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://abookapart.com/blogs/press/going-offline-is-now-available","children":[{"type":"text","value":"Going Offline - Book","position":{"start":{"line":13,"column":5,"offset":463},"end":{"line":13,"column":25,"offset":483},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":462},"end":{"line":13,"column":93,"offset":551},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":462},"end":{"line":13,"column":93,"offset":551},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":459},"end":{"line":13,"column":93,"offset":551},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/GoogleChrome/workbox","children":[{"type":"text","value":"Workbox - Github","position":{"start":{"line":14,"column":5,"offset":556},"end":{"line":14,"column":21,"offset":572},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":555},"end":{"line":14,"column":63,"offset":614},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":555},"end":{"line":14,"column":63,"offset":614},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":552},"end":{"line":14,"column":63,"offset":614},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://serviceworke.rs/","children":[{"type":"text","value":"servieworke.rs","position":{"start":{"line":15,"column":5,"offset":619},"end":{"line":15,"column":19,"offset":633},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":618},"end":{"line":15,"column":46,"offset":660},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":618},"end":{"line":15,"column":46,"offset":660},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":615},"end":{"line":15,"column":46,"offset":660},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":15,"column":46,"offset":660},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":17,"column":4,"offset":665},"end":{"line":17,"column":16,"offset":677},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":662},"end":{"line":17,"column":16,"offset":677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Service workers are not just for the web, but they should be used for every single website.","position":{"start":{"line":19,"column":1,"offset":679},"end":{"line":19,"column":92,"offset":770},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":679},"end":{"line":19,"column":92,"offset":770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"According to Getify, Service Workers are aimed towards beginning to fix some of the issues of the web.","position":{"start":{"line":21,"column":1,"offset":772},"end":{"line":21,"column":103,"offset":874},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":772},"end":{"line":21,"column":103,"offset":874},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"We forget that customers are mobile.","position":{"start":{"line":23,"column":3,"offset":878},"end":{"line":23,"column":39,"offset":914},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":878},"end":{"line":23,"column":39,"offset":914},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":876},"end":{"line":23,"column":39,"offset":914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Getify uses the example of blog posts that he wanted to read, goes into airplane mode and then they're lost.","position":{"start":{"line":25,"column":1,"offset":916},"end":{"line":25,"column":109,"offset":1024},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":916},"end":{"line":25,"column":109,"offset":1024},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The other example he brings up is the issues with the timeline for the Twitter PWA.","position":{"start":{"line":27,"column":1,"offset":1026},"end":{"line":27,"column":84,"offset":1109},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1026},"end":{"line":27,"column":84,"offset":1109},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Web Worker","position":{"start":{"line":29,"column":4,"offset":1114},"end":{"line":29,"column":18,"offset":1128},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1111},"end":{"line":29,"column":18,"offset":1128},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These were the precursors to the service workers. What the example does is show the example of counting Fibonnaci numbers.","position":{"start":{"line":31,"column":1,"offset":1130},"end":{"line":31,"column":123,"offset":1252},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1130},"end":{"line":31,"column":123,"offset":1252},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The use case for web workers is to process intensive functionality. It will run in a thread separate to the web page. The only guarantee for web workers is that you can at least spin up one other thread.","position":{"start":{"line":33,"column":1,"offset":1254},"end":{"line":33,"column":204,"offset":1457},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1254},"end":{"line":33,"column":204,"offset":1457},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"home.js","position":{"start":{"line":35,"column":5,"offset":1463},"end":{"line":35,"column":12,"offset":1470},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1459},"end":{"line":35,"column":12,"offset":1470},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"(function Home() {\n  'use strict';\n\n  var startStopBtn;\n  var fibsList;\n  var worker;\n\n  document.addEventListener('DOMContentLoaded', ready, false);\n\n  // **********************************\n\n  function ready() {\n    startStopBtn = document.getElementById('start-stop-btn');\n    fibsList = document.getElementById('fibs');\n\n    startStopBtn.addEventListener('click', startFibs, false);\n  }\n\n  function startFibs() {\n    startStopBtn.removeEventListener('click', startFibs, false);\n    startStopBtn.addEventListener('click', stopFibs, false);\n\n    startStopBtn.innerText = 'Stop';\n    fibsList.innerHTML = '';\n\n    worker = new Worker('/js/worker.js');\n    worker.addEventListener('message', onMessage);\n    worker.postMessage({ start: true });\n  }\n\n  function stopFibs() {\n    startStopBtn.removeEventListener('click', stopFibs, false);\n    startStopBtn.addEventListener('click', startFibs, false);\n\n    startStopBtn.innerText = 'Start';\n    worker.terminate();\n    worker = null;\n  }\n\n  function renderFib(num, fib) {\n    var p = document.createElement('div');\n    p.innerText = `Fib(${num}): ${fib}`;\n    if (fibsList.childNodes.length > 0) {\n      fibsList.insertBefore(p, fibsList.childNodes[0]);\n    } else {\n      fibsList.appendChild(p);\n    }\n  }\n\n  function onMessage(evt) {\n    renderFib(evt.data.num, evt.data.fib);\n  }\n})();","position":{"start":{"line":37,"column":1,"offset":1472},"end":{"line":91,"column":4,"offset":2826},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"worker.js","position":{"start":{"line":93,"column":5,"offset":2832},"end":{"line":93,"column":14,"offset":2841},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2828},"end":{"line":93,"column":14,"offset":2841},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"'use strict';\n\nvar curNum = 0;\n\nself.onmessage = onMessage;\n\n// **********************************\n\nfunction onMessage() {\n  getNextFib();\n}\n\nfunction getNextFib() {\n  var curFib = fib(curNum);\n  self.postMessage({ num: curNum, fib: curFib });\n  curNum++;\n  getNextFib();\n}\n\nfunction fib(n) {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}","position":{"start":{"line":95,"column":1,"offset":2843},"end":{"line":121,"column":4,"offset":3222},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"index.html","position":{"start":{"line":123,"column":5,"offset":3228},"end":{"line":123,"column":15,"offset":3238},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3224},"end":{"line":123,"column":15,"offset":3238},"indent":[]}},{"type":"code","lang":"html","meta":null,"value":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Web Workers</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n  </head>\n  <body>\n    <header>\n      <h1>Web Workers</h1>\n      <nav>\n        <ul>\n          <li><a href=\"/\">Home</a></li>\n        </ul>\n      </nav>\n    </header>\n\n    <main>\n      <p>\n        Let's explore Web Workers together.\n      </p>\n      <p>\n        Fibonacci Numbers:\n        <button type=\"button\" id=\"start-stop-btn\">Start</button>\n      </p>\n      <div id=\"fibs\"></div>\n    </main>\n\n    <script src=\"/js/home.js\"></script>\n  </body>\n</html>","position":{"start":{"line":125,"column":1,"offset":3240},"end":{"line":157,"column":4,"offset":3849},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For while this was okay, except there were inefficies with memory.","position":{"start":{"line":159,"column":1,"offset":3851},"end":{"line":159,"column":67,"offset":3917},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":3851},"end":{"line":159,"column":67,"offset":3917},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Service Workers","position":{"start":{"line":161,"column":4,"offset":3922},"end":{"line":161,"column":19,"offset":3937},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3919},"end":{"line":161,"column":19,"offset":3937},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some notes brought up on use cases and tidbits:","position":{"start":{"line":163,"column":1,"offset":3939},"end":{"line":163,"column":48,"offset":3986},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":3939},"end":{"line":163,"column":48,"offset":3986},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Service workers still obey the rules of CORS","position":{"start":{"line":165,"column":3,"offset":3990},"end":{"line":165,"column":47,"offset":4034},"indent":[]}}],"position":{"start":{"line":165,"column":3,"offset":3990},"end":{"line":165,"column":47,"offset":4034},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3988},"end":{"line":165,"column":47,"offset":4034},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Primary service worker use cases are access for the cache","position":{"start":{"line":166,"column":3,"offset":4037},"end":{"line":166,"column":60,"offset":4094},"indent":[]}}],"position":{"start":{"line":166,"column":3,"offset":4037},"end":{"line":166,"column":60,"offset":4094},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4035},"end":{"line":166,"column":60,"offset":4094},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can intercepting requests","position":{"start":{"line":167,"column":3,"offset":4097},"end":{"line":167,"column":32,"offset":4126},"indent":[]}}],"position":{"start":{"line":167,"column":3,"offset":4097},"end":{"line":167,"column":32,"offset":4126},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4095},"end":{"line":167,"column":32,"offset":4126},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Offline use casing for background sync","position":{"start":{"line":168,"column":3,"offset":4129},"end":{"line":168,"column":41,"offset":4167},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":4129},"end":{"line":168,"column":41,"offset":4167},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4127},"end":{"line":168,"column":41,"offset":4167},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The caching API isn't just exposed to the service worker, but there is limited functionality for the web access","position":{"start":{"line":169,"column":3,"offset":4170},"end":{"line":169,"column":114,"offset":4281},"indent":[]}}],"position":{"start":{"line":169,"column":3,"offset":4170},"end":{"line":169,"column":114,"offset":4281},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4168},"end":{"line":169,"column":114,"offset":4281},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3988},"end":{"line":169,"column":114,"offset":4281},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Other bigger use cases include \"push notifications\". Push notifications is the use of two technologies at a time. There is \"notifications\" part and the \"push\" part. The push is how the service worker can be notified by something from the server.","position":{"start":{"line":171,"column":1,"offset":4283},"end":{"line":171,"column":246,"offset":4528},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":4283},"end":{"line":171,"column":246,"offset":4528},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The tab could be closed, but the server can still make an outbound push to your service worker.","position":{"start":{"line":173,"column":3,"offset":4532},"end":{"line":173,"column":98,"offset":4627},"indent":[]}}],"position":{"start":{"line":173,"column":3,"offset":4532},"end":{"line":173,"column":98,"offset":4627},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":4530},"end":{"line":173,"column":98,"offset":4627},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"serviceworke.rs","position":{"start":{"line":175,"column":4,"offset":4632},"end":{"line":175,"column":19,"offset":4647},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":4629},"end":{"line":175,"column":19,"offset":4647},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":177,"column":1,"offset":4649},"end":{"line":177,"column":3,"offset":4651},"indent":[]}},{"type":"link","title":null,"url":"https://serviceworke.rs/","children":[{"type":"text","value":"website","position":{"start":{"line":177,"column":4,"offset":4652},"end":{"line":177,"column":11,"offset":4659},"indent":[]}}],"position":{"start":{"line":177,"column":3,"offset":4651},"end":{"line":177,"column":38,"offset":4686},"indent":[]}},{"type":"text","value":" to give some awesome uses and resources to using resources.","position":{"start":{"line":177,"column":38,"offset":4686},"end":{"line":177,"column":98,"offset":4746},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4649},"end":{"line":177,"column":98,"offset":4746},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We begin by make sure the example blog listes to the navigator to decide if we are online:","position":{"start":{"line":179,"column":1,"offset":4748},"end":{"line":179,"column":91,"offset":4838},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4748},"end":{"line":179,"column":91,"offset":4838},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// blog.js\n\n(function Blog(global) {\n  'use strict';\n\n  var offlineIcon;\n  var isOnline = 'onLine' in navigator && navigator.onLine;\n  var isLoggedIn = /isLoggedIn=1/.test(document.cookie.toString() || '');\n  var usingSW = 'serviceWorker' in navigator;\n  var swRegistration;\n  var svcworker;\n\n  if (usingSW) {\n    initServiceWorker().catch(console.error);\n  }\n\n  global.isBlogOnline = isBlogOnline;\n\n  document.addEventListener('DOMContentLoaded', ready, false);\n\n  // **********************************\n\n  function ready() {\n    offlineIcon = document.getElementById('connectivity-status');\n\n    if (!isOnline) {\n      offlineIcon.classList.remove('hidden');\n    }\n\n    window.addEventListener(\n      'online',\n      function online() {\n        offlineIcon.classList.add('hidden');\n        isOnline = true;\n        sendStatusUpdate();\n      },\n      false,\n    );\n    window.addEventListener(\n      'offline',\n      function offline() {\n        offlineIcon.classList.remove('hidden');\n        isOnline = false;\n        sendStatusUpdate();\n      },\n      false,\n    );\n  }\n\n  function isBlogOnline() {\n    return isOnline;\n  }\n\n  async function initServiceWorker() {\n    swRegistration = await navigator.serviceWorker.register('/sw.js', {\n      updateViaCache: 'none',\n    });\n\n    svcworker =\n      swRegistration.installing ||\n      swRegistration.waiting ||\n      swRegistration.active;\n    sendStatusUpdate(svcworker);\n\n    // listen for new service worker to take over\n    navigator.serviceWorker.addEventListener(\n      'controllerchange',\n      async function onController() {\n        svcworker = navigator.serviceWorker.controller;\n        sendStatusUpdate(svcworker);\n      },\n    );\n\n    navigator.serviceWorker.addEventListener('message', onSWMessage, false);\n  }\n\n  function onSWMessage(evt) {\n    var { data } = evt;\n    if (data.statusUpdateRequest) {\n      console.log('Status update requested from service worker, responding...');\n      sendStatusUpdate(evt.ports && evt.ports[0]);\n    } else if (data == 'force-logout') {\n      document.cookie = 'isLoggedIn=';\n      isLoggedIn = false;\n      sendStatusUpdate();\n    }\n  }\n\n  function sendStatusUpdate(target) {\n    sendSWMessage({ statusUpdate: { isOnline, isLoggedIn } }, target);\n  }\n\n  function sendSWMessage(msg, target) {\n    if (target) {\n      target.postMessage(msg);\n    } else if (svcworker) {\n      svcworker.postMessage(msg);\n    } else if (navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(msg);\n    }\n  }\n})(window);","position":{"start":{"line":181,"column":1,"offset":4840},"end":{"line":284,"column":4,"offset":7397},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note there is an event ","position":{"start":{"line":286,"column":3,"offset":7401},"end":{"line":286,"column":26,"offset":7424},"indent":[]}},{"type":"inlineCode","value":"document.addEventListener('online', ...);","position":{"start":{"line":286,"column":26,"offset":7424},"end":{"line":286,"column":69,"offset":7467},"indent":[]}},{"type":"text","value":" that can listen to when the web changes to and from online!","position":{"start":{"line":286,"column":69,"offset":7467},"end":{"line":286,"column":129,"offset":7527},"indent":[]}}],"position":{"start":{"line":286,"column":3,"offset":7401},"end":{"line":286,"column":129,"offset":7527},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":7399},"end":{"line":286,"column":129,"offset":7527},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Service Worker Code","position":{"start":{"line":288,"column":4,"offset":7532},"end":{"line":288,"column":27,"offset":7555},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":7529},"end":{"line":288,"column":27,"offset":7555},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The project code the service worker. Note: This is going ahead in the course and posting the final look (in case it seems disjointed in the context of this document).","position":{"start":{"line":290,"column":1,"offset":7557},"end":{"line":290,"column":167,"offset":7723},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":7557},"end":{"line":290,"column":167,"offset":7723},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"'use strict';\n\nimportScripts('/js/external/idb-keyval-iife.min.js');\n\nvar version = 8;\nvar isOnline = true;\nvar isLoggedIn = false;\nvar cacheName = `ramblings-${version}`;\nvar allPostsCaching = false;\n\nvar urlsToCache = {\n  loggedOut: [\n    '/',\n    '/about',\n    '/contact',\n    '/404',\n    '/login',\n    '/offline',\n    '/css/style.css',\n    '/js/blog.js',\n    '/js/home.js',\n    '/js/login.js',\n    '/js/add-post.js',\n    '/js/external/idb-keyval-iife.min.js',\n    '/images/logo.gif',\n    '/images/offline.png',\n  ],\n};\n\nself.addEventListener('install', onInstall);\nself.addEventListener('activate', onActivate);\nself.addEventListener('message', onMessage);\nself.addEventListener('fetch', onFetch);\n\nmain().catch(console.error);\n\n// ****************************\n\nasync function main() {\n  await sendMessage({ statusUpdateRequest: true });\n  await cacheLoggedOutFiles();\n  return cacheAllPosts();\n}\n\nfunction onInstall(evt) {\n  console.log(`Service Worker (v${version}) installed`);\n  self.skipWaiting();\n}\n\nfunction onActivate(evt) {\n  evt.waitUntil(handleActivation());\n}\n\nasync function handleActivation() {\n  await clearCaches();\n  await cacheLoggedOutFiles(/*forceReload=*/ true);\n  await clients.claim();\n  console.log(`Service Worker (v${version}) activated`);\n\n  // spin off background caching of all past posts (over time)\n  cacheAllPosts(/*forceReload=*/ true).catch(console.error);\n}\n\nasync function clearCaches() {\n  var cacheNames = await caches.keys();\n  var oldCacheNames = cacheNames.filter(function matchOldCache(cacheName) {\n    var [, cacheNameVersion] = cacheName.match(/^ramblings-(\\d+)$/) || [];\n    cacheNameVersion =\n      cacheNameVersion != null ? Number(cacheNameVersion) : cacheNameVersion;\n    return cacheNameVersion > 0 && version !== cacheNameVersion;\n  });\n  await Promise.all(\n    oldCacheNames.map(function deleteCache(cacheName) {\n      return caches.delete(cacheName);\n    }),\n  );\n}\n\nasync function cacheLoggedOutFiles(forceReload = false) {\n  var cache = await caches.open(cacheName);\n\n  return Promise.all(\n    urlsToCache.loggedOut.map(async function requestFile(url) {\n      try {\n        let res;\n\n        if (!forceReload) {\n          res = await cache.match(url);\n          if (res) {\n            return;\n          }\n        }\n\n        let fetchOptions = {\n          method: 'GET',\n          cache: 'no-store',\n          credentials: 'omit',\n        };\n        res = await fetch(url, fetchOptions);\n        if (res.ok) {\n          return cache.put(url, res);\n        }\n      } catch (err) {}\n    }),\n  );\n}\n\nasync function cacheAllPosts(forceReload = false) {\n  // already caching the posts?\n  if (allPostsCaching) {\n    return;\n  }\n  allPostsCaching = true;\n  await delay(5000);\n\n  var cache = await caches.open(cacheName);\n  var postIDs;\n\n  try {\n    if (isOnline) {\n      let fetchOptions = {\n        method: 'GET',\n        cache: 'no-store',\n        credentials: 'omit',\n      };\n      let res = await fetch('/api/get-posts', fetchOptions);\n      if (res && res.ok) {\n        await cache.put('/api/get-posts', res.clone());\n        postIDs = await res.json();\n      }\n    } else {\n      let res = await cache.match('/api/get-posts');\n      if (res) {\n        let resCopy = res.clone();\n        postIDs = await res.json();\n      }\n      // caching not started, try to start again (later)\n      else {\n        allPostsCaching = false;\n        return cacheAllPosts(forceReload);\n      }\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  if (postIDs && postIDs.length > 0) {\n    return cachePost(postIDs.shift());\n  } else {\n    allPostsCaching = false;\n  }\n\n  // *************************\n\n  async function cachePost(postID) {\n    var postURL = `/post/${postID}`;\n    var needCaching = true;\n\n    if (!forceReload) {\n      let res = await cache.match(postURL);\n      if (res) {\n        needCaching = false;\n      }\n    }\n\n    if (needCaching) {\n      await delay(10000);\n      if (isOnline) {\n        try {\n          let fetchOptions = {\n            method: 'GET',\n            cache: 'no-store',\n            credentials: 'omit',\n          };\n          let res = await fetch(postURL, fetchOptions);\n          if (res && res.ok) {\n            await cache.put(postURL, res.clone());\n            needCaching = false;\n          }\n        } catch (err) {}\n      }\n\n      // failed, try caching this post again?\n      if (needCaching) {\n        return cachePost(postID);\n      }\n    }\n\n    // any more posts to cache?\n    if (postIDs.length > 0) {\n      return cachePost(postIDs.shift());\n    } else {\n      allPostsCaching = false;\n    }\n  }\n}\n\nasync function sendMessage(msg) {\n  var allClients = await clients.matchAll({ includeUncontrolled: true });\n  return Promise.all(\n    allClients.map(function sendTo(client) {\n      var chan = new MessageChannel();\n      chan.port1.onmessage = onMessage;\n      return client.postMessage(msg, [chan.port2]);\n    }),\n  );\n}\n\nfunction onMessage({ data }) {\n  if ('statusUpdate' in data) {\n    ({ isOnline, isLoggedIn } = data.statusUpdate);\n    console.log(\n      `Service Worker (v${version}) status update... isOnline:${isOnline}, isLoggedIn:${isLoggedIn}`,\n    );\n  }\n}\n\nfunction onFetch(evt) {\n  evt.respondWith(router(evt.request));\n}\n\nasync function router(req) {\n  var url = new URL(req.url);\n  var reqURL = url.pathname;\n  var cache = await caches.open(cacheName);\n\n  // request for site's own URL?\n  if (url.origin == location.origin) {\n    // are we making an API request?\n    if (/^\\/api\\/.+$/.test(reqURL)) {\n      let fetchOptions = {\n        credentials: 'same-origin',\n        cache: 'no-store',\n      };\n      let res = await safeRequest(\n        reqURL,\n        req,\n        fetchOptions,\n        /*cacheResponse=*/ false,\n        /*checkCacheFirst=*/ false,\n        /*checkCacheLast=*/ true,\n        /*useRequestDirectly=*/ true,\n      );\n      if (res) {\n        if (req.method == 'GET') {\n          await cache.put(reqURL, res.clone());\n        }\n        // clear offline-backup of successful post?\n        else if (reqURL == '/api/add-post') {\n          await idbKeyval.del('add-post-backup');\n        }\n        return res;\n      }\n\n      return notFoundResponse();\n    }\n    // are we requesting a page?\n    else if (req.headers.get('Accept').includes('text/html')) {\n      // login-aware requests?\n      if (/^\\/(?:login|logout|add-post)$/.test(reqURL)) {\n        let res;\n\n        if (reqURL == '/login') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n              redirect: 'manual',\n            };\n            res = await safeRequest(reqURL, req, fetchOptions);\n            if (res) {\n              if (res.type == 'opaqueredirect') {\n                return Response.redirect('/add-post', 307);\n              }\n              return res;\n            }\n            if (isLoggedIn) {\n              return Response.redirect('/add-post', 307);\n            }\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            return Response.redirect('/add-post', 307);\n          } else {\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          }\n        } else if (reqURL == '/logout') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n              redirect: 'manual',\n            };\n            res = await safeRequest(reqURL, req, fetchOptions);\n            if (res) {\n              if (res.type == 'opaqueredirect') {\n                return Response.redirect('/', 307);\n              }\n              return res;\n            }\n            if (isLoggedIn) {\n              isLoggedIn = false;\n              await sendMessage('force-logout');\n              await delay(100);\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            isLoggedIn = false;\n            await sendMessage('force-logout');\n            await delay(100);\n            return Response.redirect('/', 307);\n          } else {\n            return Response.redirect('/', 307);\n          }\n        } else if (reqURL == '/add-post') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n            };\n            res = await safeRequest(\n              reqURL,\n              req,\n              fetchOptions,\n              /*cacheResponse=*/ true,\n            );\n            if (res) {\n              return res;\n            }\n            res = await cache.match(isLoggedIn ? '/add-post' : '/login');\n            if (res) {\n              return res;\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            res = await cache.match('/add-post');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          } else {\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          }\n        }\n      }\n      // otherwise, just use \"network-and-cache\"\n      else {\n        let fetchOptions = {\n          method: req.method,\n          headers: req.headers,\n          cache: 'no-store',\n        };\n        let res = await safeRequest(\n          reqURL,\n          req,\n          fetchOptions,\n          /*cacheResponse=*/ false,\n          /*checkCacheFirst=*/ false,\n          /*checkCacheLast=*/ true,\n        );\n        if (res) {\n          if (!res.headers.get('X-Not-Found')) {\n            await cache.put(reqURL, res.clone());\n          } else {\n            await cache.delete(reqURL);\n          }\n          return res;\n        }\n\n        // otherwise, return an offline-friendly page\n        return cache.match('/offline');\n      }\n    }\n    // all other files use \"cache-first\"\n    else {\n      let fetchOptions = {\n        method: req.method,\n        headers: req.headers,\n        cache: 'no-store',\n      };\n      let res = await safeRequest(\n        reqURL,\n        req,\n        fetchOptions,\n        /*cacheResponse=*/ true,\n        /*checkCacheFirst=*/ true,\n      );\n      if (res) {\n        return res;\n      }\n\n      // otherwise, force a network-level 404 response\n      return notFoundResponse();\n    }\n  }\n}\n\nasync function safeRequest(\n  reqURL,\n  req,\n  options,\n  cacheResponse = false,\n  checkCacheFirst = false,\n  checkCacheLast = false,\n  useRequestDirectly = false,\n) {\n  var cache = await caches.open(cacheName);\n  var res;\n\n  if (checkCacheFirst) {\n    res = await cache.match(reqURL);\n    if (res) {\n      return res;\n    }\n  }\n\n  if (isOnline) {\n    try {\n      if (useRequestDirectly) {\n        res = await fetch(req, options);\n      } else {\n        res = await fetch(req.url, options);\n      }\n\n      if (res && (res.ok || res.type == 'opaqueredirect')) {\n        if (cacheResponse) {\n          await cache.put(reqURL, res.clone());\n        }\n        return res;\n      }\n    } catch (err) {}\n  }\n\n  if (checkCacheLast) {\n    res = await cache.match(reqURL);\n    if (res) {\n      return res;\n    }\n  }\n}\n\nfunction notFoundResponse() {\n  return new Response('', {\n    status: 404,\n    statusText: 'Not Found',\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(function c(res) {\n    setTimeout(res, ms);\n  });\n}","position":{"start":{"line":292,"column":1,"offset":7725},"end":{"line":763,"column":4,"offset":19523},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":766,"column":1,"offset":19526},"end":{"line":766,"column":31,"offset":19556},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":766,"column":31,"offset":19556}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"exploring-service-workers\"\n    }}>{`Exploring Service Workers`}</h1>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/service-workers/\"\n        }}>{`Exploring Service Workers`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/FrontendMasters/service-workers-offline\"\n        }}>{`Service worker GitHub Materials`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/FrontendMasters/web-workers\"\n        }}>{`Web worker GitHub Materials`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://abookapart.com/blogs/press/going-offline-is-now-available\"\n        }}>{`Going Offline - Book`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GoogleChrome/workbox\"\n        }}>{`Workbox - Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://serviceworke.rs/\"\n        }}>{`servieworke.rs`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Service workers are not just for the web, but they should be used for every single website.`}</p>\n    <p>{`According to Getify, Service Workers are aimed towards beginning to fix some of the issues of the web.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We forget that customers are mobile.`}</p>\n    </blockquote>\n    <p>{`Getify uses the example of blog posts that he wanted to read, goes into airplane mode and then they're lost.`}</p>\n    <p>{`The other example he brings up is the issues with the timeline for the Twitter PWA.`}</p>\n    <h2 {...{\n      \"id\": \"the-web-worker\"\n    }}>{`The Web Worker`}</h2>\n    <p>{`These were the precursors to the service workers. What the example does is show the example of counting Fibonnaci numbers.`}</p>\n    <p>{`The use case for web workers is to process intensive functionality. It will run in a thread separate to the web page. The only guarantee for web workers is that you can at least spin up one other thread.`}</p>\n    <h3 {...{\n      \"id\": \"homejs\"\n    }}>{`home.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`(function Home() {\n  'use strict';\n\n  var startStopBtn;\n  var fibsList;\n  var worker;\n\n  document.addEventListener('DOMContentLoaded', ready, false);\n\n  // **********************************\n\n  function ready() {\n    startStopBtn = document.getElementById('start-stop-btn');\n    fibsList = document.getElementById('fibs');\n\n    startStopBtn.addEventListener('click', startFibs, false);\n  }\n\n  function startFibs() {\n    startStopBtn.removeEventListener('click', startFibs, false);\n    startStopBtn.addEventListener('click', stopFibs, false);\n\n    startStopBtn.innerText = 'Stop';\n    fibsList.innerHTML = '';\n\n    worker = new Worker('/js/worker.js');\n    worker.addEventListener('message', onMessage);\n    worker.postMessage({ start: true });\n  }\n\n  function stopFibs() {\n    startStopBtn.removeEventListener('click', stopFibs, false);\n    startStopBtn.addEventListener('click', startFibs, false);\n\n    startStopBtn.innerText = 'Start';\n    worker.terminate();\n    worker = null;\n  }\n\n  function renderFib(num, fib) {\n    var p = document.createElement('div');\n    p.innerText = \\`Fib(\\${num}): \\${fib}\\`;\n    if (fibsList.childNodes.length > 0) {\n      fibsList.insertBefore(p, fibsList.childNodes[0]);\n    } else {\n      fibsList.appendChild(p);\n    }\n  }\n\n  function onMessage(evt) {\n    renderFib(evt.data.num, evt.data.fib);\n  }\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"workerjs\"\n    }}>{`worker.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar curNum = 0;\n\nself.onmessage = onMessage;\n\n// **********************************\n\nfunction onMessage() {\n  getNextFib();\n}\n\nfunction getNextFib() {\n  var curFib = fib(curNum);\n  self.postMessage({ num: curNum, fib: curFib });\n  curNum++;\n  getNextFib();\n}\n\nfunction fib(n) {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"indexhtml\"\n    }}>{`index.html`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Web Workers</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\" />\n  </head>\n  <body>\n    <header>\n      <h1>Web Workers</h1>\n      <nav>\n        <ul>\n          <li><a href=\"/\">Home</a></li>\n        </ul>\n      </nav>\n    </header>\n\n    <main>\n      <p>\n        Let's explore Web Workers together.\n      </p>\n      <p>\n        Fibonacci Numbers:\n        <button type=\"button\" id=\"start-stop-btn\">Start</button>\n      </p>\n      <div id=\"fibs\"></div>\n    </main>\n\n    <script src=\"/js/home.js\"></script>\n  </body>\n</html>\n`}</code></pre>\n    <p>{`For while this was okay, except there were inefficies with memory.`}</p>\n    <h2 {...{\n      \"id\": \"service-workers\"\n    }}>{`Service Workers`}</h2>\n    <p>{`Some notes brought up on use cases and tidbits:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Service workers still obey the rules of CORS`}</li>\n      <li parentName=\"ul\">{`Primary service worker use cases are access for the cache`}</li>\n      <li parentName=\"ul\">{`You can intercepting requests`}</li>\n      <li parentName=\"ul\">{`Offline use casing for background sync`}</li>\n      <li parentName=\"ul\">{`The caching API isn't just exposed to the service worker, but there is limited functionality for the web access`}</li>\n    </ul>\n    <p>{`Other bigger use cases include \"push notifications\". Push notifications is the use of two technologies at a time. There is \"notifications\" part and the \"push\" part. The push is how the service worker can be notified by something from the server.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The tab could be closed, but the server can still make an outbound push to your service worker.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"serviceworkers\"\n    }}>{`serviceworke.rs`}</h2>\n    <p>{`A `}<a parentName=\"p\" {...{\n        \"href\": \"https://serviceworke.rs/\"\n      }}>{`website`}</a>{` to give some awesome uses and resources to using resources.`}</p>\n    <p>{`We begin by make sure the example blog listes to the navigator to decide if we are online:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// blog.js\n\n(function Blog(global) {\n  'use strict';\n\n  var offlineIcon;\n  var isOnline = 'onLine' in navigator && navigator.onLine;\n  var isLoggedIn = /isLoggedIn=1/.test(document.cookie.toString() || '');\n  var usingSW = 'serviceWorker' in navigator;\n  var swRegistration;\n  var svcworker;\n\n  if (usingSW) {\n    initServiceWorker().catch(console.error);\n  }\n\n  global.isBlogOnline = isBlogOnline;\n\n  document.addEventListener('DOMContentLoaded', ready, false);\n\n  // **********************************\n\n  function ready() {\n    offlineIcon = document.getElementById('connectivity-status');\n\n    if (!isOnline) {\n      offlineIcon.classList.remove('hidden');\n    }\n\n    window.addEventListener(\n      'online',\n      function online() {\n        offlineIcon.classList.add('hidden');\n        isOnline = true;\n        sendStatusUpdate();\n      },\n      false,\n    );\n    window.addEventListener(\n      'offline',\n      function offline() {\n        offlineIcon.classList.remove('hidden');\n        isOnline = false;\n        sendStatusUpdate();\n      },\n      false,\n    );\n  }\n\n  function isBlogOnline() {\n    return isOnline;\n  }\n\n  async function initServiceWorker() {\n    swRegistration = await navigator.serviceWorker.register('/sw.js', {\n      updateViaCache: 'none',\n    });\n\n    svcworker =\n      swRegistration.installing ||\n      swRegistration.waiting ||\n      swRegistration.active;\n    sendStatusUpdate(svcworker);\n\n    // listen for new service worker to take over\n    navigator.serviceWorker.addEventListener(\n      'controllerchange',\n      async function onController() {\n        svcworker = navigator.serviceWorker.controller;\n        sendStatusUpdate(svcworker);\n      },\n    );\n\n    navigator.serviceWorker.addEventListener('message', onSWMessage, false);\n  }\n\n  function onSWMessage(evt) {\n    var { data } = evt;\n    if (data.statusUpdateRequest) {\n      console.log('Status update requested from service worker, responding...');\n      sendStatusUpdate(evt.ports && evt.ports[0]);\n    } else if (data == 'force-logout') {\n      document.cookie = 'isLoggedIn=';\n      isLoggedIn = false;\n      sendStatusUpdate();\n    }\n  }\n\n  function sendStatusUpdate(target) {\n    sendSWMessage({ statusUpdate: { isOnline, isLoggedIn } }, target);\n  }\n\n  function sendSWMessage(msg, target) {\n    if (target) {\n      target.postMessage(msg);\n    } else if (svcworker) {\n      svcworker.postMessage(msg);\n    } else if (navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(msg);\n    }\n  }\n})(window);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note there is an event `}<inlineCode parentName=\"p\">{`document.addEventListener('online', ...);`}</inlineCode>{` that can listen to when the web changes to and from online!`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"the-service-worker-code\"\n    }}>{`The Service Worker Code`}</h2>\n    <p>{`The project code the service worker. Note: This is going ahead in the course and posting the final look (in case it seems disjointed in the context of this document).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nimportScripts('/js/external/idb-keyval-iife.min.js');\n\nvar version = 8;\nvar isOnline = true;\nvar isLoggedIn = false;\nvar cacheName = \\`ramblings-\\${version}\\`;\nvar allPostsCaching = false;\n\nvar urlsToCache = {\n  loggedOut: [\n    '/',\n    '/about',\n    '/contact',\n    '/404',\n    '/login',\n    '/offline',\n    '/css/style.css',\n    '/js/blog.js',\n    '/js/home.js',\n    '/js/login.js',\n    '/js/add-post.js',\n    '/js/external/idb-keyval-iife.min.js',\n    '/images/logo.gif',\n    '/images/offline.png',\n  ],\n};\n\nself.addEventListener('install', onInstall);\nself.addEventListener('activate', onActivate);\nself.addEventListener('message', onMessage);\nself.addEventListener('fetch', onFetch);\n\nmain().catch(console.error);\n\n// ****************************\n\nasync function main() {\n  await sendMessage({ statusUpdateRequest: true });\n  await cacheLoggedOutFiles();\n  return cacheAllPosts();\n}\n\nfunction onInstall(evt) {\n  console.log(\\`Service Worker (v\\${version}) installed\\`);\n  self.skipWaiting();\n}\n\nfunction onActivate(evt) {\n  evt.waitUntil(handleActivation());\n}\n\nasync function handleActivation() {\n  await clearCaches();\n  await cacheLoggedOutFiles(/*forceReload=*/ true);\n  await clients.claim();\n  console.log(\\`Service Worker (v\\${version}) activated\\`);\n\n  // spin off background caching of all past posts (over time)\n  cacheAllPosts(/*forceReload=*/ true).catch(console.error);\n}\n\nasync function clearCaches() {\n  var cacheNames = await caches.keys();\n  var oldCacheNames = cacheNames.filter(function matchOldCache(cacheName) {\n    var [, cacheNameVersion] = cacheName.match(/^ramblings-(\\\\d+)$/) || [];\n    cacheNameVersion =\n      cacheNameVersion != null ? Number(cacheNameVersion) : cacheNameVersion;\n    return cacheNameVersion > 0 && version !== cacheNameVersion;\n  });\n  await Promise.all(\n    oldCacheNames.map(function deleteCache(cacheName) {\n      return caches.delete(cacheName);\n    }),\n  );\n}\n\nasync function cacheLoggedOutFiles(forceReload = false) {\n  var cache = await caches.open(cacheName);\n\n  return Promise.all(\n    urlsToCache.loggedOut.map(async function requestFile(url) {\n      try {\n        let res;\n\n        if (!forceReload) {\n          res = await cache.match(url);\n          if (res) {\n            return;\n          }\n        }\n\n        let fetchOptions = {\n          method: 'GET',\n          cache: 'no-store',\n          credentials: 'omit',\n        };\n        res = await fetch(url, fetchOptions);\n        if (res.ok) {\n          return cache.put(url, res);\n        }\n      } catch (err) {}\n    }),\n  );\n}\n\nasync function cacheAllPosts(forceReload = false) {\n  // already caching the posts?\n  if (allPostsCaching) {\n    return;\n  }\n  allPostsCaching = true;\n  await delay(5000);\n\n  var cache = await caches.open(cacheName);\n  var postIDs;\n\n  try {\n    if (isOnline) {\n      let fetchOptions = {\n        method: 'GET',\n        cache: 'no-store',\n        credentials: 'omit',\n      };\n      let res = await fetch('/api/get-posts', fetchOptions);\n      if (res && res.ok) {\n        await cache.put('/api/get-posts', res.clone());\n        postIDs = await res.json();\n      }\n    } else {\n      let res = await cache.match('/api/get-posts');\n      if (res) {\n        let resCopy = res.clone();\n        postIDs = await res.json();\n      }\n      // caching not started, try to start again (later)\n      else {\n        allPostsCaching = false;\n        return cacheAllPosts(forceReload);\n      }\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  if (postIDs && postIDs.length > 0) {\n    return cachePost(postIDs.shift());\n  } else {\n    allPostsCaching = false;\n  }\n\n  // *************************\n\n  async function cachePost(postID) {\n    var postURL = \\`/post/\\${postID}\\`;\n    var needCaching = true;\n\n    if (!forceReload) {\n      let res = await cache.match(postURL);\n      if (res) {\n        needCaching = false;\n      }\n    }\n\n    if (needCaching) {\n      await delay(10000);\n      if (isOnline) {\n        try {\n          let fetchOptions = {\n            method: 'GET',\n            cache: 'no-store',\n            credentials: 'omit',\n          };\n          let res = await fetch(postURL, fetchOptions);\n          if (res && res.ok) {\n            await cache.put(postURL, res.clone());\n            needCaching = false;\n          }\n        } catch (err) {}\n      }\n\n      // failed, try caching this post again?\n      if (needCaching) {\n        return cachePost(postID);\n      }\n    }\n\n    // any more posts to cache?\n    if (postIDs.length > 0) {\n      return cachePost(postIDs.shift());\n    } else {\n      allPostsCaching = false;\n    }\n  }\n}\n\nasync function sendMessage(msg) {\n  var allClients = await clients.matchAll({ includeUncontrolled: true });\n  return Promise.all(\n    allClients.map(function sendTo(client) {\n      var chan = new MessageChannel();\n      chan.port1.onmessage = onMessage;\n      return client.postMessage(msg, [chan.port2]);\n    }),\n  );\n}\n\nfunction onMessage({ data }) {\n  if ('statusUpdate' in data) {\n    ({ isOnline, isLoggedIn } = data.statusUpdate);\n    console.log(\n      \\`Service Worker (v\\${version}) status update... isOnline:\\${isOnline}, isLoggedIn:\\${isLoggedIn}\\`,\n    );\n  }\n}\n\nfunction onFetch(evt) {\n  evt.respondWith(router(evt.request));\n}\n\nasync function router(req) {\n  var url = new URL(req.url);\n  var reqURL = url.pathname;\n  var cache = await caches.open(cacheName);\n\n  // request for site's own URL?\n  if (url.origin == location.origin) {\n    // are we making an API request?\n    if (/^\\\\/api\\\\/.+$/.test(reqURL)) {\n      let fetchOptions = {\n        credentials: 'same-origin',\n        cache: 'no-store',\n      };\n      let res = await safeRequest(\n        reqURL,\n        req,\n        fetchOptions,\n        /*cacheResponse=*/ false,\n        /*checkCacheFirst=*/ false,\n        /*checkCacheLast=*/ true,\n        /*useRequestDirectly=*/ true,\n      );\n      if (res) {\n        if (req.method == 'GET') {\n          await cache.put(reqURL, res.clone());\n        }\n        // clear offline-backup of successful post?\n        else if (reqURL == '/api/add-post') {\n          await idbKeyval.del('add-post-backup');\n        }\n        return res;\n      }\n\n      return notFoundResponse();\n    }\n    // are we requesting a page?\n    else if (req.headers.get('Accept').includes('text/html')) {\n      // login-aware requests?\n      if (/^\\\\/(?:login|logout|add-post)$/.test(reqURL)) {\n        let res;\n\n        if (reqURL == '/login') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n              redirect: 'manual',\n            };\n            res = await safeRequest(reqURL, req, fetchOptions);\n            if (res) {\n              if (res.type == 'opaqueredirect') {\n                return Response.redirect('/add-post', 307);\n              }\n              return res;\n            }\n            if (isLoggedIn) {\n              return Response.redirect('/add-post', 307);\n            }\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            return Response.redirect('/add-post', 307);\n          } else {\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          }\n        } else if (reqURL == '/logout') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n              redirect: 'manual',\n            };\n            res = await safeRequest(reqURL, req, fetchOptions);\n            if (res) {\n              if (res.type == 'opaqueredirect') {\n                return Response.redirect('/', 307);\n              }\n              return res;\n            }\n            if (isLoggedIn) {\n              isLoggedIn = false;\n              await sendMessage('force-logout');\n              await delay(100);\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            isLoggedIn = false;\n            await sendMessage('force-logout');\n            await delay(100);\n            return Response.redirect('/', 307);\n          } else {\n            return Response.redirect('/', 307);\n          }\n        } else if (reqURL == '/add-post') {\n          if (isOnline) {\n            let fetchOptions = {\n              method: req.method,\n              headers: req.headers,\n              credentials: 'same-origin',\n              cache: 'no-store',\n            };\n            res = await safeRequest(\n              reqURL,\n              req,\n              fetchOptions,\n              /*cacheResponse=*/ true,\n            );\n            if (res) {\n              return res;\n            }\n            res = await cache.match(isLoggedIn ? '/add-post' : '/login');\n            if (res) {\n              return res;\n            }\n            return Response.redirect('/', 307);\n          } else if (isLoggedIn) {\n            res = await cache.match('/add-post');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          } else {\n            res = await cache.match('/login');\n            if (res) {\n              return res;\n            }\n            return cache.match('/offline');\n          }\n        }\n      }\n      // otherwise, just use \"network-and-cache\"\n      else {\n        let fetchOptions = {\n          method: req.method,\n          headers: req.headers,\n          cache: 'no-store',\n        };\n        let res = await safeRequest(\n          reqURL,\n          req,\n          fetchOptions,\n          /*cacheResponse=*/ false,\n          /*checkCacheFirst=*/ false,\n          /*checkCacheLast=*/ true,\n        );\n        if (res) {\n          if (!res.headers.get('X-Not-Found')) {\n            await cache.put(reqURL, res.clone());\n          } else {\n            await cache.delete(reqURL);\n          }\n          return res;\n        }\n\n        // otherwise, return an offline-friendly page\n        return cache.match('/offline');\n      }\n    }\n    // all other files use \"cache-first\"\n    else {\n      let fetchOptions = {\n        method: req.method,\n        headers: req.headers,\n        cache: 'no-store',\n      };\n      let res = await safeRequest(\n        reqURL,\n        req,\n        fetchOptions,\n        /*cacheResponse=*/ true,\n        /*checkCacheFirst=*/ true,\n      );\n      if (res) {\n        return res;\n      }\n\n      // otherwise, force a network-level 404 response\n      return notFoundResponse();\n    }\n  }\n}\n\nasync function safeRequest(\n  reqURL,\n  req,\n  options,\n  cacheResponse = false,\n  checkCacheFirst = false,\n  checkCacheLast = false,\n  useRequestDirectly = false,\n) {\n  var cache = await caches.open(cacheName);\n  var res;\n\n  if (checkCacheFirst) {\n    res = await cache.match(reqURL);\n    if (res) {\n      return res;\n    }\n  }\n\n  if (isOnline) {\n    try {\n      if (useRequestDirectly) {\n        res = await fetch(req, options);\n      } else {\n        res = await fetch(req.url, options);\n      }\n\n      if (res && (res.ok || res.type == 'opaqueredirect')) {\n        if (cacheResponse) {\n          await cache.put(reqURL, res.clone());\n        }\n        return res;\n      }\n    } catch (err) {}\n  }\n\n  if (checkCacheLast) {\n    res = await cache.match(reqURL);\n    if (res) {\n      return res;\n    }\n  }\n}\n\nfunction notFoundResponse() {\n  return new Response('', {\n    status: 404,\n    statusText: 'Not Found',\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(function c(res) {\n    setTimeout(res, ms);\n  });\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}