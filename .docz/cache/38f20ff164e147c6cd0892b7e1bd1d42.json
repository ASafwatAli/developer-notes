{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Interfaces.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Interfaces.md","mtime":1569583707366},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Interfaces.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"go-tour-interfaces\"\n    }}>{`Go Tour Interfaces`}</h1>\n    <p>{`A type implements an interface by implementing its methods. There is no explicit declaration of intent, no \"implements\" keyword.`}</p>\n    <p>{`Implicit interfaces decouple the definition of an interface from its implementation, which could then appear in any package without prearrangement`}</p>\n    <p>{`Under the hood, interface values can be thought of as a tuple of a value and a concrete type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`(value, type)\n`}</code></pre>\n    <p>{`An interface value holds a value of a specific underlying concrete type.`}</p>\n    <p>{`Calling a method on an interface value executes the method of the same name on its underlying type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype I interface {\n    M()\n}\n\ntype T struct {\n    S string\n}\n\nfunc (t *T) M() {\n    fmt.Println(t.S)\n}\n\ntype F float64\n\nfunc (f F) M() {\n    fmt.Println(f)\n}\n\nfunc main() {\n    var i I\n\n    i = &T{\"Hello\"}\n    describe(i)\n    i.M()\n\n    i = F(math.Pi)\n    describe(i)\n    i.M()\n}\n\nfunc describe(i I) {\n    fmt.Printf(\"(%v, %T)\\\\n\", i, i)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nil-interface-values\"\n    }}>{`Nil interface values`}</h2>\n    <p>{`A nil interface value holds neither value nor concrete type.`}</p>\n    <p>{`Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which concrete method to call.`}</p>\n    <h2 {...{\n      \"id\": \"the-empty-interface\"\n    }}>{`The empty interface`}</h2>\n    <p>{`The interface type that specifies zero methods is known as the empty interface:`}</p>\n    <p>{`interface{}\nAn empty interface may hold values of any type. (Every type implements at least zero methods.)`}</p>\n    <p>{`Empty interfaces are used by code that handles values of unknown type. For example, fmt.Print takes any number of arguments of type interface{}.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    var i interface{}\n    describe(i)\n\n    i = 42\n    describe(i)\n\n    i = \"hello\"\n    describe(i)\n}\n\nfunc describe(i interface{}) {\n    fmt.Printf(\"(%v, %T)\\\\n\", i, i)\n}\n`}</code></pre>\n    <p>{`Prints:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`(<nil>, <nil>)\n(42, int)\n(hello, string)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-assertions\"\n    }}>{`Type assertions`}</h2>\n    <p>{`A type assertion provides access to an interface value's underlying concrete value.`}</p>\n    <p><inlineCode parentName=\"p\">{`t := i.(T)`}</inlineCode></p>\n    <p>{`This statement asserts that the interface value `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` holds the concrete type `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` and assigns the underlying `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` value to the variable `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{`.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` does not hold a `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{`, the statement will trigger a panic.`}</p>\n    <p>{`To test whether an interface value holds a specific type, a type assertion can return two values: the underlying value and a boolean value that reports whether the assertion succeeded.`}</p>\n    <p><inlineCode parentName=\"p\">{`t, ok := i.(T)`}</inlineCode></p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` holds a `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` will be the underlying value and ok will be true.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`not, ok`}</inlineCode>{` will be false and `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` will be the zero value of type `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{`, and no panic occurs.`}</p>\n    <p>{`Note the similarity between this syntax and that of reading from a map.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    var i interface{} = \"hello\"\n\n    s := i.(string)\n    fmt.Println(s)\n\n    s, ok := i.(string)\n    fmt.Println(s, ok)\n\n    f, ok := i.(float64)\n    fmt.Println(f, ok)\n\n    f = i.(float64) // panic\n    fmt.Println(f)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-switches\"\n    }}>{`Type switches`}</h2>\n    <p>{`A type switch is a construct that permits several type assertions in series.`}</p>\n    <p>{`A type switch is like a regular switch statement, but the cases in a type switch specify types (not values), and those values are compared against the type of the value held by the given interface value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`switch v := i.(type) {\ncase T:\n    // here v has type T\ncase S:\n    // here v has type S\ndefault:\n    // no match; here v has the same type as i\n}\n`}</code></pre>\n    <p>{`The declaration in a type switch has the same syntax as a type assertion i.(T), but the specific type T is replaced with the keyword type.`}</p>\n    <p>{`This switch statement tests whether the interface value i holds a value of type T or S. In each of the T and S cases, the variable v will be of type T or S respectively and hold the value held by i. In the default case (where there is no match), the variable v is of the same interface type and value as i.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc do(i interface{}) {\n    switch v := i.(type) {\n    case int:\n        fmt.Printf(\"Twice %v is %v\\\\n\", v, v*2)\n    case string:\n        fmt.Printf(\"%q is %v bytes long\\\\n\", v, len(v))\n    default:\n        fmt.Printf(\"I don't know about type %T!\\\\n\", v)\n    }\n}\n\nfunc main() {\n    do(21)\n    do(\"hello\")\n    do(true)\n}\n`}</code></pre>\n    <p>{`Prints:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Twice 21 is 42\n\"hello\" is 5 bytes long\nI don't know about type bool!\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}