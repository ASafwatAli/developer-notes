{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","mtime":1551690430417},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiamF2YS0tLWJhc2ljLXRyZWUtZGF0YS1zdHJ1Y3R1cmUifSwiSmF2YSAtIEJhc2ljIFRyZWUgRGF0YSBTdHJ1Y3R1cmUiKSxtZHgoInAiLG51bGwsIlRoaXMgaXMgYSBiYXNpYyBpbXBsZW1lbnRhdGlvbi4gVGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJiZnMiKSwiIGFuZCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZGZzIiksIiBtZXRob2RzIGVhY2ggcmV0dXJuIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkxpc3Q8SW50ZWdlcj4iKSwiIG9mIHRoZSBkYXRhIHN0b3JlZCBpbiBlYWNoICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJOb2RlIiksIiB0byBtYWtlIGEgY29tcGFyaXNvbiBpbiB0aGUgdGVzdC4iKSxtZHgoImgyIix7ImlkIjoiYW5zd2VyIn0sIkFuc3dlciIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCIvLyBzcmMvbWFpbi9qYXZhL1RyZWUuamF2YVxuaW1wb3J0IG1haW4uamF2YS5Ob2RlO1xuaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbmNsYXNzIFRyZWUge1xuICAgIHB1YmxpYyBOb2RlIHJvb3Q7XG5cbiAgICBwdWJsaWMgVHJlZSgpIHtcbiAgICAgICAgdGhpcy5yb290ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgVHJlZShOb2RlIHJvb3QpIHtcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgTGlzdDxJbnRlZ2VyPiBiZnMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvb3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE51bGxQb2ludGVyRXhjZXB0aW9uKFwidGhpcy5yb290IGlzIG51bGxcIik7XG4gICAgICAgIH1cblxuICAgICAgICBMaXN0PE5vZGU+IG4gPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiAgICAgICAgbi5hZGQodGhpcy5yb290KTtcblxuICAgICAgICBMaXN0PEludGVnZXI+IHJlcyA9IG5ldyBBcnJheUxpc3Q8PigpO1xuXG4gICAgICAgIHdoaWxlIChuLnNpemUoKSA+IDApIHtcbiAgICAgICAgICAgIE5vZGUgY2hpbGQgPSBuLnJlbW92ZSgwKTtcbiAgICAgICAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbi5hZGRBbGwoY2hpbGQuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmFkZChjaGlsZC5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcHVibGljIExpc3Q8SW50ZWdlcj4gZGZzKCkge1xuICAgICAgICBpZiAodGhpcy5yb290ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOdWxsUG9pbnRlckV4Y2VwdGlvbihcIk5vIHJvb3RcIik7XG4gICAgICAgIH1cblxuICAgICAgICBMaXN0PE5vZGU+IG4gPSBuZXcgQXJyYXlMaXN0PE5vZGU+KCk7XG4gICAgICAgIG4uYWRkKHRoaXMucm9vdCk7XG5cbiAgICAgICAgTGlzdDxJbnRlZ2VyPiByZXMgPSBuZXcgQXJyYXlMaXN0PEludGVnZXI+KCk7XG5cbiAgICAgICAgd2hpbGUgKG4uc2l6ZSgpID4gMCkge1xuICAgICAgICAgICAgTm9kZSBjaGlsZCA9IG4ucmVtb3ZlKDApO1xuXG4gICAgICAgICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG4uYWRkQWxsKDAsIGNoaWxkLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5hZGQoY2hpbGQuZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9KSwiLy8gc3JjL21haW4vamF2YS9Ob2RlLmphdmFcbnBhY2thZ2UgbWFpbi5qYXZhO1xuXG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGNsYXNzIE5vZGUge1xuICAgIHB1YmxpYyBJbnRlZ2VyIGRhdGE7XG4gICAgcHVibGljIExpc3Q8Tm9kZT4gY2hpbGRyZW47XG5cbiAgICBwdWJsaWMgTm9kZSgpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBBcnJheUxpc3Q8PigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBOb2RlKEludGVnZXIgZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEFycmF5TGlzdDw+KCk7XG4gICAgfVxuXG4gICAgcHVibGljIE5vZGUoSW50ZWdlciBkYXRhLCBMaXN0PE5vZGU+IGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGRBbGwoY2hpbGRyZW4pO1xuICAgIH1cbn1cbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9KSwiLy8gdGVzdC9qYXZhL1RyZWVUZXN0LmphdmFcbmltcG9ydCBvcmcuanVuaXQuSWdub3JlO1xuaW1wb3J0IG9yZy5qdW5pdC5UZXN0O1xuaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbmltcG9ydCBzdGF0aWMgb3JnLmp1bml0LkFzc2VydC5hc3NlcnRFcXVhbHM7XG5pbXBvcnQgbWFpbi5qYXZhLk5vZGU7XG5cbnB1YmxpYyBjbGFzcyBUcmVlVGVzdCB7XG4gICAgQFRlc3RcbiAgICBwdWJsaWMgdm9pZCB0ZXN0QkZTKCkge1xuICAgICAgICBOb2RlIG4xID0gbmV3IE5vZGUoMSk7XG4gICAgICAgIE5vZGUgbjIgPSBuZXcgTm9kZSgyKTtcbiAgICAgICAgTm9kZSBuMyA9IG5ldyBOb2RlKDMpO1xuICAgICAgICBOb2RlIG40ID0gbmV3IE5vZGUoNCk7XG4gICAgICAgIE5vZGUgbjUgPSBuZXcgTm9kZSg1KTtcblxuICAgICAgICBMaXN0PEludGVnZXI+IGV4cGVjdGVkID0gbmV3IEFycmF5TGlzdDw+KCk7XG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICBleHBlY3RlZC5hZGQoaSArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgVHJlZSB0ID0gbmV3IFRyZWUobjEpO1xuICAgICAgICBuMS5jaGlsZHJlbi5hZGQobjIpO1xuICAgICAgICBuMS5jaGlsZHJlbi5hZGQobjMpO1xuICAgICAgICBuMi5jaGlsZHJlbi5hZGQobjQpO1xuICAgICAgICBuMy5jaGlsZHJlbi5hZGQobjUpO1xuXG4gICAgICAgIExpc3Q8SW50ZWdlcj4gcmVzID0gdC5iZnMoKTtcblxuICAgICAgICBhc3NlcnRFcXVhbHMoZXhwZWN0ZWQsIHJlcyk7XG4gICAgfVxuXG4gICAgQFRlc3RcbiAgICBwdWJsaWMgdm9pZCB0ZXN0REZTKCkge1xuICAgICAgICBOb2RlIG4xID0gbmV3IE5vZGUoMSk7XG4gICAgICAgIE5vZGUgbjIgPSBuZXcgTm9kZSgyKTtcbiAgICAgICAgTm9kZSBuMyA9IG5ldyBOb2RlKDMpO1xuICAgICAgICBOb2RlIG40ID0gbmV3IE5vZGUoNCk7XG4gICAgICAgIE5vZGUgbjUgPSBuZXcgTm9kZSg1KTtcblxuICAgICAgICBMaXN0PEludGVnZXI+IGV4cGVjdGVkID0gbmV3IEFycmF5TGlzdDw+KCk7XG4gICAgICAgIGV4cGVjdGVkLmFkZCgxKTtcbiAgICAgICAgZXhwZWN0ZWQuYWRkKDIpO1xuICAgICAgICBleHBlY3RlZC5hZGQoNCk7XG4gICAgICAgIGV4cGVjdGVkLmFkZCgzKTtcbiAgICAgICAgZXhwZWN0ZWQuYWRkKDUpO1xuXG4gICAgICAgIFRyZWUgdCA9IG5ldyBUcmVlKG4xKTtcbiAgICAgICAgbjEuY2hpbGRyZW4uYWRkKG4yKTtcbiAgICAgICAgbjEuY2hpbGRyZW4uYWRkKG4zKTtcbiAgICAgICAgbjIuY2hpbGRyZW4uYWRkKG40KTtcbiAgICAgICAgbjMuY2hpbGRyZW4uYWRkKG41KTtcblxuICAgICAgICBMaXN0PEludGVnZXI+IHJlcyA9IHQuZGZzKCk7XG5cbiAgICAgICAgYXNzZXJ0RXF1YWxzKGV4cGVjdGVkLCByZXMpO1xuICAgIH1cbn1cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0phdmEvSmF2YS1CYXNpYy1UcmVlLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kCADA,CAAR,oCADK,CAIL,oDAA2C,kBAAY,UAAU,CAAC,GAAvB,QAA3C,SAAmG,kBAAY,UAAU,CAAC,GAAvB,QAAnG,2BAA6K,kBAAY,UAAU,CAAC,GAAvB,kBAA7K,gCAAsQ,kBAAY,UAAU,CAAC,GAAvB,SAAtQ,sCAJK,CAKL,SAAQ,CACN,KAAM,QADA,CAAR,UALK,CAQL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,yyCAAL,CARK,CAsEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,skBAAL,CAtEK,CAmGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,s6CAAL,CAnGK,CAAP,CAmKD,C,0QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java---basic-tree-data-structure\"\n    }}>{`Java - Basic Tree Data Structure`}</h1>\n    <p>{`This is a basic implementation. The `}<inlineCode parentName=\"p\">{`bfs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dfs`}</inlineCode>{` methods each return a `}<inlineCode parentName=\"p\">{`List<Integer>`}</inlineCode>{` of the data stored in each `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` to make a comparison in the test.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Tree.java\nimport main.java.Node;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Tree {\n    public Node root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Tree(Node root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"this.root is null\");\n        }\n\n        List<Node> n = new ArrayList<>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n            if (child.children != null) {\n                n.addAll(child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n\n    public List<Integer> dfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"No root\");\n        }\n\n        List<Node> n = new ArrayList<Node>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<Integer>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n\n            if (child.children != null) {\n                n.addAll(0, child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Node.java\npackage main.java;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Node {\n    public Integer data;\n    public List<Node> children;\n\n    public Node() {\n        this.data = null;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data) {\n        this.data = data;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data, List<Node> children) {\n        this.data = data;\n        this.children = new ArrayList<>();\n        this.children.addAll(children);\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// test/java/TreeTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class TreeTest {\n    @Test\n    public void testBFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            expected.add(i + 1);\n        }\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.bfs();\n\n        assertEquals(expected, res);\n    }\n\n    @Test\n    public void testDFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(4);\n        expected.add(3);\n        expected.add(5);\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.dfs();\n\n        assertEquals(expected, res);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}