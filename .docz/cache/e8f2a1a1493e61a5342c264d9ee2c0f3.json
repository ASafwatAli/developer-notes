{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Linux/SSH-Intro.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Linux/SSH-Intro.md","mtime":1562563032059},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Linux/SSH-Intro.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Now, log into the remote server. We will need to adjust the entry in the authorized_keys file, so open it with root or sudo access:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`sudo nano /root/.ssh/authorized_keys\n`}</code></pre>\n    <p>{`At the beginning of the line with the key you uploaded, add a command= listing that defines the command that this key is valid for. This should include the full path to the executable, plus any arguments:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`command=\"/path/to/command arg1 arg2\" ssh-rsa ...\n`}</code></pre>\n    <p>{`Save and close the file when you are finished.`}</p>\n    <p>{`Now, open the sshd_config file with root or sudo privileges:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`sudo nano /etc/ssh/sshd_config\n`}</code></pre>\n    <p>{`Find the directive PermitRootLogin, and change the value to forced-commands-only. This will only allow SSH key logins to use root when a command has been specified for the key:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PermitRootLogin forced-commands-only\n`}</code></pre>\n    <p>{`Save and close the file. Restart the SSH daemon to implement your changes. `}<inlineCode parentName=\"p\">{`sudo service ssh restart`}</inlineCode></p>\n    <hr></hr>\n    <div id=\"SSH-20\"></div>\n## SSH-20: Forwarding X Application Displays to the Client\n    <p>{`The SSH daemon can be configured to automatically forward the display of X applications on the server to the client machine. For this to function correctly, the client must have an X windows system configured and enabled.`}</p>\n    <p>{`To enable this functionality, log into your remote server and edit the sshd_config file as root or with sudo privileges:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`sudo nano /etc/ssh/sshd_config\n`}</code></pre>\n    <p>{`Search for the X11Forwarding directive. If it is commented out, uncomment it. Create it if necessary and set the value to \"yes\":`}</p>\n    <p><inlineCode parentName=\"p\">{`X11Forwarding yes`}</inlineCode></p>\n    <p>{`Save and restart `}<inlineCode parentName=\"p\">{`sudo service ssh restart`}</inlineCode></p>\n    <p>{`To connect to the server and forward an application's display, you have to pass the -X option from the client upon connection:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ssh -X username@remote_host\n`}</code></pre>\n    <p>{`Graphical applications started on the server through this session should be displayed on the local computer. The performance might be a bit slow, but it is very helpful in a pinch.`}</p>\n    <hr></hr>\n    <div id=\"SSH-21\"></div>\n## SSH-21: Client Side Configuration Options\n    <p><strong parentName=\"p\">{`Defining Server-Specific Connection Info`}</strong></p>\n    <p>{`On your local computer, you can define individual configurations for some or all of the servers you connect to. These can be stored in the ~/.ssh/config file, which is read by your SSH client each time it is called.`}</p>\n    <p>{`Create or open this file in your text editor on your local computer:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`nano ~/.ssh/config\n`}</code></pre>\n    <p>{`Inside, you can define individual configuration options by introducing each with a Host keyword, followed by an alias. Beneath this and indented, you can define any of the directives found in the ssh_config man page:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`man ssh_config\n`}</code></pre>\n    <p>{`An example configuration would be:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host testhost\n    HostName example.com\n    Port 4444\n    User demo\n`}</code></pre>\n    <p>{`You could then connect to example.com on port 4444 using the username \"demo\" by simply typing:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ssh testhost\n`}</code></pre>\n    <p>{`You can also use wildcards to match more than one host. Keep in mind that later matches can override earlier ones. Because of this, you should put your most general matches at the top. For instance, you could default all connections to not allow X forwarding, with an override for example.com by having this in your file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host *\n    ForwardX11 no\n\nHost testhost\n    HostName example.com\n    ForwardX11 yes\n    Port 4444\n    User demo\n`}</code></pre>\n    <p>{`Save and close the file when you are done.`}</p>\n    <hr></hr>\n    <div id=\"SSH-22\"></div>\n### SSH-22: Keep Connections Alive to Avoid Timeout\n    <p>{`If you find yourself being disconnected from SSH sessions before you are ready, it is possible that your connection is timing out.`}</p>\n    <p>{`You can configure your client to send a packet to the server every so often in order to avoid this situation:`}</p>\n    <p>{`On your local computer, you can configure this for every connection by editing your ~/.ssh/config file.`}</p>\n    <p>{`If one does not already exist, at the top of the file, define a section that will match all hosts. Set the ServerAliveInterval to \"120\" to send a packet to the server every two minutes. This should be enough to notify the server not to close the connection:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host *\n    ServerAliveInterval 120\n`}</code></pre>\n    <p>{`Save and close.`}</p>\n    <hr></hr>\n    <div id=\"SSH-23\"></div>\n## SSH-23: Disabling Host Checking\n    <p>{`By default, whenever you connect to a new server, you will be shown the remote SSH daemon's host key fingerprint.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n`}</code></pre>\n    <p>{`This is configured so that you can verify the authenticity of the host you are attempting to connect to and spot instances where a malicious user may be trying to masquerade as the remote host.`}</p>\n    <p>{`In certain circumstances, you may wish to disable this feature. Note: This can be a big security risk, so make sure you know what you are doing if you set your system up like this.`}</p>\n    <p>{`To make the change, the open the ~/.ssh/config file on your local computer.`}</p>\n    <p>{`If one does not already exist, at the top of the file, define a section that will match all hosts. Set the StrictHostKeyChecking directive to \"no\" to add new hosts automatically to the known_hosts file. Set the UserKnownHostsFile to /dev/null to not warn on new or changed hosts:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host *\n    StrictHostKeyChecking no\n    UserKnownHostsFile /dev/null\n`}</code></pre>\n    <p>{`You can enable the checking on a case-by-case basis by reversing those options for other hosts. The default for StrictHostKeyChecking is \"ask\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host *\n    StrictHostKeyChecking no\n    UserKnownHostsFile /dev/null\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Host testhost\n    HostName example.com\n    StrictHostKeyChecking ask\n    UserKnownHostsFile /home/demo/.ssh/known_hosts\n`}</code></pre>\n    <hr></hr>\n    <div id=\"SSH-24\"></div>\n### SSH-24: Multiplexing SSH Over a Single TCP Connection\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Definition: Multiplexing`}</strong></p>\n    <p>{`Generally speaking, multiplexing is the ability to carry multiple signals over a single connection. Similarly, SSH multiplexing is the ability to carry multiple SSH sessions over a single TCP connection. `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing\"\n      }}>{`This Wikibook article`}</a>{` goes into more detail on SSH multiplexing; in particular, I would call your attention to the table under the “Advantages of Multiplexing” to better understand the idea of multiple SSH sessions with a single TCP connection.`}</p>\n    <hr></hr>\n    <p>{`There are situations where establishing a new TCP connection can take longer than you would like. If you are making multiple connections to the same machine, you can take advantage of multiplexing.`}</p>\n    <p>{`SSH multiplexing re-uses the same TCP connection for multiple SSH sessions. This removes some of the work necessary to establish a new session, possibly speeding things up. Limiting the number of connections may also be helpful for other reasons.`}</p>\n    <p>{`To set up multiplexing, you can manually set up the connections, or you can configure your client to automatically use multiplexing when available. We will demonstrate the second option here.`}</p>\n    <p>{`To configure multiplexing, edit your SSH client's configuration file on your local machine:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`nano ~/.ssh/config\n`}</code></pre>\n    <p>{`If you do not already have a wildcard host definition at the top of the file, add one now (as Host `}{`*`}{`). We will be setting the `}<inlineCode parentName=\"p\">{`ControlMaster, ControlPath, and ControlPersist`}</inlineCode>{` values to establish our multiplexing configuration.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ControlMaster`}</inlineCode>{` should be set to \"auto\" in able to automatically allow multiplexing if possible. The `}<inlineCode parentName=\"p\">{`ControlPath`}</inlineCode>{` will establish the path to control socket. The first session will create this socket and subsequent sessions will be able to find it because it is labeled by username, host, and port.`}</p>\n    <p>{`Setting the `}<inlineCode parentName=\"p\">{`ControlPersist`}</inlineCode>{` option to \"1\" will allow the initial master connection to be backgrounded. The \"1\" specifies that the TCP connection should automatically terminate one second after the last SSH session is closed:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Host *\n    ControlMaster auto\n    ControlPath ~/.ssh/multiplex/%r@%h:%p\n    ControlPersist 1\n`}</code></pre>\n    <p>{`Save and close the file when you are finished. Now, we need to actually create the directory we specified in the control path:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mkdir ~/.ssh/multiplex\n`}</code></pre>\n    <p>{`Now, any sessions that are established with the same machine will attempt to use the existing socket and TCP connection. When the last session exists, the connection will be torn down after one second.`}</p>\n    <p>{`If for some reason you need to bypass the multiplexing configuration temporarily, you can do so by passing the -S flag with \"none\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ssh -S none username@remote_host\n`}</code></pre>\n    <hr></hr>\n    <div id=\"SSH-25\"></div>\n## SSH-25: Setting Up SSH Tunnels\n    <p>{`// todo`}</p>\n    <hr></hr>\n    <div id=\"UBU-1\"></div>\n## UBU-1: Installing Ubuntu onto VirtualBox\n    <p>{`// todo`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}