{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-RxJS.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-RxJS.md","mtime":1548209344334},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"rxjs\"}},\"RxJS\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#rxjs\"}},\"RxJS\"),React.createElement(MDXTag,{name:\"ul\",components:components,parentName:\"li\"},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#10-a-brief-recap-of-programming-paradigms\"}},\"1.0 A Brief Recap of Programming Paradigms\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#11-core-reactive-concepts\"}},\"1.1: Core Reactive Concepts\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#12-comparing-the-autocomplete-function-using-js-vs-rxjs\"}},\"1.2: Comparing the Autocomplete function using JS vs RxJS\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#3-the-core-of-reactive-extensions\"}},\"3: The Core of Reactive Extensions\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#31-obervables-operators-and-subscriptions\"}},\"3.1: Obervables, Operators and Subscriptions\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#32-creating-observables\"}},\"3.2 Creating Observables\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#33-built-in-observables\"}},\"3.3: Built in Observables\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#34-using-rxjs-with-node-jquery-and-promises\"}},\"3.4: Using RxJS with Node, jQuery and Promises\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#35-subjects\"}},\"3.5: Subjects\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#36-rxjs-resources-and-documentation\"}},\"3.6: RxJS Resources and Documentation\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#37-sharing-observable-sequences\"}},\"3.7: Sharing Observable Sequences\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#40-operators-that-everyone-should-know\"}},\"4.0: Operators that everyone should know\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#41-do--finally--startwith--filter\"}},\"4.1: Do / Finally / StartWith / Filter\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#42-merge--concat\"}},\"4.2: Merge / Concat\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#43-map--mergemap--switchmap\"}},\"4.3: Map / MergeMap / SwitchMap\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#44-reduce--scan\"}},\"4.4: Reduce / Scan\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#45-buffer--toarray\"}},\"4.5: Buffer / ToArray\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#46-first--last--single--skip--take\"}},\"4.6: First / Last / Single / Skip / Take\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#47-zip--withlatestfrom--combinelatest\"}},\"4.7: Zip / WithLatestFrom / CombineLatest\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#48-error-handling-catch-and-retry\"}},\"4.8: Error Handling Catch and Retry\"))))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"10-a-brief-recap-of-programming-paradigms\"}},\"1.0 A Brief Recap of Programming Paradigms\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Procedural Program\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The ideas that programs are a sense of functions\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Goes from top to bottom\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Relies heavily on global state, but any line can change the global state\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"C being a procedural language\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"\\\"Imperative\\\" execution\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Easy to write, difficult to maintain\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Prone to difficult bugs\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Object Oriented\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Based around a Primitive: object\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Objects have well defined interfaces\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Localised behaviour\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Objects control state\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Composition\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Code is still imperative - pro AND con! - Still telling the computer EXACTLY what to do.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Can be more verbose\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Declarative\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Describing what you want to happen, but not telling the computer how to do it\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Eg. SQL, Regex, HTML\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Data is self-describing\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"As powerful as the interpreter allows\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"As limiting as the interpreter allows - You want build a game in SQL etc.\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Functional\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"What we want to happen but not how\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Little state\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Few side effects\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Easy to reason about\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Composition\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Expressive\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Works great with OO\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Basis in higher math\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Cons to think differently\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Not always the best choice\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"No loops, no control logic - Just telling it what we want to happen\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Reactive\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Primitive: Observable\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Instead of describing data in terms of other data, we describe it in terms of streams of events - From this, we create a pipeline such that we certain data changes, a lot is processed and changed - Example: spreadsheets!\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Composition\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Expressive\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Data flows unidirectionally\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Tough to think differently\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Subscriptions help change the data\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const cellC2$ = cellA2$\\n    .combineLatest(cellB2$)\\n    .map((cells) => cells[0] + cells[1]);\\n\\ncellC2$.subscribe((value) => {\\n    console.log(value);\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"11-core-reactive-concepts\"}},\"1.1: Core Reactive Concepts\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Core Concept 1: Pull model vs Push model\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"any data sitting there that you \\\"ask\\\" for at some point - example refresh button - manual button trigger - time interval\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"observable (stream) which is a reactive data source - produces items over a period of time that will either error, complete, or never complete until a page closes - not telling the stream when to get data, it has inbuilt logic on how to get data - we may transform this data - the display of the data is actually part of the description\")),React.createElement(MDXTag,{name:\"p\",components:components},\"An an example for a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pull\"),\" based code, we can think of a window.setInterval() that fires every 5000 seconds.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"An example of a push would be to have a function fire and then the return continutes to filter, flatMap, map and subscribe.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Core Concept 2: Everything is a database\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"mouse movements\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"current user\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"web requests\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"input boxes\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"12-comparing-the-autocomplete-function-using-js-vs-rxjs\"}},\"1.2: Comparing the Autocomplete function using JS vs RxJS\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In the comparison where the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"$title.on('keyup', () => {})\"),\" runs with a promise returned. The query can run into race conditions.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Also note that every single result also fires.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The issues:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// Fix up and down arrow\\n// Stop always querying\\n// Getting race condition\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Bad ways\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"generally \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"if last query == currentTitle return\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"using setTimeout to reduce number of queries\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Race condition still happening, but bad attempts may be increasing the timeout - Could also use a current id compared to next query id and then returning before the callback occurs\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"A lot of state across the module being changed\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"The Rx way\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// npm install rxjs-es for es6\\nimport $ from 'jquery';\\nimport Rx from 'rxjs/Rx';\\n\\nconst $title = $('#title');\\nconst $results = $('#results');\\n\\nconst keyUps$ = Rx.Observable.fromEvent($title, \\\"keyup\\\");\\nconst queries$ = keyUps$\\n    .map(e => e.target.value)\\n    .distinctUntilChanged()\\n    .debounceTime(250)\\n    .switchMap(getItems);   // similar to merge, but if new query comes in, discard the old data\\n    //.mergeMap(getItems);  // alias for flatMap\\n\\nqueries$.subscribe(query => {\\n    // get rid of the promise will stop race condition\\n    $results.empty();\\n    $results.append(items.map( r => $(`<li />`).text(r)));\\n})\\n\\n<!-- queries$.subscribe(query => {\\n    console.log(e); // prints out event\\n    getItems(query)\\n        .then(items => {\\n            $results.empty();\\n            $results.append(items.map( r => $(`<li />`).text(r)));\\n        });\\n}) -->\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"An even better way.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import $ from 'jquery';\\nimport Rx from 'rxjs/Rx';\\n\\nconst $title = $('#title');\\nconst $results = $('#results');\\n\\nRx.Observable.fromEvent($title, 'keyup')\\n    .map((e) => e.target.value)\\n    .distinctUntilChanged()\\n    .debounceTime(500)\\n    .switchMap(getItems)\\n    .subscribe((items) => {\\n        $results.empty();\\n        $results.append(items.map((r) => $(`<li />`).text(r)));\\n    });\\n\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"All the Rx has no external state, whereas the other code does.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Rx doesn't have to wait for us to tell it when to do it.\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"3-the-core-of-reactive-extensions\"}},\"3: The Core of Reactive Extensions\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"31-obervables-operators-and-subscriptions\"}},\"3.1: Obervables, Operators and Subscriptions\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Observable: Something that can be observed which produces values\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Operator: It's an operation that modifies the data being pushed in from the observable - They don't produce values in and of themselves, but move them through the pipeline.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Subscriptions: Piece of code that will do something with the values returned by the operators\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Note, you can model anything in a reactive context by thinking a little bit differently.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Web API Request Example\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Reactive can still complete, or it can error out and retry.\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"32-creating-observables\"}},\"3.2 Creating Observables\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import Rx from 'rxjs/Rx';\\n\\n# promise will always execute - not lazy\\nconst promise = new Promise((resolve, reject) => {\\n    console.log(\\\"In promise\\\");\\n    resolve(\\\"hey\\\");\\n});\\n\\npromise.then(item => console.log(item));\\n\\n# this doesn't give any output!\\n# observables are lazy!\\n# won't run without a subscription\\nconst simple$ = new Rx.Observable(observer => {\\n    console.log(\\\"Generating observable\\\");\\n    setTimeout(() => {\\n        observer.next(\\\"An items!\\\");\\n        setTimeout(() => {\\n            observer.next(\\\"Another item!\\\");\\n            observer.complete();\\n        }, 1000);\\n    }, 1000);\\n});\\n\\n# creating a subscription\\n# first arg is the next function\\n# second arg is error\\n# third arg is complete\\nsimple$.subscribe(\\n    item => console.log(`one.next ${item}`),\\n    error => console.log(`one.error ${item}`),\\n    () => console.log(\\\"one.complete\\\")\\n);\\n\\n# Generating observable\\n# one.next An item!\\n# one.next Another item!\\n# one.complete\\n\\nsetTimeout(() => {\\n    simple$.subscribe({\\n        next: item => console.log(`two.next ${item}`),\\n        error: error => console.log(`two.error ${item}`),\\n        complete: () => console.log(\\\"two.complete\\\")\\n    });\\n}, 3000)\\n\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Re-subscribing to an observable allows you to run that generator again\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"function createInterval(time) {\\n    return new Rx.Observable(observer => {\\n        let index = 0;\\n        let interval = setInterval(() => {\\n            observer.next(index++);\\n        }, time);\\n\\n        return () => {\\n            // will run when we unsubscribe\\n            clearnInterval(interval);\\n        };\\n    });\\n}\\n\\nfunction createSubscriber(tag) {\\n    return {\\n        next(item) { console.log(`${tag}.next ${item}`); },\\n        error(error) { console.log(`${tag}.error ${error.stack || error }`); },\\n        complete() { console.log(`${tag}.complete`); }\\n    };\\n}\\n\\nfunction take(observable, amount) {\\n    return new Rx.Observable(observer => {\\n\\n    });\\n}\\n\\n// this is the core of subscriptions\\nfunction take(sourceObservable, amount) {\\n    return new Rx.Observable(observer => {\\n        let count = 0;\\n        const subscription = sourceObservable.subscribe({\\n            next(item) {\\n                observer.next(item);\\n                if (++count >= amount) {\\n                    observer.complete();\\n                }\\n            },\\n            error(error) { observer.error(error); },\\n            complete() { observer.complete(); }\\n        });\\n\\n        return () => subscription.unsubscribe();\\n    });\\n}\\n\\nconst everySecond_ = createInterval(1000);\\nconst firstFiveSeconds = take(everySecond_, 5);\\nconst subscription = everySecond_.subscribe(createSubscriber(\\\"one\\\"));\\nsetTimeout(() => {\\n    subscription.unsubscribe();\\n}, 3500);\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"This subscription will console.log out forever and ever and ever... - unless, we dispose of a description\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How do operators come into play?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We could run something like \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"const subscription = everySecond_.take(3)subscribe(createSubscriber(\\\"one\\\"));\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The steps for it are that it listens for a source and emits a transformation!\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"33-built-in-observables\"}},\"3.3: Built in Observables\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import Rx from 'rxjs/Rx';\\n\\n\\nRx.Observable.interval(500)\\n    .take(5)\\n    .subscribe(createSubscriber(\\\"interval\\\"));\\n\\nRx.Observable.timer(1000, 500)\\n    .take(3)\\n    .subscribe(createSubscriber(\\\"timer\\\");\\n\\n// note, array doesn't work - use from\\nRx.Observable.of(\\\"Hello world!\\\", 42, \\\"whoa\\\")\\n    .subscribe(createSubscriber(\\\"of\\\"));\\n\\nRx.Observable.from([\\\"Hello world!\\\", 42, \\\"whoa\\\"])\\n    .subscribe(createSubscriber(\\\"of\\\"));\\n\\nRx.Observable.from(generate())\\n    .subscribe(createSubscriber(\\\"of\\\"));\\n\\n\\nRx.Observable.from(\\\"hello world!\\\")\\n    .subscribe(createSubscriber(\\\"of\\\"));\\n\\n// it can also take in a generator function!\\n\\nfunction* generate() {\\n    yield 1;\\n    yield 5;\\n    yield \\\"HEY\\\";\\n}\\n\\nRx.Observable.throw(new Error(\\\"Hey\\\"))\\n    .subscribe(createSubscriber(\\\"error\\\"));\\n\\n// empty\\nRx.Observable.empty()\\n    .subscribe(createSubscriber(\\\"empty\\\"));\\n\\n// defer\\nlet sideEffect = 0;\\nconst defer = Rx.Observable.defer(() => {\\n    sideEffect++;\\n    return Rx.Obserable.of(sideEffect);\\n});\\n\\ndefer.subscribe(createSubscriber(\\\"defer.one\\\"));\\ndefer.subscribe(createSubscriber(\\\"defer.two\\\"));\\ndefer.subscribe(createSubscriber(\\\"defer.three\\\"));\\n\\nRx.Observable.never()\\n    .subscribe(createSubscriber(\\\"never\\\"));\\n\\nRx.Observable.range(10, 30)\\n    .subscribe(createSubscriber(\\\"range\\\"));\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Benefits of the iterable \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"from\"),\"?\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"For every iterable, we could map every element.\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"34-using-rxjs-with-node-jquery-and-promises\"}},\"3.4: Using RxJS with Node, jQuery and Promises\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"Rx.Observable.fromEvent($title, 'keyup')\\n    .map((e) => e.target.value)\\n    .distinctUntilChanged()\\n    .debounceTime(500)\\n    .switchMap(getItems)\\n    .subscribe((items) => {\\n        $results.empty();\\n        $results.append(items.map((i) => $('<li />').text(i)));\\n    });\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"NOTE: Without the subscribe, it will never be subscribed to the dom!\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If we have the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\".take(10)\"),\" - it would complete after taking 10 and then furthermore unsubscribe and be great for performance!\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"fromEvent\"),\" calls from \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"addEventListener\"),\", so it can do powerful things like \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"keyup\"),\" for those that don't initially support it.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import fs from 'fs';\\n\\nfs.readdir('./src/server', (err, items) => {\\n    if (err) console.log(err);\\n    else {\\n        console.log(items);\\n    }\\n});\\n\\n// alternative\\nconst readdir = Rx.Observable.bindNodeCallBack(fs.readdir);\\n\\nreaddir('./src/server')\\n    // mergeMap creates iterable converted from array\\n    .mergeMap((files) => Rx.Observable.from(files))\\n    .map((file) => `MANIPULATED ${file}`)\\n    .subscribe(createSubscriber('readdir'));\\n\\n// promises\\n\\nfunction getItem() {\\n    return new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n            resolve('Hello');\\n        }, 1000);\\n    });\\n}\\n\\nRx.Observable.fromPromise(getItem()).subscribe(createSubscriber('promise'));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"35-subjects\"}},\"3.5: Subjects\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Subjects are another Rx primitive. They are both an observable and a observer! Used to bridge non-reactive code with reactive code.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Behaviour, replay subjects etc.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"Warning\"),\": you should only really consider them as a last resort when bridging non-reactive and reactive code.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const simple = new Rx.Subject();\\n\\nsimple.subscribe(createSubscriber('simple'));\\n\\nsimple.next('Hello');\\nsimple.next('World');\\nsimple.complete();\\n\\nconst interval = Rx.Observable.interval(1000).take(5);\\nconst intervalSubject = new Rx.Subject();\\nintervalSubject.subscribe(interval);\\n\\nintervalSubject.subscribe(createSubscriber('sub1'));\\nintervalSubject.subscribe(createSubscriber('sub2'));\\nintervalSubject.subscribe(createSubscriber('sub3'));\\n\\n// subscribes after three seconds\\nsetTimeout(() => {\\n    intervalSubject.subscribe(createSubscriber('LOOK AT ME'));\\n}, 3000);\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Before, we had to invoke a function that call \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"next\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"complete\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In the above example, intervalSubject is acting as a proxy to another observable.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// needs init state parameter\\nconst currentUser = new Rx.BehaviorSubject({ isLoggedIn: false });\\nconst isLoggedIn = currentUser.map((u) => u.isLoggedIn);\\n\\ncurrentUser.next({ isLoggedIn: false });\\nisLoggedIn.subscribe(createSubscriber('isLoggedIn'));\\n\\nsetTimeout(() => {\\n    currentUser.next({ isLoggedIn: true, name: 'nelson' });\\n}, 3000);\\n\\nsetTimeout(() => {\\n    isLogged.subscribe(createSubscription('delayed'));\\n}, 1500);\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"How do you remember multiple states?\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const replay = new Rx.ReplaySubject(3);\\nreplay.next(1);\\nreplay.next(2);\\n\\nreplay.subscribe(createSubscriber(\\\"one\\\"));\\n\\nreplay.next(3);\\nreplay.next(4);\\nreplay.next(5);\\n\\n// this subscription only gets the previous three items\\nreplay.subscribe(createSubscriber(\\\"two\\\"));\\n\\nreplay.next(6);\\n\\n// what you see\\none.next 1\\none.next 2\\none.next 3  \\none.next 4  \\none.next 5  \\ntwo.next 3\\ntwo.next 4\\ntwo.next 5\\none.next 6\\ntwo.next 6\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Async Subjects\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"const apiCall = new Rx.AsyncSubject();\\napiCall.next(1);\\n\\napiCall.subscribe(createSubscriber(\\\"one\\\"));\\napiCall.next(2);\\n\\n// only will emit the final item before it is complete\\napiCall.complete();\\n\\n// if you subscribe to it again, that final value will be emitted\\nsetTimeout(() => {\\n    apiCall.subscribe(createSubscriber(\\\"two\\\"));\\n}, 2000);\\n\\n// output\\none.next 2\\none.complete\\ntwo.next 2\\ntwo.complete\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Subject Summary\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"if you can get around it, don't use subjects unless you have to\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"you should use an observable workflow where possible\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"36-rxjs-resources-and-documentation\"}},\"3.6: RxJS Resources and Documentation\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Sources:\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"https://github.com/ReactiveX/rxjs\"}},\"RxJS Github\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"http://rxmarbles.com/\"}},\"RxMarbles\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"http://jaredforsyth.com/rxvision/examples/playground/\"}},\"RxVision Playground\"))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"37-sharing-observable-sequences\"}},\"3.7: Sharing Observable Sequences\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Hot Observable: It will produce events regardless of if you're listening - eg.\",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"fromEvent($title, 'keyup')\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Cold Obserable: Starts once you subscribe - Interval Observables are actually cold observables\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// this example shows when both start from the beginning eg cold\\nimport Rx from 'rxjs/Rx';\\n\\nconst interval = Rx.Observable.interval(1000).take(10);\\n\\nsetTimeout(() => {\\n    interval.subscribe(createSubscriber('one'));\\n}, 1200);\\n\\nsetTimeout(() => {\\n    interval.subscribe(createSubscriber('two'));\\n}, 3200);\\n\\n// HOT\\n// connectable observable\\nimport Rx from 'rxjs/Rx';\\n\\nconst interval = Rx.Observable.interval(1000)\\n    .take(10)\\n    .publish();\\n\\ninterval.connect();\\n\\nsetTimeout(() => {\\n    interval.subscribe(createSubscriber('one'));\\n}, 1200);\\n\\nsetTimeout(() => {\\n    interval.subscribe(createSubscriber('two'));\\n}, 3200);\\n\\n// if you connect after a set interval, then it begins executing and sharing the underlying observable\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Why would you want a hot variable?\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// here subscribe console.log runs twice\\nconst socket = { on: () => {} };\\nconst chatMessage = new Rx.Observable((observable) => {\\n    console.log('subscribed');\\n    socket.on('chat:message', (message) => observer.next(message));\\n});\\n\\nchatMessage.subscribe(createSubscriber('one'));\\nchatMessage.subscribe(createSubscriber('two'));\\n\\n// without it\\n\\nconst socket = { on: () => {} };\\nconst chatMessage = new Rx.Observable((observable) => {\\n    console.log('subscribed');\\n    socket.on('chat:message', (message) => observer.next(message));\\n}).publish();\\n\\nchatMessage.connect();\\n\\nchatMessage.subscribe(createSubscriber('one'));\\nchatMessage.subscribe(createSubscriber('two'));\\n\\n// using publishLast()\\nconst simple = new Rx.Observable((observer) => {\\n    observer.next('one');\\n    observer.next('two');\\n    observer.complete();\\n});\\n\\n// always returns the last value\\nconst published = simple.publishLast();\\n\\n// even if we subscribe before connect, both will get the last value\\npublished.subscribe(createSubscriber('one'));\\npublished.connect();\\npublished.subscribe(creaSubscriber('two'));\\n\\n// using publishReplay()\\nconst simple = new Rx.Observable((observer) => {\\n    observer.next('one');\\n    observer.next('two');\\n    observer.next('three');\\n\\n    return () => console.log('Disposed');\\n});\\n\\n// always returns the last value\\nconst published = simple.publishReplay(2);\\n\\n// even if we subscribe before connect, both will get the last value\\n// to dispose without running complete, we need to disconnect by unsubscribing\\nconst sub1 = published.subscribe(createSubscriber('one'));\\nconst connection = published.connect();\\nconst sub2 = published.subscribe(creaSubscriber('two'));\\n\\nsub1.unsubscribe();\\nsub2.unsubscribe();\\n\\nconnection.unsubscribe();\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Refcount is a way to automatically handle the connection and the unsubscription of a connection observable.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"It will connect to the first subscription and then disconnected on the last unsubscribe.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// using refCount()\\nconst simple = new Rx.Observable(observer => {\\n    observer.next(\\\"one\\\");\\n    observer.next(\\\"two\\\");\\n    observer.next(\\\"three\\\");\\n\\n    return () => console.log(\\\"Disposed\\\");\\n});\\n\\n// always returns the last value\\nconst published = simple.publishReplay(2).refCount();\\n\\n// even if we subscribe before connect, both will get the last value\\n// to dispose without running complete, we need to disconnect by unsubscribing\\nconst sub1 = published.subscribe(createSubscriber(\\\"one\\\"));\\nconst sub2 = published.subscribe(creaSubscriber(\\\"two\\\"));\\n\\nsub1.unsubscribe();\\nsub2.unsubscribe();\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"publish().refCount()\"),\" is done so often, that is has been turned in \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"share()\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Taxing processes that you don't want to repeat but you want multiple things to hook into the result, then turn it into a hot subscription.\"),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"40-operators-that-everyone-should-know\"}},\"4.0: Operators that everyone should know\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now we will just talk about the different primary operators that you will work with.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"41-do--finally--startwith--filter\"}},\"4.1: Do / Finally / StartWith / Filter\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// do => get the next value and pass it back unchanged\\n// finally => only completes after the range has completed, runs right at the end of the final value\\n// filter => filters out given statement\\n// interval => call timeout\\n// startWith => set initial value\\n\\nRx.Observable.range(1, 10)\\n    .do((a) => console.log(`From do ${a}`))\\n    .map((a) => a * a)\\n    .subscribe(createSubscriber('simple'));\\n\\nRx.Observable.range(1, 10)\\n    .finally(() => console.log(`From finally`))\\n    .map((a) => a * 2)\\n    .subscribe(createSubscriber('finally'));\\n\\nRx.Observable.range(1, 10)\\n    .filter((a) => a < 5)\\n    .map((a) => a * 2)\\n    .subscribe(createSubscriber('filter'));\\n\\nRx.Observable.interval(1000)\\n    .startWith(-1)\\n    .subscribe(createSubscriber('interval'));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"42-merge--concat\"}},\"4.2: Merge / Concat\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// merge - merge many observables togethers\\n// concat - this concatenates observables to the end of another, can also take a list of Observables\\n\\nRx.Observable.interval(1000)\\n    .merge(Rx.Observable.interval(500))\\n    .take(5)\\n    .subscribe(createSubscriber(\\\"merge1\\\"));\\n\\nRx.Observable.merge(\\n    Rx.Observable.interval(1000).map(i => `${i} seconds),\\n    Rx.Observable.interval(500).map(i => `${i} half seconds))\\n    .take(5)\\n    .subscribe(createSubscriber('merge2'));\\n\\n// different events for merged observables\\nRx.Observable.merge(\\n    socket.on$(\\\"login\\\").map(user => processUser(user),\\n    socket.on$(\\\"logout\\\").map(() => null));\\n\\nRx.Observable.range(1, 5)\\n    .concat(Rx.Observable.range(10,3))\\n    .subscribe(createSubscriber(\\\"concat1\\\"));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"43-map--mergemap--switchmap\"}},\"4.3: Map / MergeMap / SwitchMap\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// map - a projection on every item that comes in\\n// mergeMap - select many, does projection and then has another thing that we will work on\\n// switchMap - similar to mergeMap but replaces with the latest value if another emission comes in\\n\\nfunction arrayMap(arr, proj) {\\n    let returnArray = [];\\n    for (let i of arr) {\\n        returnArray.push(proj(item));\\n    }\\n\\n    return returnArray;\\n}\\n\\narrayMap([1, 2, 3], (a) => a * a);\\n\\n// imagine array of dicts\\nconst albums = [{}, {}];\\n\\nfunction arrayMergeMap(arr, proj) {\\n    let returnArray = [];\\n    for (let i of arr) {\\n        let projArray = proj(item);\\n        for (let j of projArray) {\\n            returnArray.push(proj(item));\\n        }\\n    }\\n\\n    return returnArray;\\n}\\n\\nconst tracks = arrayMergeMap(albums, (album) => album.tracks);\\n\\nRx.Observable.range(1, 3)\\n    .mergeMap((i) =>\\n        Rx.Observable.timer(i * 1000).map(() => `After ${i} seconds`)\\n    )\\n    .subscribe(createSubscriber('mergeMap'));\\n\\nRx.Observable.fromPromise(getTracks())\\n    .mergeMap((tracks) => Rx.Observable.from(tracks))\\n    .subscribe(createSubscriber('tracks'));\\n\\nfunction getTracks() {\\n    return new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n            resolve(['track 1', 'track 2', 'track 3']);\\n        }, 1000);\\n    });\\n}\\n\\n// synchronous example\\nRx.Observable.of('my query')\\n    .do(() => console.log('Querying'))\\n    .mergeMap((a) => query(a))\\n    .do(() => console.log('After querying'))\\n    .subscribe(createSubscriber('query'));\\n\\nfunction query(value) {\\n    return new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n            resolve('This is the resolved value');\\n        }, 1000);\\n    });\\n}\\n\\n// switch map\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"44-reduce--scan\"}},\"4.4: Reduce / Scan\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"// reducer (acc, value) and works on value - doesn't emit until the completion\\n// scan - processes and emits as it comes in\\nRx.Observable.range(1, 10)\\n    .reduce((acc, value) => acc + value)\\n    .subscribe(createSubscriber('reduce'));\\n\\nRx.Observable.range(1, 10)\\n    .scan((acc, value) => acc + value)\\n    .subscribe(createSubscriber('scan'));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"45-buffer--toarray\"}},\"4.5: Buffer / ToArray\"),React.createElement(MDXTag,{name:\"p\",components:components},\"There have been some big changes to how \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"buffer\"),\" has been used.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Buffer takes in an observable.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"toArray will convert results into an array. - still has a clean exit if the never() is implemented!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"Rx.Observable.range(1, 100)\\n    .bufferCount(25)\\n    .subscribe(createSubscriber(\\\"items\\\");\\n\\n// will take 25 items and pushing them into an array\\n\\n\\nRx.Observable.interval(500)\\n    .bufferTime(2000)\\n    .subscribe(createSubscriber(\\\"bufferTime\\\");\\n\\n// same behaviour!\\n// emitting event causes buffer to flush\\nRx.Observable.interval(500)\\n    .buffer(Rx.Observable.interval(2000))\\n    .subscribe(createSubscriber(\\\"buffer\\\");\\n\\n//\\n// toArray\\n//\\n\\nRx.Observable.range(1, 10)\\n    .toArray()\\n    .subscribe(createSubscriber(\\\"range\\\"));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"46-first--last--single--skip--take\"}},\"4.6: First / Last / Single / Skip / Take\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const simple = new Rx.Observable((observer) => {\\n    console.log('Generating sequence');\\n    observer.next(1);\\n    observer.next(2);\\n    observer.next(3);\\n    observer.next(4);\\n    observer.complete();\\n});\\n\\nsimple.first().subscribe(createSubscriber('first'));\\n\\nsimple.last().subscribe(createSubscriber('last'));\\n\\n// displays 1 & 4\\n// if nothing is in there, there are EmptyError(s) thrown\\n\\n// single.error thrown is more than one error thrown\\nsimple.single().subscribe(createSubscriber('single'));\\n\\n// take and skip won't throw errors\\n// take does the first however emissions\\n// skip will take the emissions after a number\\nsimple.take(2).subscribe(createSubscriber('take'));\\n\\nsimple.skip(2).subscribe(createSubscriber('skip'));\\n\\n// 3, 4\\nsimple\\n    .skip(2)\\n    .take(2)\\n    .subscribe(createSubscriber('skip'));\\n\\n// skipWhile / takeWhile\\nRx.Observable.interval(500)\\n    .skipWhile((i) => i < 4)\\n    .takeWhile((i) => i < 10)\\n    .subscribe(createSubscriber('skipWhile/takeWhile'));\\n\\n// what's until and take emissions until\\nRx.Observable.interval(500)\\n    .skipUntil(Rx.Observable.timer(1000))\\n    .takeUntil(Rx.Observable.timer(4000))\\n    .subscribe(createSubscriber('skipUntil'));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"47-zip--withlatestfrom--combinelatest\"}},\"4.7: Zip / WithLatestFrom / CombineLatest\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How can we combine observables in different ways?\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"function arrayZip(arr1, arr2, selectorFunc) {\\n    const count = Math.min(arr1.length, arr2.length);\\n    const results = [];\\n\\n    for (let i = 0; i < count; i++) {\\n        const combined = selector(arr1[i], arr2[i]);\\n        results.push(combined);\\n    }\\n\\n    return results;\\n}\\n\\nconst arr1 = [32, 2, 52, 43, 54];\\nconst arr2 = [1, 0, 10, 4, 1, 4, 6, 2];\\nconst results = arrayZip(arr1, arr2, (left, right) => left * right);\\n\\nconsole.log(results);\\n\\n// in RxJS\\nRx.Observable.range(1.1)\\n    .zip(\\n        Rx.Observable.interval(500),\\n        (left, right) => `item: ${left}, at ${right * 500}`\\n    )\\n    .subscribe(createSubscriber('zip'));\\n\\n// emits value when source emits\\n// can also pass (left, right) function like zip as second parameter\\nRx.Observable.interval(1000)\\n    .withLatestFrom(Rx.Observable.interval(500))\\n    .subscribe(createSubscriber('withLatestFrom'));\\n\\n// emit value if either do\\nRx.Observable.interval(1000)\\n    .combineLatest(Rx.Observable.interval(500))\\n    .subscribe(createSubscriber('withLatestFrom'));\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"48-error-handling-catch-and-retry\"}},\"4.8: Error Handling Catch and Retry\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If an error happens, an observer stops emitting and can prevent values from emitting at all. Error handling is very important!\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\".catch(error => Rx.Observable.of(error))\"),\" can pass this down as an Observable.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\".retry()\"),\" we can pass in with a numeral to ensure that we either keep retrying or retry a certain number of times.\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-RxJS.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"rxjs\"}}>{`RxJS`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#rxjs\"}}>{`RxJS`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#10-a-brief-recap-of-programming-paradigms\"}}>{`1.0 A Brief Recap of Programming Paradigms`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#11-core-reactive-concepts\"}}>{`1.1: Core Reactive Concepts`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#12-comparing-the-autocomplete-function-using-js-vs-rxjs\"}}>{`1.2: Comparing the Autocomplete function using JS vs RxJS`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#3-the-core-of-reactive-extensions\"}}>{`3: The Core of Reactive Extensions`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#31-obervables-operators-and-subscriptions\"}}>{`3.1: Obervables, Operators and Subscriptions`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#32-creating-observables\"}}>{`3.2 Creating Observables`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#33-built-in-observables\"}}>{`3.3: Built in Observables`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#34-using-rxjs-with-node-jquery-and-promises\"}}>{`3.4: Using RxJS with Node, jQuery and Promises`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#35-subjects\"}}>{`3.5: Subjects`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#36-rxjs-resources-and-documentation\"}}>{`3.6: RxJS Resources and Documentation`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#37-sharing-observable-sequences\"}}>{`3.7: Sharing Observable Sequences`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#40-operators-that-everyone-should-know\"}}>{`4.0: Operators that everyone should know`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#41-do--finally--startwith--filter\"}}>{`4.1: Do / Finally / StartWith / Filter`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#42-merge--concat\"}}>{`4.2: Merge / Concat`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#43-map--mergemap--switchmap\"}}>{`4.3: Map / MergeMap / SwitchMap`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#44-reduce--scan\"}}>{`4.4: Reduce / Scan`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#45-buffer--toarray\"}}>{`4.5: Buffer / ToArray`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#46-first--last--single--skip--take\"}}>{`4.6: First / Last / Single / Skip / Take`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#47-zip--withlatestfrom--combinelatest\"}}>{`4.7: Zip / WithLatestFrom / CombineLatest`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#48-error-handling-catch-and-retry\"}}>{`4.8: Error Handling Catch and Retry`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"10-a-brief-recap-of-programming-paradigms\"}}>{`1.0 A Brief Recap of Programming Paradigms`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Procedural Program`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The ideas that programs are a sense of functions`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Goes from top to bottom`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Relies heavily on global state, but any line can change the global state`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`C being a procedural language`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`\"Imperative\" execution`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Easy to write, difficult to maintain`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Prone to difficult bugs`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Object Oriented`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Based around a Primitive: object`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Objects have well defined interfaces`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Localised behaviour`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Objects control state`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Composition`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Code is still imperative - pro AND con! - Still telling the computer EXACTLY what to do.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Can be more verbose`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Declarative`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Describing what you want to happen, but not telling the computer how to do it`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Eg. SQL, Regex, HTML`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Data is self-describing`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`As powerful as the interpreter allows`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`As limiting as the interpreter allows - You want build a game in SQL etc.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Functional`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`What we want to happen but not how`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Little state`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Few side effects`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Easy to reason about`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Composition`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Expressive`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Works great with OO`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Basis in higher math`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Cons to think differently`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Not always the best choice`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`No loops, no control logic - Just telling it what we want to happen`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Reactive`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Primitive: Observable`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Instead of describing data in terms of other data, we describe it in terms of streams of events - From this, we create a pipeline such that we certain data changes, a lot is processed and changed - Example: spreadsheets!`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Composition`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Expressive`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Data flows unidirectionally`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Tough to think differently`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Subscriptions help change the data`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const cellC2\\$ = cellA2\\$\n    .combineLatest(cellB2\\$)\n    .map((cells) => cells[0] + cells[1]);\n\ncellC2\\$.subscribe((value) => {\n    console.log(value);\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"11-core-reactive-concepts\"}}>{`1.1: Core Reactive Concepts`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Core Concept 1: Pull model vs Push model`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`any data sitting there that you \"ask\" for at some point - example refresh button - manual button trigger - time interval`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`observable (stream) which is a reactive data source - produces items over a period of time that will either error, complete, or never complete until a page closes - not telling the stream when to get data, it has inbuilt logic on how to get data - we may transform this data - the display of the data is actually part of the description`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An an example for a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pull`}</MDXTag>{` based code, we can think of a window.setInterval() that fires every 5000 seconds.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An example of a push would be to have a function fire and then the return continutes to filter, flatMap, map and subscribe.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Core Concept 2: Everything is a database`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`mouse movements`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`current user`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`web requests`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`input boxes`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"12-comparing-the-autocomplete-function-using-js-vs-rxjs\"}}>{`1.2: Comparing the Autocomplete function using JS vs RxJS`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the comparison where the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`\\$title.on('keyup', () => {})`}</MDXTag>{` runs with a promise returned. The query can run into race conditions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Also note that every single result also fires.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The issues:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// Fix up and down arrow\n// Stop always querying\n// Getting race condition\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Bad ways`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`generally `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`if last query == currentTitle return`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`using setTimeout to reduce number of queries`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Race condition still happening, but bad attempts may be increasing the timeout - Could also use a current id compared to next query id and then returning before the callback occurs`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A lot of state across the module being changed`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`The Rx way`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// npm install rxjs-es for es6\nimport \\$ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst \\$title = \\$('#title');\nconst \\$results = \\$('#results');\n\nconst keyUps\\$ = Rx.Observable.fromEvent(\\$title, \"keyup\");\nconst queries\\$ = keyUps\\$\n    .map(e => e.target.value)\n    .distinctUntilChanged()\n    .debounceTime(250)\n    .switchMap(getItems);   // similar to merge, but if new query comes in, discard the old data\n    //.mergeMap(getItems);  // alias for flatMap\n\nqueries\\$.subscribe(query => {\n    // get rid of the promise will stop race condition\n    \\$results.empty();\n    \\$results.append(items.map( r => \\$(\\`<li />\\`).text(r)));\n})\n\n<!-- queries\\$.subscribe(query => {\n    console.log(e); // prints out event\n    getItems(query)\n        .then(items => {\n            \\$results.empty();\n            \\$results.append(items.map( r => \\$(\\`<li />\\`).text(r)));\n        });\n}) -->\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`An even better way.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import \\$ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst \\$title = \\$('#title');\nconst \\$results = \\$('#results');\n\nRx.Observable.fromEvent(\\$title, 'keyup')\n    .map((e) => e.target.value)\n    .distinctUntilChanged()\n    .debounceTime(500)\n    .switchMap(getItems)\n    .subscribe((items) => {\n        \\$results.empty();\n        \\$results.append(items.map((r) => \\$(\\`<li />\\`).text(r)));\n    });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`All the Rx has no external state, whereas the other code does.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Rx doesn't have to wait for us to tell it when to do it.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"3-the-core-of-reactive-extensions\"}}>{`3: The Core of Reactive Extensions`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"31-obervables-operators-and-subscriptions\"}}>{`3.1: Obervables, Operators and Subscriptions`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Observable: Something that can be observed which produces values`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Operator: It's an operation that modifies the data being pushed in from the observable - They don't produce values in and of themselves, but move them through the pipeline.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Subscriptions: Piece of code that will do something with the values returned by the operators`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note, you can model anything in a reactive context by thinking a little bit differently.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Web API Request Example`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Reactive can still complete, or it can error out and retry.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"32-creating-observables\"}}>{`3.2 Creating Observables`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import Rx from 'rxjs/Rx';\n\n# promise will always execute - not lazy\nconst promise = new Promise((resolve, reject) => {\n    console.log(\"In promise\");\n    resolve(\"hey\");\n});\n\npromise.then(item => console.log(item));\n\n# this doesn't give any output!\n# observables are lazy!\n# won't run without a subscription\nconst simple\\$ = new Rx.Observable(observer => {\n    console.log(\"Generating observable\");\n    setTimeout(() => {\n        observer.next(\"An items!\");\n        setTimeout(() => {\n            observer.next(\"Another item!\");\n            observer.complete();\n        }, 1000);\n    }, 1000);\n});\n\n# creating a subscription\n# first arg is the next function\n# second arg is error\n# third arg is complete\nsimple\\$.subscribe(\n    item => console.log(\\`one.next \\${item}\\`),\n    error => console.log(\\`one.error \\${item}\\`),\n    () => console.log(\"one.complete\")\n);\n\n# Generating observable\n# one.next An item!\n# one.next Another item!\n# one.complete\n\nsetTimeout(() => {\n    simple\\$.subscribe({\n        next: item => console.log(\\`two.next \\${item}\\`),\n        error: error => console.log(\\`two.error \\${item}\\`),\n        complete: () => console.log(\"two.complete\")\n    });\n}, 3000)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Re-subscribing to an observable allows you to run that generator again`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`function createInterval(time) {\n    return new Rx.Observable(observer => {\n        let index = 0;\n        let interval = setInterval(() => {\n            observer.next(index++);\n        }, time);\n\n        return () => {\n            // will run when we unsubscribe\n            clearnInterval(interval);\n        };\n    });\n}\n\nfunction createSubscriber(tag) {\n    return {\n        next(item) { console.log(\\`\\${tag}.next \\${item}\\`); },\n        error(error) { console.log(\\`\\${tag}.error \\${error.stack || error }\\`); },\n        complete() { console.log(\\`\\${tag}.complete\\`); }\n    };\n}\n\nfunction take(observable, amount) {\n    return new Rx.Observable(observer => {\n\n    });\n}\n\n// this is the core of subscriptions\nfunction take(sourceObservable, amount) {\n    return new Rx.Observable(observer => {\n        let count = 0;\n        const subscription = sourceObservable.subscribe({\n            next(item) {\n                observer.next(item);\n                if (++count >= amount) {\n                    observer.complete();\n                }\n            },\n            error(error) { observer.error(error); },\n            complete() { observer.complete(); }\n        });\n\n        return () => subscription.unsubscribe();\n    });\n}\n\nconst everySecond_ = createInterval(1000);\nconst firstFiveSeconds = take(everySecond_, 5);\nconst subscription = everySecond_.subscribe(createSubscriber(\"one\"));\nsetTimeout(() => {\n    subscription.unsubscribe();\n}, 3500);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This subscription will console.log out forever and ever and ever... - unless, we dispose of a description`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do operators come into play?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We could run something like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const subscription = everySecond_.take(3)subscribe(createSubscriber(\"one\"));`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The steps for it are that it listens for a source and emits a transformation!`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"33-built-in-observables\"}}>{`3.3: Built in Observables`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import Rx from 'rxjs/Rx';\n\n\nRx.Observable.interval(500)\n    .take(5)\n    .subscribe(createSubscriber(\"interval\"));\n\nRx.Observable.timer(1000, 500)\n    .take(3)\n    .subscribe(createSubscriber(\"timer\");\n\n// note, array doesn't work - use from\nRx.Observable.of(\"Hello world!\", 42, \"whoa\")\n    .subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from([\"Hello world!\", 42, \"whoa\"])\n    .subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from(generate())\n    .subscribe(createSubscriber(\"of\"));\n\n\nRx.Observable.from(\"hello world!\")\n    .subscribe(createSubscriber(\"of\"));\n\n// it can also take in a generator function!\n\nfunction* generate() {\n    yield 1;\n    yield 5;\n    yield \"HEY\";\n}\n\nRx.Observable.throw(new Error(\"Hey\"))\n    .subscribe(createSubscriber(\"error\"));\n\n// empty\nRx.Observable.empty()\n    .subscribe(createSubscriber(\"empty\"));\n\n// defer\nlet sideEffect = 0;\nconst defer = Rx.Observable.defer(() => {\n    sideEffect++;\n    return Rx.Obserable.of(sideEffect);\n});\n\ndefer.subscribe(createSubscriber(\"defer.one\"));\ndefer.subscribe(createSubscriber(\"defer.two\"));\ndefer.subscribe(createSubscriber(\"defer.three\"));\n\nRx.Observable.never()\n    .subscribe(createSubscriber(\"never\"));\n\nRx.Observable.range(10, 30)\n    .subscribe(createSubscriber(\"range\"));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Benefits of the iterable `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`from`}</MDXTag>{`?`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`For every iterable, we could map every element.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"34-using-rxjs-with-node-jquery-and-promises\"}}>{`3.4: Using RxJS with Node, jQuery and Promises`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`Rx.Observable.fromEvent(\\$title, 'keyup')\n    .map((e) => e.target.value)\n    .distinctUntilChanged()\n    .debounceTime(500)\n    .switchMap(getItems)\n    .subscribe((items) => {\n        \\$results.empty();\n        \\$results.append(items.map((i) => \\$('<li />').text(i)));\n    });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`NOTE: Without the subscribe, it will never be subscribed to the dom!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we have the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.take(10)`}</MDXTag>{` - it would complete after taking 10 and then furthermore unsubscribe and be great for performance!`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fromEvent`}</MDXTag>{` calls from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addEventListener`}</MDXTag>{`, so it can do powerful things like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`keyup`}</MDXTag>{` for those that don't initially support it.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import fs from 'fs';\n\nfs.readdir('./src/server', (err, items) => {\n    if (err) console.log(err);\n    else {\n        console.log(items);\n    }\n});\n\n// alternative\nconst readdir = Rx.Observable.bindNodeCallBack(fs.readdir);\n\nreaddir('./src/server')\n    // mergeMap creates iterable converted from array\n    .mergeMap((files) => Rx.Observable.from(files))\n    .map((file) => \\`MANIPULATED \\${file}\\`)\n    .subscribe(createSubscriber('readdir'));\n\n// promises\n\nfunction getItem() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('Hello');\n        }, 1000);\n    });\n}\n\nRx.Observable.fromPromise(getItem()).subscribe(createSubscriber('promise'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"35-subjects\"}}>{`3.5: Subjects`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Subjects are another Rx primitive. They are both an observable and a observer! Used to bridge non-reactive code with reactive code.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Behaviour, replay subjects etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Warning`}</MDXTag>{`: you should only really consider them as a last resort when bridging non-reactive and reactive code.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const simple = new Rx.Subject();\n\nsimple.subscribe(createSubscriber('simple'));\n\nsimple.next('Hello');\nsimple.next('World');\nsimple.complete();\n\nconst interval = Rx.Observable.interval(1000).take(5);\nconst intervalSubject = new Rx.Subject();\nintervalSubject.subscribe(interval);\n\nintervalSubject.subscribe(createSubscriber('sub1'));\nintervalSubject.subscribe(createSubscriber('sub2'));\nintervalSubject.subscribe(createSubscriber('sub3'));\n\n// subscribes after three seconds\nsetTimeout(() => {\n    intervalSubject.subscribe(createSubscriber('LOOK AT ME'));\n}, 3000);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Before, we had to invoke a function that call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`next`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`complete`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the above example, intervalSubject is acting as a proxy to another observable.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// needs init state parameter\nconst currentUser = new Rx.BehaviorSubject({ isLoggedIn: false });\nconst isLoggedIn = currentUser.map((u) => u.isLoggedIn);\n\ncurrentUser.next({ isLoggedIn: false });\nisLoggedIn.subscribe(createSubscriber('isLoggedIn'));\n\nsetTimeout(() => {\n    currentUser.next({ isLoggedIn: true, name: 'nelson' });\n}, 3000);\n\nsetTimeout(() => {\n    isLogged.subscribe(createSubscription('delayed'));\n}, 1500);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do you remember multiple states?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const replay = new Rx.ReplaySubject(3);\nreplay.next(1);\nreplay.next(2);\n\nreplay.subscribe(createSubscriber(\"one\"));\n\nreplay.next(3);\nreplay.next(4);\nreplay.next(5);\n\n// this subscription only gets the previous three items\nreplay.subscribe(createSubscriber(\"two\"));\n\nreplay.next(6);\n\n// what you see\none.next 1\none.next 2\none.next 3  \none.next 4  \none.next 5  \ntwo.next 3\ntwo.next 4\ntwo.next 5\none.next 6\ntwo.next 6\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Async Subjects`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const apiCall = new Rx.AsyncSubject();\napiCall.next(1);\n\napiCall.subscribe(createSubscriber(\"one\"));\napiCall.next(2);\n\n// only will emit the final item before it is complete\napiCall.complete();\n\n// if you subscribe to it again, that final value will be emitted\nsetTimeout(() => {\n    apiCall.subscribe(createSubscriber(\"two\"));\n}, 2000);\n\n// output\none.next 2\none.complete\ntwo.next 2\ntwo.complete\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Subject Summary`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`if you can get around it, don't use subjects unless you have to`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`you should use an observable workflow where possible`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"36-rxjs-resources-and-documentation\"}}>{`3.6: RxJS Resources and Documentation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Sources:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/ReactiveX/rxjs\"}}>{`RxJS Github`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"http://rxmarbles.com/\"}}>{`RxMarbles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"http://jaredforsyth.com/rxvision/examples/playground/\"}}>{`RxVision Playground`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"37-sharing-observable-sequences\"}}>{`3.7: Sharing Observable Sequences`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Hot Observable: It will produce events regardless of if you're listening - eg.`}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`fromEvent(\\$title, 'keyup')`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Cold Obserable: Starts once you subscribe - Interval Observables are actually cold observables`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// this example shows when both start from the beginning eg cold\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000).take(10);\n\nsetTimeout(() => {\n    interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n    interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// HOT\n// connectable observable\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000)\n    .take(10)\n    .publish();\n\ninterval.connect();\n\nsetTimeout(() => {\n    interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n    interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// if you connect after a set interval, then it begins executing and sharing the underlying observable\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Why would you want a hot variable?`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// here subscribe console.log runs twice\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n    console.log('subscribed');\n    socket.on('chat:message', (message) => observer.next(message));\n});\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// without it\n\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n    console.log('subscribed');\n    socket.on('chat:message', (message) => observer.next(message));\n}).publish();\n\nchatMessage.connect();\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// using publishLast()\nconst simple = new Rx.Observable((observer) => {\n    observer.next('one');\n    observer.next('two');\n    observer.complete();\n});\n\n// always returns the last value\nconst published = simple.publishLast();\n\n// even if we subscribe before connect, both will get the last value\npublished.subscribe(createSubscriber('one'));\npublished.connect();\npublished.subscribe(creaSubscriber('two'));\n\n// using publishReplay()\nconst simple = new Rx.Observable((observer) => {\n    observer.next('one');\n    observer.next('two');\n    observer.next('three');\n\n    return () => console.log('Disposed');\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2);\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber('one'));\nconst connection = published.connect();\nconst sub2 = published.subscribe(creaSubscriber('two'));\n\nsub1.unsubscribe();\nsub2.unsubscribe();\n\nconnection.unsubscribe();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Refcount is a way to automatically handle the connection and the unsubscription of a connection observable.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It will connect to the first subscription and then disconnected on the last unsubscribe.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// using refCount()\nconst simple = new Rx.Observable(observer => {\n    observer.next(\"one\");\n    observer.next(\"two\");\n    observer.next(\"three\");\n\n    return () => console.log(\"Disposed\");\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2).refCount();\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber(\"one\"));\nconst sub2 = published.subscribe(creaSubscriber(\"two\"));\n\nsub1.unsubscribe();\nsub2.unsubscribe();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`publish().refCount()`}</MDXTag>{` is done so often, that is has been turned in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`share()`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Taxing processes that you don't want to repeat but you want multiple things to hook into the result, then turn it into a hot subscription.`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"40-operators-that-everyone-should-know\"}}>{`4.0: Operators that everyone should know`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now we will just talk about the different primary operators that you will work with.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"41-do--finally--startwith--filter\"}}>{`4.1: Do / Finally / StartWith / Filter`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// do => get the next value and pass it back unchanged\n// finally => only completes after the range has completed, runs right at the end of the final value\n// filter => filters out given statement\n// interval => call timeout\n// startWith => set initial value\n\nRx.Observable.range(1, 10)\n    .do((a) => console.log(\\`From do \\${a}\\`))\n    .map((a) => a * a)\n    .subscribe(createSubscriber('simple'));\n\nRx.Observable.range(1, 10)\n    .finally(() => console.log(\\`From finally\\`))\n    .map((a) => a * 2)\n    .subscribe(createSubscriber('finally'));\n\nRx.Observable.range(1, 10)\n    .filter((a) => a < 5)\n    .map((a) => a * 2)\n    .subscribe(createSubscriber('filter'));\n\nRx.Observable.interval(1000)\n    .startWith(-1)\n    .subscribe(createSubscriber('interval'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"42-merge--concat\"}}>{`4.2: Merge / Concat`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// merge - merge many observables togethers\n// concat - this concatenates observables to the end of another, can also take a list of Observables\n\nRx.Observable.interval(1000)\n    .merge(Rx.Observable.interval(500))\n    .take(5)\n    .subscribe(createSubscriber(\"merge1\"));\n\nRx.Observable.merge(\n    Rx.Observable.interval(1000).map(i => \\`\\${i} seconds),\n    Rx.Observable.interval(500).map(i => \\`\\${i} half seconds))\n    .take(5)\n    .subscribe(createSubscriber('merge2'));\n\n// different events for merged observables\nRx.Observable.merge(\n    socket.on\\$(\"login\").map(user => processUser(user),\n    socket.on\\$(\"logout\").map(() => null));\n\nRx.Observable.range(1, 5)\n    .concat(Rx.Observable.range(10,3))\n    .subscribe(createSubscriber(\"concat1\"));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"43-map--mergemap--switchmap\"}}>{`4.3: Map / MergeMap / SwitchMap`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// map - a projection on every item that comes in\n// mergeMap - select many, does projection and then has another thing that we will work on\n// switchMap - similar to mergeMap but replaces with the latest value if another emission comes in\n\nfunction arrayMap(arr, proj) {\n    let returnArray = [];\n    for (let i of arr) {\n        returnArray.push(proj(item));\n    }\n\n    return returnArray;\n}\n\narrayMap([1, 2, 3], (a) => a * a);\n\n// imagine array of dicts\nconst albums = [{}, {}];\n\nfunction arrayMergeMap(arr, proj) {\n    let returnArray = [];\n    for (let i of arr) {\n        let projArray = proj(item);\n        for (let j of projArray) {\n            returnArray.push(proj(item));\n        }\n    }\n\n    return returnArray;\n}\n\nconst tracks = arrayMergeMap(albums, (album) => album.tracks);\n\nRx.Observable.range(1, 3)\n    .mergeMap((i) =>\n        Rx.Observable.timer(i * 1000).map(() => \\`After \\${i} seconds\\`)\n    )\n    .subscribe(createSubscriber('mergeMap'));\n\nRx.Observable.fromPromise(getTracks())\n    .mergeMap((tracks) => Rx.Observable.from(tracks))\n    .subscribe(createSubscriber('tracks'));\n\nfunction getTracks() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(['track 1', 'track 2', 'track 3']);\n        }, 1000);\n    });\n}\n\n// synchronous example\nRx.Observable.of('my query')\n    .do(() => console.log('Querying'))\n    .mergeMap((a) => query(a))\n    .do(() => console.log('After querying'))\n    .subscribe(createSubscriber('query'));\n\nfunction query(value) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('This is the resolved value');\n        }, 1000);\n    });\n}\n\n// switch map\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"44-reduce--scan\"}}>{`4.4: Reduce / Scan`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// reducer (acc, value) and works on value - doesn't emit until the completion\n// scan - processes and emits as it comes in\nRx.Observable.range(1, 10)\n    .reduce((acc, value) => acc + value)\n    .subscribe(createSubscriber('reduce'));\n\nRx.Observable.range(1, 10)\n    .scan((acc, value) => acc + value)\n    .subscribe(createSubscriber('scan'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"45-buffer--toarray\"}}>{`4.5: Buffer / ToArray`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There have been some big changes to how `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`buffer`}</MDXTag>{` has been used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Buffer takes in an observable.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`toArray will convert results into an array. - still has a clean exit if the never() is implemented!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`Rx.Observable.range(1, 100)\n    .bufferCount(25)\n    .subscribe(createSubscriber(\"items\");\n\n// will take 25 items and pushing them into an array\n\n\nRx.Observable.interval(500)\n    .bufferTime(2000)\n    .subscribe(createSubscriber(\"bufferTime\");\n\n// same behaviour!\n// emitting event causes buffer to flush\nRx.Observable.interval(500)\n    .buffer(Rx.Observable.interval(2000))\n    .subscribe(createSubscriber(\"buffer\");\n\n//\n// toArray\n//\n\nRx.Observable.range(1, 10)\n    .toArray()\n    .subscribe(createSubscriber(\"range\"));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"46-first--last--single--skip--take\"}}>{`4.6: First / Last / Single / Skip / Take`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const simple = new Rx.Observable((observer) => {\n    console.log('Generating sequence');\n    observer.next(1);\n    observer.next(2);\n    observer.next(3);\n    observer.next(4);\n    observer.complete();\n});\n\nsimple.first().subscribe(createSubscriber('first'));\n\nsimple.last().subscribe(createSubscriber('last'));\n\n// displays 1 & 4\n// if nothing is in there, there are EmptyError(s) thrown\n\n// single.error thrown is more than one error thrown\nsimple.single().subscribe(createSubscriber('single'));\n\n// take and skip won't throw errors\n// take does the first however emissions\n// skip will take the emissions after a number\nsimple.take(2).subscribe(createSubscriber('take'));\n\nsimple.skip(2).subscribe(createSubscriber('skip'));\n\n// 3, 4\nsimple\n    .skip(2)\n    .take(2)\n    .subscribe(createSubscriber('skip'));\n\n// skipWhile / takeWhile\nRx.Observable.interval(500)\n    .skipWhile((i) => i < 4)\n    .takeWhile((i) => i < 10)\n    .subscribe(createSubscriber('skipWhile/takeWhile'));\n\n// what's until and take emissions until\nRx.Observable.interval(500)\n    .skipUntil(Rx.Observable.timer(1000))\n    .takeUntil(Rx.Observable.timer(4000))\n    .subscribe(createSubscriber('skipUntil'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"47-zip--withlatestfrom--combinelatest\"}}>{`4.7: Zip / WithLatestFrom / CombineLatest`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How can we combine observables in different ways?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`function arrayZip(arr1, arr2, selectorFunc) {\n    const count = Math.min(arr1.length, arr2.length);\n    const results = [];\n\n    for (let i = 0; i < count; i++) {\n        const combined = selector(arr1[i], arr2[i]);\n        results.push(combined);\n    }\n\n    return results;\n}\n\nconst arr1 = [32, 2, 52, 43, 54];\nconst arr2 = [1, 0, 10, 4, 1, 4, 6, 2];\nconst results = arrayZip(arr1, arr2, (left, right) => left * right);\n\nconsole.log(results);\n\n// in RxJS\nRx.Observable.range(1.1)\n    .zip(\n        Rx.Observable.interval(500),\n        (left, right) => \\`item: \\${left}, at \\${right * 500}\\`\n    )\n    .subscribe(createSubscriber('zip'));\n\n// emits value when source emits\n// can also pass (left, right) function like zip as second parameter\nRx.Observable.interval(1000)\n    .withLatestFrom(Rx.Observable.interval(500))\n    .subscribe(createSubscriber('withLatestFrom'));\n\n// emit value if either do\nRx.Observable.interval(1000)\n    .combineLatest(Rx.Observable.interval(500))\n    .subscribe(createSubscriber('withLatestFrom'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"48-error-handling-catch-and-retry\"}}>{`4.8: Error Handling Catch and Retry`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If an error happens, an observer stops emitting and can prevent values from emitting at all. Error handling is very important!`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.catch(error => Rx.Observable.of(error))`}</MDXTag>{` can pass this down as an Observable.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.retry()`}</MDXTag>{` we can pass in with a numeral to ensure that we either keep retrying or retry a certain number of times.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}