{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Python/Python-Collections.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Python/Python-Collections.md","mtime":1548282824865},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Python/Python-Collections.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <div id=\"intro\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"intro-to-python-collections\"\n    }}>{`Intro to Python Collections`}</h2>\n    <p>{`Appending and adding to lists.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`### a_list=[1,2,3]\n### a_list\na_list.append([4,5]) # [1,2,3,[4,5]]\nour_list = list(range(10))\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n### our_list + [10,11,12]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n### our_list=our_list+[10,11,12]\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n`}</code></pre>\n    <p>{`For splitting strings themselves we can use `}<inlineCode parentName=\"p\">{`str.split(str=\"\", num=string.count(str))`}</inlineCode></p>\n    <div id=\"collections\"></div>\n    <h3 {...{\n      \"id\": \"-----extending-collections\"\n    }}>{`---- Extending Collections`}</h3>\n    <p>{`Normally cleaner for larger lists than the `}<inlineCode parentName=\"p\">{`+`}</inlineCode>{` symbol.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`>>> our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n>>> our_list.extend(range(13, 20))\n>>> our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n`}</code></pre>\n    <p>{`How do add new items inside the list?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`>>> alpha= list('acdf')\n>>> alpha\n['a', 'c', 'd', 'f']\n>>> alpha.insert(1,'b')\n>>> alpha\n['a', 'b', 'c', 'd', 'f']\n>>> alpha.insert(4,'e')\n>>> alpha\n['a', 'b', 'c', 'd', 'e', 'f']\n`}</code></pre>\n    <div id=\"shoppinglist\"></div>\n    <h3 {...{\n      \"id\": \"-----shopping-list\"\n    }}>{`---- Shopping List`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`# note - you should use enumerate once you get there\n>>> def show_help():\n     print(\"\\\\nDoing a print_\")\n\n>>> def show_list():\n     count=1\n     for item in shopping_list:\n             print(\"{}: {}\".format(count, item))\n             count+=1\n`}</code></pre>\n    <p>{`Other helpful use cases...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`while True:\n    #do stuff\n    new_stuff = input(\"> \")\n\n    if new_stuff == \"DONE\":\n        print('Done')\n        break\n    elif\n        #do other stuff\n        break\n    else\n        ...\n`}</code></pre>\n    <div id=\"3\"></div>\n    <h3 {...{\n      \"id\": \"-----removing-items-from-a-list\"\n    }}>{`---- Removing Items from a List`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`a_list=list('abzde')\na_list.index('z')\ndel a_list[2]\n\na_string = \"Hello\"\n# this will delete the string - although the del can't be used to delete within the string\n# strings themselves are immutable\ndel a_string\n\n# remove for the list\nmy_list = [1,2,3,1]\n# remove ONLY removes the first instance from the list\nmy_list.remove(1)\nmy_list\n# [2,3,1]\n`}</code></pre>\n    <div id=\"4\"></div>\n    <h3 {...{\n      \"id\": \"-----removing-vowels-from-a-list-of-words-and-capitalising-them\"\n    }}>{`---- Removing vowels from a list of words and capitalising them`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`names = [\"Dennis\", \"Billy\", \"Trojan\", \"Horse\"]\nvowels = list('aeiou')\noutput = []\n\nfor name in names:\n    name_list = list(name.lower())\n\n    for vowel in vowels:\n        while True:\n            try:\n                state_list.remove(vowel)\n            except:\n                break\n    output.append(''.join(name_list).capitalize())\n\nprint(output)\n`}</code></pre>\n    <div id=\"5\"></div>\n    <h3 {...{\n      \"id\": \"-----pop-an-item-from-the-list\"\n    }}>{`---- Pop an item from the list`}</h3>\n    <p>{`pop() removes an item by index but gives us the item.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`names = [\"Dennis\", \"Billy\", \"Trojan\", \"Horse\"]\nfirst = names.pop() // gives the first name\nanother = names.pop(2) // gives index 3\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// Quiz Challenge\n\n// 1. Move the '1' to the front of the list\n\nthe_list = [\"a\", 2, 3, 1, False, [1, 2, 3]]\n\n# Your code goes below here\nthe_list.insert(0, the_list.pop(3))\n`}</code></pre>\n    <div id=\"slices\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"slices\"\n    }}>{`Slices`}</h2>\n    <p>{`Slices mean we can get back more than one item from a list. We call this `}<inlineCode parentName=\"p\">{`slicing`}</inlineCode>{`.`}</p>\n    <p>{`Something important to not is the useability of have the `}{`[:]`}{` call for a copy of the list!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`my_string=\"Hello there!\"\nmy_string[0:5]\n\nmy_list=list(range(1,6))\nmy_list[0:2] // same as my_list[:2]\nmy_list[2:len(my_list)]\n\nmy_list[1:]\nmy_list[:] // gets back a copy of the list\n\nmy_new_list = [4,2,1,3,5]\nmy_new_list.sort()\nmy_new_list\n`}</code></pre>\n    <div id=\"6\"></div>\n    <h3 {...{\n      \"id\": \"-----slicing-with-a-step\"\n    }}>{`---- Slicing with a Step`}</h3>\n    <p>{`How can we slice that move backward or that skip items?`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`my_list=list(range(20))\n\n# let's get the even numbers\nmy_list[::2]\n\"Testing\"[::2]\n\n# reversing\n\"Slap\"[::-1]\n\n# getting the middle slice - must swap positions!\nmy_list[8:2:-1]\n\n# negative indexes will also give you the positions from the end\nmy_list[-1]\n\n# example of grabbing the first four iterables through a Python function\ndef first_4(iter):\n    return iter[:4]\n`}</code></pre>\n    <div id=\"7\"></div>\n    <h3 {...{\n      \"id\": \"-----deleting-or-replacing-slices\"\n    }}>{`---- Deleting or Replacing Slices`}</h3>\n    <p>{`We can delete and replace with lists.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`my_list = [1,2, 'a', 'b', 5,6,'f','g']\n\n# what if I just want letters?\nmy_list[4:7] = ['e','f']\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Code Challenge`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`def sillycase(c):\n    return c[:round(len(c) / 2)].lower() + c[round(len(c) / 2):].upper()\n`}</code></pre>\n    <div id=\"dict1\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dictionaries\"\n    }}>{`Dictionaries`}</h2>\n    <p>{`Key-Value organisation. They themselves do not have an order.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`my_dict = {'name': 'Dennis', 'job': 'Software Engineer'}\n\n# to access it, you need to use the key name\nmy_dict['name']\n`}</code></pre>\n    <p>{`Dictionaries can contain anything - even your own custom classes.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`named_dict = { 'name' : { 'first' : 'Dennis', 'last': 'OKeeffe'} }\nnamed_dict['name']['first']\n\n# tuple game dict\ngame_dict = {(1,2) : True}\ngame_dict[(1,2)]\n`}</code></pre>\n    <p>{`Challenge: Check if a dict key is in the list`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def members(dict, keys):\n    counter = 0\n    for key in dict:\n        if key in keys:\n            counter = counter + 1\n    return counter\n`}</code></pre>\n    <div id=\"dict2\"></div>\n    <h3 {...{\n      \"id\": \"-----managing-keys\"\n    }}>{`---- Managing Keys`}</h3>\n    <p>{`We can `}<inlineCode parentName=\"p\">{`del`}</inlineCode>{` keys etc similar to the way we do it for keys.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> my_dict['test'] = 'value'\n>>> my_dict\n{'test': 'value', 'job': 'Software Engineer', 'name': 'Dennis'}\n>>> del my_dict['test']\n>>> my_dict\n{'job': 'Software Engineer', 'name': 'Dennis'}\n\n# we can use update for multiple keys etc\n>>> my_dict.update({'job': 'Developer', 'age': 24, 'state': 'New South Wales'})\n>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n`}</code></pre>\n    <p>{`Challenge: Create a function named word_count() that takes a string. Return a dictionary with each word in the string as the key and the number of times it appears as the value.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def word_count(sentence):\n    new_dict = {}\n    word_list = sentence.split()\n    count = 0\n\n    for original_word in word_list:\n        if original_word not in new_dict:\n            count = 0\n            for comparison_word in word_list:\n                if original_word == comparison_word:\n                    count += 1\n                    new_dict.update({original_word: count})\n    return new_dict\n`}</code></pre>\n    <div id=\"dict3\"></div>\n    <h3 {...{\n      \"id\": \"-----unpacking-dictionaries\"\n    }}>{`---- Unpacking Dictionaries`}</h3>\n    <p>{`You can give placeholders a name and use dictionaries to make it a little easier.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> my_string = \"Hi my name is {name} and I live in {state}\"\n>>> my_string\n'Hi my name is {name} and I live in {state}'\n>>> my_string.format('Dennis', 'Sydney')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'name'\n>>> my_string.format('name'='Dennis', state='Sydney')\n  File \"<stdin>\", line 1\nSyntaxError: keyword can't be an expression\n>>> my_string.format(name='Dennis', state='Sydney')\n'Hi my name is Dennis and I live in Sydney'\n\n# how do we make this programmatic?\n>>> test_dict = {'name':'Dennis', 'state':'Sydney'}\n>>> my_string.format(**test_dict)\n'Hi my name is Dennis and I live in Sydney'\n`}</code></pre>\n    <p>{`Code Challenge: Create a function named string_factory that accepts a list of dictionaries and a string. Return a new list built by using .format() on the string, filled in by each of the dictionaries in the list.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`dicts = [\n    {'name': 'Michelangelo',\n     'food': 'PIZZA'},\n    {'name': 'Garfield',\n     'food': 'lasanga'},\n    {'name': 'Walter',\n     'food': 'pancakes'},\n    {'name': 'Galactus',\n     'food': 'worlds'}\n]\n\nstring = \"Hi, I'm {name} and I love to eat {food}!\"\n\ndef string_factory(list_of_dict, str):\n    new_list = []\n    for ind_list in list_of_dict:\n        new_list.append(str.format(**ind_list))\n    return new_list\n`}</code></pre>\n    <div id=\"dict4\"></div>\n    <h3 {...{\n      \"id\": \"-----dictionary-iteration\"\n    }}>{`---- Dictionary Iteration`}</h3>\n    <p>{`Again, Dictionaries in Python do not have a set order, but we can still iterate over them.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n>>> for thing in my_dict:\n...     print(thing)\n...\njob\nname\nage\nstate\n\n>>> for key in my_dict:\n...     print(my_dict[key])\n...\nDeveloper\nDennis\n24\nNew South Wales\n\n>>> for value in my_dict.values():\n...     print(value)\n...\nDeveloper\nDennis\n24\nNew South Wales\n`}</code></pre>\n    <p>{`Create a function named most-classes that takes a dictionary of teachers. Each key is a teacher's name and their value is a list of classes they've taught. most-classes should return the teacher with the most classes.`}</p>\n    <p>{`Next, create a function named num_teachers that takes the same dictionary of teachers and classes. Return the total number of teachers.`}</p>\n    <p>{`Now, create a function named stats that takes the teacher dictionary. Return a list of lists in the format `}{`[`}<inlineCode parentName=\"p\">{`<teacher name>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<number of classes>`}</inlineCode>{`]`}{`. For example, one item in the list would be `}{`['Dave McFarland', 1]`}{`.`}</p>\n    <p>{`Great work! Finally, write a function named courses that takes the teachers dictionary. It should return a single list of all of the courses offered by all of the teachers.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def most_classes(teachers):\n    highest_value = 0\n    teacher_name = \"\"\n    for teacher in teachers:\n        if len(teachers[teacher]) > highest_value:\n            highest_value = len(teachers[teacher])\n            teacher_name = teacher\n    return teacher_name\n\ndef num_teachers(teachers):\n    return len(teachers)\n\ndef stats(teachers):\n    return_list = []\n    for teacher in teachers:\n        return_list.append([teacher, len(teachers[teacher])])\n    return return_list\n\ndef courses(teachers):\n    single_courses = []\n    for courses in teachers.values():\n        for course in courses:\n            if course not in single_courses:\n                single_courses.append(course)\n    return single_courses\n`}</code></pre>\n    <div id=\"tuples\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"tuples\"\n    }}>{`Tuples`}</h2>\n    <p>{`Lists themselves can be mutated, but sometimes we want the collections to stay the same. That's where tuples come in. They themselves are immutable.`}</p>\n    <p>{`Tuples do not support item assignment.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> tupleTest = (1,2,3)\n>>> tupleTest\n(1, 2, 3)\n>>> my_second_tuple = 1,2,3\n>>> my_second_tuple\n(1, 2, 3)\n>>> my_third_tuple = tuple([1,2,3])\n>>> my_third_tuple\n(1, 2, 3)\n>>> dir(tuple)\n['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']\n`}</code></pre>\n    <div id=\"tuples2\"></div>\n    <h3 {...{\n      \"id\": \"-----tuple-packing-and-unpacking\"\n    }}>{`---- Tuple Packing and Unpacking`}</h3>\n    <p>{`Here we create a tuple that has valued assigned by another tuple. It's referred to as `}<inlineCode parentName=\"p\">{`simulatneous assignment`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> a,b = 1,2\n>>> a\n1\n>>> b\n2\n\n# unpacking\n>>> c = (3,4)\n>>> (d,e) = c\n>>> d\n3\n>>> e\n4\n\n# packing\n>>> f = d,e\n>>> f\n(3, 4)\n>>> f == c\nTrue\n\n# swapping the value\n>>> del a\n>>> del b\n>>> a = 1\n>>> b = 2\n>>> a,b = b,a\n>>> a\n2\n>>> b\n1\n\n# function example\n>>> def my_func():\n...     return 1,2,3\n...\n>>> my_func()\n(1, 2, 3)\n>>> a,b,c = my_func()\n>>> a\n1\n>>> b\n2\n>>> c\n3\n`}</code></pre>\n    <p>{`Challenge: Create a function named stringcases that takes a string and returns a tuple of four versions of the string: uppercased, lowercased, titlecased (where every word's first letter is capitalized), and a reversed version of the string.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def stringcases(str):\n    uppercased = str.upper()\n    lowercased = str.lower()\n    titlecased = str.title()\n    reverse = str[::-1]\n    return uppercased, lowercased, titlecased, reverse\n`}</code></pre>\n    <div id=\"tuples3\"></div>\n    <h3 {...{\n      \"id\": \"-----tuples-with-functions\"\n    }}>{`---- Tuples with functions`}</h3>\n    <p>{`We can use enumerate for some packing etc.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> alpha = list('abcdefghijklmnopqrstuvwxyz')\n>>> alpha\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> dir(enumerate)\n['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'next']\n# prints the help\n>>> help(enumerate)\n>>> for (index, letter) in enumerate(alpha):\n...     print('{}: {}').format(index,letter)\n...\n0: a\n1: b\n2: c\n3: d\n4: e\n5: f\n6: g\n7: h\n8: i\n9: j\n10: k\n11: l\n12: m\n13: n\n14: o\n15: p\n16: q\n17: r\n18: s\n19: t\n20: u\n21: v\n22: w\n23: x\n24: y\n25: z\n\n>>> for step in enumerate(alpha):\n...     print('{}: {}'.format(*step))\n...\n0: a\n1: b\n2: c\n3: d\n4: e\n5: f\n6: g\n7: h\n8: i\n9: j\n10: k\n11: l\n12: m\n13: n\n14: o\n15: p\n16: q\n17: r\n18: s\n19: t\n20: u\n21: v\n22: w\n23: x\n24: y\n25: z\n`}</code></pre>\n    <p>{`We can also unpack dictionaries in a similar matter:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n>>> for key, value in my_dict.items():\n...     print('{}: {}'.format(key.title(), value))\n...\nJob: Developer\nName: Dennis\nAge: 24\nState: New South Wales\n`}</code></pre>\n    <p>{`Create a function named combo() that takes two iterables and returns a list of tuples. Each tuple should hold the first item in each list, then the second set, then the third, and so on. Assume the iterables will be the same length.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def combo(iter1, iter2):\n    ret = []\n    length = len(iter1)\n    counter = 0\n    while counter < length:\n        ret.append((iter1[counter],iter2[counter]))\n        counter += 1\n    return ret\n\n# better alternatives\n\ndef combo(iterable_1, iterable_2):\n  list_of_tuples = []\n  for index in range(len(iterable_1)):\n    list_of_tuples.append((iterable_1[index], iterable_2[index]))\n\n  return list_of_tuples\n\ndef combo(iterable_1, iterable_2):\n  list_of_tuples = []\n  for index, item2 in enumerate(iterable_2):\n    list_of_tuples.append( (iterable_1[index], item2) )\n\n  return list_of_tuples\n\ndef combo(iterable_1, iterable_2):\n  return list(zip(iterable_1, iterable_2))\n\ndef combo(iter1, iter2):\n  combo_list = []\n  for index, value in enumerate(iter1):\n    tuple = value, iter2[index]\n    combo_list.append(tuple)\n  return combo_list\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}