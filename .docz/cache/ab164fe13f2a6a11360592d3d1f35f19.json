{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/ES6-Guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/ES6-Guide.md","mtime":1562563032043},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0phdmFTY3JpcHQvRVM2LUd1aWRlLm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsWyJkZWZhdWx0Il0uc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImludHJvZHVjaW5nLWVzMjAxNSIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiSW50cm9kdWNpbmcgRVMyMDE1IiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtMS1lczIwMTUtYmFzaWNzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtMTogRVMyMDE1IEJhc2ljcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICI2dGggRWRpdGlvbiB0byBFQ01BIFNjcmlwdCIpLCBtZHgoImgzIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTItZ2V0dGluZy1zdGFydGVkLXdpdGgtZXMyMDE1IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtMjogR2V0dGluZyBTdGFydGVkIHdpdGggRVMyMDE1IiksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiYmlnZ2VzdCBjaGFuZ2UgdXAgdG8gSlMgc2luY2UgaXRzIGluY2VwdGlvbiIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDMzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkpTIGJ1aWx0IGluIDEwIGRheXMiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJNaWNyb3NvZnQgdXNlZCBKc2NyaXB0IiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRUNNQVNjcmlwdCBhbmQgSmF2YVNjcmlwdCBhcmUgdGhlIHNhbWUgKEVDTUEgbmFtZWQgMTk5NykiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFQ01BU2NyaXB0IDUgKDIwMDkpIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTW9zdCBicm93c2VycyBhcmUgdXNpbmcgdGhlIGxhdGVzdCIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkJhYmVsIGNhbiBiZSB1c2VkIHRvIGNvbXBpbGUgZm9yIHRob3NlIHVzaW5nIG9sZGVyIGJyb3dzZXJzIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTGV0IGFuZCBDb25zdCIpKSwgbWR4KCJ1bCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJzbyBmYXIsIHdlIG5lZWQgdG8gYmUgb24gdG9wIG9mIHNjb3BlIikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQ0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVsbG8gPSAnaGVsbG8nXG5cbi8vIGVjbWEyMDE1XG5cbkEgYmxvY2sgY2FuIGJlIGVpdGhlciBhIGxvb3AsIGlmIHN0YXRlbWVudCBvciBmdW5jdGlvblxuXG4ndXNlIHN0cmljdCdcblxuKGZ1bmN0aW9uIGluaXRMb29wKCkge1xuICAgIGZ1bmN0aW9uIGRvTG9vcCh4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb29wOiAnLCB4KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpPTA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGRvTG9vcChpICsgMSk7XG4gICAgfVxufSlcbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiLi4ud2hhdCBjYW4gZ28gd3Jvbmc/IERpcnR5IFJlYWQiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIid1c2Ugc3RyaWN0J1xuXG4oZnVuY3Rpb24gaW5pdExvb3AoKSB7XG4gICAgZnVuY3Rpb24gZG9Mb29wKHgpIHtcbiAgICAgICAgaT0zO1xuICAgICAgICBjb25zb2xlLmxvZygnbG9vcDogJywgeCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaT0wOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBkb0xvb3AoaSArIDEpO1xuICAgIH1cbn0pXG5cbldlIGNhbiBmaXggdGhpcyB3aXRoIHRoZSBsZXQga2V5d29yZFxuXG4ndXNlIHN0cmljdCdcblxuKGZ1bmN0aW9uIGluaXRMb29wKCkge1xuICAgIGZ1bmN0aW9uIGRvTG9vcCh4KSB7XG4gICAgICAgIC8vIGk9MzsgLT4gdGhpcyB3b24ndCBiZSBhbGxvd2VkXG4gICAgICAgIGNvbnNvbGUubG9nKCdsb29wOiAnLCB4KTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpPTA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGRvTG9vcChpICsgMSk7XG4gICAgfVxufSlcbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogOTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDk3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBhdCB1cyEiKSksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtMy1kdXBsaWNhdGUtdmFsdWVzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDk4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtMzogRHVwbGljYXRlIHZhbHVlcyIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTAxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIndXNlIHN0cmljdCc7XG5cbnZhciBzdHVkZW50ID0geyBuYW1lOiAnS2VuJyB9O1xudmFyIHN0dWRlbnQgPSB7IG5hbWU6ICdKYW1lcycgfTtcblxuY29uc29sZS5sb2coc3R1ZGVudCk7XG5cbi8vIHN0dWRlbnQgYmVjb21lIEphbWVzXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3R1ZGVudCA9IHsgbmFtZTogJ0tlbicgfTtcbnZhciBzdHVkZW50ID0geyBuYW1lOiAnSmFtZXMnIH07XG5cbmNvbnNvbGUubG9nKHN0dWRlbnQpO1xuXG4vLyB3ZSB3aWxsIG5vdyBnZXQgYW4gZXhjZXB0aW9uIChoYXBwZW5zIGZvciBsZXQgb3IgY29uc3QpXG5cbi0geW91IGNhbiBoYXZlIGRpZmZlcmVudCBjb25zdCB2YXJpYWJsZXMgb2YgdGhlIHNhbWUgbmFtZSBmb3IgZGlmZmVyZW50IGNvbnN0YW50c1xuXG4qKm5vdCBhbGxvd2VkKipcblxuLi4uIHtcbiAgICBjb25zdCBzdHVkZW50ID0gJ3Rlc3QnO1xuICAgIC4uLiB7XG4gICAgICAgIHN0dWRlbnQgPSAndGVzdCdcbiAgICB9XG59XG5cbioqYWxsb3dlZCoqXG5cbi4uLiB7XG4gICAgbGV0IHN0dWRlbnQgPSAndGVzdCc7XG4gICAgLi4uIHtcbiAgICAgICAgc3R1ZGVudCA9ICd0ZXN0J1xuICAgIH1cbn1cbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJzdHJvbmciLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiIFVzZSBsZXQgd2hlbiB5b3UgbmVlZCB0byByZWFzc2lnbiwgdXNlIGNvbnN0IHdoZW4geW91IGRvIG5vdCB3YW50IHRoZSB2YWx1ZSB0byBjaGFuZ2UuICIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi00LXRlbXBsYXRlLXN0cmluZ3MiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtNDogVGVtcGxhdGUgU3RyaW5ncyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE0NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICIgRVM1IFN0cmluZ3MgIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAibGV0IHN0ciA9ICdNeSBmYXZvdXJpdGUgbmFtZSBpcyc7IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE0NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJjb25zb2xlLmxvZyhzdHIsIDUpOyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE0OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICIgRVMyMDE1IFN0cmluZ3MgIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiLy8gaW50ZXJwb2xhdGlvbiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiY29uc3Qgc3R1ZGVudCA9IHsgbmFtZTogJ0phbWVzJywgZm9sbG93ZXJDb3VudDogMzQgfSIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiJHtzdHVkZW50Lm5hbWV9IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICI8dGhpcyBzdHVmZiBpcyBuZWF0bHkgZm9ybWF0dGVkPiIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi01LXN0cmluZy1zZWFyY2gtbWV0aG9kcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi01OiBTdHJpbmcgc2VhcmNoIG1ldGhvZHMiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIm5ldyBmdW5jdGlvbnM6IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJzdGFydHNXaXRoXG5lbmRzV2l0aFxuaW5jbHVkZXMiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImNvbnNvbGUubG9nKHN0clRvU2VhcmNoLnN0YXJ0c1dpdGgoJ2V4YW1wbGUtYXQtc3RhcnQnKSk7XG5jb25zb2xlLmxvZyhzdHJUb1NlYXJjaC5lbmRzV2l0aCgnZXhhbXBsZS1hdC1lbmQnKSk7XG5jb25zb2xlLmxvZyhzdHJUb1NlYXJjaC5pbmNsdWRlcygnZXhhbXBsZS1pbi10aGUtbWlkZGxlJykpOyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICIgYWxsIHRha2UgYW4gb3B0aW9uYWwgcGFyYW1ldGVyICIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTY0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInN0YXJ0c1dpdGgoJ2V4YW1wbGUnLCA1KTsgLy9zdGFydCBzZWFyY2ggZnJvbSA1dGggaW5kZXhcbmVuZHNXaXRoKCdleGFtcGxlJywgMjEpOyAvL3NlYXJjaGVzIHRoZSBmaXJzdCAyMSBjaGFyYWN0ZXJzIiksIG1keCgiaHIiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi02LXRoZS1jb29sZXItcGFydHMtb2YtZXMyMDE1IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTY6IFRoZSBDb29sZXIgUGFydHMgb2YgRVMyMDE1IiksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtNy1hcnJvdy1mdW5jdGlvbnMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTcwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtNzogQXJyb3cgRnVuY3Rpb25zIiksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJCb3VuZCB0byBpdHMgcGFyZW50IHNjb3BlIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTmV3IHN5bnRheCBmb3Igd3JpdGluZyBmdW5jdGlvbnMiKSwgbWR4KCJ1bCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTc4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInJlZmVycmVkIHRvIGFzIExhbWRhIGZ1bmN0aW9ucyBpbiBvdGhlciBsYW5ndWFnZXMiKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTgwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIiBFUzUgIikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTgxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIndXNlIHN0cmljdCc7XG5cbnZhciBQZXJzb24gPSBmdW5jdGlvbiAoZGF0YSkge1xuICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgIHRoaXNba2V5XSA9IGRhdGFba2V5XTsgIFxuICB9XG4gIHRoaXMuZ2V0S2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcyk7XG4gIH1cbn1cblxudmFyIEFsZW5hID0gbmV3IFBlcnNvbih7IG5hbWU6ICdBbGVuYScsIHJvbGU6ICdUZWFjaGVyJyB9KTtcblxuY29uc29sZS5sb2coJ0FsZW5hXFwncyBLZXlzOicsIEFsZW5hLmdldEtleXMoKSk7IC8vICd0aGlzJyByZWZlcnMgdG8gJ0FsZW5hJ1xuXG52YXIgZ2V0S2V5cyA9IEFsZW5hLmdldEtleXM7XG5cbmNvbnNvbGUubG9nKGdldEtleXMoKSk7IC8vICd0aGlzJyByZWZlcnMgdG8gdGhlIG5vZGUgcHJvY2Vzc1xuXG4vLyB0aHJvd3MgZXJyb3IgZ2V0IGdldEtleXMoKVxuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFUzIwMTUiKSksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjA1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIid1c2Ugc3RyaWN0JztcblxudmFyIFBlcnNvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgdGhpc1trZXldID0gZGF0YVtrZXldOyAgXG4gIH1cbiAgdGhpcy5nZXRLZXlzID0gKCkgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKTtcbiAgfVxufVxuXG52YXIgQWxlbmEgPSBuZXcgUGVyc29uKHsgbmFtZTogJ0FsZW5hJywgcm9sZTogJ1RlYWNoZXInIH0pO1xuXG5jb25zb2xlLmxvZygnQWxlbmFcXCdzIEtleXM6JywgQWxlbmEuZ2V0S2V5cygpKTsgLy8gJ3RoaXMnIHJlZmVycyB0byAnQWxlbmEnXG5cbnZhciBnZXRLZXlzID0gQWxlbmEuZ2V0S2V5cztcblxuY29uc29sZS5sb2coZ2V0S2V5cygpKTsgLy8gJ3RoaXMnIHJlZmVycyB0byB0aGUgbm9kZSBwcm9jZXNzXG5cbi8vIHRoaXMgZml4ZXMgaXQhXG4iKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUaGUgbGFtZGEgZnVuY3Rpb24gYmluZHMgdGhlIGZ1bmN0aW9uIHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgcGVyc29uIG5vIG1hdHRlciB3aGVyZSBpdCB3YXMgY2FsbGVkIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIiBQcm9taXNlcyAiKSksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjMwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMzAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIid1c2Ugc3RyaWN0JztcblxudmFyIFRlYWNoZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG4gIHRoaXMuZ3JlZXQgPSBmdW5jdGlvbiAoc3R1ZGVudENudCkge1xuICAgIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKHN0dWRlbnRDbnQgPT09IDApIHtcbiAgICAgICAgcmVqZWN0KCdaZXJvIHN0dWRlbnRzIGluIGNsYXNzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGBIZWxsbyB0byAke3N0dWRlbnRDbnR9IG9mIG15IGZhdm9yaXRlIHN0dWRlbnRzIWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59XG5cbnZhciBDbGFzc3Jvb20gPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLnN1YmplY3QgPSBkYXRhLm5hbWU7XG4gIHRoaXMudGVhY2hlciA9IGRhdGEudGVhY2hlcjtcbiAgdGhpcy5zdHVkZW50cyA9IFtdO1xuICB0aGlzLmFkZFN0dWRlbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuc3R1ZGVudHMucHVzaChkYXRhKTtcbiAgICB0aGlzLmdyZWV0KCk7XG4gIH1cbiAgdGhpcy5ncmVldCA9ICgpID0+IHtcbiAgICB0aGlzLnRlYWNoZXIuZ3JlZXQodGhpcy5zdHVkZW50cy5sZW5ndGgpLnRoZW4oXG4gICAgICAoZnVuY3Rpb24gKGNsYXNzcm9vbSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGdyZWV0aW5nKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYCR7Y2xhc3Nyb29tLnRlYWNoZXIubmFtZX0gc2F5czogYCwgZ3JlZXRpbmcpO1xuICAgICAgICB9XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pXG4gIH1cbn1cblxudmFyIG15VGVhY2hlciA9IG5ldyBUZWFjaGVyKHsgbmFtZTogJ0phbWVzJyB9KTtcbnZhciBteUNsYXNzcm9vbSA9IG5ldyBDbGFzc3Jvb20oeyBuYW1lOiAnVGhlIEZ1dHVyZSBvZiBKYXZhU2NyaXB0JywgdGVhY2hlcjogbXlUZWFjaGVyIH0pO1xuXG5teUNsYXNzcm9vbS5hZGRTdHVkZW50KHsgbmFtZTogJ0RhdmUnIH0pO1xuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNzQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFUyAyMDE1IFByb21pc2VzIikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjc1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIndXNlIHN0cmljdCc7XG5cbnZhciBUZWFjaGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICB0aGlzLmdyZWV0ID0gZnVuY3Rpb24gKHN0dWRlbnRDbnQpIHtcbiAgICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChzdHVkZW50Q250ID09PSAwKSB7XG4gICAgICAgIHJlamVjdCgnWmVybyBzdHVkZW50cyBpbiBjbGFzcycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShgSGVsbG8gdG8gJHtzdHVkZW50Q250fSBvZiBteSBmYXZvcml0ZSBzdHVkZW50cyFgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufVxuXG52YXIgQ2xhc3Nyb29tID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5zdWJqZWN0ID0gZGF0YS5uYW1lO1xuICB0aGlzLnRlYWNoZXIgPSBkYXRhLnRlYWNoZXI7XG4gIHRoaXMuc3R1ZGVudHMgPSBbXTtcbiAgdGhpcy5hZGRTdHVkZW50ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLnN0dWRlbnRzLnB1c2goZGF0YSk7XG4gICAgdGhpcy5ncmVldCgpO1xuICB9XG4gIHRoaXMuZ3JlZXQgPSAoKSA9PiB7XG4gICAgdGhpcy50ZWFjaGVyLmdyZWV0KHRoaXMuc3R1ZGVudHMubGVuZ3RoKS50aGVuKFxuICAgICAgZ3JlZXRpbmcgPT4gY29uc29sZS5sb2coYCR7dGhpcy5jbGFzc3Jvb20udGVhY2hlci5uYW1lfSBzYXlzOiBgLCBncmVldGluZyk7XG4gICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnIpO1xuICB9XG59XG5cbnZhciBteVRlYWNoZXIgPSBuZXcgVGVhY2hlcih7IG5hbWU6ICdKYW1lcycgfSk7XG52YXIgbXlDbGFzc3Jvb20gPSBuZXcgQ2xhc3Nyb29tKHsgbmFtZTogJ1RoZSBGdXR1cmUgb2YgSmF2YVNjcmlwdCcsIHRlYWNoZXI6IG15VGVhY2hlciB9KTtcblxubXlDbGFzc3Jvb20uYWRkU3R1ZGVudCh7IG5hbWU6ICdEYXZlJyB9KTtcbiIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi04LWRlZmF1bHQtcGFyYW1ldGVycyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi04OiBEZWZhdWx0IFBhcmFtZXRlcnMiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzE2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlNldCBkZWZhdWx0IHBhcmFtZXRlcnMgZm9yIGEgZnVuY3Rpb24gLT4gc2ltaWxhciB0byBvdGhlciBsYW5ndWFnZXMiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzE3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJzdHJvbmciLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRVM1IikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDMxOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzE4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gZ3JlZXQobmFtZSwgdGltZU9mRGF5KSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgJ0d1aWwnO1xuICAgIHRpbWVvZkRheSA9IHRpbWVPZkRheSB8fCAnRGF5JztcbiAgICAuLi5cbn1cblxuZ3JlZXQoKTtcblxuKipFUyAyMDE1KipcblxuJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIGdyZWV0KG5hbWUgPSAnR3VpbCcsIHRpbWVPZkRheSA9ICdEYXknKSB7XG4gICAgLi4uXG59XG5cbmdyZWV0KHVuZGVmaW5lZCwgJ0FmdGVybm9vbicpOyAgLy8gZGVmYXVsdHMgYXJlIG9wdGlvbmFsLCBuZWVkIHRvIHVuZGVmaW5lXG4iKSksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtOS1yZXN0LXBhcmFtZXRlcnMtYW5kLXNwcmVhZC1vcGVyYXRvciIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNDAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi05OiBSZXN0IFBhcmFtZXRlcnMgYW5kIFNwcmVhZCBPcGVyYXRvciIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNDMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM0MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJIb3cgdG8gdXNlIHRoZSByZXN0IHBhcmFtZXRlcnMiKSksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNDQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM0NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJyZXN0IG11c3QgYmUgdGhlIGxhc3QgcGFyYW1ldGVyIikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM0NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzQ3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJmdW5jdGlvbiBteUZ1bmN0aW9uKG5hbWUsIC4uLnBhcmFtcykge1xuICAgIGNvbnNvbGUubG9nKG5hbWUsIHBhcmFtcyk7XG59XG5cbm15RnVuY3Rpb24oJ0FuZHJldycsIDEsIDIsIDMpO1xuXG4vLyBvdXRwdXQgQW5kcmV3IFsxLCAyLCAzXVxuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM1NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJTcHJlYWQgcGFyYW1ldGVycyIpKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNTgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM1OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiY29uc3Qgb3JpZ2luYWxGbGF2b3JzID0gWydDaG9jb2xhdGUnLCAnVmFuaWxsYSddO1xuXG5jb25zdCBuZXdGbGF2b3JzID0gWydTdHJhd2JlcnJ5JywgJ01pbnQgQ2hvY29sYXRlIENoaXAnXTtcblxuY29uc3QgaW52ZW50b3J5ID0gWydSb2NreSBSb2FkJywgLi4ub3JpZ2luYWxGbGF2b3JzLCAnTmVvcG9saXRhbicsIC4uLm5ld0ZsYXZvcnNdO1xuXG5jb25zb2xlLmxvZyhpbnZlbnRvcnkpO1xuXG4vLyBzcGl0dGluZyBhbiBhcnJheSBhbmQgdGhlbSB1c2luZyB0aGVtIGFzIGFyZ3VtZW50cyB1c2luZyB0aGUgc3ByZWFkIG9wZXJhdG9yXG5cbmZ1bmN0aW9uIG15RnVuY3Rpb24obmFtZSwgaWNlQ3JlYW1GbGF2b3IpIHtcbiAgICBjb25zb2xlLmxvZygnJHtuYW1lfSByZWFsbHkgbGlrZXMgJHtpY2VDcmVhbUZsYXZvcn0gaWNlIGNyZWFtLicpXG59XG5cbmxldCBhcmdzID0gWydHYWJlJywgJ1ZhbmlsbGEnXTtcblxubXlGdW5jdGlvbiguLi5hcmdzKTsgICAgLy8gc2VuZHMgYXMgc2VwYXJhdGUgYXJndW1lbnRzXG4iKSksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtMTAtZGVzdHJ1Y3R1cmluZyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNzgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi0xMDogRGVzdHJ1Y3R1cmluZyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzODEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiUmVsYXRpdmVseSBzaW1wbGUgY29uY2VwdCIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzODIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTGV0J3MgeW91IGV4dHJhY3QgdmFsdWVzIGZyb20gYXJyYXlzIG9yIG9iamVjdHMiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzODMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM4MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAibGV0IHRveWJveCA9IHsgaXRlbTE6ICdjYXInLCBpdGVtMjogJ2JhbGwnLCBpdGVtMzogJ2ZyaXNiZWUnIH07XG5cbmxldCB7IGl0ZW0zOiBkaXNjfSA9IHRveWJveDtcblxuY29uc29sZS5sb2coZGlzYyk7XG5cbi8vIGxvZ3MgaXRlbTMgdmFsdWVcblxubGV0IHdpZGdldHMgPSBbJ3dpZDEnLCd3aWQyJywnd2lkMycsJ3dpZDQnLCd3aWQ1J107XG5cbmxldCBbYSxiLGMsIC4uLmRdID0gd2lkZ2V0cztcbiIpKSwgbWR4KCJociIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM5NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTExLW9iamVjdHMtYW5kLW5ldy1jb2xsZWN0aW9uLXR5cGVzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM5OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTExOiBPYmplY3RzIGFuZCBOZXcgQ29sbGVjdGlvbiBUeXBlcyIpLCBtZHgoImgzIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTEyLW9iamVjdC1wcm9wZXJ0eS1zaG9ydGhhbmQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDAxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtMTI6IE9iamVjdCBQcm9wZXJ0eSBTaG9ydGhhbmQiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MDQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQwNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiZnVuY3Rpb24gc3VibWl0KG5hbWUsIGNvbW1lbnRzLCByYXRpbmcgPSA1KSB7XG4gICAgbGV0IGRhdGEgPSB7IG5hbWUsIGNvbW1lbnRzLCByYXRpbmcgfTtcblxuICAgIGZvciAobGV0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGtleSArICc6JywgZGF0YVtrZXldKTtcbiAgICB9XG5cbiAgICAvLyAuLi4gZG8gYWpheCByZXF1ZXN0XG59XG5cbnN1Ym1pdCgnRW5nbGlzaCcsICdHcmVhdCBjb3Vyc2UhJyk7XG5cbi8vIHdpdGhvdXQgYSBkZWZhdWx0IG5hbWUsIHRoZSBrZXkgYmVjYXVzZSB0aGUgcGFyYW1ldGVyIGZvciB0aGUgb2JqZWN0XG4vLyB3b3JrcyB3aXRoIGFsbCBmb3Jtc1xuIikpLCBtZHgoImgzIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTEzLWZvcm9mIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQyMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTEzOiBmb3IuLi5vZiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRm9yIGl0ZXJhdGluZyBvdmVyIGEgZGF0YSBzZXQiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQyNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gcHJldmlvdXMgZm9yIChsZXQgLi4uIClcbi8vIEVTNSBnYXZlIHVzIGZvciBlYWNoXG5cbmxldCBteU51bWJlcnMgPSBbMSwyLDMsNCw1LDZdO1xuXG5mb3IgKGxldCBudW1iZXIgb2YgbXlOdW1iZXJzKSB7XG4gICAgLi4uXG4gICAgaWYgKGV4YW1wbGUpIHtcbiAgICAgICAgYnJlYWs7IC8vIHlvdSBjYW4gYnJlYWshXG4gICAgfVxufVxuXG4vLyBzdGlsbCB1c2UgZm9yLi4uaW4gZm9yIGl0ZXJhdGluZyBvdmVyIHJlZ3VsYXIgb2JqZWN0c1xuIikpLCBtZHgoImgzIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTE0LXNldCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NDEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi0xNDogU2V0IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDQ0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NDQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImxldCBjbGFzc3Jvb20gPSBuZXcgU2V0KCk7IC8vIHVuaXF1ZSBjb2xsZWN0aW9uIG9mIHZhbHVlc1xuXG5sZXQgc3RldmVuSiA9IHsgbmFtZTogJ1N0ZXZlbicsIGFnZTogMjIgfSxcbiAgICBzYXJhaCA9IHsgbmFtZTogJ1NhcmFoJywgYWdlOiAyMyB9LFxuICAgIHN0ZXZlblMgPSB7IG5hbWU6ICdTdGV2ZScsIGFnZTogMjIgfVxuXG5jbGFzc3Jvb20uYWRkKHN0ZXZlbkopO1xuY2xhc3Nyb29tLmFkZChzYXJhaCk7XG5jbGFzc3Jvb20uYWRkKHN0ZXZlblMpO1xuXG5pZiAoY2xhc3Nyb29tLmhhcyhzdGV2ZW5KKSkgY29uc29sZS5sb2coJ3N0ZXZlbkogaXMgaW4gdGhlIGNsYXNzcm9vbScpOyAvL3RydWVcbmlmIChjbGFzc3Jvb20uaGFzKHNhcmFoKSkgY29uc29sZS5sb2coJ3NhcmFoIGlzIGluIHRoZSBjbGFzc3Jvb20nKTsgLy90cnVlXG5pZiAoY2xhc3Nyb29tLmhhcyhzdGV2ZW5TKSkgY29uc29sZS5sb2coJ3NhcmFoIGlzIGluIHRoZSBjbGFzc3Jvb20nKTsgLy90cnVlXG5cbkJVVCBJRiBzdGV2ZW5TID0gc3RldmVuSlxuXG5sZXQgc3RldmVuSiA9IHsgbmFtZTogJ1N0ZXZlbicsIGFnZTogMjIgfSxcbiAgICBzYXJhaCA9IHsgbmFtZTogJ1NhcmFoJywgYWdlOiAyMyB9LFxuICAgIHN0ZXZlblMgPSBzdGV2ZW5KO1xuXG5jbGFzc3Jvb20uYWRkKHN0ZXZlbkopO1xuY2xhc3Nyb29tLmFkZChzYXJhaCk7XG5jbGFzc3Jvb20uYWRkKHN0ZXZlblMpO1xuXG5pZiAoY2xhc3Nyb29tLmhhcyhzdGV2ZW5KKSkgY29uc29sZS5sb2coJ3N0ZXZlbkogaXMgaW4gdGhlIGNsYXNzcm9vbScpOyAvL3RydWVcbmlmIChjbGFzc3Jvb20uaGFzKHNhcmFoKSkgY29uc29sZS5sb2coJ3NhcmFoIGlzIGluIHRoZSBjbGFzc3Jvb20nKTsgLy90cnVlXG5pZiAoY2xhc3Nyb29tLmhhcyhzdGV2ZW5TKSkgY29uc29sZS5sb2coJ3NhcmFoIGlzIGluIHRoZSBjbGFzc3Jvb20nKTsgLy90cnVlXG5cbmNvbnNvbGUubG9nKGNsYXNzcm9vbS5zaXplKCkpOyAvLzNcblxuY2xhc3Nyb29tLmRlbGV0ZShzdGV2ZW5KKVxuXG5jb25zb2xlLmxvZyhjbGFzc3Jvb20uc2l6ZSgpKTsgLy8yXG5cbi8vIENyZWF0ZSBhcnJheSBvZiBzdHVkZW50cyBmcm9tIHRoZSBjbGFzc3Jvb20gc2V0XG5cbmxldCBhcnJheU9mU3RydWRlbnRzID0gQXJyYXkuZnJvbShjbGFzc3Jvb20pO1xuY29uc29sZS5sb2coYXJyYXlPZlN0dWRlbnRzKTtcblxuLy8gQ3JlYXRlIHNldCBmcm9tIHNldFxuXG5sZXQgYWx1bW5pID0gbmV3IFNldChhcnJheU9mU3R1ZGVudHMpO1xuIikpLCBtZHgoImgzIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTE1LW1hcCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0ODkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkVTNi0xNTogTWFwIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDkyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0OTIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIid1c2Ugc3RyaWN0J1xuXG5sZXQgY2xhc3Nyb29tID0gbmV3IE1hcCgpO1xuXG5sZXQgc3RldmVuSiA9IHsgbmFtZTogJ1N0ZXZlbicsIGFnZTogMjIgfSxcbiAgICBzYXJhaCA9IHsgbmFtZTogJ1NhcmFoJywgYWdlOiAyMyB9LFxuICAgIHN0ZXZlblMgPSB7IG5hbWU6ICdTdGV2ZW4nLCBhZ2U6IDIyIH07XG5cbmNsYXNzcm9vbS5zZXQoJ3N0ZXZlbkonLCBzdGV2ZW5KKTtcbmNsYXNzcm9vbS5zZXQoJ3NhcmFoJyxzYXJhaCk7XG5jbGFzc3Jvb20uc2V0KCdzdGV2ZW5TJywgc3RldmVuUyk7XG5cbmNvbnNvbGUubG9nKGNsYXNzcm9vbS5zaXplKTtcblxuaWYgKGNsYXNzcm9vbS5oYXMoJ3N0ZXZlbkonKSkgY29uc29sZS5sb2coJ3N0ZXZlbkogaXMgaW4gdGhlIGNsYXNzcm9vbScpO1xuaWYgKGNsYXNzcm9vbS5oYXMoJ3NhcmFoJykpIGNvbnNvbGUubG9nKCdzYXJhaCBpcyBpbiB0aGUgY2xhc3Nyb29tJyk7XG5pZiAoY2xhc3Nyb29tLmhhcygnc3RldmVuUycpKSBjb25zb2xlLmxvZygnc3RldmVuUyBpcyBpbiB0aGUgY2xhc3Nyb29tJyk7XG5cbmNvbnNvbGUubG9nKCdzYXJhaDonLCBjbGFzc3Jvb20uZ2V0KCdzYXJhaCcpKTtcblxuY2xhc3Nyb29tLmRlbGV0ZSgnc2FyYWgnKTtcbmNsYXNzcm9vbS5jbGVhcigpOyAgICAgICAgLy9kZWxldGVzIGFsbFxuXG5mb3IgKGxldCBzdHVkZW50IG9mIGNsYXNzcm9vbSkge1xuICBjb25zb2xlLmxvZygnJHtzdHVkZW50WzBdfSA6ICR7c3R1ZGVudFsxXS5uYW1lfSBpcyAke3N0dWRlbnRbMV0uYWdlfSB5ZWFycyBvbGQnKTtcbn1cbiIpKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi0xNi1jbGFzc2VzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUyMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTE2OiBDbGFzc2VzIiksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtMTctc3RydWN0dXJlLW9mLWEtY2xhc3MiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJFUzYtMTc6IFN0cnVjdHVyZSBvZiBhIENsYXNzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJBIGNsYXNzIGlzIGEgYmx1ZXByaW50IGZvciB0aG9zZSB0aGF0IHNoYXJlIHNpbWlsYXIgcHJvcGVydGllcyBvciBtZXRob2RzIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTI4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIG9sZCB3YXlcblxubGV0IFN0dWRlbnQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgdGhpcy5hZ2UgPSBkYXRhLmFnZVxufVxuXG4vLyBuZXcgd2F5XG5cbmNsYXNzIFN0dWRlbnQge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGFnZSwgaW50ZXJlc3RMZXZlbCA9IDUgfSA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFnZSA9IGFnZTtcbiAgICB0aGlzLmludGVyZXN0TGV2ZWwgPSBpbnRlcmVzdExldmVsO1xuICAgIHRoaXMuZ3JhZGVzID0gbmV3IE1hcCgpO1xuICB9XG59XG5cbmxldCBzYXJhaCA9IG5ldyBTdHVkZW50KCdTYXJhaCcsIDExKTtcblxuY29uc29sZS5sb2coQXJyYXkuZnJvbShzYXJhaC5ncmFkZXMpKTtcbiIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImVzNi0xOC1zdWJjbGFzc2VzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTE4OiBTdWJjbGFzc2VzIiksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJjbGFzc2VzIGNhbiBpbmhlcml0IGZyb20gb3RoZXIgY2xhc3NlcyIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJ2YXIgaG9pc3RpbmciKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NTgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiZGVzdHJ1Y3R1cmluZyBpcyBvbmUgd2F5IHRvIHNldCBkZWZhdWx0IHZhbHVlcyBmb3IgY2xhc3MgcHJvcGVydGllcyIpKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU2MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiYmxhID0gMlxudmFyIGJsYTtcbi8vIC4uLlxuXG4vLyBpcyBpbXBsaWNpdGx5IHVuZGVyc3Rvb2QgYXM6XG5cbnZhciBibGE7XG5ibGEgPSAyO1xuIikpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU3MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTcxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJjbGFzcyBQZXJzb24ge1xuICBkYW5jZSgpIHtcbiAgICBjb25zdCBkYW5jZXMgPSBbXG4gICAgICAnd2FsdHonLFxuICAgICAgJ3RhbmdvJyxcbiAgICAgICdtYW1ibydcbiAgICBdO1xuXG4gICAgY29uc29sZS5sb2coJHt0aGlzLm5hbWV9IGlzIGRvaW5nIHRoZSAke2RhbmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqZGFuY2VzLmxlbmd0aCldfSEpO1xuICB9XG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgYWdlLCBleWVDb2xvciA9ICdicm93bicgfSA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFnZSA9IGFnZTtcbiAgICB0aGlzLmV5ZUNvbG9yID0gZXllQ29sb3I7XG4gIH1cbn1cblxuY2xhc3MgU3R1ZGVudCBleHRlbmRzIFBlcnNvbiB7XG5cbiAgZGFuY2UodHJhZGl0aW9uYWwpIHtcbiAgICBpZiAodHJhZGl0aW9uYWwpIHtcbiAgICAgIHN1cGVyLmRhbmNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGFuY2VzID0gW1xuICAgICAgJ2x5cmljYWwnLFxuICAgICAgJ3RhcCcsXG4gICAgICAnamF6eidcbiAgICBdO1xuXG4gICAgY29uc29sZS5sb2coJHt0aGlzLm5hbWV9IGlzIGRvaW5nIHRoZSAke2RhbmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqZGFuY2VzLmxlbmd0aCldfSEpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeyBuYW1lLCBhZ2UsIGludGVyZXN0TGV2ZWwgPSA1IH0gPSB7fSApIHtcbiAgICBzdXBlcih7IG5hbWUsIGFnZSB9KTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYWdlID0gYWdlO1xuICAgIHRoaXMuaW50ZXJlc3RMZXZlbCA9IGludGVyZXN0TGV2ZWw7XG4gICAgdGhpcy5ncmFkZXMgPSBuZXcgTWFwO1xuICB9XG59XG5cbmxldCBzdGV2ZW5KID0gbmV3IFN0dWRlbnQoe25hbWU6ICdTdGV2ZW4nLCBhZ2U6IDIyLCBpbnRlcmVzdExldmVsOiAzIH0pO1xuc3RldmVuSi5kYW5jZSgpO1xuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZXM2LTE5LXN0YXRpYy1tZXRob2RzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYxOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTE5OiBTdGF0aWMgTWV0aG9kcyIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYyMgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjIyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJjbGFzcyBCaXJkIHtcbiAgc3RhdGljIGNoYW5nZUNvbG9yKGNvbG9yKSB7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICB9XG4gIGNvbnN0cnVjdG9yKHsgY29sb3IgPSAncmVkJyB9ID0ge30pIHtcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gIH1cbn1cblxubGV0IHJlZEJpcmQgPSBuZXcgQmlyZDtcbmNvbnNvbGUubG9nKHJlZEJpcmQuY29sb3IpO1xucmVkQmlyZC5jaGFuZ2VDb2xvcignYmx1ZScpO1xuY29uc29sZS5sb2cocmVkQmlyZC5jb2xvcik7IC8vIHdvdWxkIGNhbGwgYW4gZXJyb3IhXG5cbi8vIHdoYXQgd2UgY291bGQgZG9cblxuQmlyZC5jaGFuZ2VDb2xvci5jYWxsKHJlZEJpcmQsICdibHVlJyk7XG5jb25zb2xlLmxvZyhyZWRCaXJkLmNvbG9yKTtcblxuLyogdGhlIG90aGVyIG9wdGlvbiBpcyB0byBjaGFuZ2UgdGhlIGNoYW5nZUNvbG9yIGZ1bmN0aW9uIHRvIGFjY2VwdCAoYmlyZCwgY29sb3IpIGFuZCB0aGVuIGNoYW5nZSB0aGlzLmNvbG9yIHRvIGJpcmQuY29sb3JcbiovXG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJlczYtMjAtZ2V0dGVyLWFuZC1zZXR0ZXItbWV0aG9kcy1pbi1hLWNsYXNzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY0NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRVM2LTIwOiBHZXR0ZXIgYW5kIFNldHRlciBtZXRob2RzIGluIGEgY2xhc3MiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2NDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY0OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiY2xhc3MgQmlyZCB7XG4gIGNoYW5nZUNvbG9yKGNvbG9yKSB7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICB9XG5cbiAgc2V0IGNvbG9yKGNvbG9yKSB7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeyBjb2xvciA9ICdyZWQnIH0gPSB7fSkge1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgfVxufVxuIikpKTsKfQoKaWYgKHR5cGVvZiBNRFhDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBNRFhDb250ZW50ICYmIE1EWENvbnRlbnQgPT09IE9iamVjdChNRFhDb250ZW50KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJNRFhDb250ZW50IiwKICAgICAgZmlsZW5hbWU6ICJtYW51YWwvSmF2YVNjcmlwdC9FUzYtR3VpZGUubWQiCiAgICB9CiAgfSk7Cn0KCk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlOwo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKG1ha2VTaG9ydGNvZGUsICJtYWtlU2hvcnRjb2RlIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvSmF2YVNjcmlwdC9FUzYtR3VpZGUubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvSmF2YVNjcmlwdC9FUzYtR3VpZGUubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhMYXlvdXQsICJNRFhMYXlvdXQiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9KYXZhU2NyaXB0L0VTNi1HdWlkZS5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWENvbnRlbnQsICJNRFhDb250ZW50IiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvSmF2YVNjcmlwdC9FUzYtR3VpZGUubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/ES6-Guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"introducing-es2015\"\n    }}>{`Introducing ES2015`}</h1>\n    <h2 {...{\n      \"id\": \"es6-1-es2015-basics\"\n    }}>{`ES6-1: ES2015 Basics`}</h2>\n    <p>{`6th Edition to ECMA Script`}</p>\n    <h3 {...{\n      \"id\": \"es6-2-getting-started-with-es2015\"\n    }}>{`ES6-2: Getting Started with ES2015`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`biggest change up to JS since its inception`}</li>\n      <li parentName=\"ul\">{`JS built in 10 days`}</li>\n      <li parentName=\"ul\">{`Microsoft used Jscript`}</li>\n      <li parentName=\"ul\">{`ECMAScript and JavaScript are the same (ECMA named 1997)`}</li>\n      <li parentName=\"ul\">{`ECMAScript 5 (2009)`}</li>\n      <li parentName=\"ul\">{`Most browsers are using the latest`}</li>\n      <li parentName=\"ul\">{`Babel can be used to compile for those using older browsers`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Let and Const`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`so far, we need to be on top of scope`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar hello = 'hello'\n\n// ecma2015\n\nA block can be either a loop, if statement or function\n\n'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        console.log('loop: ', x);\n    }\n\n    for (var i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n`}</code></pre>\n    <p>{`...what can go wrong? Dirty Read`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        i=3;\n        console.log('loop: ', x);\n    }\n\n    for (var i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n\nWe can fix this with the let keyword\n\n'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        // i=3; -> this won't be allowed\n        console.log('loop: ', x);\n    }\n\n    for (let i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n`}</code></pre>\n    <p><strong parentName=\"p\">{`this will throw an error at us!`}</strong></p>\n    <h3 {...{\n      \"id\": \"es6-3-duplicate-values\"\n    }}>{`ES6-3: Duplicate values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar student = { name: 'Ken' };\nvar student = { name: 'James' };\n\nconsole.log(student);\n\n// student become James\n\n'use strict';\n\nconst student = { name: 'Ken' };\nvar student = { name: 'James' };\n\nconsole.log(student);\n\n// we will now get an exception (happens for let or const)\n\n- you can have different const variables of the same name for different constants\n\n**not allowed**\n\n... {\n    const student = 'test';\n    ... {\n        student = 'test'\n    }\n}\n\n**allowed**\n\n... {\n    let student = 'test';\n    ... {\n        student = 'test'\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{` Use let when you need to reassign, use const when you do not want the value to change. `}</strong></p>\n    <h3 {...{\n      \"id\": \"es6-4-template-strings\"\n    }}>{`ES6-4: Template Strings`}</h3>\n    <p><strong parentName=\"p\">{` ES5 Strings `}</strong></p>\n    <p>{`let str = 'My favourite name is';`}</p>\n    <p>{`console.log(str, 5);`}</p>\n    <p><strong parentName=\"p\">{` ES2015 Strings `}</strong></p>\n    <p>{`// interpolation`}</p>\n    <p>{`const student = { name: 'James', followerCount: 34 }`}</p>\n    <p>{`\\${student.name}`}</p>\n    <p><inlineCode parentName=\"p\">{`<this stuff is neatly formatted>`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"es6-5-string-search-methods\"\n    }}>{`ES6-5: String search methods`}</h3>\n    <p>{`new functions:`}</p>\n    <p>{`startsWith\nendsWith\nincludes`}</p>\n    <p>{`console.log(strToSearch.startsWith('example-at-start'));\nconsole.log(strToSearch.endsWith('example-at-end'));\nconsole.log(strToSearch.includes('example-in-the-middle'));`}</p>\n    <p><strong parentName=\"p\">{` all take an optional parameter `}</strong></p>\n    <p>{`startsWith('example', 5); //start search from 5th index\nendsWith('example', 21); //searches the first 21 characters`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"es6-6-the-cooler-parts-of-es2015\"\n    }}>{`ES6-6: The Cooler Parts of ES2015`}</h2>\n    <h3 {...{\n      \"id\": \"es6-7-arrow-functions\"\n    }}>{`ES6-7: Arrow Functions`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Bound to its parent scope`}</li>\n    </ul>\n    <p>{`New syntax for writing functions`}</p>\n    <ul>\n      <li parentName=\"ul\">{`referred to as Lamda functions in other languages`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{` ES5 `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Person = function (data) {\n  for (var key in data) {\n    this[key] = data[key];  \n  }\n  this.getKeys = function () {\n    return Object.keys(this);\n  }\n}\n\nvar Alena = new Person({ name: 'Alena', role: 'Teacher' });\n\nconsole.log('Alena\\\\'s Keys:', Alena.getKeys()); // 'this' refers to 'Alena'\n\nvar getKeys = Alena.getKeys;\n\nconsole.log(getKeys()); // 'this' refers to the node process\n\n// throws error get getKeys()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`ES2015`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Person = function (data) {\n  for (var key in data) {\n    this[key] = data[key];  \n  }\n  this.getKeys = () => {\n    return Object.keys(this);\n  }\n}\n\nvar Alena = new Person({ name: 'Alena', role: 'Teacher' });\n\nconsole.log('Alena\\\\'s Keys:', Alena.getKeys()); // 'this' refers to 'Alena'\n\nvar getKeys = Alena.getKeys;\n\nconsole.log(getKeys()); // 'this' refers to the node process\n\n// this fixes it!\n`}</code></pre>\n    <p>{`The lamda function binds the function to the instance of the person no matter where it was called`}</p>\n    <p><strong parentName=\"p\">{` Promises `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Teacher = function (data) {\n  this.name = data.name;\n  this.greet = function (studentCnt) {\n    let promise = new Promise(function (resolve, reject) {\n      if (studentCnt === 0) {\n        reject('Zero students in class');\n      } else {\n        resolve(\\`Hello to \\${studentCnt} of my favorite students!\\`);\n      }\n    });\n    return promise;\n  }\n}\n\nvar Classroom = function (data) {\n  this.subject = data.name;\n  this.teacher = data.teacher;\n  this.students = [];\n  this.addStudent = function (data) {\n    this.students.push(data);\n    this.greet();\n  }\n  this.greet = () => {\n    this.teacher.greet(this.students.length).then(\n      (function (classroom) {\n        return function (greeting) {\n          console.log(\\`\\${classroom.teacher.name} says: \\`, greeting);\n        }\n      })(this),\n      function (err) {\n        console.log(err);\n      })\n  }\n}\n\nvar myTeacher = new Teacher({ name: 'James' });\nvar myClassroom = new Classroom({ name: 'The Future of JavaScript', teacher: myTeacher });\n\nmyClassroom.addStudent({ name: 'Dave' });\n`}</code></pre>\n    <p><strong parentName=\"p\">{`ES 2015 Promises`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Teacher = function (data) {\n  this.name = data.name;\n  this.greet = function (studentCnt) {\n    let promise = new Promise(function (resolve, reject) {\n      if (studentCnt === 0) {\n        reject('Zero students in class');\n      } else {\n        resolve(\\`Hello to \\${studentCnt} of my favorite students!\\`);\n      }\n    });\n    return promise;\n  }\n}\n\nvar Classroom = function (data) {\n  this.subject = data.name;\n  this.teacher = data.teacher;\n  this.students = [];\n  this.addStudent = function (data) {\n    this.students.push(data);\n    this.greet();\n  }\n  this.greet = () => {\n    this.teacher.greet(this.students.length).then(\n      greeting => console.log(\\`\\${this.classroom.teacher.name} says: \\`, greeting);\n      error => console.log(err);\n  }\n}\n\nvar myTeacher = new Teacher({ name: 'James' });\nvar myClassroom = new Classroom({ name: 'The Future of JavaScript', teacher: myTeacher });\n\nmyClassroom.addStudent({ name: 'Dave' });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-8-default-parameters\"\n    }}>{`ES6-8: Default Parameters`}</h3>\n    <p>{`Set default parameters for a function -> similar to other languages`}</p>\n    <p><strong parentName=\"p\">{`ES5`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\nfunction greet(name, timeOfDay) {\n    name = name || 'Guil';\n    timeofDay = timeOfDay || 'Day';\n    ...\n}\n\ngreet();\n\n**ES 2015**\n\n'use strict'\n\nfunction greet(name = 'Guil', timeOfDay = 'Day') {\n    ...\n}\n\ngreet(undefined, 'Afternoon');  // defaults are optional, need to undefine\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-9-rest-parameters-and-spread-operator\"\n    }}>{`ES6-9: Rest Parameters and Spread Operator`}</h3>\n    <p><strong parentName=\"p\">{`How to use the rest parameters`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`rest must be the last parameter`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function myFunction(name, ...params) {\n    console.log(name, params);\n}\n\nmyFunction('Andrew', 1, 2, 3);\n\n// output Andrew [1, 2, 3]\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Spread parameters`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const originalFlavors = ['Chocolate', 'Vanilla'];\n\nconst newFlavors = ['Strawberry', 'Mint Chocolate Chip'];\n\nconst inventory = ['Rocky Road', ...originalFlavors, 'Neopolitan', ...newFlavors];\n\nconsole.log(inventory);\n\n// spitting an array and them using them as arguments using the spread operator\n\nfunction myFunction(name, iceCreamFlavor) {\n    console.log('\\${name} really likes \\${iceCreamFlavor} ice cream.')\n}\n\nlet args = ['Gabe', 'Vanilla'];\n\nmyFunction(...args);    // sends as separate arguments\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-10-destructuring\"\n    }}>{`ES6-10: Destructuring`}</h3>\n    <p>{`Relatively simple concept`}</p>\n    <p>{`Let's you extract values from arrays or objects`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let toybox = { item1: 'car', item2: 'ball', item3: 'frisbee' };\n\nlet { item3: disc} = toybox;\n\nconsole.log(disc);\n\n// logs item3 value\n\nlet widgets = ['wid1','wid2','wid3','wid4','wid5'];\n\nlet [a,b,c, ...d] = widgets;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"es6-11-objects-and-new-collection-types\"\n    }}>{`ES6-11: Objects and New Collection Types`}</h2>\n    <h3 {...{\n      \"id\": \"es6-12-object-property-shorthand\"\n    }}>{`ES6-12: Object Property Shorthand`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function submit(name, comments, rating = 5) {\n    let data = { name, comments, rating };\n\n    for (let key in data) {\n        console.log(key + ':', data[key]);\n    }\n\n    // ... do ajax request\n}\n\nsubmit('English', 'Great course!');\n\n// without a default name, the key because the parameter for the object\n// works with all forms\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-13-forof\"\n    }}>{`ES6-13: for...of`}</h3>\n    <p>{`For iterating over a data set`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// previous for (let ... )\n// ES5 gave us for each\n\nlet myNumbers = [1,2,3,4,5,6];\n\nfor (let number of myNumbers) {\n    ...\n    if (example) {\n        break; // you can break!\n    }\n}\n\n// still use for...in for iterating over regular objects\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-14-set\"\n    }}>{`ES6-14: Set`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let classroom = new Set(); // unique collection of values\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = { name: 'Steve', age: 22 }\n\nclassroom.add(stevenJ);\nclassroom.add(sarah);\nclassroom.add(stevenS);\n\nif (classroom.has(stevenJ)) console.log('stevenJ is in the classroom'); //true\nif (classroom.has(sarah)) console.log('sarah is in the classroom'); //true\nif (classroom.has(stevenS)) console.log('sarah is in the classroom'); //true\n\nBUT IF stevenS = stevenJ\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = stevenJ;\n\nclassroom.add(stevenJ);\nclassroom.add(sarah);\nclassroom.add(stevenS);\n\nif (classroom.has(stevenJ)) console.log('stevenJ is in the classroom'); //true\nif (classroom.has(sarah)) console.log('sarah is in the classroom'); //true\nif (classroom.has(stevenS)) console.log('sarah is in the classroom'); //true\n\nconsole.log(classroom.size()); //3\n\nclassroom.delete(stevenJ)\n\nconsole.log(classroom.size()); //2\n\n// Create array of students from the classroom set\n\nlet arrayOfStrudents = Array.from(classroom);\nconsole.log(arrayOfStudents);\n\n// Create set from set\n\nlet alumni = new Set(arrayOfStudents);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-15-map\"\n    }}>{`ES6-15: Map`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\nlet classroom = new Map();\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = { name: 'Steven', age: 22 };\n\nclassroom.set('stevenJ', stevenJ);\nclassroom.set('sarah',sarah);\nclassroom.set('stevenS', stevenS);\n\nconsole.log(classroom.size);\n\nif (classroom.has('stevenJ')) console.log('stevenJ is in the classroom');\nif (classroom.has('sarah')) console.log('sarah is in the classroom');\nif (classroom.has('stevenS')) console.log('stevenS is in the classroom');\n\nconsole.log('sarah:', classroom.get('sarah'));\n\nclassroom.delete('sarah');\nclassroom.clear();        //deletes all\n\nfor (let student of classroom) {\n  console.log('\\${student[0]} : \\${student[1].name} is \\${student[1].age} years old');\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-16-classes\"\n    }}>{`ES6-16: Classes`}</h2>\n    <h3 {...{\n      \"id\": \"es6-17-structure-of-a-class\"\n    }}>{`ES6-17: Structure of a Class`}</h3>\n    <p>{`A class is a blueprint for those that share similar properties or methods`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// old way\n\nlet Student = function(data) {\n  this.name = data.name;\n  this.age = data.age\n}\n\n// new way\n\nclass Student {\n  constructor({ name, age, interestLevel = 5 } = {}) {\n    this.name = name;\n    this.age = age;\n    this.interestLevel = interestLevel;\n    this.grades = new Map();\n  }\n}\n\nlet sarah = new Student('Sarah', 11);\n\nconsole.log(Array.from(sarah.grades));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-18-subclasses\"\n    }}>{`ES6-18: Subclasses`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`classes can inherit from other classes`}</li>\n      <li parentName=\"ul\">{`var hoisting`}</li>\n      <li parentName=\"ul\">{`destructuring is one way to set default values for class properties`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`bla = 2\nvar bla;\n// ...\n\n// is implicitly understood as:\n\nvar bla;\nbla = 2;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Person {\n  dance() {\n    const dances = [\n      'waltz',\n      'tango',\n      'mambo'\n    ];\n\n    console.log(\\${this.name} is doing the \\${dances[Math.floor(Math.random()*dances.length)]}!);\n  }\n  constructor({ name, age, eyeColor = 'brown' } = {}) {\n    this.name = name;\n    this.age = age;\n    this.eyeColor = eyeColor;\n  }\n}\n\nclass Student extends Person {\n\n  dance(traditional) {\n    if (traditional) {\n      super.dance();\n      return;\n    }\n\n    const dances = [\n      'lyrical',\n      'tap',\n      'jazz'\n    ];\n\n    console.log(\\${this.name} is doing the \\${dances[Math.floor(Math.random()*dances.length)]}!);\n  }\n\n  constructor({ name, age, interestLevel = 5 } = {} ) {\n    super({ name, age });\n    this.name = name;\n    this.age = age;\n    this.interestLevel = interestLevel;\n    this.grades = new Map;\n  }\n}\n\nlet stevenJ = new Student({name: 'Steven', age: 22, interestLevel: 3 });\nstevenJ.dance();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-19-static-methods\"\n    }}>{`ES6-19: Static Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Bird {\n  static changeColor(color) {\n    this.color = color;\n  }\n  constructor({ color = 'red' } = {}) {\n    this.color = color;\n  }\n}\n\nlet redBird = new Bird;\nconsole.log(redBird.color);\nredBird.changeColor('blue');\nconsole.log(redBird.color); // would call an error!\n\n// what we could do\n\nBird.changeColor.call(redBird, 'blue');\nconsole.log(redBird.color);\n\n/* the other option is to change the changeColor function to accept (bird, color) and then change this.color to bird.color\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-20-getter-and-setter-methods-in-a-class\"\n    }}>{`ES6-20: Getter and Setter methods in a class`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Bird {\n  changeColor(color) {\n    this.color = color;\n  }\n\n  set color(color) {\n    this.color = color;\n  }\n\n  get color() {\n    return this.color;\n  }\n\n  constructor({ color = 'red' } = {}) {\n    this.color = color;\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}