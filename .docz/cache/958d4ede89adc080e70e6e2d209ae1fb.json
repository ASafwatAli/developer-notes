{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md","mtime":1562563032058},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0xpbmtlZEluL2xpbmtlZGluLWFwaS1jaGVhdC1zaGVldC5tZCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgovKiBAanN4IG1keCAqLwppbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnOwppbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0JzsKLyogQGpzeCBtZHggKi8KCnZhciBtYWtlU2hvcnRjb2RlID0gZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHsKICAgIGNvbnNvbGUud2FybigiQ29tcG9uZW50ICIgKyBuYW1lICsgIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7CiAgICByZXR1cm4gbWR4KCJkaXYiLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogOQogICAgICB9LAogICAgICBfX3NlbGY6IHRoaXMKICAgIH0pKTsKICB9Owp9OwoKdmFyIGxheW91dFByb3BzID0ge307CnZhciBNRFhMYXlvdXQgPSAid3JhcHBlciI7CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZikgewogIHZhciBjb21wb25lbnRzID0gX3JlZi5jb21wb25lbnRzLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImNvbXBvbmVudHMiXSk7CgogIHJldHVybiBtZHgoTURYTGF5b3V0LCBPYmplY3QuYXNzaWduKHt9LCBsYXlvdXRQcm9wcywgcHJvcHMsIHsKICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsCiAgICBtZHhUeXBlOiAiTURYTGF5b3V0IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksIG1keCgiaDEiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJsaW5rZWRpbi1hcGktY2hlYXQtc2hlZXQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkxpbmtlZEluIEFQSSBDaGVhdCBTaGVldCIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtcGhwIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICI8P3BocFxuICAgIC8vIENoYW5nZSB0aGVzZSBiYWNrIHRvIHlvdXIgdGhpbmdzXG4gICAgZGVmaW5lKCdBUElfS0VZJywgICAgICAnWU9VUiBBUEkgS0VZJyk7XG4gICAgZGVmaW5lKCdBUElfU0VDUkVUJywgICAnWU9VUiBBUEkgU0VDUkVUJyk7XG4gICAgZGVmaW5lKCdSRURJUkVDVF9VUkknLCAgJ2h0dHA6Ly9sb2NhbGhvc3QvJyk7XG5cbiAgICAvLyBJJ3ZlIGNoYW5nZWQgdGhlIHNjb3BlIHRvIHdvcmsgZm9yIHdoYXQgd2UgZ2VuZXJhbGx5IGhhdmUgYWNjZXNzIHRvXG4gICAgZGVmaW5lKCdTQ09QRScsICdyX2Jhc2ljcHJvZmlsZSByX2VtYWlsYWRkcmVzcycpO1xuXG4gICAgLy8gVGhpcyBzdHVmZiBJIGJlbGlldmUgaXQgdXNlZCBpZiB5b3UgaGF2ZSBhIGRhdGFiYXNlXG4gICAgc2Vzc2lvbl9uYW1lKCdsaW5rZWRpbicpO1xuICAgIHNlc3Npb25fc3RhcnQoKTtcblxuICAgIC8vIE9BdXRoIDIgQ29udHJvbCBGbG93XG4gICAgaWYgKGlzc2V0KCRfR0VUWydlcnJvciddKSkge1xuICAgICAgICAvLyBMaW5rZWRJbiByZXR1cm5lZCBhbiBlcnJvclxuICAgICAgICBwcmludCAkX0dFVFsnZXJyb3InXSAuICc6ICcgLiAkX0dFVFsnZXJyb3JfZGVzY3JpcHRpb24nXTtcbiAgICAgICAgZXhpdDtcbiAgICB9IGVsc2VpZiAoaXNzZXQoJF9HRVRbJ2NvZGUnXSkpIHtcbiAgICAgICAgLy8gVXNlciBhdXRob3JpemVkIHlvdXIgYXBwbGljYXRpb25cbiAgICAgICAgaWYgKCRfU0VTU0lPTlsnc3RhdGUnXSA9PSAkX0dFVFsnc3RhdGUnXSkge1xuICAgICAgICAgICAgLy8gR2V0IHRva2VuIHNvIHlvdSBjYW4gbWFrZSBBUEkgY2FsbHNcbiAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDU1JGIGF0dGFjaz8gT3IgZGlkIHlvdSBtaXggdXAgeW91ciBzdGF0ZXM/XG4gICAgICAgICAgICBleGl0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChlbXB0eSgkX1NFU1NJT05bJ2V4cGlyZXNfYXQnXSkpIHx8ICh0aW1lKCkgPiAkX1NFU1NJT05bJ2V4cGlyZXNfYXQnXSkpIHtcbiAgICAgICAgICAgIC8vIFRva2VuIGhhcyBleHBpcmVkLCBjbGVhciB0aGUgc3RhdGVcbiAgICAgICAgICAgICRfU0VTU0lPTiA9IGFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVtcHR5KCRfU0VTU0lPTlsnYWNjZXNzX3Rva2VuJ10pKSB7XG4gICAgICAgICAgICAvLyBTdGFydCBhdXRob3JpemF0aW9uIHByb2Nlc3NcbiAgICAgICAgICAgIGdldEF1dGhvcml6YXRpb25Db2RlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBZb3UgaGF2ZSBhIHZhbGlkIHRva2VuLiBOb3cgZmV0Y2ggeW91ciBwcm9maWxlLlxuICAgIC8vIEkndmUganVzdCBwdXQgaW4gc29tZSBkdW1teSBmaWVsZHMgZm9yIG5vdywgYnV0IGhvcGVmdWxseSB0aGVzZSBzaG91bGQgZG8gaXQuXG4gICAgJHVzZXIgPSBmZXRjaCgnR0VUJywgJy92MS9wZW9wbGUvfjooZmlyc3QtbmFtZSxsYXN0LW5hbWUsZW1haWwtYWRkcmVzcyxwaG9uZS1udW1iZXJzLG51bS1jb25uZWN0aW9ucyxwaWN0dXJlLXVybCxsb2NhdGlvbixwb3NpdGlvbnMsc3VtbWFyeSxzcGVjaWFsdGllcyxpbmR1c3RyeSknKTtcblxuICAgIC8vIEkndmUganVzdCBzaG92ZWQgdGhlIHJlc3BvbnNlcyBpbnRvIHNvbWUgdmFyaWFibGVzIGZyb20gdGhlICR1c2VyIGRpY3QgcmVzcG9uc2VcblxuICAgIC8vIFNUT1JFIFRIRSBSRVNVTFRTIElOIEFOIEFSUkFZXG5cbiAgICAkcmVzID0gYXJyYXkoKTtcblxuICAgICRyZXNbXSA9ICR1c2VyLT5maXJzdE5hbWU7XG4gICAgJHJlc1tdID0gJHVzZXItPmxhc3ROYW1lO1xuICAgICRyZXNbXSA9ICR1c2VyLT5lbWFpbEFkZHJlc3M7XG4gICAgJHJlc1tdID0gJHVzZXItPnBob25lTnVtYmVycztcbiAgICAkcmVzW10gPSAkdXNlci0+bnVtQ29ubmVjdGlvbnM7XG4gICAgJHJlc1tdID0gJHVzZXItPnBpY3R1cmVVcmw7XG4gICAgJHJlc1tdID0gJHVzZXItPmxvY2F0aW9uLT5jb3VudHJ5LT5jb2RlO1xuICAgICRyZXNbXSA9ICR1c2VyLT5sb2NhdGlvbi0+bmFtZTtcbiAgICAkcmVzW10gPSAkdXNlci0+c3VtbWFyeTtcbiAgICAkcmVzW10gPSAkdXNlci0+c3BlY2lhbHRpZXM7XG4gICAgJHJlc1tdID0gJHVzZXItPmluZHVzdHJ5O1xuICAgICRyZXNbXSA9ICR1c2VyLT5wb3NpdGlvbnM7XG5cbiAgICBlY2hvICBubDJicihcIkZpcnN0IG5hbWU6IFwiLiAkcmVzWzBdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJMYXN0IG5hbWU6IFwiLiAkcmVzWzFdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJFbWFpbCBBZGRyZXNzOiBcIiAuICRyZXNbMl0gLiBcIlxcblwiKTtcbiAgICBlY2hvICBubDJicihcIlBob25lIE51bWJlcnM6IFwiLiAkcmVzWzNdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJOdW0gQ29ubmVjdGlvbnM6IFwiLiAkcmVzWzRdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJQaWN0dXJlIFVybDogXCIgLiAkcmVzWzVdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJMb2NhdGlvbiBDb3VudHJ5IENvZGU6IFwiIC4gJHJlc1s2XS4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJMb2NhdGlvbiBOYW1lOiBcIi4gJHJlc1s3XSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiU3VtbWFyeTogXCIgLiAkcmVzWzhdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJTcGVjaWFsdGllczogXCIuICRyZXNbOV0gLiBcIlxcblwiKTtcbiAgICBlY2hvICBubDJicihcIkluZHVzdHJ5OiBcIi4gJHJlc1sxMF0gLiBcIlxcblwiKTtcbiAgICBlY2hvICBubDJicihcIlBvc2l0aW9uczogXCIgLiAkcmVzWzExXSAuIFwiXFxuXCIpO1xuXG4gICAgZXhpdDtcblxuICAgIGZ1bmN0aW9uIGdldEF1dGhvcml6YXRpb25Db2RlKCkge1xuICAgICAgICAkcGFyYW1zID0gYXJyYXkoJ3Jlc3BvbnNlX3R5cGUnID0+ICdjb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGllbnRfaWQnID0+IEFQSV9LRVksXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2NvcGUnID0+IFNDT1BFLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXRlJyA9PiB1bmlxaWQoJycsIHRydWUpLCAvLyB1bmlxdWUgbG9uZyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZWRpcmVjdF91cmknID0+IFJFRElSRUNUX1VSSSxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgIC8vIEF1dGhlbnRpY2F0aW9uIHJlcXVlc3RcbiAgICAgICAgJHVybCA9ICdodHRwczovL3d3dy5saW5rZWRpbi5jb20vdWFzL29hdXRoMi9hdXRob3JpemF0aW9uPycgLiBodHRwX2J1aWxkX3F1ZXJ5KCRwYXJhbXMpO1xuXG4gICAgICAgIC8vIE5lZWRlZCB0byBpZGVudGlmeSByZXF1ZXN0IHdoZW4gaXQgcmV0dXJucyB0byB1c1xuICAgICAgICAkX1NFU1NJT05bJ3N0YXRlJ10gPSAkcGFyYW1zWydzdGF0ZSddO1xuICAgICAgICAvLyBSZWRpcmVjdCB1c2VyIHRvIGF1dGhlbnRpY2F0ZVxuICAgICAgICBoZWFkZXIoXCJMb2NhdGlvbjogJHVybFwiKTtcbiAgICAgICAgZXhpdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbigpIHtcbiAgICAgICAgJHBhcmFtcyA9IGFycmF5KCdncmFudF90eXBlJyA9PiAnYXV0aG9yaXphdGlvbl9jb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGllbnRfaWQnID0+IEFQSV9LRVksXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpZW50X3NlY3JldCcgPT4gQVBJX1NFQ1JFVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb2RlJyA9PiAkX0dFVFsnY29kZSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZGlyZWN0X3VyaScgPT4gUkVESVJFQ1RfVVJJLFxuICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAvLyBBY2Nlc3MgVG9rZW4gcmVxdWVzdFxuICAgICAgICAkdXJsID0gJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS91YXMvb2F1dGgyL2FjY2Vzc1Rva2VuPycgLiBodHRwX2J1aWxkX3F1ZXJ5KCRwYXJhbXMpO1xuXG4gICAgICAgIC8vIFRlbGwgc3RyZWFtcyB0byBtYWtlIGEgUE9TVCByZXF1ZXN0XG4gICAgICAgICRjb250ZXh0ID0gc3RyZWFtX2NvbnRleHRfY3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkoJ2h0dHAnID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkoJ21ldGhvZCcgPT4gJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgLy8gUmV0cmlldmUgYWNjZXNzIHRva2VuIGluZm9ybWF0aW9uXG4gICAgICAgICRyZXNwb25zZSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCR1cmwsIGZhbHNlLCAkY29udGV4dCk7XG4gICAgICAgIC8vIE5hdGl2ZSBQSFAgb2JqZWN0LCBwbGVhc2VcbiAgICAgICAgJHRva2VuID0ganNvbl9kZWNvZGUoJHJlc3BvbnNlKTtcbiAgICAgICAgLy8gU3RvcmUgYWNjZXNzIHRva2VuIGFuZCBleHBpcmF0aW9uIHRpbWVcbiAgICAgICAgJF9TRVNTSU9OWydhY2Nlc3NfdG9rZW4nXSA9ICR0b2tlbi0+YWNjZXNzX3Rva2VuOyAvLyBndWFyZCB0aGlzIVxuICAgICAgICAkX1NFU1NJT05bJ2V4cGlyZXNfaW4nXSAgID0gJHRva2VuLT5leHBpcmVzX2luOyAvLyByZWxhdGl2ZSB0aW1lIChpbiBzZWNvbmRzKVxuICAgICAgICAkX1NFU1NJT05bJ2V4cGlyZXNfYXQnXSAgID0gdGltZSgpICsgJF9TRVNTSU9OWydleHBpcmVzX2luJ107IC8vIGFic29sdXRlIHRpbWVcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGZldGNoIHNob3VsZCBiZSB0aGUgbWFpbiB0aGluZyB0aGF0IHlvdSByZWFsbHkgbmVlZCB0byBhZGQgdG8gd2hhdCB5b3UgYWxyZWFkeSBoYXZlIVxuXG4gICAgZnVuY3Rpb24gZmV0Y2goJG1ldGhvZCwgJHJlc291cmNlLCAkYm9keSA9ICcnKSB7XG4gICAgICAgICRwYXJhbXMgPSBhcnJheSgnb2F1dGgyX2FjY2Vzc190b2tlbicgPT4gJF9TRVNTSU9OWydhY2Nlc3NfdG9rZW4nXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtYXQnID0+ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgLy8gTmVlZCB0byB1c2UgSFRUUFNcbiAgICAgICAgJHVybCA9ICdodHRwczovL2FwaS5saW5rZWRpbi5jb20nIC4gJHJlc291cmNlIC4gJz8nIC4gaHR0cF9idWlsZF9xdWVyeSgkcGFyYW1zKTtcbiAgICAgICAgLy8gVGVsbCBzdHJlYW1zIHRvIG1ha2UgYSAoR0VULCBQT1NULCBQVVQsIG9yIERFTEVURSkgcmVxdWVzdFxuICAgICAgICAkY29udGV4dCA9IHN0cmVhbV9jb250ZXh0X2NyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5KCdodHRwJyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5KCdtZXRob2QnID0+ICRtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgIC8vIEhvY3VzIFBvY3VzXG4gICAgICAgICRyZXNwb25zZSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCR1cmwsIGZhbHNlLCAkY29udGV4dCk7XG4gICAgICAgIC8vIE5hdGl2ZSBQSFAgb2JqZWN0LCBwbGVhc2VcbiAgICAgICAgcmV0dXJuIGpzb25fZGVjb2RlKCRyZXNwb25zZSk7XG4gICAgfVxuXG4/PlxuIikpKTsKfQoKaWYgKHR5cGVvZiBNRFhDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBNRFhDb250ZW50ICYmIE1EWENvbnRlbnQgPT09IE9iamVjdChNRFhDb250ZW50KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJNRFhDb250ZW50IiwKICAgICAgZmlsZW5hbWU6ICJtYW51YWwvTGlua2VkSW4vbGlua2VkaW4tYXBpLWNoZWF0LXNoZWV0Lm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0xpbmtlZEluL2xpbmtlZGluLWFwaS1jaGVhdC1zaGVldC5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGxheW91dFByb3BzLCAibGF5b3V0UHJvcHMiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9MaW5rZWRJbi9saW5rZWRpbi1hcGktY2hlYXQtc2hlZXQubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhMYXlvdXQsICJNRFhMYXlvdXQiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9MaW5rZWRJbi9saW5rZWRpbi1hcGktY2hlYXQtc2hlZXQubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0xpbmtlZEluL2xpbmtlZGluLWFwaS1jaGVhdC1zaGVldC5tZCIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5sZWF2ZU1vZHVsZTsKICBsZWF2ZU1vZHVsZSAmJiBsZWF2ZU1vZHVsZShtb2R1bGUpOwp9KSgpOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6lLAAL,CAJK,CAAP;AA2JD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA1KMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"linkedin-api-cheat-sheet\"\n    }}>{`LinkedIn API Cheat Sheet`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n    // Change these back to your things\n    define('API_KEY',      'YOUR API KEY');\n    define('API_SECRET',   'YOUR API SECRET');\n    define('REDIRECT_URI',  'http://localhost/');\n\n    // I've changed the scope to work for what we generally have access to\n    define('SCOPE', 'r_basicprofile r_emailaddress');\n\n    // This stuff I believe it used if you have a database\n    session_name('linkedin');\n    session_start();\n\n    // OAuth 2 Control Flow\n    if (isset($_GET['error'])) {\n        // LinkedIn returned an error\n        print $_GET['error'] . ': ' . $_GET['error_description'];\n        exit;\n    } elseif (isset($_GET['code'])) {\n        // User authorized your application\n        if ($_SESSION['state'] == $_GET['state']) {\n            // Get token so you can make API calls\n            getAccessToken();\n        } else {\n            // CSRF attack? Or did you mix up your states?\n            exit;\n        }\n    } else {\n        if ((empty($_SESSION['expires_at'])) || (time() > $_SESSION['expires_at'])) {\n            // Token has expired, clear the state\n            $_SESSION = array();\n        }\n        if (empty($_SESSION['access_token'])) {\n            // Start authorization process\n            getAuthorizationCode();\n        }\n    }\n\n    // You have a valid token. Now fetch your profile.\n    // I've just put in some dummy fields for now, but hopefully these should do it.\n    $user = fetch('GET', '/v1/people/~:(first-name,last-name,email-address,phone-numbers,num-connections,picture-url,location,positions,summary,specialties,industry)');\n\n    // I've just shoved the responses into some variables from the $user dict response\n\n    // STORE THE RESULTS IN AN ARRAY\n\n    $res = array();\n\n    $res[] = $user->firstName;\n    $res[] = $user->lastName;\n    $res[] = $user->emailAddress;\n    $res[] = $user->phoneNumbers;\n    $res[] = $user->numConnections;\n    $res[] = $user->pictureUrl;\n    $res[] = $user->location->country->code;\n    $res[] = $user->location->name;\n    $res[] = $user->summary;\n    $res[] = $user->specialties;\n    $res[] = $user->industry;\n    $res[] = $user->positions;\n\n    echo  nl2br(\"First name: \". $res[0] . \"\\\\n\");\n    echo  nl2br(\"Last name: \". $res[1] . \"\\\\n\");\n    echo  nl2br(\"Email Address: \" . $res[2] . \"\\\\n\");\n    echo  nl2br(\"Phone Numbers: \". $res[3] . \"\\\\n\");\n    echo  nl2br(\"Num Connections: \". $res[4] . \"\\\\n\");\n    echo  nl2br(\"Picture Url: \" . $res[5] . \"\\\\n\");\n    echo  nl2br(\"Location Country Code: \" . $res[6]. \"\\\\n\");\n    echo  nl2br(\"Location Name: \". $res[7] . \"\\\\n\");\n    echo  nl2br(\"Summary: \" . $res[8] . \"\\\\n\");\n    echo  nl2br(\"Specialties: \". $res[9] . \"\\\\n\");\n    echo  nl2br(\"Industry: \". $res[10] . \"\\\\n\");\n    echo  nl2br(\"Positions: \" . $res[11] . \"\\\\n\");\n\n    exit;\n\n    function getAuthorizationCode() {\n        $params = array('response_type' => 'code',\n                        'client_id' => API_KEY,\n                        'scope' => SCOPE,\n                        'state' => uniqid('', true), // unique long string\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n        // Authentication request\n        $url = 'https://www.linkedin.com/uas/oauth2/authorization?' . http_build_query($params);\n\n        // Needed to identify request when it returns to us\n        $_SESSION['state'] = $params['state'];\n        // Redirect user to authenticate\n        header(\"Location: $url\");\n        exit;\n    }\n\n    function getAccessToken() {\n        $params = array('grant_type' => 'authorization_code',\n                        'client_id' => API_KEY,\n                        'client_secret' => API_SECRET,\n                        'code' => $_GET['code'],\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n\n        // Access Token request\n        $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);\n\n        // Tell streams to make a POST request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => 'POST',\n                            )\n                        )\n                    );\n        // Retrieve access token information\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        $token = json_decode($response);\n        // Store access token and expiration time\n        $_SESSION['access_token'] = $token->access_token; // guard this!\n        $_SESSION['expires_in']   = $token->expires_in; // relative time (in seconds)\n        $_SESSION['expires_at']   = time() + $_SESSION['expires_in']; // absolute time\n\n        return true;\n    }\n\n    // this fetch should be the main thing that you really need to add to what you already have!\n\n    function fetch($method, $resource, $body = '') {\n        $params = array('oauth2_access_token' => $_SESSION['access_token'],\n                        'format' => 'json',\n                  );\n\n        // Need to use HTTPS\n        $url = 'https://api.linkedin.com' . $resource . '?' . http_build_query($params);\n        // Tell streams to make a (GET, POST, PUT, or DELETE) request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => $method,\n                            )\n                        )\n                    );\n\n        // Hocus Pocus\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        return json_decode($response);\n    }\n\n?>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}