{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md","mtime":1570522531925},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAiC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAjC,uCAPK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iJAAL,CARK,EAeL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAfK,EAkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJAAL,CAlBK,EAwBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBK,EA2BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HA3BK,EA4BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAmD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAnD,MA5BK,EA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAAL,CA7BK,EAiCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjCK,EAoCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAAL,CApCK,EA0CL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA1CK,EA6CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIAAL,CA7CK,EAmDL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAnDK,EAsDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,o9BAAL,CAtDK,EAgGL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAhGK,EAmGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kNAAL,CAnGK,EA+GL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA/GK,EAkHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wQAAL,CAlHK,EA2HL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCA3HK,EA8HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0bAAL,CA9HK,EA2JL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA3JK,EA8JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEA9JK,EA+JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iKAAL,CA/JK,EAoKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBApKK,EAuKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAvKK,EAwKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAxKK,EA2KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2XAAL,CA3KK,EAsLL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAtLK,EAyLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qMAAL,CAzLK,EAkML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAlMK,EAqML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yQAAL,CArMK,EA+ML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA/MK,EAkNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAAL,CAlNK,EAuNL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAvNK,EA0NL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ySAAL,CA1NK,EA0OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAA4C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA5C,0BAA6H;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA7H,kBAAoM;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAApM,MA1OK,EA2OL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3OK,EA8OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GA9OK,EA+OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sKAAL,CA/OK,EAwPL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAxPK,EA2PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uMAAL,CA3PK,EAuQL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAvQK,EA0QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HAAL,CA1QK,CAAP;AAmRD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAlSMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-arrays-and-lists\"\n    }}>{`Kotlin Arrays And Lists`}</h1>\n    <h2 {...{\n      \"id\": \"creating-arrays\"\n    }}>{`Creating Arrays`}</h2>\n    <p>{`Easiest way is to use the `}<inlineCode parentName=\"p\">{`arrayOf`}</inlineCode>{` func. Kotlin will infer the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-of-primitives\"\n    }}>{`Array Of Primitives`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others.`}</p>\n    <p>{`Lists have the additional features of being `}<inlineCode parentName=\"p\">{`dynamically-sized`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val innerPlanets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"empty-lists\"\n    }}>{`Empty Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutable-lists\"\n    }}>{`Mutable Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val outerPlanets = mutableListOf(\"Jupiter\", \"Saturn\", \"Uranus\",\n\"Neptune\")\nval exoPlanets = mutableListOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"list-properties-and-methods\"\n    }}>{`List Properties and Methods`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val players = mutableListOf(\"Alice\", \"Bob\", \"Cindy\", \"Dan\")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println(\"We need at least two players!\")\n} else {\n  println(\"Let's start!\")\n}\n// > Let's start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println(\"$minPlayer will start\") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println(\"$maxPlayer is the MAX\") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln(\"First player is $firstPlayer\")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains(\"Alice\") // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-list-elements\"\n    }}>{`Adding List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`players.add(\"Eli\")\n// or\nplayers += \"Gina\"\n\nprintln(players.joinToString())\n// > \"Alice\", \"Bob\", \"Cindy\", \"Dan\", \"Eli\", \"Gina\"\n\n// inserting elements\nplayers.add(5, \"Frank\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-list-elements\"\n    }}>{`Removing List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val wasPlayerRemoved = players.remove(\"Gina\")\nprintln(\"It is $wasPlayerRemoved that Gina was removed\")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln(\"$removedPlayer was removed\") // > Cindy was removed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-through-a-list\"\n    }}>{`Iterating Through A List`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println(\"\\${index + 1}. $player\")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-lists\"\n    }}>{`Nullable Lists`}</h2>\n    <p>{`You can have nullable lists, a list of nullables or both.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-and-sets\"\n    }}>{`Maps and Sets`}</h2>\n    <p>{`A map is an unordered collection of pairs, where each pair is compised of a a key and value.`}</p>\n    <h2 {...{\n      \"id\": \"creating-maps\"\n    }}>{`Creating Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{` var yearOfBirth = mapOf(\"Anna\" to 1990, \"Brian\" to 1991, \"Craig\" to 1992,\n\"Donna\" to 1993)\nvar namesAndScores = mutableMapOf(\"Anna\" to 2, \"Brian\" to 2, \"Craig\" to\n8, \"Donna\" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-mutable-maps\"\n    }}>{`Mutating Mutable Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val bobData = mutableMapOf(\n  \"name\" to \"Bob\",\n  \"profession\" to \"CardPlayer\",\n  \"country\" to \"USA\")\nbobData.put(\"state\", \"CA\")\nbobData[\"city\"] = \"San Francisco\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-map-values\"\n    }}>{`Updating Map Values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.put(\"name\", \"Bobby\") // Bob\nbobData[\"profession\"] = \"Mailman\"\nval pair = \"nickname\" to \"Bobby D\"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removing-pairs\"\n    }}>{`Removing Pairs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.remove(\"city\")\nbobData.remove(\"state\", \"CA\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterating-through-maps\"\n    }}>{`Iterating through maps`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for ((player, score) in namesAndScores) {\n  println (\"$player - $score\")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print(\"$player, \") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,\n`}</code></pre>\n    <p>{`Note: For performance-critical code, `}<inlineCode parentName=\"p\">{`HashMap<K, V>`}</inlineCode>{` should be used via `}<inlineCode parentName=\"p\">{`hashMapOf()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`mapOf()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"sets\"\n    }}>{`Sets`}</h2>\n    <p>{`A set is an unordered collection of unique values of the same type. This can be useful for uniqueness.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val names = setOf(\"Anna\", \"Brian\", \"Craig\", \"Anna\")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sets-from-arrays\"\n    }}>{`Sets from Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-or-removing-elements\"\n    }}>{`Adding Or Removing Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}