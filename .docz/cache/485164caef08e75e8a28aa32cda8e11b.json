{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Node-Internals.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Node-Internals.md","mtime":1568154399746},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Node-Internals.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"nodejs-internals\"\n    }}>{`Nodejs Internals`}</h1>\n    <p>{`Course by Stephen Grider found `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.udemy.com/advanced-node-for-developers/\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"node-internals\"\n    }}>{`Node Internals`}</h2>\n    <p>{`Two of the most important dependencies of the NodeJS project are `}<inlineCode parentName=\"p\">{`V8`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`V8`}</inlineCode>{` is an open source JavaScript engine created by Google. The purpose is to execute JavaScript code outside of the browser.`}</p>\n    <p><inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` is an open source C++ library that gives NodeJS access to the underlying OS filesystem, networking and some aspects of concurrency + more.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Javascript Code We Write\n└── Node JS\n    └── V8\n    └── libuv\n`}</code></pre>\n    <p>{`What is the purpose of NodeJS instead of the dependencies? `}</p>\n    <p>{`Some of the dependencies are not all JavaScript. V8 is ~70% C++ and libuv is 100% C++.`}</p>\n    <p>{`The other thing Node does is set a consistent set of wrappers ie `}<inlineCode parentName=\"p\">{`http`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` etc which is mostly wrappers for the `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` project.`}</p>\n    <p>{`By makin use of NodeJS, we don't have to worry about the underlying C++.`}</p>\n    <h2 {...{\n      \"id\": \"module-implementations\"\n    }}>{`Module Implementations`}</h2>\n    <p>{`To understand this, we can:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Pick a function in Node standard library`}</li>\n      <li parentName=\"ol\">{`Find where its implemented in the Node source code`}</li>\n      <li parentName=\"ol\">{`See how V8 and libuv are used to implement that function`}</li>\n    </ol>\n    <p>{`The example here we will use is `}<inlineCode parentName=\"p\">{`pbkdf2`}</inlineCode>{`, which is the name of a hashing algorithm found within Nodejs' 'crypto' library.`}</p>\n    <p>{`How does the implementation work? Looking through `}<inlineCode parentName=\"p\">{`github.com`}</inlineCode>{`, we see that we pass a `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`salt`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`other options`}</inlineCode>{`.`}</p>\n    <p>{`When checking the Nodejs Github account, we can check `}<inlineCode parentName=\"p\">{`lib`}</inlineCode>{` as the JavaScript side of the project, while `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` is the C++ implementation of all those functions - this is where `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` pulls in `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{`.`}</p>\n    <p>{`You'll notice in the `}<inlineCode parentName=\"p\">{`pbkdf2`}</inlineCode>{` JavaScript function, it returns `}<inlineCode parentName=\"p\">{`_pbkdf2`}</inlineCode>{` which itself does a bunch of error checking until you get to a block of code that calls `}<inlineCode parentName=\"p\">{`PBKDF2`}</inlineCode>{`. This function `}<inlineCode parentName=\"p\">{`PBKDF2`}</inlineCode>{` is where C++ handles the function.`}</p>\n    <p>{`You can see `}<inlineCode parentName=\"p\">{`PBKDF2`}</inlineCode>{` is required from `}<inlineCode parentName=\"p\">{`process.binding('crypto')`}</inlineCode>{` - that line is where the magic happens between binding C++ to the JavaScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Javascript Code We Write\n└── Nodes JS side (lib folder in repo)\n └── process.binding() # connects JS and C++ functions\n   └── V8 # converts values between JS and C++ world\n      └── Nodes C++ side (src folder in repo)\n        └── libuv # gives Node easy access to underlying OS\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"c-in-node\"\n    }}>{`C++ In Node`}</h2>\n    <p>{`Within the `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` directory of the Node project on Github, we can find the JS equivalent `}<inlineCode parentName=\"p\">{`.cc`}</inlineCode>{` file for the module `}<inlineCode parentName=\"p\">{`node_{module-name}.cc`}</inlineCode>{`.`}</p>\n    <p>{`In the case before, we could check `}<inlineCode parentName=\"p\">{`node_crypto.cc`}</inlineCode>{` for the Crypto module.`}</p>\n    <h2 {...{\n      \"id\": \"where-does-v8-and-libuv-come-into-play\"\n    }}>{`Where does V8 and libuv come into play?`}</h2>\n    <p>{`Within the `}<inlineCode parentName=\"p\">{`.cc`}</inlineCode>{` files, you'll see a lot of `}<inlineCode parentName=\"p\">{`using v8::{name}`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`v8`}</inlineCode>{` allows us to import the C++ definition of JavaScript concepts.`}</p>\n    <p><inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` is harder to see the presence. If you search `}<inlineCode parentName=\"p\">{`uv`}</inlineCode>{` you'll find works like `}<inlineCode parentName=\"p\">{`uv_work_t`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` is used heavily for concurrency.`}</p>\n    <p>{`Note that there is a lot of interopability between `}<inlineCode parentName=\"p\">{`v8`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` project.`}</p>\n    <h2 {...{\n      \"id\": \"the-basics-of-threads\"\n    }}>{`The Basics of Threads`}</h2>\n    <p>{`When you run something up on the computer, you run a process.`}</p>\n    <p>{`Within a process, you can have multiple things called \"threads\" that you can think of as a \"todo list\" for the CPU to complete.`}</p>\n    <p>{`A single process can have multiple threads inside of it. You can tell this is possible thanks to things such as `}<inlineCode parentName=\"p\">{`Activity Monitor`}</inlineCode>{` which tells you the number of processes and threads.`}</p>\n    <p><inlineCode parentName=\"p\">{`Scheduling`}</inlineCode>{` refers to the OS ability to decide which thread to process at any given time. This becomes relevant with many processes and threads running.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`OS Scheduler`}</inlineCode>{` makes sure no important threads don't wait too long.`}</p>\n    <p>{`There are strategies to help with the process that these `}<inlineCode parentName=\"p\">{`threads`}</inlineCode>{` get processed.`}</p>\n    <p>{`One approach is the include more CPU Cores. With more cores, we can process multiple threads in parallel.`}</p>\n    <p>{`Note: Technically one core can process more than one thread at a time through a process known as `}<inlineCode parentName=\"p\">{`multithreading`}</inlineCode>{` (sometimes called `}<inlineCode parentName=\"p\">{`hyperthreading`}</inlineCode>{`).`}</p>\n    <p>{`While one thread is processing and waiting for an asynchronous reply, the OS scheduler can schedule another thread for work. This is important for the Nodejs event loop.`}</p>\n    <h2 {...{\n      \"id\": \"the-nodejs-event-loop\"\n    }}>{`The Nodejs Event Loop`}</h2>\n    <p>{`The event loop is used by Node to handle asynchronous code written in our applications.`}</p>\n    <p>{`When we start up a Node program, Node automatically creates one thread and executes all code on that one thread.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`event loop`}</inlineCode>{` itself is like a control structure that tells the one thread what it should be doing at any given time.`}</p>\n    <p>{`Every program that we run has exactly one `}<inlineCode parentName=\"p\">{`event loop`}</inlineCode>{`. This is extremely important to know in order to understand how the program behaves which in turn will help us with performance issues.`}</p>\n    <p>{`Understanding it is not easy - but it is notoriously difficult to wrap your head around.`}</p>\n    <p>{`Instead of looking at complicated diagrams, we will write some pseudocode to emulate the event loop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// node myFile.js\nconst pendingTimers = [];\nconst pendingOSTasks = [];\nconst pendingOperations = [];\n\n// New timers, tasks, operations are recorded from myFile running\nmyFile.runContents();\n\nfunction shouldContinue() {\n  // Node does three checks\n\n  // Check 1: Are there any functions registers with setTimeout, setInterval or setImmediate?\n\n  // Check 2: Check if there are any pending OS tasks eg http server listening to requests on some port\n\n  // Check 3: Are there any pending long running operations still being executed eg function call inside the fs module\n\n  return pendingTimers.length || pendingOSTasks.length || pendingOperations.length;\n}\n\n// pseudo mocking the event loop \"tick\" for each iteration - executes entire body in one \"tick\"\nwhile(shouldContinue()) {\n  // 1) Node looks at pendingTimers and sees if any functions are ready to be called (setTimeout, setInterval)\n\n  // 2) Node looks at pendingOSTasks and pendingOperations and calls relevant callbacks\n\n  // 3) Node pauses execution temporarily and sits around waiting for new events to occur. Continue when ...\n  // - a new pendingOSTask is done\n  // - a new pendingOperation is done\n  // - a timer is about to complete\n\n  // 4) Node again looks at pendingTimers. (does not care about setTimeout, setInterval - only setImmediate). Call any setImmediate.\n\n  // 5) Handle any 'close' events eg readStream.on('close', callback)\n}\n\n// exit back to terminal\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"is-node-single-threaded\"\n    }}>{`Is Node Single Threaded?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Node `}<inlineCode parentName=\"li\">{`Event Loop`}</inlineCode>{` = single threaded`}</li>\n      <li parentName=\"ul\">{`Some of Node `}<inlineCode parentName=\"li\">{`Framework/Std Lib`}</inlineCode>{` = NOT single threaded`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Event Loop`}</inlineCode>{` itself is truly single threaded. This is commonly seen as a bad thing, as the event loop can only run on one CPU core.`}</p>\n    <p>{`However, some of the functions included in the standard library of Node are not single threaded - they run outside of the event loop.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// thread.js\nconst crypto = require('crypto');\n\nconst start = Date.now();\n\n// note both following calls will be invoked at the same time\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('1:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('2:', Date.now() - start);\n});\n`}</code></pre>\n    <p>{`You'll notice that you'll get two benchmarks that are very similar in time.`}</p>\n    <p>{`If it were single threaded, we would have expected the times to not be so similar.`}</p>\n    <p>{`This indicates that we are breaking out of a single threaded function with Nodejs.`}</p>\n    <p>{`This is thanks to the `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` thread pool.`}</p>\n    <h2 {...{\n      \"id\": \"the-libuv-thread-pool\"\n    }}>{`The Libuv Thread Pool`}</h2>\n    <p>{`All the work from the `}<inlineCode parentName=\"p\">{`crypto.pbkdf2`}</inlineCode>{` function is delegated to Node's C++ side.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` module has a responsibility for some expensive standard library functions to be handled outside of the event loop.`}</p>\n    <p>{`These functions make use of the thread pool. It's a series of four threads that can be used for computationally expensive tasks. These are in addition to the event loop.`}</p>\n    <p>{`Many of the standard library functions make use of this thread pool.`}</p>\n    <p>{`In order to test when the thread loop is full:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// thread.js\nconst crypto = require('crypto');\n\nconst start = Date.now();\n\n// note both following calls will be invoked at the same time\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('1:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('2:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('3:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('4:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('5:', Date.now() - start);\n});\n`}</code></pre>\n    <p>{`Note that the result we get is that some logs happen almost simultaneously (but with double the amount of time), where there is a pause before other results come through. This is the thread pool itself in action.`}</p>\n    <h2 {...{\n      \"id\": \"changing-threadpool-size\"\n    }}>{`Changing Threadpool Size`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// thread.js\nprocess.env.UV_THREADPOOL_SIZE = 2; // tells libuv to only create two threads in the thread pool\n\nconst crypto = require('crypto');\n\nconst start = Date.now();\n\n// note both following calls will be invoked at the same time\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('1:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('2:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('3:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('4:', Date.now() - start);\n});\n\ncrypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n  console.log('5:', Date.now() - start);\n});\n`}</code></pre>\n    <p>{`You'll notice that the timing now happens even quicker for the first two calls. Customising the thread pool here has worked in our favour.`}</p>\n    <p>{`If we did this using the value of `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{`, we notice that all 5 calls complete at a similar time but with a longer timeframe for all to return from completion.`}</p>\n    <h2 {...{\n      \"id\": \"common-threadpool-questions\"\n    }}>{`Common Threadpool Questions`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Can we use the threadpool for JS code or can it only be used with certain NodeJS functions? We can write custom JS code that uses the thread pool.`}</li>\n      <li parentName=\"ol\">{`What functions in `}<inlineCode parentName=\"li\">{`node std lib`}</inlineCode>{` make use of the threadpool? All FS module function, some crypto stuff. Depends on OS (Windows vs Unix based).`}</li>\n      <li parentName=\"ol\">{`How does this threadpool stuff fit into the event loop? Tasks running in the threadpool are the `}<inlineCode parentName=\"li\">{`pendingOperations`}</inlineCode>{` in the pseudocode example.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"explaining-os-operations--libuv-os-delegation\"\n    }}>{`Explaining OS Operations + Libuv OS Delegation`}</h2>\n    <p>{`What are the `}<inlineCode parentName=\"p\">{`pendingOSTasks`}</inlineCode>{` that we talk about in the pseudocode?`}</p>\n    <p>{`We will explain this by using another benchmark.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// async.js\nconst https = require('https');\n\nconst start = Date.now();\n\nfunction doRequest() {\n  https.request('https://www.google.com', res => {\n     res.on('data', () => {});\n     res.on('end', () => {\n       console.log(Date.now() - start);\n     });\n   }).end();\n}\n\ndoRequest();\ndoRequest();\ndoRequest();\ndoRequest();\ndoRequest();\ndoRequest();\n`}</code></pre>\n    <p>{`It appears as if all the `}<inlineCode parentName=\"p\">{`doRequest`}</inlineCode>{` calls are completed at near the same time - distinctly different behaviour to the thread pool given we ran the request six times.`}</p>\n    <p>{`What we're seeing here is more evidence of `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` in play, but it is not the thread pool. It also have some function that make use of the underlying operating system.`}</p>\n    <p>{`Neither `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` nor `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` has the operations to handle the request making. It is actually the real operating system making the http request. Because the work is delegating to the operating system, the OS decides on whether to make a new thread or not. We're not touching the thread pool at all in this case.`}</p>\n    <h2 {...{\n      \"id\": \"commmon-osasync-questions\"\n    }}>{`Commmon OS/Async Questions`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`What functions in `}<inlineCode parentName=\"li\">{`node std lib`}</inlineCode>{` use the OS's async features? Almost everything around networking for all OS's. Some other stuff is OS specific.`}</li>\n      <li parentName=\"ol\">{`How does this OS Async stuff fit into the event loop? Tasks using the underlying OS are reflected in our `}<inlineCode parentName=\"li\">{`pendingOSTasks`}</inlineCode>{` array.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"crazy-node-behaviour\"\n    }}>{`Crazy Node Behaviour`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// multitask.js\nconst https = require('https');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nconst start = Date.now();\n\nfunction doRequest() {\n  https.request('https://www.google.com', res => {\n     res.on('data', () => {});\n     res.on('end', () => {\n       console.log('HTTPS:', Date.now() - start);\n     });\n   }).end();\n}\n\nfunction doHash() {\n  crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n    console.log('Hash:', Date.now() - start);\n  });\n}\n\ndoRequest();\n\nfs.readFile('multitask.js', 'utf8', () => {\n  console.log('FS:' Date.now() - start);\n});\n\n// specifically called 4 times\ndoHash();\ndoHash();\ndoHash();\ndoHash();\n`}</code></pre>\n    <p>{`Note that the `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` call exhibits some really interesting behaviour. Given the `}<inlineCode parentName=\"p\">{`libuv`}</inlineCode>{` threadpool of 4, the OS scheduler and core threading.`}</p>\n    <p>{`The answers deals with the pausing times required for the `}<inlineCode parentName=\"p\">{`fs.readFile`}</inlineCode>{` function.`}</p>\n    <p>{`Given the size of the thread pool, the `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` call would be assigned to thread #1, while the next three `}<inlineCode parentName=\"p\">{`doHash`}</inlineCode>{` calls were assigned to the other threads. `}</p>\n    <p>{`Thread #1 then loads up the last `}<inlineCode parentName=\"p\">{`doHash`}</inlineCode>{` call while thread #1 offloads the `}<inlineCode parentName=\"p\">{`fs.readFile`}</inlineCode>{` to the hard drive until the callback completes.`}</p>\n    <p>{`Once thread #2 finishes the work, it checks if any info has come back from the `}<inlineCode parentName=\"p\">{`hard drive`}</inlineCode>{` (which it has), so the `}<inlineCode parentName=\"p\">{`fs.readFile`}</inlineCode>{` function the completes. Note: it does have a second pause callback, but given the worker thread was free, it was able to handle the second response straight away.`}</p>\n    <p>{`Note that setting `}<inlineCode parentName=\"p\">{`process.env.UV_THREADPOOL_SIZE = 5;`}</inlineCode>{` would allow `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` to have a spare thread to complete quickly with the other four `}<inlineCode parentName=\"p\">{`doHash`}</inlineCode>{` calls finishing at a similar timeframe, whereas `}<inlineCode parentName=\"p\">{`process.env.UV_THREADPOOL_SIZE = 1;`}</inlineCode>{` would block the `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` call from finishing until right at the end. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}