{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","mtime":1548670511182},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiNy1taWNyb3NlcnZpY2VzIn0sIjcuIE1pY3Jvc2VydmljZXMiKSxtZHgoInAiLG51bGwsIklmIHdlIGhhdmUgbXVsdGlwbGUgYXBwcyB0aGF0IHJlcXVpcmUgaW5mb3JtYXRpb24gZnJvbSBiZXR3ZWVuIGVhY2ggb3RoZXIsIHdlIG5lZWQgdG8gc3RhcnQgdGFsa2luZyBhYm91dCB0aGUgICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sInNlcnZpY2UgbWVzaCIpLCIuIE5vcm1hbGx5IGJldHdlZW4gYXBwbGljYXRpb25zLCAgd2UgcnVuIGludG8gdGhlIGZvbGxvd2luZyBwcm9ibGVtczoiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJUaGVyZSBpcyBubyBlbmNyeXB0aW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk5vIHJldHJpZXMuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk5vIGZhbGxvdmVyLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJObyBpbnRlbGxpZ2VudCBsb2FkIGJhbGFuY2VyLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJObyByb3V0aW5nIGRlY2lzaW9ucy4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTm8gbWV0cmljcy9sb2dzL3RyYWNlcy4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTm8gYWNjZXNzIGNvbnRyb2wuIikpLG1keCgicCIsbnVsbCwiT25lIHNvbHV0aW9uIGlzIHRvIGltcGxlbWVudCAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJzaWRlY2FycyIpLCIgd2hpY2ggaXMgYSBwcm94eSB0byBldmVyeSBzaW5nbGUgbWljcm9zZXJ2aWNlLiBUaGlzIGNhbiByZXNvbHZlIGlzc3VlcyBzdWNoIGFzIGVuY3J5cHRpb24sIHJldHJpZXMgd2hlbiBhIGNvbm5lY3Rpb24gZmFpbHMsIGludGVsbGlnZW50IGxvYWQgYmFsYW5jaW5nLiIpLG1keCgicCIsbnVsbCwiWW91IGNvdWxkIGFsc28gYWRkIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwibWFuYWdlbWVudCBpbnRlcmZhY2UiKSwiIHdoaWNoIHJlc29sdmVzIHJvdXRpbmcgZGVjaXNpb25zLCBtZXRyaWNzL2xvZ3MvdHJhY2VzIGFuZCBhY2Nlc3MgY29udHJvbCAoaWUgdmFsaWQgY2VydGlmaWNhdGUgZXRjKS4iKSxtZHgoInAiLG51bGwsIlRoaXMgYnJpbmdzIHVzIHRvICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIklzdGlvIiksIi4iKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IklzdGlvIGRpYWdyYW0iLHNyYzoiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZ2l0Z29vZGNsdWIvaW1hZ2UvdXBsb2FkL3YxNTQwMDkwMTY3L2lzdGlvLWRpYWdyYW0ucG5nIn0pKSxtZHgoImgyIix7ImlkIjoiNzEtaXN0aW8taW5zdGFsbGF0aW9uIn0sIjcuMSBJc3RpbyBJbnN0YWxsYXRpb24iKSxtZHgoInAiLG51bGwsIklmIHlvdSB3YW50IHRvIHVzZSBJc3RpbywgaXQncyB3b3J0aCBub3cgdXNpbmcgYSBub2RlIHdpdGggZW5vdWdoIG1lbW9yeSBpZSB0Mi5tZWRpdW0uIiksbWR4KCJoMyIseyJpZCI6ImtvcHMtY29uZmlndXJhdGlvbiJ9LCJLb3BzIGNvbmZpZ3VyYXRpb24iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9KSwiJCBrb3BzIGVkaXQgY2x1c3RlciBrdWJlcm5ldGVzLm5ld3RlY2guYWNhZGVteVxuIikpLG1keCgicCIsbnVsbCwiQWRkOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJzcGVjOlxuICBrdWJlQVBJU2VydmVyOlxuICAgIGFkbWlzc2lvbkNvbnRyb2w6XG4gICAgLSBOYW1lc3BhY2VMaWZlY3ljbGVcbiAgICAtIExpbWl0UmFuZ2VyXG4gICAgLSBTZXJ2aWNlQWNjb3VudFxuICAgIC0gUGVyc2lzdGVudFZvbHVtZUxhYmVsXG4gICAgLSBEZWZhdWx0U3RvcmFnZUNsYXNzXG4gICAgLSBEZWZhdWx0VG9sZXJhdGlvblNlY29uZHNcbiAgICAtIE11dGF0aW5nQWRtaXNzaW9uV2ViaG9va1xuICAgIC0gVmFsaWRhdGluZ0FkbWlzc2lvbldlYmhvb2tcbiAgICAtIFJlc291cmNlUXVvdGFcbiAgICAtIE5vZGVSZXN0cmljdGlvblxuICAgIC0gUHJpb3JpdHlcbiIpKSxtZHgoImgzIix7ImlkIjoiZG93bmxvYWQtMTAyIn0sIkRvd25sb2FkICgxLjAuMik6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSksIiQgY2QgflxuJCB3Z2V0IGh0dHBzOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3Rpby9yZWxlYXNlcy9kb3dubG9hZC8xLjAuMi9pc3Rpby0xLjAuMi1saW51eC50YXIuZ3pcbnRhciAteHp2ZiBpc3Rpby0xLjAuMi1saW51eC50YXIuZ3pcbiQgY2QgaXN0aW8tMS4wLjJcbiMgQWx0ZXJuYXRpdmVseSBqdXN0IGV4cG9ydCB0aGUgUEFUSCBzbyB5b3UgZG9uJ3QgaGF2ZSB0byBsb2dvdXRcbiQgZWNobyAnZXhwb3J0IFBBVEg9XCIkUEFUSDovaG9tZS91YnVudHUvaXN0aW8tMS4wLjIvYmluXCInID4+IH4vLnByb2ZpbGVcbiQgaXN0aW9jdGwgIyBjaGVjayBldmVyeXRoaW5nIGlzIHJ1bm5pbmcgY29ycmVjdGx5XG4iKSksbWR4KCJoMyIseyJpZCI6ImRvd25sb2FkLWxhdGVzdCJ9LCJEb3dubG9hZCAobGF0ZXN0KToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9KSwiJCBjZCB+XG4kIGN1cmwgLUwgaHR0cHM6Ly9naXQuaW8vZ2V0TGF0ZXN0SXN0aW8gfCBzaCAtXG4kIGVjaG8gJ2V4cG9ydCBQQVRIPVwiJFBBVEg6L2hvbWUvdWJ1bnR1L2lzdGlvLTEuMC4yL2JpblwiJyA+PiB+Ly5wcm9maWxlICMgY2hhbmdlIDEuMC4yIGluIHlvdXIgdmVyc2lvbiAtLSBhbHRlcm5hdGl2ZSBqdXN0IGV4cG9ydCB0aGUgUEFUSCBzbyB5b3UgZG9uJ3QgaGF2ZSB0byBsb2dvdXRcbiQgY2QgaXN0aW8tMS4wLjIgIyBjaGFuZ2UgMS4wLjIgaW4geW91ciB2ZXJzaW9uXG4iKSksbWR4KCJoMyIseyJpZCI6ImlzdGlvLWluc3RhbGwifSwiSXN0aW8gaW5zdGFsbCIpLG1keCgicCIsbnVsbCwiQXBwbHkgQ1JEczoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9KSwiJCBrdWJlY3RsIGFwcGx5IC1mIH4vaXN0aW8tMS4wLjIvaW5zdGFsbC9rdWJlcm5ldGVzL2hlbG0vaXN0aW8vdGVtcGxhdGVzL2NyZHMueWFtbFxuIikpLG1keCgicCIsbnVsbCwiV2FpdCBhIGZldyBzZWNvbmRzLiIpLG1keCgicCIsbnVsbCwiT3B0aW9uIDE6IHdpdGggbm8gbXV0dWFsIFRMUyBhdXRoZW50aWNhdGlvbiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCIkIGt1YmVjdGwgYXBwbHkgLWYgfi9pc3Rpby0xLjAuMi9pbnN0YWxsL2t1YmVybmV0ZXMvaXN0aW8tZGVtby55YW1sXG4iKSksbWR4KCJwIixudWxsLCJPcHRpb24gMjogb3Igd2l0aCBtdXR1YWwgVExTIGF1dGhlbnRpY2F0aW9uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSksIiQga3ViZWN0bCBhcHBseSAtZiB+L2lzdGlvLTEuMC4yL2luc3RhbGwva3ViZXJuZXRlcy9pc3Rpby1kZW1vLWF1dGgueWFtbFxuIikpLG1keCgiaDIiLHsiaWQiOiI3Mi1leGFtcGxlLWFwcCJ9LCI3LjIgRXhhbXBsZSBhcHAiKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IkV4YW1wbGUgYXBwIGRpYWdyYW0iLHNyYzoiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZ2l0Z29vZGNsdWIvaW1hZ2UvdXBsb2FkL3YxNTQwMDkxMjQ2L1NjcmVlbl9TaG90XzIwMTgtMTAtMjFfYXRfMi4wNy4wN19wbS5wbmcifSkpLG1keCgiaDMiLHsiaWQiOiJleGFtcGxlLWFwcC1mcm9tLWlzdGlvIn0sIkV4YW1wbGUgYXBwIChmcm9tIGlzdGlvKSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCJleHBvcnQgUEFUSD1cIiRQQVRIOi9ob21lL3VidW50dS9pc3Rpby0xLjAuMi9iaW5cIlxua3ViZWN0bCBhcHBseSAtZiA8KGlzdGlvY3RsIGt1YmUtaW5qZWN0IC1mIHNhbXBsZXMvYm9va2luZm8vcGxhdGZvcm0va3ViZS9ib29raW5mby55YW1sKVxuIikpLG1keCgiaDMiLHsiaWQiOiJoZWxsby13b3JsZC1hcHAifSwiSGVsbG8gd29ybGQgYXBwIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSksImV4cG9ydCBQQVRIPVwiJFBBVEg6L2hvbWUvdWJ1bnR1L2lzdGlvLTEuMC4yL2JpblwiXG5rdWJlY3RsIGFwcGx5IC1mIDwoaXN0aW9jdGwga3ViZS1pbmplY3QgLWYgaGVsbG93b3JsZC55YW1sKVxua3ViZWN0bCBhcHBseSAtZiBoZWxsb3dvcmxkLWd3LnlhbWxcbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiIyBoZWxsb3dvcmxkLnlhbWxcbiMgU3Bpbm5pbmcgdXAgdGhlIGNvbnRhaW5lciBmb3IgYSBzaW1wbGUgaGVsbG8gd29ybGQgYXBwXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb1xuc3BlYzpcbiAgcmVwbGljYXM6IDNcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogaGVsbG9cbiAgICAgICAgdmVyc2lvbjogdjFcbiAgICBzcGVjOlxuICAgICAgY29udGFpbmVyczpcbiAgICAgIC0gbmFtZTogaGVsbG9cbiAgICAgICAgaW1hZ2U6IHdhcmR2aWFlbmUvaHR0cC1lY2hvXG4gICAgICAgIGVudjpcbiAgICAgICAgLSBuYW1lOiBURVhUXG4gICAgICAgICAgdmFsdWU6IGhlbGxvXG4gICAgICAgIC0gbmFtZTogTkVYVFxuICAgICAgICAgIHZhbHVlOiBcIndvcmxkOjgwODBcIlxuICAgICAgICBwb3J0czpcbiAgICAgICAgLSBuYW1lOiBodHRwXG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODA4MFxuLS0tXG4jIEV4cG9zaW5nIGEgc2VydmljZSBmb3IgXCJoZWxsb1wiXG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvXG4gIGxhYmVsczpcbiAgICBhcHA6IGhlbGxvXG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBhcHA6IGhlbGxvXG4gIHBvcnRzOlxuICAtIG5hbWU6IGh0dHBcbiAgICBwb3J0OiA4MDgwXG4gICAgdGFyZ2V0UG9ydDogODA4MFxuLS0tXG4jIFNwaW5uaW5nIHVwIGNvbnRhaW5lciBmb3Igd29ybGRcbmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IHdvcmxkXG5zcGVjOlxuICByZXBsaWNhczogM1xuICB0ZW1wbGF0ZTpcbiAgICBtZXRhZGF0YTpcbiAgICAgIGxhYmVsczpcbiAgICAgICAgYXBwOiB3b3JsZFxuICAgICAgICB2ZXJzaW9uOiB2MVxuICAgIHNwZWM6XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiB3b3JsZFxuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogd29ybGRcbiAgICAgICAgLSBuYW1lOiBORVhUXG4gICAgICAgICAgdmFsdWU6IFwid29ybGQtMjo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuIyBFeHBvc2luZyB3b3JsZCBjb250YWluZXJcbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGRcbiAgbGFiZWxzOlxuICAgIGFwcDogd29ybGRcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGFwcDogd29ybGRcbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbiMgV29ybGQgMiBkZXBsb3ltZW50XG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiB3b3JsZC0yXG5zcGVjOlxuICByZXBsaWNhczogM1xuICB0ZW1wbGF0ZTpcbiAgICBtZXRhZGF0YTpcbiAgICAgIGxhYmVsczpcbiAgICAgICAgYXBwOiB3b3JsZC0yXG4gICAgICAgIHZlcnNpb246IHYxXG4gICAgc3BlYzpcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IHdvcmxkLTJcbiAgICAgICAgaW1hZ2U6IHdhcmR2aWFlbmUvaHR0cC1lY2hvXG4gICAgICAgIGVudjpcbiAgICAgICAgLSBuYW1lOiBURVhUXG4gICAgICAgICAgdmFsdWU6IFwiISEhXCIgXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAtIG5hbWU6IGh0dHBcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgwXG4tLS1cbiMgRXhwb3Npbmcgc2VydmljZSBmb3Igd29ybGQgMiBkZXBsb3ltZW50XG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IHdvcmxkLTJcbiAgbGFiZWxzOlxuICAgIGFwcDogd29ybGQtMlxuc3BlYzpcbiAgc2VsZWN0b3I6XG4gICAgYXBwOiB3b3JsZC0yXG4gIHBvcnRzOlxuICAtIG5hbWU6IGh0dHBcbiAgICBwb3J0OiA4MDgwXG4gICAgdGFyZ2V0UG9ydDogODA4MFxuLS0tXG4iKSksbWR4KCJwIixudWxsLCJBZnRlciBkZXBsb3lpbmcgYW5kIGFwcGx5aW5nIHRoZSBJc3RpbyBpbmplY3Rpb24gZnJvbSBmb2xsb3dpbmcgdGhlIGFib3ZlIGlzdGlvIGNvbW1hbmRzLCB3ZSB3aWxsIHNlZSB0aGF0IGVhY2ggZGVwbG95aW5nIHdpbGwgaGF2ZSBhbiBhcHAgcnVubmluZyB3aXRoIGl0IGFsb25nIHdpdGggdGhlIHNpZGViYXIuIiksbWR4KCJwIixudWxsLCJGb3IgdGhlIElzdGlvIGdhdGV3YXksIHdlIGxhdW5jaCB0aGUgZm9sbG93aW5nOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJhcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBHYXRld2F5XG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG93b3JsZC1nYXRld2F5XG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBpc3RpbzogaW5ncmVzc2dhdGV3YXkgIyB1c2UgaXN0aW8gZGVmYXVsdCBjb250cm9sbGVyXG4gIHNlcnZlcnM6XG4gIC0gcG9ydDpcbiAgICAgIG51bWJlcjogODBcbiAgICAgIG5hbWU6IGh0dHBcbiAgICAgIHByb3RvY29sOiBIVFRQXG4gICAgaG9zdHM6XG4gICAgLSBcIipcIlxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBWaXJ0dWFsU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvd29ybGRcbnNwZWM6XG4gIGhvc3RzOlxuICAtIFwiKlwiXG4gIGdhdGV3YXlzOlxuICAtIGhlbGxvd29ybGQtZ2F0ZXdheVxuICAjIGlmIHdlIG1hdGNoIHVyaSAvaGVsbG8sIHRoZW4gZm9sbG93IHJvdXRpbmdcbiAgaHR0cDpcbiAgLSBtYXRjaDpcbiAgICAtIHVyaTpcbiAgICAgICAgcHJlZml4OiAvaGVsbG9cbiAgICByb3V0ZTpcbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4iKSksbWR4KCJoMiIseyJpZCI6IjczLWFkdmFuY2VkLWlzdGlvLXJvdXRpbmcifSwiNy4zIEFkdmFuY2VkIElzdGlvIFJvdXRpbmciKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IkFkdmFuY2VkIFJvdXRpbmcgU2V0dXAiLHNyYzoiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZ2l0Z29vZGNsdWIvaW1hZ2UvdXBsb2FkL3YxNTQwMTA5MDYwL1NjcmVlbl9TaG90XzIwMTgtMTAtMjFfYXRfNy4wNC4wN19wbS5wbmcifSkpLG1keCgicCIsbnVsbCwiVGhhbmtzIHRvIElzdGlvLCB3ZSBjYW4gZG8gYWR2YW5jZWQgcm91dGluZyBiYXNlZCBhcm91bmQgdGhlIGFib3ZlIGRpYWdyYW0gdGhhbmtzIHRvIHRoZSBEZXBsb3ltZW50cyBoYXZpbmcgZGlmZmVyZW50IG1ldGFkYXRhOiIpLG1keCgicCIsbnVsbCwiVGhlIGRlcGxveW1lbnQ6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksImFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvLXYyXG5zcGVjOlxuICByZXBsaWNhczogM1xuICB0ZW1wbGF0ZTpcbiAgICAjIHdlIHVzZSB0aGlzIG1ldGFkYXRhIGZvciBJc3RpbyB0byBkaXN0aW5ndWlzaCBvbiByb3V0ZXNcbiAgICBtZXRhZGF0YTpcbiAgICAgIGxhYmVsczpcbiAgICAgICAgYXBwOiBoZWxsb1xuICAgICAgICB2ZXJzaW9uOiB2MlxuICAgIHNwZWM6XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiBoZWxsb1xuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogaGVsbG8sIHRoaXMgaXMgdjJcbiAgICAgICAgLSBuYW1lOiBORVhUXG4gICAgICAgICAgdmFsdWU6IFwid29ybGQtMjo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbiIpKSxtZHgoInAiLG51bGwsIlRoZSByb3V0aW5nOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCIjIGhlbGxvd29ybGQtdjItcm91dGluZ1xuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG9cbnNwZWM6XG4gIGhvc3Q6IGhlbGxvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgIyAhIFN1YnNldHMgaXMgd2hlcmUgdGhlIG1hZ2ljIGhhcHBlbnMhXG4gIHN1YnNldHM6XG4gIC0gbmFtZTogdjFcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MVxuICAtIG5hbWU6IHYyXG4gICAgbGFiZWxzOlxuICAgICAgdmVyc2lvbjogdjJcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogVmlydHVhbFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkXG5zcGVjOlxuICBob3N0czpcbiAgLSBcImhlbGxvLmV4YW1wbGUuY29tXCJcbiAgZ2F0ZXdheXM6XG4gIC0gaGVsbG93b3JsZC1nYXRld2F5XG4gIGh0dHA6XG4gIC0gbWF0Y2g6XG4gICAgLSBoZWFkZXJzOlxuICAgICAgICBlbmQtdXNlcjpcbiAgICAgICAgICBleGFjdDogam9oblxuICAgIHJvdXRlOlxuICAgIC0gZGVzdGluYXRpb246XG4gICAgICAgIGhvc3Q6IGhlbGxvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgICAgICAgc3Vic2V0OiB2MiAjICEgbWF0Y2ggdjIgb25seVxuICAgICAgICBwb3J0OlxuICAgICAgICAgIG51bWJlcjogODA4MFxuICAtIHJvdXRlOiAjIGRlZmF1bHQgcm91dGUgZm9yIGhlbGxvLmV4YW1wbGUuY29tXG4gICAgLSBkZXN0aW5hdGlvbjpcbiAgICAgICAgaG9zdDogISBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHN1YnNldDogdjEgIyBtYXRjaCB2MSBvbmx5XG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4iKSksbWR4KCJwIixudWxsLCJOb3csIGlmIHdlIGFwcGx5IHRoaXMgdmlydHVhbCBzZXJ2aWNlIHRvIHRoZSBzZXJ2aWNlIG1lc2gsIHRoZW4gYmFzZWQgb24gd2hldGhlciB3ZSBwYXNzIHRoZSBcImVuZC11c2VyXCIgaGVhZGVyIG9yIG5vdCwgd2Ugd2lsbCBoaXQgZWl0aGVyIHYxIG9yIHYyISIpLG1keCgicCIsbnVsbCwiV2UgY2FuIHRlc3QgYnkgcnVubmluZyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY3VybCBsb2FkYmFsYW5jZXJhZGRyZXNzLmRvbWFpbi5jb20gLUggXCJob3N0OiBoZWxsby5leGFtcGxlLmNvbVwiIiksIi4iKSxtZHgoInAiLG51bGwsIkZvciB2MiB3ZSBjYW4gcnVuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIiKSwiY3VybCBsb2FkYmFsYW5jZXJhZGRyZXNzLmRvbWFpbi5jb20gLUggXCJob3N0OiBoZWxsby5leGFtcGxlLmNvbVwiIC1IIFwiZW5kLXVzZXI6IEpvaG5cImAuICIpLG1keCgiaDIiLHsiaWQiOiI3NC1jYW5hcnktZGVwbG95bWVudHMifSwiNy40IENhbmFyeSBkZXBsb3ltZW50cyIpLG1keCgicCIsbnVsbCwiQ2FuYXJ5IGRlcGxveW1lbnRzIGJhc2ljYWxseSB3YW50IHJvdXRpbmcgbWFpbmx5IHRvIHRoZSBmaXJzdCB2ZXJzaW9uLCBidXQgd2UgYWxzbyB3YW50IHNvbWUgQS9CIHRlc3RpbmcgdG8gaGF2ZSB2ZXJzaW9uIDIgaGF2aW5nIGEgMTAlIHdlaWdodC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG9cbnNwZWM6XG4gIGhvc3Q6IGhlbGxvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgc3Vic2V0czpcbiAgLSBuYW1lOiB2MVxuICAgIGxhYmVsczpcbiAgICAgIHZlcnNpb246IHYxXG4gIC0gbmFtZTogdjJcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MlxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBWaXJ0dWFsU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvd29ybGRcbnNwZWM6XG4gIGhvc3RzOlxuICAtIFwiaGVsbG8uZXhhbXBsZS5jb21cIlxuICBnYXRld2F5czpcbiAgLSBoZWxsb3dvcmxkLWdhdGV3YXlcbiAgaHR0cDpcbiAgLSByb3V0ZTpcbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHN1YnNldDogdjFcbiAgICAgICAgcG9ydDpcbiAgICAgICAgICBudW1iZXI6IDgwODBcbiAgICAgIHdlaWdodDogOTBcbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHN1YnNldDogdjJcbiAgICAgICAgcG9ydDpcbiAgICAgICAgICBudW1iZXI6IDgwODBcbiAgICAgIHdlaWdodDogMTBcbiIpKSxtZHgoImgyIix7ImlkIjoiNzUtcnVubmluZy1yZXRyaWVzIn0sIjcuNSBSdW5uaW5nIHJldHJpZXMiKSxtZHgoInAiLG51bGwsIklmIG9uZSBvZiB0aGUgcG9kcyBzdG9wIHdvcmtpbmcsIHdlIGNhbiByZXRyeSB0byBhbm90aGVyIHBvZCB3aXRob3V0IHRoZSBjbGllbnQgc2VlaW5nIGFueSBvZiB0aGUgaXNzdWVzLiBUaGUgZXhhbXBsZSBhcHAgaGFzIG9uZSBvZiB0aHJlZSBwb2RzIHJ1bm5pbmcgd2l0aCBhIDVzIGxhdGVuY3kgYnV0IGEgMnMgdGltZW91dCB0byBkZW1vbnN0cmF0ZSB0aGlzLiBJdCBsb29rcyBsaWtlIHRoZSBmb2xsb3dpbmc6IiksbWR4KCJwIixudWxsLG1keCgiaW1nIix7YWx0OiJSZXRyeSBkaWFncmFtIixzcmM6Imh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2dpdGdvb2RjbHViL2ltYWdlL3VwbG9hZC92MTU0MDExMDQ1OS9TY3JlZW5fU2hvdF8yMDE4LTEwLTIxX2F0XzcuMjYuNTBfcG0ucG5nIn0pKSxtZHgoInAiLG51bGwsIldlIGNhbiBzZWUgdGhpcyBiZWluZyBkb25lIHdpdGggIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkhlbGxvIFdvcmxkIHYzIiksIiBzbyB3ZSBjYW4gc2VlIHRoaXMgaW4gYWN0aW9uIHdpdGg6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIiMgaGVsbG93b3JsZC12My55YW1sXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsby12M1xuc3BlYzpcbiAgcmVwbGljYXM6IDJcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogaGVsbG9cbiAgICAgICAgdmVyc2lvbjogdjNcbiAgICBzcGVjOlxuICAgICAgY29udGFpbmVyczpcbiAgICAgIC0gbmFtZTogaGVsbG9cbiAgICAgICAgaW1hZ2U6IHdhcmR2aWFlbmUvaHR0cC1lY2hvXG4gICAgICAgIGVudjpcbiAgICAgICAgLSBuYW1lOiBNWV9QT0RfTkFNRVxuICAgICAgICAgIHZhbHVlRnJvbTpcbiAgICAgICAgICAgIGZpZWxkUmVmOlxuICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVcbiAgICAgICAgLSBuYW1lOiBURVhUXG4gICAgICAgICAgdmFsdWU6IGhlbGxvLCB0aGlzIGlzICQoTVlfUE9EX05BTUUpXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAtIG5hbWU6IGh0dHBcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvLXYzLWxhdGVuY3lcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IGhlbGxvXG4gICAgICAgIHZlcnNpb246IHYzXG4gICAgc3BlYzpcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IGhlbGxvXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogTVlfUE9EX05BTUVcbiAgICAgICAgICB2YWx1ZUZyb206XG4gICAgICAgICAgICBmaWVsZFJlZjpcbiAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lXG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiBoZWxsbywgdGhpcyBpcyAkKE1ZX1BPRF9OQU1FKVxuICAgICAgICAtIG5hbWU6IExBVEVOQ1lcbiAgICAgICAgICB2YWx1ZTogXCI1XCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG9cbnNwZWM6XG4gIGhvc3Q6IGhlbGxvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgc3Vic2V0czpcbiAgLSBuYW1lOiB2MVxuICAgIGxhYmVsczpcbiAgICAgIHZlcnNpb246IHYxXG4gIC0gbmFtZTogdjJcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MlxuICAtIG5hbWU6IHYzXG4gICAgbGFiZWxzOlxuICAgICAgdmVyc2lvbjogdjNcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogVmlydHVhbFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkLXYzXG5zcGVjOlxuICBob3N0czpcbiAgLSBcImhlbGxvLXYzLmV4YW1wbGUuY29tXCJcbiAgZ2F0ZXdheXM6XG4gIC0gaGVsbG93b3JsZC1nYXRld2F5XG4gIGh0dHA6XG4gIC0gcm91dGU6ICMgZGVmYXVsdCByb3V0ZSBmb3IgaGVsbG8uZXhhbXBsZS5jb21cbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHN1YnNldDogdjMgIyBtYXRjaCB2MyBvbmx5XG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4gICAgdGltZW91dDogMTBzXG4gICAgcmV0cmllczpcbiAgICAgIGF0dGVtcHRzOiAyXG4gICAgICBwZXJUcnlUaW1lb3V0OiAyc1xuIikpLG1keCgicCIsbnVsbCwiV2UgY2FuIGFsc28gY2FsbCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwia3ViZWN0bCBnZXQgZGVzdGluYXRpb25ydWxlIiksIiBldGMgdG8gZ2V0IGFuZCBkZXNjcmliZSBwYXJ0aWN1bGFyIHJ1bGVzLiIpLG1keCgiaDIiLHsiaWQiOiI3Ni1tdXR1YWwtdGxzLWV4YW1wbGUifSwiNy42IE11dHVhbCBUTFMgZXhhbXBsZSIpLG1keCgicCIsbnVsbCwiQ3JlYXRlIHBvZHMsIHNlcnZpY2VzLCBkZXN0aW5hdGlvbnJ1bGVzLCB2aXJ0dWFsc2VydmljZXMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9KSwia3ViZWN0bCBjcmVhdGUgLWYgPChpc3Rpb2N0bCBrdWJlLWluamVjdCAtZiBoZWxsb3dvcmxkLXRscy55YW1sKVxua3ViZWN0bCBjcmVhdGUgLWYgaGVsbG93b3JsZC1sZWdhY3kueWFtbFxuIikpLG1keCgicCIsbnVsbCwiVGhlIGdvYWxzIG9mIElzdGlvIHNlY3VyaXR5IGFyZToiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiU2VjdXJpdHkgYnkgZGVmYXVsdDoiKSwiIG5vIGNoYW5nZXMgbmVlZGVkIGZvciBhcHBsaWNhdGlvbiBjb2RlIGFuZCBpbmZyYXN0cnVjdHVyZS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkRlZmVuc2UgaW4gZGVwdGg6IiksIiBpbnRlZ3JhdGUgd2l0aCBleGlzdGluZyBzZWN1cml0eSBzeXN0ZW1zIHRvIHByb3ZpZGUgbXVsdGlwbGUgbGF5ZXJzIG9mIGRlZmVuc2UuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJaZXJvLXRydXN0IG5ldHdvcms6IiksIiBidWlsZCBzZWN1cml0eSBzb2x1dGlvbnMgb24gdW50cnVzdGVkIG5ldHdvcmtzLiIpKSxtZHgoInAiLG51bGwsIlR3byB0eXBlcyBvZiBhdXRoOiIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlRyYW5zcG9ydCBhdXRoZW50aWNhdGlvbiAoc2VydmljZSB0byBzZXJ2aWNlIGF1dGhlbnRpY2F0aW9uKSB1c2luZyBNdXR1YWwgVExTLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJPcmlnaW4gYXV0aGVudGljYXRpb24gKGVuZC11c2VyIGF1dGhlbnRpY2F0aW9uKS4gVmVyaWZ5aW5nIHRoZSBlbmQgdXNlciB1c2luZyBKV1RzLiIpKSxtZHgoInAiLG51bGwsIk11dHVhbCBUTFMgY2FuIGJlIHR1cm5lZCBvbiAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJ3aXRob3V0IGhhdmluZyB0byBjaGFuZ2UgdGhlIGNvZGUgb2YgYXBwbGljYXRpb25zIiksIiAoYmVjYXVzZSBvZiB0aGUgc2lkZWNhciBkZXBsb3ltZW50KS4iKSxtZHgoInAiLG51bGwsIkl0IHByb3ZpZGVzIGVhY2ggc2VydmljZSB3aXRoIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwic3Ryb25nIGlkZW50aXR5IiksIi4iKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBdHRhY2tzIGxpa2UgaW1wZXJzb25hdGlvbiBiZSByZXJvdXRpbmcgRE5TIHJlY29yZHMgd2lsbCBmYWlsLCBiZWNhdXNlIGEgZmFrZSBhcHBsaWNhdGlvbiBjYW4ndCBwcm92ZSBpdHMgaWRlbnRpdHkgdXNpbmcgdGhlIGNlcnRpZmljYXRlIG1lY2hhbmlzbS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNlY3VyZXMgKGVuY3J5cHRzKSIpLCIgc2VydmljZS10by1zZXJ2aWNlIGFuZCBlbmQtdXNlci10by1zZXJ2aWNlIGNvbW11bmljYXRpb24uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlByb3ZpZGVzIGtleSBhbmQgY2VydGlmaWNhdGUgbWFuYWdlbWVudCB0byAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwibWFuYWdlIGdlbmVyYXRpb24sIGRpc3RyaWJ1dGlvbiBhbmQgcm90YXRpb24iKSwiLiIpKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IlRMUyBFeGFtcGxlIEFwcCIsc3JjOiJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9naXRnb29kY2x1Yi9pbWFnZS91cGxvYWQvdjE1NDAxNTM1MDIvU2NyZWVuX1Nob3RfMjAxOC0xMC0yMl9hdF83LjI0LjEwX2FtLnBuZyJ9KSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTGVnYWN5IGFwcGxpY2F0aW9ucyB3aXRoIG5vdCBoYXZlIGEgc2lkZWNhci4gIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk9uZSBzZXJ2aWNlIHdpbGwgZ28gTFRSLCBhbmQgdGhlIG90aGVyIFJUTC4iKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksImFwaVZlcnNpb246IHYxXG5raW5kOiBOYW1lc3BhY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBuczFcbi0tLVxuYXBpVmVyc2lvbjogdjFcbmtpbmQ6IE5hbWVzcGFjZVxubWV0YWRhdGE6XG4gIG5hbWU6IG5zMlxuLS0tXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsby10bHNcbiAgbmFtZXNwYWNlOiBuczFcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IGhlbGxvXG4gICAgICAgIHZlcnNpb246IHYxLXRsc1xuICAgIHNwZWM6XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiBoZWxsb1xuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogaGVsbG9cbiAgICAgICAgLSBuYW1lOiBORVhUXG4gICAgICAgICAgdmFsdWU6IFwid29ybGQubnMyOjgwODBcIlxuICAgICAgICBwb3J0czpcbiAgICAgICAgLSBuYW1lOiBodHRwXG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODA4MFxuLS0tXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiB3b3JsZC10bHNcbiAgbmFtZXNwYWNlOiBuczJcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IHdvcmxkXG4gICAgICAgIHZlcnNpb246IHYxLXRsc1xuICAgIHNwZWM6XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiBoZWxsb1xuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogd29ybGRcbiAgICAgICAgLSBuYW1lOiBORVhUXG4gICAgICAgICAgdmFsdWU6IFwiZW5kLmxlZ2FjeTo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExXG5raW5kOiBEZXBsb3ltZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGQtcmV2ZXJzZS10bHNcbiAgbmFtZXNwYWNlOiBuczJcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IHdvcmxkLXJldmVyc2VcbiAgICAgICAgdmVyc2lvbjogdjEtdGxzXG4gICAgc3BlYzpcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IGhlbGxvXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiB3b3JsZFxuICAgICAgICAtIG5hbWU6IE5FWFRcbiAgICAgICAgICB2YWx1ZTogXCJlbmQtcmV2ZXJzZS5uczE6ODA4MFwiXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAtIG5hbWU6IGh0dHBcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IGVuZC1yZXZlcnNlLXRsc1xuICBuYW1lc3BhY2U6IG5zMVxuc3BlYzpcbiAgcmVwbGljYXM6IDFcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogZW5kLXJldmVyc2VcbiAgICAgICAgdmVyc2lvbjogdjEtdGxzXG4gICAgc3BlYzpcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IGhlbGxvXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiBcIiEhIVwiXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAtIG5hbWU6IGh0dHBcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG9cbiAgbmFtZXNwYWNlOiBuczFcbiAgbGFiZWxzOlxuICAgIGFwcDogaGVsbG9cbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGFwcDogaGVsbG9cbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGRcbiAgbmFtZXNwYWNlOiBuczJcbiAgbGFiZWxzOlxuICAgIGFwcDogd29ybGRcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGFwcDogd29ybGRcbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGQtcmV2ZXJzZVxuICBuYW1lc3BhY2U6IG5zMlxuICBsYWJlbHM6XG4gICAgYXBwOiB3b3JsZC1yZXZlcnNlXG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBhcHA6IHdvcmxkLXJldmVyc2VcbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogZW5kLXJldmVyc2VcbiAgbmFtZXNwYWNlOiBuczFcbiAgbGFiZWxzOlxuICAgIGFwcDogZW5kLXJldmVyc2VcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGFwcDogZW5kLXJldmVyc2VcbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IEdhdGV3YXlcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkLWdhdGV3YXlcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGlzdGlvOiBpbmdyZXNzZ2F0ZXdheSAjIHVzZSBpc3RpbyBkZWZhdWx0IGNvbnRyb2xsZXJcbiAgc2VydmVyczpcbiAgLSBwb3J0OlxuICAgICAgbnVtYmVyOiA4MFxuICAgICAgbmFtZTogaHR0cFxuICAgICAgcHJvdG9jb2w6IEhUVFBcbiAgICBob3N0czpcbiAgICAtIFwiKlwiXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IERlc3RpbmF0aW9uUnVsZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvXG5zcGVjOlxuICBob3N0OiBoZWxsby5uczEuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgIyB1bmNvbW1lbnQgdG8gZW5hYmxlIG11dHVhbCBUTFNcbiAgI3RyYWZmaWNQb2xpY3k6XG4gICMgIHRsczpcbiAgIyAgICBtb2RlOiBJU1RJT19NVVRVQUxcbiAgc3Vic2V0czpcbiAgLSBuYW1lOiB2MS10bHNcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MS10bHNcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG8tcmV2ZXJzZVxuc3BlYzpcbiAgaG9zdDogaGVsbG8tcmV2ZXJzZS5sZWdhY3kuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgIyB1bmNvbW1lbnQgdG8gZW5hYmxlIG11dHVhbCBUTFNcbiAgI3RyYWZmaWNQb2xpY3k6XG4gICMgIHRsczpcbiAgIyAgICBtb2RlOiBJU1RJT19NVVRVQUxcbiAgc3Vic2V0czpcbiAgLSBuYW1lOiB2MS10bHNcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MS10bHNcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogVmlydHVhbFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkLXRsc1xuc3BlYzpcbiAgaG9zdHM6XG4gIC0gXCJoZWxsby10bHMuZXhhbXBsZS5jb21cIlxuICBnYXRld2F5czpcbiAgLSBoZWxsb3dvcmxkLWdhdGV3YXlcbiAgaHR0cDpcbiAgLSByb3V0ZTpcbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5uczEuc3ZjLmNsdXN0ZXIubG9jYWxcbiAgICAgICAgc3Vic2V0OiB2MS10bHMgIyBtYXRjaCB2MyBvbmx5XG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IFZpcnR1YWxTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG93b3JsZC10bHMtcmV2ZXJzZVxuc3BlYzpcbiAgaG9zdHM6XG4gIC0gXCJoZWxsby10bHMtcmV2ZXJzZS5leGFtcGxlLmNvbVwiXG4gIGdhdGV3YXlzOlxuICAtIGhlbGxvd29ybGQtZ2F0ZXdheVxuICBodHRwOlxuICAtIHJvdXRlOlxuICAgIC0gZGVzdGluYXRpb246XG4gICAgICAgIGhvc3Q6IGhlbGxvLXJldmVyc2UubGVnYWN5LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHN1YnNldDogdjEtdGxzXG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4iKSksbWR4KCJwIixudWxsLCJBcyBmb3IgdGhlIG1pc3NpbmcgbGVnYWN5IHNlcnZpY2VzLCB0aGV5IGNhbiBiZSBmb3VuZCBpbiB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImhlbGxvd29ybGQtbGVnYWN5IiksIiBmaWxlOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJhcGlWZXJzaW9uOiB2MVxua2luZDogTmFtZXNwYWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogbGVnYWN5XG4tLS1cbmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IGVuZC10bHNcbiAgbmFtZXNwYWNlOiBsZWdhY3lcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IGVuZFxuICAgICAgICB2ZXJzaW9uOiB2MS10bHNcbiAgICBzcGVjOlxuICAgICAgY29udGFpbmVyczpcbiAgICAgIC0gbmFtZTogaGVsbG9cbiAgICAgICAgaW1hZ2U6IHdhcmR2aWFlbmUvaHR0cC1lY2hvXG4gICAgICAgIGVudjpcbiAgICAgICAgLSBuYW1lOiBURVhUXG4gICAgICAgICAgdmFsdWU6IFwiISEhXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExXG5raW5kOiBEZXBsb3ltZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG8tcmV2ZXJzZS10bHNcbiAgbmFtZXNwYWNlOiBsZWdhY3lcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IGhlbGxvLXJldmVyc2VcbiAgICAgICAgdmVyc2lvbjogdjEtdGxzXG4gICAgc3BlYzpcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IGhlbGxvXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiBoZWxsb1xuICAgICAgICAtIG5hbWU6IE5FWFRcbiAgICAgICAgICB2YWx1ZTogXCJ3b3JsZC1yZXZlcnNlLm5zMjo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogdjFcbmtpbmQ6IFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBlbmRcbiAgbmFtZXNwYWNlOiBsZWdhY3lcbiAgbGFiZWxzOlxuICAgIGFwcDogZW5kXG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBhcHA6IGVuZFxuICBwb3J0czpcbiAgLSBuYW1lOiBodHRwXG4gICAgcG9ydDogODA4MFxuICAgIHRhcmdldFBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogdjFcbmtpbmQ6IFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsby1yZXZlcnNlXG4gIG5hbWVzcGFjZTogbGVnYWN5XG4gIGxhYmVsczpcbiAgICBhcHA6IGhlbGxvLXJldmVyc2VcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGFwcDogaGVsbG8tcmV2ZXJzZVxuICBwb3J0czpcbiAgLSBuYW1lOiBodHRwXG4gICAgcG9ydDogODA4MFxuICAgIHRhcmdldFBvcnQ6IDgwODBcbiIpKSxtZHgoInAiLG51bGwsIkJvdGggdGhlc2UgZmlsZXMgY2FuIGFwcGxpZWQgYnkgcnVubmluZyB0aGUgZm9sbG93aW5nOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCIkIGt1YmVjdGwgYXBwbHkgLWYgPChpc3Rpb2N0bCBrdWJlLWluamVjdCAtZiBoZWxsb3dvcmxkLXRscy55YW1sKVxuJCBrdWJlY3RsIGFwcGx5IC1mIGhlbGxvd29ybGQtbGVnYWN5LnlhbWxcbiQga3ViZXRsIGdldCBzdmMgLW8gd2lkZSAtbiBpc3Rpby1zeXN0ZW0gIyBnZXQgc2VydmljZXMgZnJvbSBpc3Rpby1zeXN0ZW0gc2VydmljZXNcbiMgQWZ0ZXIgZ2V0dGluZyB0aGUgbG9hZCBiYWxhbmNlciwgeW91IGNhbiB0aGVuIGN1cmwgdGhlIEVMQiBwYXNzaW5nIHRoZSBIb3N0IGhlYWRlclxuIikpLG1keCgicCIsbnVsbCwiTm93IHdlIG5lZWQgdG8gIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiZW5hYmxlIFRMUyBhdXRoZXRpY2F0aW9uLiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiIyBoZWxsb3dvcmxkLXJiYWMtZW5hYmxlLnlhbWxcbmFwaVZlcnNpb246IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExXG5raW5kOiBcIk1lc2hQb2xpY3lcIlxubWV0YWRhdGE6XG4gIG5hbWU6IFwiZGVmYXVsdFwiXG5zcGVjOlxuICBwZWVyczpcbiAgLSBtdGxzOiB7fVxuLS0tXG4jIGVuc3VyZXMgbXRscyBpcyBwdXNoIHRvIHNpZGUgY2Fyc1xuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiAgbmFtZTogXCJlbmFibGUtbXRsc1wiXG4gIG5hbWVzcGFjZTogXCJkZWZhdWx0XCIgIyBldmVuIHRob3VnaCB3ZSBzcGVjaWZ5IGEgbmFtZXNwYWNlLCB0aGlzIHJ1bGUgYXBwbGllcyB0byBhbGwgbmFtZXNwYWNlc1xuc3BlYzpcbiAgaG9zdDogXCIqLmxvY2FsXCJcbiAgdHJhZmZpY1BvbGljeTpcbiAgICB0bHM6XG4gICAgICBtb2RlOiBJU1RJT19NVVRVQUxcbi0tLVxuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogRGVzdGluYXRpb25SdWxlXG5tZXRhZGF0YTpcbiBuYW1lOiBcImFwaS1zZXJ2ZXJcIlxuc3BlYzpcbiBob3N0OiBcImt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbFwiXG4gdHJhZmZpY1BvbGljeTpcbiAgIHRsczpcbiAgICAgbW9kZTogRElTQUJMRVxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuICBuYW1lOiBcImxlZ2FjeVwiXG5zcGVjOlxuICBob3N0OiBcImVuZC5sZWdhY3kuc3ZjLmNsdXN0ZXIubG9jYWxcIlxuICB0cmFmZmljUG9saWN5OlxuICAgIHRsczpcbiAgICAgIG1vZGU6IERJU0FCTEVcbiIpKSxtZHgoInAiLG51bGwsIkFwcGx5IHRoaXMgZmlsZSB0byBlbmFibGUgbXV0dWFsIFRMUyB0aGF0IHdvcmtzIG9uZSB3YXkgYnV0IG5vdCB0aGUgb3RoZXIgKGFzIGxpa2UgaW4gdGhlIGRpYWdyYW0pLiBIb3dldmVyLCBpbiB0aGUgYWJvdmUgeWFtbCBmaWxlcyB3ZSBkaWQgbm93IGVuYWJsZSB0aGUgdHJhZmZpYyBwb2xpY3ksIHNvIHlvdSBuZWVkIHRvIHVwZGF0ZSB0aGF0IGFuZCBhcHBseSB0aGUgdXBkYXRlZCBmaWxlcyBmb3IgYWxsIG9mIHRoaXMgdG8gd29yay4iKSxtZHgoImgyIix7ImlkIjoiNzctZW5kLXVzZXItYXV0aGVudGljYXRpb24ifSwiNy43IEVuZC11c2VyIGF1dGhlbnRpY2F0aW9uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSksImt1YmVjdGwgY3JlYXRlIC1mIDwoaXN0aW9jdGwga3ViZS1pbmplY3QgLWYgaGVsbG93b3JsZC1qd3QueWFtbClcbmt1YmVjdGwgY3JlYXRlIC1mIGhlbGxvd29ybGQtand0LWVuYWJsZS55YW1sXG4iKSksbWR4KCJwIixudWxsLCJJZiB3ZSB3YW50IHRvIGFjY2VzcyBhIFBvZCwgd2UgbmVlZCB0byB1c2UgYSBnYXRld2F5LiAiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiIyBoZWxsb3dvcmxkLWd3LnlhbWxcbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IEdhdGV3YXlcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkLWdhdGV3YXlcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGlzdGlvOiBpbmdyZXNzZ2F0ZXdheSAjIHVzZSBpc3RpbyBkZWZhdWx0IGNvbnRyb2xsZXJcbiAgc2VydmVyczpcbiAgLSBwb3J0OlxuICAgICAgbnVtYmVyOiA4MFxuICAgICAgbmFtZTogaHR0cFxuICAgICAgcHJvdG9jb2w6IEhUVFBcbiAgICBob3N0czpcbiAgICAtIFwiKlwiXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IFZpcnR1YWxTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG93b3JsZFxuc3BlYzpcbiAgaG9zdHM6XG4gIC0gXCIqXCJcbiAgZ2F0ZXdheXM6XG4gIC0gaGVsbG93b3JsZC1nYXRld2F5XG4gIGh0dHA6XG4gIC0gbWF0Y2g6XG4gICAgLSB1cmk6XG4gICAgICAgIHByZWZpeDogL2hlbGxvXG4gICAgcm91dGU6XG4gICAgLSBkZXN0aW5hdGlvbjpcbiAgICAgICAgaG9zdDogaGVsbG8uZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbFxuICAgICAgICBwb3J0OlxuICAgICAgICAgIG51bWJlcjogODA4MFxuIikpLG1keCgicCIsbnVsbCwiSWYgeW91IHdhbnQgYSBzZXJ2aWNlIHdpdGhpbiBJc3RpbywgeW91IHdpbGwgYWx3YXlzIG5lZWQgdG8gZGVmaW5lIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiVmlydHVhbFNlcnZpY2UiKSwiLiBXZSBkb24ndCBuZWVkIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiVmlydHVhbFNlcnZpY2UiKSwiIGZvciBzZXJ2aWNlcyB0aGF0IGFyZSBhY2Nlc3NlZCBieSB0aGUgY2xpZW50LiIpLG1keCgiaDIiLHsiaWQiOiI3OC1yYmFjLXdpdGgtaXN0aW8tYW5kLW10bHMifSwiNy44IFJCQUMgd2l0aCBJc3RpbyBhbmQgTVRMUyIpLG1keCgicCIsbnVsbCwiTm93IHRoYXQgd2UgaGF2ZSBNVExTLCB3ZSBoYXZlIHN0cm9uZyBpZGVudGl0ZXMuIiksbWR4KCJwIixudWxsLCJCYXNlZCBvbiB0aG9zZSBpZGVudGl0aWVzLCB3ZSBjYW4gc3RhcnQgZG9pbmcgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiUm9sZSBCYXNlZCBBY2Nlc3MgQ29udHJvbCAoUkJBQykiKSwiLiIpLG1keCgicCIsbnVsbCwiUkJBQyBhbGxvd3MgdXMgdG8gbGltaXQgYWNjZXNzICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sImJldHdlZW4gb3VyIHNlcnZpY2VzIiksIiBhbmQgZnJvbSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJlbmQtdXNlciB0byBzZXJ2aWNlcyIpLCIuIiksbWR4KCJwIixudWxsLCJJc3RpbyBpcyBhYmxlIHRvIHZlcmlmeSB0aGUgaWRlbnRpdHkgb2YgYSBzZXJ2aWNlIGJ5ICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sImNoZWNraW5nIHRoZSBpZGVudGl0eSBvZiB0aGUgeC41MDkgY2VydGlmaWNhdGUgKHdoaWNoIGNvbWVzIHdpdGggZW5hYmxlZCBtdXR1YWwgVExTKSIpLCIuIEV4YW1wbGU6IHdpdGggUkJBQywgc2VydmljZSBBIG1pZ2h0IGJlIGFibGUgdG8gYmUgY29udGFjdGVkIGJ5IEIsIGJ1dCBub3QgYnkgQy4iKSxtZHgoInAiLG51bGwsIklzdGlvIGlzIHVzaW5nIFNQSUZGRSBzdGFuZGFyZCAoYW5vdGhlciBDTkZDIHByb2plY3QpLiIpLG1keCgicCIsbnVsbCwiUkJBQyBpbiBpc3RpbzoiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJDYW4gcHJvdmlkZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwic2VydmljZS10by1zZXJ2aWNlIiksIiBhbmQgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sImVuZC11c2VyLXRvLXNlcnZpY2UiKSwiIGF1dGguIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlN1cHBvcnRzICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJjb25kaXRpb25zIiksIiBhbmQgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sInJvbGUtYmluZGluZyIpLCIuIixtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiWW91IGNhbiBiaW5kIHRvICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlQWNjb3VudHMiKSwiICh3aGljaCBjYW4gYmUgbGlua2VkIHRvIHBvZHMpLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJFbmQtdXNlci10by1zZXJ2aWNlIGNhbiBmb3IgZXhhbXBsZSBsZXQgeW91IGNyZWF0ZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiY29uZGl0aW9uIG9uIGJlaW5nIGF1dGhlbnRpY2F0ZWQgdXNpbmcgSldUIiksIi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiSXQgaGFzIGhpZ2ggcGVyZm9ybWFuY2UuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk5vdCBlbmFibGVkIGJ5IGRlZmF1bHQuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIldlIGNhbiBlbmFibGUgaXQgZ2xvYmFsbHkgb3Igb24gYSBuYW1lc3BhY2UuIikpKSksbWR4KCJwIixudWxsLCJFeGFtcGxlIGZvciBpbmNsdWRpbmcgaXQgb24gdGhlIFwiZGVmYXVsdFwiIG5hbWVzcGFjZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiYXBpVmVyc2lvbjogXCJyYmFjLmlzdGlvLmlvL3YxYWxwaGExXCJcbmtpbmQ6IFJiYWNDb25maWdcbm1ldGFkYXRhOlxuICBuYW1lOiBkZWZhdWx0XG5zcGVjOlxuICBtb2RlOiAnT05fV0lUSF9JTkNMVVNJT04nXG4gIGluY2x1c2lvbjpcbiAgICBuYW1lc3BhY2VzOiBbXCJkZWZhdWx0XCJdXG4tLS1cbmFwaVZlcnNpb246IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExXG5raW5kOiBcIk1lc2hQb2xpY3lcIlxubWV0YWRhdGE6XG4gIG5hbWU6IFwiZGVmYXVsdFwiXG5zcGVjOlxuICBwZWVyczpcbiAgLSBtdGxzOiB7fVxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuICBuYW1lOiBcImVuYWJsZS1tdGxzXCJcbiAgbmFtZXNwYWNlOiBcImRlZmF1bHRcIiAjIGV2ZW4gdGhvdWdoIHdlIHNwZWNpZnkgYSBuYW1lc3BhY2UsIHRoaXMgcnVsZSBhcHBsaWVzIHRvIGFsbCBuYW1lc3BhY2VzXG5zcGVjOlxuICBob3N0OiBcIioubG9jYWxcIlxuICB0cmFmZmljUG9saWN5OlxuICAgIHRsczpcbiAgICAgIG1vZGU6IElTVElPX01VVFVBTFxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuIG5hbWU6IFwiYXBpLXNlcnZlclwiXG5zcGVjOlxuIGhvc3Q6IFwia3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXCJcbiB0cmFmZmljUG9saWN5OlxuICAgdGxzOlxuICAgICBtb2RlOiBESVNBQkxFXG4iKSksbWR4KCJwIixudWxsLCJXZSBjYW4gdGhlbiBjcmVhdGUgYSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTZXJ2aWNlUm9sZSIpLCIgc3BlY2lmeWluZyB0aGUgcnVsZXMgYW5kIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiU2VydmljZVJvbGVCaW5kaW5nIiksIiB0byBsaW5rIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiU2VydmljZVJvbGUiKSwiIHRvIGEgc3ViamVjdCAoZXhhbXBsZSBLdWJlcm5ldGVzICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlNlcnZpY2VBY2NvdW50IiksIikuIiksbWR4KCJwIixudWxsLCJFeGFtcGxlIG9mIGhvdyB3ZSB3YW50IHRoZSBkZW1vIHRvIGxvb2sgd2hlbiBpdCBjb21lcyB0byB3aGF0IGl0IGNhbiBjb250YWN0OiIpLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiQ29udGFjdCBydWxlcyIsc3JjOiJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9naXRnb29kY2x1Yi9pbWFnZS91cGxvYWQvdjE1NDAxNTU2ODMvU2NyZWVuX1Nob3RfMjAxOC0xMC0yMl9hdF84LjAwLjQ3X2FtLnBuZyJ9KSksbWR4KCJwIixudWxsLCJUaGUgb3JkZXIgZm9yIHRoZSBmb2xsb3dpbmcgaXM6IiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ3JlYXRlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlUm9sZXMiKSwiIHRoYXQgb25seSBlbmFibGUgY2VydGFpbiBtZXRob2RzIGFuZCBzZXJ2aWNlcyB3aXRoIHNwZWNpZmljIGFjY2Vzcy4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiRW5hYmxlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlUm9sZUJpbmRpbmdzIiksIiB0byBiaW5kIHRoYXQgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlUm9sZXMiKSwiIHRvIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sInN1YmplY3QiKSwiIChvciAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiaW5ncmVzcyBjb250cm9sbGVyIG5hbWUiKSwiIGluIHRoZSBmaXJzdCBjYXNlKS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ3JlYXRlIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiU2VydmljZUFjY291bnRzIiksIiB0aGF0IGhhdmUgdGhlIGNvcnJlY3QgbWV0YWRhdGEgcmVxdWlyZWQgZm9yIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiU2VydmljZVJvbGVCaW5kaW5ncyIpLCIuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkNyZWF0ZSB0aGUgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkRlcGxveW1lbnRzIiksIiB0aGF0IGhhdmUgdGhlIGFmZmlsaWF0ZWQgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNlcnZpY2VBY2NvdW50IiksIiByZXF1aXJlZC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ3JlYXRlIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNlcnZpY2UiKSwiIGZvciB0aGF0ICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJEZXBsb3ltZW50IiksIi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ3JlYXRlIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiR2F0ZXdheSIpLCIgdGhhdCB1c2VzIHRoZSBkZWZhdWx0ICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJJc3RpbyBHYXRld2F5IiksIiB0byBhY2Nlc3MgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlcyIpLCIuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkNyZWF0ZSB0aGUgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlZpcnR1YWxTZXJ2aWNlIiksIiB0aGF0IGdpdmVzIHVzIGFjY2VzcyB0byB0aGUgaGVsbG8gd29ybGQgYXBwIHRocm91Z2ggdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJHYXRld2F5IiksIiBjb25uZWN0ZWQgdG8gdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJTZXJ2aWNlIiksIiB3aGljaCBzaXRzIHdpdGhpbiB0aGUgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNlcnZpY2VNZXNoIiksIiBmcm9tIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiSW5ncmVzc0NvbnRyb2xsZXIiKSwiLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJDcmVhdGUgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJEZXN0aW5hdGlvblJ1bGUiKSwiIHRoYXQgYWxsb3dzIGFsbG93cyBhY2Nlc3MgdG8gdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJWaXJ0dWFsU2VydmljZSIpLCIgdXNpbmcgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIk1UTFMiKSwiIGZyb20gdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJJbmdyZXNzQ29udHJvbGxlciIpLCIgd2hpY2ggaXMgYSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiUmV2ZXJzZSBQcm94eSBpbnRlcm5hbCBsb2FkIGJhbGFuY2VyIiksIiBhY2Nlc3NlZCBmcm9tIHRoZSBleHRlcm5hbCAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiQVdTIExvYWRCYWxhbmNlciIpLCIgdGllZCB0byB0aGUgYWNjZXNzaWJsZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiRE5TIFJlY29yZHMiKSwiLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJZb3UgY2FuIG5vdyBhY2Nlc3MgdGhlIG1pY3Jvc2VydmljZSBmcm9tIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiQVdTIExvYWRCYWxhbmNlciBSb3V0ZTUzIGFsaWFzIiksIiBwYXNzaW5nIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiaW50ZXJuYWwgbmFtZXNwYWNlIGRvbWFpbiIpLCIgYXMgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJob3N0IGhlYWRlciIpLCIuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCIjICEgaGVsbG93b3JsZC1yYmFjLnlhbWwgZmlsZVxuYXBpVmVyc2lvbjogXCJyYmFjLmlzdGlvLmlvL3YxYWxwaGExXCJcbmtpbmQ6IFNlcnZpY2VSb2xlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG8tdmlld2VyXG4gIG5hbWVzcGFjZTogZGVmYXVsdFxuc3BlYzpcbiAgcnVsZXM6XG4gIC0gc2VydmljZXM6IFtcImhlbGxvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcIl1cbiAgICBtZXRob2RzOiBbXCJHRVRcIiwgXCJIRUFEXCJdXG4tLS1cbmFwaVZlcnNpb246IFwicmJhYy5pc3Rpby5pby92MWFscGhhMVwiXG5raW5kOiBTZXJ2aWNlUm9sZVxubWV0YWRhdGE6XG4gIG5hbWU6IHdvcmxkLXZpZXdlclxuICBuYW1lc3BhY2U6IGRlZmF1bHRcbnNwZWM6XG4gIHJ1bGVzOlxuICAtIHNlcnZpY2VzOiBbXCJ3b3JsZC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXCJdXG4gICAgbWV0aG9kczogW1wiR0VUXCIsIFwiSEVBRFwiXVxuLS0tXG5hcGlWZXJzaW9uOiBcInJiYWMuaXN0aW8uaW8vdjFhbHBoYTFcIlxua2luZDogU2VydmljZVJvbGVcbm1ldGFkYXRhOlxuICBuYW1lOiB3b3JsZC0yLXZpZXdlclxuICBuYW1lc3BhY2U6IGRlZmF1bHRcbnNwZWM6XG4gIHJ1bGVzOlxuICAtIHNlcnZpY2VzOiBbXCJ3b3JsZC0yLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWxcIl1cbiAgICBtZXRob2RzOiBbXCJHRVRcIiwgXCJIRUFEXCJdXG4tLS1cbmFwaVZlcnNpb246IFwicmJhYy5pc3Rpby5pby92MWFscGhhMVwiXG5raW5kOiBTZXJ2aWNlUm9sZUJpbmRpbmdcbm1ldGFkYXRhOlxuICBuYW1lOiBpc3Rpby1pbmdyZXNzLWJpbmRpbmdcbiAgbmFtZXNwYWNlOiBkZWZhdWx0XG5zcGVjOlxuICBzdWJqZWN0czpcbiAgLSBwcm9wZXJ0aWVzOlxuICAgICAgc291cmNlLm5hbWVzcGFjZTogXCJpc3Rpby1zeXN0ZW1cIlxuICByb2xlUmVmOlxuICAgIGtpbmQ6IFNlcnZpY2VSb2xlXG4gICAgbmFtZTogXCJoZWxsby12aWV3ZXJcIlxuLS0tXG5hcGlWZXJzaW9uOiBcInJiYWMuaXN0aW8uaW8vdjFhbHBoYTFcIlxua2luZDogU2VydmljZVJvbGVCaW5kaW5nXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG8tdXNlci1iaW5kaW5nXG4gIG5hbWVzcGFjZTogZGVmYXVsdFxuc3BlYzpcbiAgc3ViamVjdHM6XG4gIC0gdXNlcjogXCJjbHVzdGVyLmxvY2FsL25zL2RlZmF1bHQvc2EvaGVsbG9cIlxuICByb2xlUmVmOlxuICAgIGtpbmQ6IFNlcnZpY2VSb2xlXG4gICAgbmFtZTogXCJ3b3JsZC12aWV3ZXJcIlxuLS0tXG5hcGlWZXJzaW9uOiBcInJiYWMuaXN0aW8uaW8vdjFhbHBoYTFcIlxua2luZDogU2VydmljZVJvbGVCaW5kaW5nXG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGQtdXNlci1iaW5kaW5nXG4gIG5hbWVzcGFjZTogZGVmYXVsdFxuc3BlYzpcbiAgc3ViamVjdHM6XG4gIC0gdXNlcjogXCJjbHVzdGVyLmxvY2FsL25zL2RlZmF1bHQvc2Evd29ybGRcIlxuICByb2xlUmVmOlxuICAgIGtpbmQ6IFNlcnZpY2VSb2xlXG4gICAgbmFtZTogXCJ3b3JsZC0yLXZpZXdlclwiXG4tLS1cbiMjI1xuIyMjIEt1YmVybmV0ZXMgU2VydmljZSBhY2NvdW50c1xuIyMjXG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZUFjY291bnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb1xuLS0tXG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZUFjY291bnRcbm1ldGFkYXRhOlxuICBuYW1lOiB3b3JsZFxuLS0tXG4jIyNcbiMjIyBoZWxsb3dvcmxkLnlhbWwgZGVwbG95bWVudHMsIGluY2x1ZGluZyBhIHNlcnZpY2VhY2NvdW50XG4jIyMgZm9yIHRoZSBoZWxsbyBkZXBsb3ltZW50IGFuZCB0aGUgd29ybGQgZGVwbG95bWVudFxuIyMjXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb1xuc3BlYzpcbiAgcmVwbGljYXM6IDFcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogaGVsbG9cbiAgICAgICAgdmVyc2lvbjogdjFcbiAgICBzcGVjOlxuICAgICAgc2VydmljZUFjY291bnROYW1lOiBoZWxsbyAgIyBzZXJ2aWNlIGFjY291bnRcbiAgICAgIGNvbnRhaW5lcnM6XG4gICAgICAtIG5hbWU6IGhlbGxvXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiBoZWxsb1xuICAgICAgICAtIG5hbWU6IE5FWFRcbiAgICAgICAgICB2YWx1ZTogXCJ3b3JsZDo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogdjFcbmtpbmQ6IFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb1xuICBsYWJlbHM6XG4gICAgYXBwOiBoZWxsb1xuc3BlYzpcbiAgc2VsZWN0b3I6XG4gICAgYXBwOiBoZWxsb1xuICBwb3J0czpcbiAgLSBuYW1lOiBodHRwXG4gICAgcG9ydDogODA4MFxuICAgIHRhcmdldFBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExXG5raW5kOiBEZXBsb3ltZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGRcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IHdvcmxkXG4gICAgICAgIHZlcnNpb246IHYxXG4gICAgc3BlYzpcbiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogd29ybGQgICMgc2VydmljZSBhY2NvdW50XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiB3b3JsZFxuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogd29ybGRcbiAgICAgICAgLSBuYW1lOiBORVhUXG4gICAgICAgICAgdmFsdWU6IFwid29ybGQtMjo4MDgwXCJcbiAgICAgICAgcG9ydHM6XG4gICAgICAgIC0gbmFtZTogaHR0cFxuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogdjFcbmtpbmQ6IFNlcnZpY2Vcbm1ldGFkYXRhOlxuICBuYW1lOiB3b3JsZFxuICBsYWJlbHM6XG4gICAgYXBwOiB3b3JsZFxuc3BlYzpcbiAgc2VsZWN0b3I6XG4gICAgYXBwOiB3b3JsZFxuICBwb3J0czpcbiAgLSBuYW1lOiBodHRwXG4gICAgcG9ydDogODA4MFxuICAgIHRhcmdldFBvcnQ6IDgwODBcbi0tLVxuYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExXG5raW5kOiBEZXBsb3ltZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGQtMlxuc3BlYzpcbiAgcmVwbGljYXM6IDFcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogd29ybGQtMlxuICAgICAgICB2ZXJzaW9uOiB2MVxuICAgIHNwZWM6XG4gICAgICBjb250YWluZXJzOlxuICAgICAgLSBuYW1lOiB3b3JsZC0yXG4gICAgICAgIGltYWdlOiB3YXJkdmlhZW5lL2h0dHAtZWNob1xuICAgICAgICBlbnY6XG4gICAgICAgIC0gbmFtZTogVEVYVFxuICAgICAgICAgIHZhbHVlOiBcIiEhIVwiXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAtIG5hbWU6IGh0dHBcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IHYxXG5raW5kOiBTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogd29ybGQtMlxuICBsYWJlbHM6XG4gICAgYXBwOiB3b3JsZC0yXG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBhcHA6IHdvcmxkLTJcbiAgcG9ydHM6XG4gIC0gbmFtZTogaHR0cFxuICAgIHBvcnQ6IDgwODBcbiAgICB0YXJnZXRQb3J0OiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IEdhdGV3YXlcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb3dvcmxkLWdhdGV3YXlcbnNwZWM6XG4gIHNlbGVjdG9yOlxuICAgIGlzdGlvOiBpbmdyZXNzZ2F0ZXdheSAjIHVzZSBpc3RpbyBkZWZhdWx0IGNvbnRyb2xsZXJcbiAgc2VydmVyczpcbiAgLSBwb3J0OlxuICAgICAgbnVtYmVyOiA4MFxuICAgICAgbmFtZTogaHR0cFxuICAgICAgcHJvdG9jb2w6IEhUVFBcbiAgICBob3N0czpcbiAgICAtIFwiKlwiXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IFZpcnR1YWxTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG93b3JsZFxuc3BlYzpcbiAgaG9zdHM6XG4gIC0gXCJoZWxsby1yYmFjLmV4YW1wbGUuY29tXCJcbiAgZ2F0ZXdheXM6XG4gIC0gaGVsbG93b3JsZC1nYXRld2F5XG4gIGh0dHA6XG4gIC0gcm91dGU6XG4gICAgLSBkZXN0aW5hdGlvbjpcbiAgICAgICAgaG9zdDogaGVsbG8uZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbFxuICAgICAgICBzdWJzZXQ6IHYxXG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IERlc3RpbmF0aW9uUnVsZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvXG5zcGVjOlxuICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICMgdW5jb21tZW50IHRvIGVuYWJsZSBtdXR1YWwgVExTXG4gIHRyYWZmaWNQb2xpY3k6XG4gICAgdGxzOlxuICAgICAgbW9kZTogSVNUSU9fTVVUVUFMXG4gIHN1YnNldHM6XG4gIC0gbmFtZTogdjFcbiAgICBsYWJlbHM6XG4gICAgICB2ZXJzaW9uOiB2MVxuIikpLG1keCgicCIsbnVsbCwiVGhpcyBhZ2FpbiByZXF1aXJlcyB0aGUgcmJhYyBwcmVxdWlzaXRlOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCIjIGhlbGxvd29ybGQtcmJhYy1lbmFibGUueWFtbFxuYXBpVmVyc2lvbjogYXV0aGVudGljYXRpb24uaXN0aW8uaW8vdjFhbHBoYTFcbmtpbmQ6IFwiTWVzaFBvbGljeVwiXG5tZXRhZGF0YTpcbiAgbmFtZTogXCJkZWZhdWx0XCJcbnNwZWM6XG4gIHBlZXJzOlxuICAtIG10bHM6IHt9XG4tLS1cbiMgZW5zdXJlcyBtdGxzIGlzIHB1c2ggdG8gc2lkZSBjYXJzXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuICBuYW1lOiBcImVuYWJsZS1tdGxzXCJcbiAgbmFtZXNwYWNlOiBcImRlZmF1bHRcIiAjIGV2ZW4gdGhvdWdoIHdlIHNwZWNpZnkgYSBuYW1lc3BhY2UsIHRoaXMgcnVsZSBhcHBsaWVzIHRvIGFsbCBuYW1lc3BhY2VzXG5zcGVjOlxuICBob3N0OiBcIioubG9jYWxcIlxuICB0cmFmZmljUG9saWN5OlxuICAgIHRsczpcbiAgICAgIG1vZGU6IElTVElPX01VVFVBTFxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuIG5hbWU6IFwiYXBpLXNlcnZlclwiXG5zcGVjOlxuIGhvc3Q6IFwia3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXCJcbiB0cmFmZmljUG9saWN5OlxuICAgdGxzOlxuICAgICBtb2RlOiBESVNBQkxFXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IERlc3RpbmF0aW9uUnVsZVxubWV0YWRhdGE6XG4gIG5hbWU6IFwibGVnYWN5XCJcbnNwZWM6XG4gIGhvc3Q6IFwiZW5kLmxlZ2FjeS5zdmMuY2x1c3Rlci5sb2NhbFwiXG4gIHRyYWZmaWNQb2xpY3k6XG4gICAgdGxzOlxuICAgICAgbW9kZTogRElTQUJMRVxuIikpLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiQWZ0ZXIgYXBwbHlpbmcgdGhlIGZpbGVzIHRvIElzdGlvIixzcmM6Imh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2dpdGdvb2RjbHViL2ltYWdlL3VwbG9hZC92MTU0MDE1OTY5NS9TY3JlZW5fU2hvdF8yMDE4LTEwLTIyX2F0XzkuMDcuNDVfYW0ucG5nIn0pKSxtZHgoInAiLG51bGwsIkV2aWRlbnRseSBlbm91Z2gsIGl0IGlzIGluY3JlZGlibHkgaW1wb3J0YW50IHRvIGVuc3VyZSB0aGUgcm91dGluZyBpcyBzZXQgdXAgY29ycmVjdGx5IHNvIHRoZXJlIGlzIG5vIGxhcmdlIHNjYWxlIGZhaWx1cmUuIiksbWR4KCJoMiIseyJpZCI6Ijc5LWVuZC11c2VyLWF1dGhlbnRpY2F0aW9uIn0sIjcuOSBFbmQtdXNlciBBdXRoZW50aWNhdGlvbiIpLG1keCgicCIsbnVsbCwiSXN0aW8gY3VycmVudGx5IHN1cHBvcnRzIEpXVCB0b2tlbnMgdG8gYXV0aGVudGljYXRlIHVzZXJzLiIpLG1keCgicCIsbnVsbCwiSW4gdGhlIGltcGxlbWVudGF0aW9uLCB0aGUgdXNlciB3aWxsIHJlY2VpdmUgYSBKV1QgdG9rZW4gZnJvbSBhbiBhdXRoZW50aWNhdGVkIHNlcnZlciBhZnRlciBsb2dnaW5nIGluLiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlRoaXMgYXBwIHdpbGwgcHJvdmlkZSB1cyB3aXRoIGEgdG9rZW4gdGhhdCBpcyAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwic2lnbmVkIHdpdGggYSBrZXkiKSwiLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJUaGUgZGF0YSBpcyBub3QgZW5jcnlwdGVkLCBidXQgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJ0b2tlbiBjb250YWlucyBhIHNpZ25hdHVyZSIpLCIsIHdoaWNoIGNhbiBiZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwidmVyaWZpZWQiKSwiIHRvIHNlZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwid2hldGhlciBpdCB3YXMgcmVhbGx5IGNyZWF0ZWQgYnkgdGhlIHNlcnZlciIpLCIuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk9ubHkgdGhlIHNlcnZlciBoYXMgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJwcml2YXRlIGtleSIpLCIsIHNvIHdlIGNhbid0IHJlY3JlYXRlIG9yIHRhbXBlciB3aXRoIHRoZSB0b2tlbi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVXNpbmcgbWljcm9zZXJ2aWNlcywgZXZlcnkgYXBwIHdvdWxkIG5lZWQgdG8gYmUgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sInNlcGVyYXRlbHkgY29uZmlndXJlZCIpLCIuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkV2ZXJ5IHNlcnZpY2Ugd291bGQgbmVlZCB0byAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwidmFsaWRhdGUgdGhlIHRva2VuIiksIi4iLG1keCgidWwiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJPbmNlIHZhbGlkYXRlZCB0aGUgc2VydmljZSB3b3VsZCBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGFjY2VzcyB0byB0aGlzIHNlcnZpY2UuIikpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiV2l0aCBJc3RpbywgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sInRoaXMgY2FuIGJlIHRha2VuIGF3YXkgZnJvbSB0aGUgYXBwIGNvZGUgYW5kIG1hbmFnZWQgY2VudHJhbGx5LiIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiWW91IGNhbiBjb25maWd1cmUgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJqd3QgdG9rZW4gc2lnbmF0dXJlL3Byb3BlcnRpZXMiKSwiIHlvdSBleHBlY3QgaW4gaW50byBhbmQgaGF2ZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwicG9saWNpZXMgdG8gYWxsb3cvZGlzYWxsb3cgYWNjZXNzIHRvIGEgc2VydmljZS4iKSxtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiRXhhbXBsZSBcImhlbGxvXCIgYXBwIG1pZ2h0IG9ubHkgYmUgYWNjZXNzaWJsZSBpZiB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwic2lkZWNhciIpLCIgd2lsbCB2ZXJpZnkgdGhlICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJ2YWxpZGl0eSIpLCIgb2YgdGhlIHNpZ25hdHVyZSwgdG8gbWFrZSBzdXJlIHRoZSB0b2tlbiBpcyB2YWxpZC4iKSkpKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IkpXVCBUb2tlbiBzZXR1cCIsc3JjOiJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9naXRnb29kY2x1Yi9pbWFnZS91cGxvYWQvdjE1NDAxNjA4MzIvU2NyZWVuX1Nob3RfMjAxOC0xMC0yMl9hdF85LjI2LjQyX2FtLnBuZyJ9KSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIiMgSXN0aW8gd2l0aCBKV1QgQXV0aFxuIyBoZWxsb3dvcmxkLWp3dC55YW1sXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBHYXRld2F5XG5tZXRhZGF0YTpcbiAgbmFtZTogaGVsbG93b3JsZC1nYXRld2F5XG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBpc3RpbzogaW5ncmVzc2dhdGV3YXkgIyB1c2UgaXN0aW8gZGVmYXVsdCBjb250cm9sbGVyXG4gIHNlcnZlcnM6XG4gIC0gcG9ydDpcbiAgICAgIG51bWJlcjogODBcbiAgICAgIG5hbWU6IGh0dHBcbiAgICAgIHByb3RvY29sOiBIVFRQXG4gICAgaG9zdHM6XG4gICAgLSBcIipcIlxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBWaXJ0dWFsU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvd29ybGQtYXV0aFxuc3BlYzpcbiAgIyB0aGlzIGlzIGEgY2hhbmdlIHRvIHByZXZpb3VzXG4gIGhvc3RzOlxuICAtIFwiYXV0aC5rdWJlcm5ldGVzLm5ld3RlY2guYWNhZGVteVwiXG4gIGdhdGV3YXlzOlxuICAtIGhlbGxvd29ybGQtZ2F0ZXdheVxuICBodHRwOlxuICAtIHJvdXRlOlxuICAgIC0gZGVzdGluYXRpb246XG4gICAgICAgIGhvc3Q6IGF1dGguZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbFxuICAgICAgICBwb3J0OlxuICAgICAgICAgIG51bWJlcjogODA4MFxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBWaXJ0dWFsU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvd29ybGQtaGVsbG9cbnNwZWM6XG4gIGhvc3RzOlxuICAtIFwiaGVsbG8ua3ViZXJuZXRlcy5uZXd0ZWNoLmFjYWRlbXlcIlxuICBnYXRld2F5czpcbiAgLSBoZWxsb3dvcmxkLWdhdGV3YXlcbiAgaHR0cDpcbiAgLSByb3V0ZTpcbiAgICAtIGRlc3RpbmF0aW9uOlxuICAgICAgICBob3N0OiBoZWxsby5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA4MDgwXG4tLS1cbmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMVxua2luZDogRGVwbG95bWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IGF1dGhcbnNwZWM6XG4gIHJlcGxpY2FzOiAxXG4gIHRlbXBsYXRlOlxuICAgIG1ldGFkYXRhOlxuICAgICAgbGFiZWxzOlxuICAgICAgICBhcHA6IGF1dGhcbiAgICAgICAgdmVyc2lvbjogdjFcbiAgICBzcGVjOlxuICAgICAgY29udGFpbmVyczpcbiAgICAgIC0gbmFtZTogYXV0aFxuICAgICAgICBpbWFnZTogd2FyZHZpYWVuZS9odHRwLWVjaG9cbiAgICAgICAgZW52OlxuICAgICAgICAtIG5hbWU6IFRFWFRcbiAgICAgICAgICB2YWx1ZTogdGhpcyBpcyB0aGUgYXV0aGVudGljYXRpb24gc2VydmljZVxuICAgICAgICBwb3J0czpcbiAgICAgICAgLSBuYW1lOiBodHRwXG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODA4MFxuLS0tXG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGF1dGhcbiAgbGFiZWxzOlxuICAgIGFwcDogYXV0aFxuc3BlYzpcbiAgc2VsZWN0b3I6XG4gICAgYXBwOiBhdXRoXG4gIHBvcnRzOlxuICAtIG5hbWU6IGh0dHBcbiAgICBwb3J0OiA4MDgwXG4gICAgdGFyZ2V0UG9ydDogODA4MFxuLS0tXG5hcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTFcbmtpbmQ6IERlcGxveW1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBoZWxsb1xuc3BlYzpcbiAgcmVwbGljYXM6IDFcbiAgdGVtcGxhdGU6XG4gICAgbWV0YWRhdGE6XG4gICAgICBsYWJlbHM6XG4gICAgICAgIGFwcDogaGVsbG9cbiAgICAgICAgdmVyc2lvbjogdjFcbiAgICBzcGVjOlxuICAgICAgY29udGFpbmVyczpcbiAgICAgIC0gbmFtZTogaGVsbG9cbiAgICAgICAgaW1hZ2U6IHdhcmR2aWFlbmUvaHR0cC1lY2hvXG4gICAgICAgIGVudjpcbiAgICAgICAgLSBuYW1lOiBURVhUXG4gICAgICAgICAgdmFsdWU6IEhlbGxvLCB5b3UgY2FuIG9ubHkgcmVhY2ggdGhpcyBzZXJ2aWNlIHdoZW4gYXV0aGVudGljYXRlZFxuICAgICAgICBwb3J0czpcbiAgICAgICAgLSBuYW1lOiBodHRwXG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODA4MFxuLS0tXG5hcGlWZXJzaW9uOiB2MVxua2luZDogU2VydmljZVxubWV0YWRhdGE6XG4gIG5hbWU6IGhlbGxvXG4gIGxhYmVsczpcbiAgICBhcHA6IGhlbGxvXG5zcGVjOlxuICBzZWxlY3RvcjpcbiAgICBhcHA6IGhlbGxvXG4gIHBvcnRzOlxuICAtIG5hbWU6IGh0dHBcbiAgICBwb3J0OiA4MDgwXG4gICAgdGFyZ2V0UG9ydDogODA4MFxuIyMjXG4jIyMgRW5hYmxlIFRMU1xuIyMjXG4tLS1cbmFwaVZlcnNpb246IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExXG5raW5kOiBcIk1lc2hQb2xpY3lcIlxubWV0YWRhdGE6XG4gIG5hbWU6IFwiZGVmYXVsdFwiXG5zcGVjOlxuICBwZWVyczpcbiAgLSBtdGxzOiB7fVxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuICBuYW1lOiBcImVuYWJsZS1tdGxzXCJcbiAgbmFtZXNwYWNlOiBcImRlZmF1bHRcIiAjIGV2ZW4gdGhvdWdoIHdlIHNwZWNpZnkgYSBuYW1lc3BhY2UsIHRoaXMgcnVsZSBhcHBsaWVzIHRvIGFsbCBuYW1lc3BhY2VzXG5zcGVjOlxuICBob3N0OiBcIioubG9jYWxcIlxuICB0cmFmZmljUG9saWN5OlxuICAgIHRsczpcbiAgICAgIG1vZGU6IElTVElPX01VVFVBTFxuLS0tXG5hcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzXG5raW5kOiBEZXN0aW5hdGlvblJ1bGVcbm1ldGFkYXRhOlxuIG5hbWU6IFwiYXBpLXNlcnZlclwiXG5zcGVjOlxuIGhvc3Q6IFwia3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsXCJcbiB0cmFmZmljUG9saWN5OlxuICAgdGxzOlxuICAgICBtb2RlOiBESVNBQkxFXG4iKSksbWR4KCJwIixudWxsLCJUbyBnZXQgdG8gYXV0aCwgd2UgbmVlZCB0byBjcmVhdGUgYW4gYWxpYXMgZm9yICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJhdXRoLmRvbWFpbi5uYW1lIiksIiBpbiBSb3V0ZSA1MyB0byBleHBvc2UgdGhlIGxvYWQgYmFsYW5jZXIuIiksbWR4KCJwIixudWxsLCJUbyBlbmFibGUgdGhlIHBvbGljeSBmb3IgdGhlIEpXVCB0b2tlbiBhdXRoIHRvIHRha2UgZWZmZWN0LCB3ZSBuZWVkIHRvIGFwcGx5IHRoZSBmb2xsb3dpbmcgdG8gdGhlIGNsdXN0ZXI6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIiMgaGVsbG93b3JsZC1qd3QtZW5hYmxlLnlhbWxcbmFwaVZlcnNpb246IFwiYXV0aGVudGljYXRpb24uaXN0aW8uaW8vdjFhbHBoYTFcIlxua2luZDogXCJQb2xpY3lcIlxubWV0YWRhdGE6XG4gIG5hbWU6IFwiand0LWV4YW1wbGVcIlxuc3BlYzpcbiAgdGFyZ2V0czpcbiAgLSBuYW1lOiBoZWxsb1xuICBwZWVyczpcbiAgLSBtdGxzOiB7fVxuICBvcmlnaW5zOlxuICAtIGp3dDpcbiAgICAgICMgandrc1VyaSBpcyBmcm9tIGF1dGggdXJpIHdlIHNldHVwIGluIFJvdXRlNTNcbiAgICAgIGlzc3VlcjogXCJodHRwLWVjaG9AaHR0cC1lY2hvLmt1YmVybmV0ZXMubmV3dGVjaC5hY2FkZW15XCJcbiAgICAgIGp3a3NVcmk6IFwiaHR0cDovL2F1dGgua3ViZXJuZXRlcy5uZXd0ZWNoLmFjYWRlbXkvLndlbGwta25vd24vandrcy5qc29uXCJcbiAgcHJpbmNpcGFsQmluZGluZzogVVNFX09SSUdJTlxuLS0tXG4iKSksbWR4KCJwIixudWxsLCJBZnRlciBmZXRjaGluZyB0aGUgdG9rZW4sIHdlIGNhbiBub3cgYWNjZXNzIGF1dGhlbnRpY2F0ZWQgcm91dGVzIGJ5IHBhc3NpbmcgdGhlIGhlYWRlciAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyICRUT0tFTlwiIiksIi4iKSxtZHgoInAiLG51bGwsIlRoZSBleGFtcGxlIHVzZXMgIixtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vd2FyZHZpYWVuZS9odHRwLWVjaG8vYmxvYi9tYXN0ZXIvbWFpbi5nbyJ9KSwidGhpcyBHaXRodWIgcmVwbyIpLCIgd2l0aCB0aGUgL2xvZ2luIHJvdXRlIHRvIGRvIGF1dGggYW5kIGFub3RoZXIgcm91dGUgdG8gY2hlY2sgdGhlIGF1dGggZnJvbSBvdGhlciBzZXJ2aWNlcy4iKSxtZHgoInAiLG51bGwsIlNvbWV0aGluZyB1c2VmdWwgaXMgdGhhdCB5b3UgY2FuIGFsc28gY2hlY2sgdGhlIGxvZ3Mgb2YgdGhlIElzdGlvIHByb3h5LiBUaGlzIGNhbiBiZSBkb25lIHdpdGggIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImt1YmVjdGwgbG9ncyA8JSBwb2RfbmFtZSAlPiAtYyBpc3Rpby1wcm94eSIpLCIuIiksbWR4KCJoMiIseyJpZCI6IjcxMC1pc3Rpby1pbmdyZXNzLXRyYWZmaWMifSwiNy4xMCBJc3RpbyBJbmdyZXNzIFRyYWZmaWMiKSxtZHgoInAiLG51bGwsIlRvIGVuYWJsZSBpbmdyZXNzIHRyYWZmaWMgdG8gYWxsb3cgdG8gYWNjZXNzIG91dHNpZGUgc2VydmljZXMsIHdlIGNhbiBhcHBseSBhbiBleHRlcm5hbCBzZXJ2aWNlIGZpbGUuIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSB3aWxsIGFsbG93IHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiaWZjb25maWcuY28iKSwiIGhvc3RuYW1lIHRvIGJlIGFjY2Vzc2libGUgZnJvbSB0aGUgcG9kcy4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiIyBleHRlcm5hbC1zZXJ2aWNlLnlhbWxcbiNcbiMgaHR0cFxuI1xuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogU2VydmljZUVudHJ5XG5tZXRhZGF0YTpcbiAgbmFtZTogaWZjb25maWctY28taHR0cFxuc3BlYzpcbiAgaG9zdHM6XG4gIC0gaWZjb25maWcuY29cbiAgcG9ydHM6XG4gIC0gbnVtYmVyOiA4MFxuICAgIG5hbWU6IGh0dHBcbiAgICBwcm90b2NvbDogSFRUUFxuICByZXNvbHV0aW9uOiBETlNcbiAgbG9jYXRpb246IE1FU0hfRVhURVJOQUxcbi0tLVxuI1xuIyBodHRwc1xuI1xuYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhM1xua2luZDogU2VydmljZUVudHJ5XG5tZXRhZGF0YTpcbiAgbmFtZTogaWZjb25maWctY28taHR0cHNcbnNwZWM6XG4gIGhvc3RzOlxuICAtIGlmY29uZmlnLmNvXG4gIHBvcnRzOlxuICAtIG51bWJlcjogNDQzXG4gICAgbmFtZTogaHR0cHNcbiAgICBwcm90b2NvbDogSFRUUFNcbiAgcmVzb2x1dGlvbjogRE5TXG4gIGxvY2F0aW9uOiBNRVNIX0VYVEVSTkFMXG4tLS1cbmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTNcbmtpbmQ6IFZpcnR1YWxTZXJ2aWNlXG5tZXRhZGF0YTpcbiAgbmFtZTogaWZjb25maWctY29cbnNwZWM6XG4gIGhvc3RzOlxuICAtIGlmY29uZmlnLmNvXG4gIHRsczpcbiAgLSBtYXRjaDpcbiAgICAtIHBvcnQ6IDQ0M1xuICAgICAgc25pX2hvc3RzOlxuICAgICAgLSBpZmNvbmZpZy5jb1xuICAgIHJvdXRlOlxuICAgIC0gZGVzdGluYXRpb246XG4gICAgICAgIGhvc3Q6IGlmY29uZmlnLmNvXG4gICAgICAgIHBvcnQ6XG4gICAgICAgICAgbnVtYmVyOiA0NDNcbiAgICAgIHdlaWdodDogMTAwXG4iKSksbWR4KCJwIixudWxsLCJZb3Ugc2hvdWxkIG5vdyBiZSBhYmxlIHRvIGxvZyBpbnRvIHRoZSBwb2QgdG8gdHJ5IG91dCBjb250YWN0aW5nIG90aGVyIHNlcnZpY2VzLiIpLG1keCgiaDIiLHsiaWQiOiI3MTAtZGlzdHJpYnV0ZWQtdHJhY2luZy13aXRoLWphZWdhciJ9LCI3LjEwIERpc3RyaWJ1dGVkIFRyYWNpbmcgd2l0aCBKYWVnYXIiKSxtZHgoInAiLG51bGwsIkphZWdhciBpcyBhdXRvbWF0aWNhbGx5IHN0b3JlZCBpbiB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImlzdG8tc3lzdGVtIiksIi4gWW91IGNhbiBjb25maXJtIHRoaXMgd2l0aCB0aGUgZm9sbG93aW5nOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCIkIGt1YmVjdGwgZ2V0IHBvZCAtbiBpc3Rpby1zeXN0ZW0gIyBpc3Rpby10cmFjaW5nIHBvZFxuJCBrdWJlY3RsIGdldCBzdmMgLW4gaXN0aW8tc3lzdGVtICMgamFlZ2FyLVthZ2VudC9jb2xsZWN0b3IvcXVlcnldXG4jIFlvdSBjb3VsZCBleHBvcnQgdGhlIHBvcnQgZm9yIGphZWdhci1xdWVyeSBieSB1cGRhdGluZyB0aGUgc2VydmljZVxuJCBrdWJlY3RsIGVkaXQgc3ZjIGphZWdhci1xdWVyeSAtbiBpc3Rpby1zeXN0ZW0gIyBjaGFuZ2luZyBDbHVzdGVySVAgdG8gTG9hZEJhbGFuY2VyXG4iKSksbWR4KCJwIixudWxsLCJUbyBmaW5kIHRoZSB0cmFjZXMsIHlvdSBuZWVkIHRvIGZpbmQgdGhlIHN2YyAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJMb2FkQmFsYW5jZXIiKSwiIHBvcnQgZm9yIEphZWdhciBRdWVyeSBhbmQgdGhlbiB5b3UgY2FuIGFjY2VzcyB0aGUgd2ViIHVybCB1c2luZyB0aGUgcG9ydC4iKSxtZHgoInAiLG51bGwsIlRoaXMgcG9ydHMgYXJlIG9ubHkgaW50ZXJuYWwsIHNvIHlvdSB3b3VsZCBlaXRoZXIgbmVlZCB0byBleHBvc2UgdGhlIElQIGFkZHJlc3Mgb3IgdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJrdWJlY3RsIHBvcnQtZm9yd2FyZCIpLCIgdG8gZm9yd2FyZCBhbGwgdGhlIHBvcnRzIG9uLiIpLG1keCgicCIsbnVsbCwiVG8gcmVzdWx0cywgeW91J2xsIG5lZWQgdG8gdXNlIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwib3Blbi10cmFjaW5nIiksIiBoZWFkZXJzLiIpLG1keCgiaDIiLHsiaWQiOiI3MTEtaXN0aW8tbWV0cmljcy13aXRoLWdyYWZhbmEifSwiNy4xMSBJc3RpbyBNZXRyaWNzIHdpdGggR3JhZmFuYSIpLG1keCgicCIsbnVsbCwiU2ltaWxhciB0byBKYWVnYXIsIHlvdSBjYW4gZmluZCB0aGUgR3JhZmFuYSBzZXJ2aWNlIGJ5IGdldHRpbmcgdGhlIHNlcnZpY2VzIGZvciB0aGUgSXN0aW8gU3lzdGVtLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCIkIGt1YmVjdGwgZ2V0IHN2YyAtbiBpc3Rpby1zeXN0ZW0gIyBncmFmYW5hXG4jIFlvdSBjb3VsZCBleHBvcnQgdGhlIHBvcnQgZm9yIGdyYWZhbmEgYnkgdXBkYXRpbmcgdGhlIHNlcnZpY2VcbiQga3ViZWN0bCBlZGl0IHN2YyBncmFmYW5hIC1uIGlzdGlvLXN5c3RlbSAjIGNoYW5naW5nIENsdXN0ZXJJUCB0byBMb2FkQmFsYW5jZXJcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0t1YmVybmV0ZXMvTWljcm9zZXJ2aWNlcy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"7-microservices\"\n    }}>{`7. Microservices`}</h1>\n    <p>{`If we have multiple apps that require information from between each other, we need to start talking about the  `}<strong parentName=\"p\">{`service mesh`}</strong>{`. Normally between applications,  we run into the following problems:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There is no encryption`}</li>\n      <li parentName=\"ul\">{`No retries.`}</li>\n      <li parentName=\"ul\">{`No fallover.`}</li>\n      <li parentName=\"ul\">{`No intelligent load balancer.`}</li>\n      <li parentName=\"ul\">{`No routing decisions.`}</li>\n      <li parentName=\"ul\">{`No metrics/logs/traces.`}</li>\n      <li parentName=\"ul\">{`No access control.`}</li>\n    </ul>\n    <p>{`One solution is to implement `}<strong parentName=\"p\">{`sidecars`}</strong>{` which is a proxy to every single microservice. This can resolve issues such as encryption, retries when a connection fails, intelligent load balancing.`}</p>\n    <p>{`You could also add a `}<strong parentName=\"p\">{`management interface`}</strong>{` which resolves routing decisions, metrics/logs/traces and access control (ie valid certificate etc).`}</p>\n    <p>{`This brings us to `}<strong parentName=\"p\">{`Istio`}</strong>{`.`}</p>\n    <p><img alt=\"Istio diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540090167/istio-diagram.png\" /></p>\n    <h2 {...{\n      \"id\": \"71-istio-installation\"\n    }}>{`7.1 Istio Installation`}</h2>\n    <p>{`If you want to use Istio, it's worth now using a node with enough memory ie t2.medium.`}</p>\n    <h3 {...{\n      \"id\": \"kops-configuration\"\n    }}>{`Kops configuration`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kops edit cluster kubernetes.newtech.academy\n`}</code></pre>\n    <p>{`Add:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`spec:\n  kubeAPIServer:\n    admissionControl:\n    - NamespaceLifecycle\n    - LimitRanger\n    - ServiceAccount\n    - PersistentVolumeLabel\n    - DefaultStorageClass\n    - DefaultTolerationSeconds\n    - MutatingAdmissionWebhook\n    - ValidatingAdmissionWebhook\n    - ResourceQuota\n    - NodeRestriction\n    - Priority\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-102\"\n    }}>{`Download (1.0.2):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ wget https://github.com/istio/istio/releases/download/1.0.2/istio-1.0.2-linux.tar.gz\ntar -xzvf istio-1.0.2-linux.tar.gz\n$ cd istio-1.0.2\n# Alternatively just export the PATH so you don't have to logout\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile\n$ istioctl # check everything is running correctly\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-latest\"\n    }}>{`Download (latest):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ curl -L https://git.io/getLatestIstio | sh -\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile # change 1.0.2 in your version -- alternative just export the PATH so you don't have to logout\n$ cd istio-1.0.2 # change 1.0.2 in your version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"istio-install\"\n    }}>{`Istio install`}</h3>\n    <p>{`Apply CRDs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/helm/istio/templates/crds.yaml\n`}</code></pre>\n    <p>{`Wait a few seconds.`}</p>\n    <p>{`Option 1: with no mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo.yaml\n`}</code></pre>\n    <p>{`Option 2: or with mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo-auth.yaml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"72-example-app\"\n    }}>{`7.2 Example app`}</h2>\n    <p><img alt=\"Example app diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540091246/Screen_Shot_2018-10-21_at_2.07.07_pm.png\" /></p>\n    <h3 {...{\n      \"id\": \"example-app-from-istio\"\n    }}>{`Example app (from istio)`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hello-world-app\"\n    }}>{`Hello world app`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f helloworld.yaml)\nkubectl apply -f helloworld-gw.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld.yaml\n# Spinning up the container for a simple hello world app\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing a service for \"hello\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# Spinning up container for world\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing world container\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# World 2 deployment\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\" \n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing service for world 2 deployment\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n`}</code></pre>\n    <p>{`After deploying and applying the Istio injection from following the above istio commands, we will see that each deploying will have an app running with it along with the sidebar.`}</p>\n    <p>{`For the Istio gateway, we launch the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  # if we match uri /hello, then follow routing\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"73-advanced-istio-routing\"\n    }}>{`7.3 Advanced Istio Routing`}</h2>\n    <p><img alt=\"Advanced Routing Setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540109060/Screen_Shot_2018-10-21_at_7.04.07_pm.png\" /></p>\n    <p>{`Thanks to Istio, we can do advanced routing based around the above diagram thanks to the Deployments having different metadata:`}</p>\n    <p>{`The deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v2\nspec:\n  replicas: 3\n  template:\n    # we use this metadata for Istio to distinguish on routes\n    metadata:\n      labels:\n        app: hello\n        version: v2\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello, this is v2\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n`}</code></pre>\n    <p>{`The routing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v2-routing\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # ! Subsets is where the magic happens!\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: john\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2 # ! match v2 only\n        port:\n          number: 8080\n  - route: # default route for hello.example.com\n    - destination:\n        host: ! hello.default.svc.cluster.local\n        subset: v1 # match v1 only\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`Now, if we apply this virtual service to the service mesh, then based on whether we pass the \"end-user\" header or not, we will hit either v1 or v2!`}</p>\n    <p>{`We can test by running `}<inlineCode parentName=\"p\">{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\"`}</inlineCode>{`.`}</p>\n    <p>{`For v2 we can run `}<inlineCode parentName=\"p\">{``}</inlineCode>{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\" -H \"end-user: John\"\\`. `}</p>\n    <h2 {...{\n      \"id\": \"74-canary-deployments\"\n    }}>{`7.4 Canary deployments`}</h2>\n    <p>{`Canary deployments basically want routing mainly to the first version, but we also want some A/B testing to have version 2 having a 10% weight.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n      weight: 90\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2\n        port:\n          number: 8080\n      weight: 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"75-running-retries\"\n    }}>{`7.5 Running retries`}</h2>\n    <p>{`If one of the pods stop working, we can retry to another pod without the client seeing any of the issues. The example app has one of three pods running with a 5s latency but a 2s timeout to demonstrate this. It looks like the following:`}</p>\n    <p><img alt=\"Retry diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540110459/Screen_Shot_2018-10-21_at_7.26.50_pm.png\" /></p>\n    <p>{`We can see this being done with `}<inlineCode parentName=\"p\">{`Hello World v3`}</inlineCode>{` so we can see this in action with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v3.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3-latency\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        - name: LATENCY\n          value: \"5\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-v3\nspec:\n  hosts:\n  - \"hello-v3.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route: # default route for hello.example.com\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v3 # match v3 only\n        port:\n          number: 8080\n    timeout: 10s\n    retries:\n      attempts: 2\n      perTryTimeout: 2s\n`}</code></pre>\n    <p>{`We can also call `}<inlineCode parentName=\"p\">{`kubectl get destinationrule`}</inlineCode>{` etc to get and describe particular rules.`}</p>\n    <h2 {...{\n      \"id\": \"76-mutual-tls-example\"\n    }}>{`7.6 Mutual TLS example`}</h2>\n    <p>{`Create pods, services, destinationrules, virtualservices`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-tls.yaml)\nkubectl create -f helloworld-legacy.yaml\n`}</code></pre>\n    <p>{`The goals of Istio security are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Security by default:`}</strong>{` no changes needed for application code and infrastructure.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Defense in depth:`}</strong>{` integrate with existing security systems to provide multiple layers of defense.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Zero-trust network:`}</strong>{` build security solutions on untrusted networks.`}</li>\n    </ul>\n    <p>{`Two types of auth:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Transport authentication (service to service authentication) using Mutual TLS.`}</li>\n      <li parentName=\"ol\">{`Origin authentication (end-user authentication). Verifying the end user using JWTs.`}</li>\n    </ol>\n    <p>{`Mutual TLS can be turned on `}<strong parentName=\"p\">{`without having to change the code of applications`}</strong>{` (because of the sidecar deployment).`}</p>\n    <p>{`It provides each service with a `}<strong parentName=\"p\">{`strong identity`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Attacks like impersonation be rerouting DNS records will fail, because a fake application can't prove its identity using the certificate mechanism.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Secures (encrypts)`}</strong>{` service-to-service and end-user-to-service communication.`}</li>\n      <li parentName=\"ul\">{`Provides key and certificate management to `}<strong parentName=\"li\">{`manage generation, distribution and rotation`}</strong>{`.`}</li>\n    </ul>\n    <p><img alt=\"TLS Example App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540153502/Screen_Shot_2018-10-22_at_7.24.10_am.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">{`Legacy applications with not have a sidecar. `}</li>\n      <li parentName=\"ul\">{`One service will go LTR, and the other RTL.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns2\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end.legacy:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-reverse-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end-reverse.ns1:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-reverse-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: ns1\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  namespace: ns2\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-reverse\n  namespace: ns2\n  labels:\n    app: world-reverse\nspec:\n  selector:\n    app: world-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end-reverse\n  namespace: ns1\n  labels:\n    app: end-reverse\nspec:\n  selector:\n    app: end-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.ns1.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello-reverse\nspec:\n  host: hello-reverse.legacy.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls\nspec:\n  hosts:\n  - \"hello-tls.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.ns1.svc.cluster.local\n        subset: v1-tls # match v3 only\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls-reverse\nspec:\n  hosts:\n  - \"hello-tls-reverse.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello-reverse.legacy.svc.cluster.local\n        subset: v1-tls\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`As for the missing legacy services, they can be found in the `}<inlineCode parentName=\"p\">{`helloworld-legacy`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: legacy\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-reverse-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world-reverse.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end\n  namespace: legacy\n  labels:\n    app: end\nspec:\n  selector:\n    app: end\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-reverse\n  namespace: legacy\n  labels:\n    app: hello-reverse\nspec:\n  selector:\n    app: hello-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n`}</code></pre>\n    <p>{`Both these files can applied by running the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)\n$ kubectl apply -f helloworld-legacy.yaml\n$ kubetl get svc -o wide -n istio-system # get services from istio-system services\n# After getting the load balancer, you can then curl the ELB passing the Host header\n`}</code></pre>\n    <p>{`Now we need to `}<strong parentName=\"p\">{`enable TLS authetication.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p>{`Apply this file to enable mutual TLS that works one way but not the other (as like in the diagram). However, in the above yaml files we did now enable the traffic policy, so you need to update that and apply the updated files for all of this to work.`}</p>\n    <h2 {...{\n      \"id\": \"77-end-user-authentication\"\n    }}>{`7.7 End-user authentication`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-jwt.yaml)\nkubectl create -f helloworld-jwt-enable.yaml\n`}</code></pre>\n    <p>{`If we want to access a Pod, we need to use a gateway. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-gw.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`If you want a service within Istio, you will always need to define the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{`. We don't need the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{` for services that are accessed by the client.`}</p>\n    <h2 {...{\n      \"id\": \"78-rbac-with-istio-and-mtls\"\n    }}>{`7.8 RBAC with Istio and MTLS`}</h2>\n    <p>{`Now that we have MTLS, we have strong identites.`}</p>\n    <p>{`Based on those identities, we can start doing `}<strong parentName=\"p\">{`Role Based Access Control (RBAC)`}</strong>{`.`}</p>\n    <p>{`RBAC allows us to limit access `}<strong parentName=\"p\">{`between our services`}</strong>{` and from `}<strong parentName=\"p\">{`end-user to services`}</strong>{`.`}</p>\n    <p>{`Istio is able to verify the identity of a service by `}<strong parentName=\"p\">{`checking the identity of the x.509 certificate (which comes with enabled mutual TLS)`}</strong>{`. Example: with RBAC, service A might be able to be contacted by B, but not by C.`}</p>\n    <p>{`Istio is using SPIFFE standard (another CNFC project).`}</p>\n    <p>{`RBAC in istio:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Can provide `}<strong parentName=\"li\">{`service-to-service`}</strong>{` and `}<strong parentName=\"li\">{`end-user-to-service`}</strong>{` auth.`}</li>\n      <li parentName=\"ul\">{`Supports `}<strong parentName=\"li\">{`conditions`}</strong>{` and `}<strong parentName=\"li\">{`role-binding`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can bind to `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` (which can be linked to pods).`}</li>\n          <li parentName=\"ul\">{`End-user-to-service can for example let you create `}<strong parentName=\"li\">{`condition on being authenticated using JWT`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`It has high performance.`}</li>\n          <li parentName=\"ul\">{`Not enabled by default.`}</li>\n          <li parentName=\"ul\">{`We can enable it globally or on a namespace.`}</li>\n        </ul></li>\n    </ul>\n    <p>{`Example for including it on the \"default\" namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: \"rbac.istio.io/v1alpha1\"\nkind: RbacConfig\nmetadata:\n  name: default\nspec:\n  mode: 'ON_WITH_INCLUSION'\n  inclusion:\n    namespaces: [\"default\"]\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`We can then create a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` specifying the rules and a `}<strong parentName=\"p\">{`ServiceRoleBinding`}</strong>{` to link a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` to a subject (example Kubernetes `}<strong parentName=\"p\">{`ServiceAccount`}</strong>{`).`}</p>\n    <p>{`Example of how we want the demo to look when it comes to what it can contact:`}</p>\n    <p><img alt=\"Contact rules\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540155683/Screen_Shot_2018-10-22_at_8.00.47_am.png\" /></p>\n    <p>{`The order for the following is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` that only enable certain methods and services with specific access.`}</li>\n      <li parentName=\"ol\">{`Enable `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{` to bind that the `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` to a `}<strong parentName=\"li\">{`subject`}</strong>{` (or `}<strong parentName=\"li\">{`ingress controller name`}</strong>{` in the first case).`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` that have the correct metadata required for the `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Deployments`}</strong>{` that have the affiliated `}<strong parentName=\"li\">{`ServiceAccount`}</strong>{` required.`}</li>\n      <li parentName=\"ol\">{`Create a `}<strong parentName=\"li\">{`Service`}</strong>{` for that `}<strong parentName=\"li\">{`Deployment`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Gateway`}</strong>{` that uses the default `}<strong parentName=\"li\">{`Istio Gateway`}</strong>{` to access the `}<strong parentName=\"li\">{`Services`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` that gives us access to the hello world app through the `}<strong parentName=\"li\">{`Gateway`}</strong>{` connected to the `}<strong parentName=\"li\">{`Service`}</strong>{` which sits within the `}<strong parentName=\"li\">{`ServiceMesh`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`DestinationRule`}</strong>{` that allows allows access to the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` using `}<strong parentName=\"li\">{`MTLS`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{` which is a `}<strong parentName=\"li\">{`Reverse Proxy internal load balancer`}</strong>{` accessed from the external `}<strong parentName=\"li\">{`AWS LoadBalancer`}</strong>{` tied to the accessible `}<strong parentName=\"li\">{`DNS Records`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`You can now access the microservice from the `}<strong parentName=\"li\">{`AWS LoadBalancer Route53 alias`}</strong>{` passing the `}<strong parentName=\"li\">{`internal namespace domain`}</strong>{` as the `}<strong parentName=\"li\">{`host header`}</strong>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ! helloworld-rbac.yaml file\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: hello-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"hello.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-2-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world-2.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: istio-ingress-binding\n  namespace: default\nspec:\n  subjects:\n  - properties:\n      source.namespace: \"istio-system\"\n  roleRef:\n    kind: ServiceRole\n    name: \"hello-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: hello-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/hello\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: world-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/world\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-2-viewer\"\n---\n###\n### Kubernetes Service accounts\n###\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: world\n---\n###\n### helloworld.yaml deployments, including a serviceaccount\n### for the hello deployment and the world deployment\n###\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      serviceAccountName: hello  # service account\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      serviceAccountName: world  # service account\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello-rbac.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # uncomment to enable mutual TLS\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n`}</code></pre>\n    <p>{`This again requires the rbac prequisite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p><img alt=\"After applying the files to Istio\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540159695/Screen_Shot_2018-10-22_at_9.07.45_am.png\" /></p>\n    <p>{`Evidently enough, it is incredibly important to ensure the routing is set up correctly so there is no large scale failure.`}</p>\n    <h2 {...{\n      \"id\": \"79-end-user-authentication\"\n    }}>{`7.9 End-user Authentication`}</h2>\n    <p>{`Istio currently supports JWT tokens to authenticate users.`}</p>\n    <p>{`In the implementation, the user will receive a JWT token from an authenticated server after logging in.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This app will provide us with a token that is `}<strong parentName=\"li\">{`signed with a key`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`The data is not encrypted, but the `}<strong parentName=\"li\">{`token contains a signature`}</strong>{`, which can be `}<strong parentName=\"li\">{`verified`}</strong>{` to see `}<strong parentName=\"li\">{`whether it was really created by the server`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Only the server has the `}<strong parentName=\"li\">{`private key`}</strong>{`, so we can't recreate or tamper with the token.`}</li>\n      <li parentName=\"ul\">{`Using microservices, every app would need to be `}<strong parentName=\"li\">{`seperately configured`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Every service would need to `}<strong parentName=\"li\">{`validate the token`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Once validated the service would need to check whether the user has access to this service.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`With Istio, `}<strong parentName=\"li\">{`this can be taken away from the app code and managed centrally.`}</strong></li>\n      <li parentName=\"ul\">{`You can configure the `}<strong parentName=\"li\">{`jwt token signature/properties`}</strong>{` you expect in into and have `}<strong parentName=\"li\">{`policies to allow/disallow access to a service.`}</strong><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Example \"hello\" app might only be accessible if user is authenticated.`}</li>\n          <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`sidecar`}</strong>{` will verify the `}<strong parentName=\"li\">{`validity`}</strong>{` of the signature, to make sure the token is valid.`}</li>\n        </ul></li>\n    </ul>\n    <p><img alt=\"JWT Token setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540160832/Screen_Shot_2018-10-22_at_9.26.42_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# Istio with JWT Auth\n# helloworld-jwt.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-auth\nspec:\n  # this is a change to previous\n  hosts:\n  - \"auth.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: auth.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-hello\nspec:\n  hosts:\n  - \"hello.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: auth\n        version: v1\n    spec:\n      containers:\n      - name: auth\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: this is the authentication service\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: Hello, you can only reach this service when authenticated\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n###\n### Enable TLS\n###\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`To get to auth, we need to create an alias for `}<inlineCode parentName=\"p\">{`auth.domain.name`}</inlineCode>{` in Route 53 to expose the load balancer.`}</p>\n    <p>{`To enable the policy for the JWT token auth to take effect, we need to apply the following to the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-jwt-enable.yaml\napiVersion: \"authentication.istio.io/v1alpha1\"\nkind: \"Policy\"\nmetadata:\n  name: \"jwt-example\"\nspec:\n  targets:\n  - name: hello\n  peers:\n  - mtls: {}\n  origins:\n  - jwt:\n      # jwksUri is from auth uri we setup in Route53\n      issuer: \"http-echo@http-echo.kubernetes.newtech.academy\"\n      jwksUri: \"http://auth.kubernetes.newtech.academy/.well-known/jwks.json\"\n  principalBinding: USE_ORIGIN\n---\n`}</code></pre>\n    <p>{`After fetching the token, we can now access authenticated routes by passing the header `}<inlineCode parentName=\"p\">{`\"Authorization\": \"Bearer $TOKEN\"`}</inlineCode>{`.`}</p>\n    <p>{`The example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wardviaene/http-echo/blob/master/main.go\"\n      }}>{`this Github repo`}</a>{` with the /login route to do auth and another route to check the auth from other services.`}</p>\n    <p>{`Something useful is that you can also check the logs of the Istio proxy. This can be done with `}<inlineCode parentName=\"p\">{`kubectl logs <% pod_name %> -c istio-proxy`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"710-istio-ingress-traffic\"\n    }}>{`7.10 Istio Ingress Traffic`}</h2>\n    <p>{`To enable ingress traffic to allow to access outside services, we can apply an external service file. The following example will allow the `}<inlineCode parentName=\"p\">{`ifconfig.co`}</inlineCode>{` hostname to be accessible from the pods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# external-service.yaml\n#\n# http\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-http\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\n#\n# https\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-https\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ifconfig-co\nspec:\n  hosts:\n  - ifconfig.co\n  tls:\n  - match:\n    - port: 443\n      sni_hosts:\n      - ifconfig.co\n    route:\n    - destination:\n        host: ifconfig.co\n        port:\n          number: 443\n      weight: 100\n`}</code></pre>\n    <p>{`You should now be able to log into the pod to try out contacting other services.`}</p>\n    <h2 {...{\n      \"id\": \"710-distributed-tracing-with-jaegar\"\n    }}>{`7.10 Distributed Tracing with Jaegar`}</h2>\n    <p>{`Jaegar is automatically stored in the `}<inlineCode parentName=\"p\">{`isto-system`}</inlineCode>{`. You can confirm this with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get pod -n istio-system # istio-tracing pod\n$ kubectl get svc -n istio-system # jaegar-[agent/collector/query]\n# You could export the port for jaegar-query by updating the service\n$ kubectl edit svc jaegar-query -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    <p>{`To find the traces, you need to find the svc `}<strong parentName=\"p\">{`LoadBalancer`}</strong>{` port for Jaegar Query and then you can access the web url using the port.`}</p>\n    <p>{`This ports are only internal, so you would either need to expose the IP address or use `}<inlineCode parentName=\"p\">{`kubectl port-forward`}</inlineCode>{` to forward all the ports on.`}</p>\n    <p>{`To results, you'll need to use the `}<inlineCode parentName=\"p\">{`open-tracing`}</inlineCode>{` headers.`}</p>\n    <h2 {...{\n      \"id\": \"711-istio-metrics-with-grafana\"\n    }}>{`7.11 Istio Metrics with Grafana`}</h2>\n    <p>{`Similar to Jaegar, you can find the Grafana service by getting the services for the Istio System.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get svc -n istio-system # grafana\n# You could export the port for grafana by updating the service\n$ kubectl edit svc grafana -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}