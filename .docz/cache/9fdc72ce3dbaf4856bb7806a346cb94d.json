{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/react-style-guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/react-style-guide.md","mtime":1562563032085},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/react-style-guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-native-style-guide\"\n    }}>{`React-Native Style Guide`}</h1>\n    <h3 {...{\n      \"id\": \"react-native-style-guide-1\"\n    }}>{`React Native Style Guide`}</h3>\n    <h4 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Every component should be treated as an API.`}</li>\n      <li parentName=\"ul\">{`When in doubt, break up a component or function into smaller useful parts.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"es6-and-es7\"\n    }}>{`ES6 and ES7`}</h4>\n    <p>{`The flavor of JS we use is based on ES5 but with ES6 and ES7 transforms. This means, that a large part of the syntax is based on the current version of JS, but is flavored with capabilities that come with ES6 and ES7. For example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Object destructing (ES6)`}</li>\n      <li parentName=\"ul\">{`Object spread (ES7)`}</li>\n      <li parentName=\"ul\">{`Rest and spread params (ES6)`}</li>\n      <li parentName=\"ul\">{`Promises (ES6)`}</li>\n      <li parentName=\"ul\">{`Arrow Functions (ES6)`}</li>\n      <li parentName=\"ul\">{`Object concise method (ES6)`}</li>\n      <li parentName=\"ul\">{`Object short notation (ES6)`}</li>\n      <li parentName=\"ul\">{`Classes (ES6)`}</li>\n    </ul>\n    <p>{`For more information see `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/javascript-environment.html#content\"\n      }}>{`React Native JavaScript Environment`}</a></p>\n    <h4 {...{\n      \"id\": \"component-creation\"\n    }}>{`Component Creation`}</h4>\n    <p>{`Components should be created using ES6 classes and Object Short Notation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Bad\n\nvar ChatBox = React.createClass({\n\n  getInitialState: function(){\n    return {toggle: 'on'};\n  },\n\n  render: function(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n})\n\n// Good\n\nclass ChatBox extends React.Component{\n\n  constructor(){\n    this.state = {toggle: 'on'}\n  }\n\n  render(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n}\n`}</code></pre>\n    <p>{`Component functions that are not life-cycle functions should be created with an underscore at the beginning of the function name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`_fetchmessages(){\n  fetch(requestURL)\n    .then((response)=> response.json() )\n    .then((responseData)=> {\n      this.setState({messages: responseData})\n    })\n    .done();\n}\n\n_turnEditOn(){\n  this.setState({edit: true});\n}\n`}</code></pre>\n    <p>{`Keep life-cycle functions at the top of the object constructor in logical order.`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`constructor`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillReceiveProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode></li>\n    </ol>\n    <p>{`For more information see `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/component-specs.html\"\n      }}>{`Component Specs and Lifecycle`}</a></p>\n    <p>{`Every component function should be as parsimonious as possible. If you find yourself creating a function that is doing more than two things at once, then break up the function into smaller functions.`}</p>\n    <h4 {...{\n      \"id\": \"using-bind\"\n    }}>{`Using Bind`}</h4>\n    <p>{`When passing a function as prop to a child component, the use of bind is not necessary. React Native automatically binds `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` to that function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Bad\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage.bind(this)}\n    />\n  );\n}\n\n// Good\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage}\n    />\n  );\n}\n`}</code></pre>\n    <p>{`It necessary however to use bind, when passing a component function to an event prop. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<ListView\n  renderRow={this.renderMessage.bind(this)}\n/>\n\n...\n\nrenderMessage(message) {\n  return (\n    <Message\n      message={message}\n      navigator={this.props.navigator}\n      fetchMessages={this.fetchMessages.bind}\n    />\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"passing-props\"\n    }}>{`Passing Props`}</h4>\n    <p>{`Explicitly pass props if the number of props is small or if the prop is important enough that you want to be explicit about it.`}</p>\n    <p>{`If there are a large number of props, pass in the whole thing or use destructuring to break it apart and pass them correctly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`//Bad\n\n<MessageBody\n  content=this.props.message.content\n/>\n<MessageFooter\n  replies=this.props.message.replies\n  upvotes=this.props.message.upvotes\n  timestamp=this.props.message.timestamp\n  distance=this.props.message.distance\n/>\n\n// Good\n\nvar {content, ...footer} = this.props.message\n\n<MessageBody {content} />\n<MessageFooter {..footer} />\n`}</code></pre>\n    <p>{`Sometimes you want to combine objects and pass them as props. In that case use `}<inlineCode parentName=\"p\">{`Object.assign`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`_onPressMessage() {\n\n  var {message, ...props} = this.props;\n  var {votes, ...message} = this.props.message;\n  var fetchMessages = this._updateHearts;\n\n  this.props.navigator({\n    component: Comments,\n    passProps: Object.assign(\n      {..props},\n      {..message},\n      {fetchMessages}\n    ),\n  })\n}\n`}</code></pre>\n    <p>{`For more information on passing props, see React Native `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/transferring-props.html\"\n      }}>{`Transferring Props`}</a></p>\n    <h4 {...{\n      \"id\": \"state-and-props\"\n    }}>{`State and Props`}</h4>\n    <p>{`Props are immutable. Do not mutate them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Bad\n\nvar component = <Component />;\ncomponent.props.foo = x;\ncomponent.props.bar = y;\n`}</code></pre>\n    <p>{`State is mutable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`constructor(){\n  this.state = {messages:[]};\n}\n\n...\n\n_addMessages(data){\n  var messages = data.messages;\n  this.setState({\n    messages: this.state.messages.push(messages)\n  })\n}\n`}</code></pre>\n    <p>{`Props can be passed into state, but be explicit that they are only 'initial values'`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`constructor(props){\n  var initialNum = this.props.numHearts;\n  this.state = {numHearts: initialNum};\n}\n\n...\n\n_handleClick(){\n  this.setState({numHearts: this.state.numHearts + 1});\n}\n`}</code></pre>\n    <p>{`Be sure to  make use of `}<inlineCode parentName=\"p\">{`componentWillReceiveProps`}</inlineCode>{` to sync state and props, if props are passed to state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`componentWillReceiveProps(props){\n  this.setState({numHearts: props.numHearts});\n}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"react-style-guide-cheet-sheet\"\n    }}>{`React Style Guide Cheet Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"custom-classes\"\n    }}>{`Custom Classes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`place custom functions above the render function.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`React.createClass({\n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  _onChange : function() {},\n  _onCreate : function() {},\n  render : function() {}\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditional-html\"\n    }}>{`Conditional html`}</h2>\n    <p>{`In JSX, anything in {} will be evaluated in JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{this.state.show && 'This is Shown'}\n{this.state.on ? ‘On’ : ‘Off’}\n`}</code></pre>\n    <p>{`For anything more complicated, I have typically been creating a variable inside the render method, suffixed with ‘Html’:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var dinosaurHtml = '';\nif (this.state.showDinosaurs) {\n  dinosaurHtml = (\n    <section>\n      <DinosaurTable />\n      <DinosaurPager />\n    </section>\n  );\n}\n\nreturn (\n  <div>\n    ...\n    {dinosaurHtml}\n    ...\n  </div>\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jsx-as-variable-or-return-value\"\n    }}>{`JSX as variable or return value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var multilineJsx = (\n  <header>\n    <Logo />\n    <Nav />\n  </header>\n);\n\nvar singleLineJsx = <h1>Simple JSX</h1>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"self-closing-tags\"\n    }}>{`Self-closing tags`}</h2>\n    <p>{`Components without children should simply close themselves`}</p>\n    <p><strong parentName=\"p\">{` correct `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Logo />\n`}</code></pre>\n    <p><strong parentName=\"p\">{` bad practise `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Logo></Logo>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"list-iterations\"\n    }}>{`List Iterations`}</h2>\n    <p>{`List iterations are better done inline, especially if each list item will be rendered as a component. You may even be able to reduce to one line with fat arrows.`}</p>\n    <p><strong parentName=\"p\">{` Note `}</strong>{` This does require the harmony flag on JSX to be included, which will toggle certain ES6 features (fat arrows, template strings, destructuring, and rest parameters)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render : function() {\n  return (\n    <ul>\n      {this.state.dinosaursList.map(dinosaur => <DinosaurItem item={dinosaur} />)}\n    </ul>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<form onChange={this.inputHandler}>\n  ...\n    <input type=\"text\" name=\"newDinosaurName\" value={this.state.newDinosaurName} />\n  ...\n</form>\n\n// input handler\n\nfunction(event) {\n  actions.propagateValue({\n    field : event.target.name,\n    value : event.target.value\n  });\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"formatting-attributes\"\n    }}>{`Formatting Attributes`}</h2>\n    <p>{`Preferable`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<input\n  type=\"text\"\n  value={this.state.newDinosaurName}\n  onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n`}</code></pre>\n    <p>{`Alternative`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<input type=\"text\"\n       value={this.state.newDinosaurName}\n       onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}