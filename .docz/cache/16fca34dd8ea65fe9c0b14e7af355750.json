{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Machine-Learning/ML-Decision-Trees.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Machine-Learning/ML-Decision-Trees.md","mtime":1548209344374},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"decision-trees\"}},\"Decision Trees\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#decision-trees\"}},\"Decision Trees\"),React.createElement(MDXTag,{name:\"ul\",components:components,parentName:\"li\"},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#intuition\"}},\"Intuition\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#decision-tree-regression-in-python\"}},\"Decision Tree Regression in Python\"))))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"intuition\"}},\"Intuition\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"CART: Classification and Regression Trees\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We speak about both types, but for now - focus on regression trees.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Regression trees are a bit more complex than classification trees.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Imagine a scatter plot with two IV and we are predicting an DV y (which you wouldn't be able to see on the chart). Essentially the DV would sit on the z axis.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Once you run the regression decision tree algorithm, the scatter plot will be split up into segments.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For example, x1 might be split at 20. Another split may happen for x2 at 170, 200 etc.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The question, are the splits adding value to way we want to group our points?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Each split itself is known as a leaf.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The algorithm can handle mathematical issues and we can focus on the practical element of the algorithm.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Splitting\")),React.createElement(MDXTag,{name:\"p\",components:components},\"If we split \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[1] < 20\"),\", we have two options (y/N). If we then split \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[2] < 170\"),\", we add a child node to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[1] < 20\"),\" that checks y/N. If we then set \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"\"),\"x\",\"[2]\",\" < 200`.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"After having a two child tree, if we set \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[1] < 40\"),\" such that \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[1] < 20\"),\" is not true and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[2] < 170\"),\" is true, we can then set \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[1] < 40\"),\" as the child to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"x[2] < 170\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Once we start this tree, what do we populate into those boxes? Well, we decide how we predict \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"y\"),\" with a new observation added to the plane x\",\"[1]\",\" and x\",\"[2]\",\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Key note: \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"Adding splits adds information\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"What we do is that for each terminal leaf, we take the average and assign the value that we give to any new element that falls into that leaf.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now, if we have a new value, we check the decision tree where it falls and then assign the new element the value of where it falls as a prediction.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"decision-tree-regression-in-python\"}},\"Decision Tree Regression in Python\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Warning for the decision tree, because we need to consider the entropy and split the result into data points. If we stick to one dimension, how do we have a line that is not horizontal? If the splits are made, they should remain a constant.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Either the intervals are infinite (which they are not), or the model has an issue.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The reason the issue came up, is because of what we have used to create the plot since this is no longer linear.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This is now a non-linear, non-continuous regression model.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"What is the best way to view something non-continuous?\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-python\"}},\"# Visualising the Decision Tree results\\nX_grid = np.arange(min(X), max(X), 0.01)\\nX_grid = X_grid.reshape(len(X_grid), 1)\\nplt.scatter(X, y, color = 'red')\\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\\nplt.title('Truth or Bluff (Decision Tree Regression)')\\nplt.xlabel('Position level')\\nplt.ylabel('Salary')\\nplt.savefig('decision-tree.png')\\nplt.show()\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"As for getting the decision tree code to run:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-python\"}},\"# Prediciting the Decision Tree results\\n# Create the Regressor\\nfrom sklearn.tree import DecisionTreeRegressor\\nregressor = DecisionTreeRegressor(random_state=0)\\nregressor.fit(X, y)\\n\\ny_pred = regressor.predict(6.5)\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Ensure you have a higher resolution in order to visualize the splits. Given that the example in the tutorial has just 1 DV and 1 IV, it will come out like steps as the only splits will occur on the x axis.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The model itself is not necessarily that interesting in 1D, but over many dimensions it becomes far more interesting.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"What happens when you use a random forest?\")),React.createElement(MDXTag,{name:\"p\",components:components},\"A Random Forest is a team of decision trees. What happens with a team of 10 trees? 50 trees? 500 trees?\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Machine-Learning/ML-Decision-Trees.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"decision-trees\"}}>{`Decision Trees`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#decision-trees\"}}>{`Decision Trees`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#intuition\"}}>{`Intuition`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#decision-tree-regression-in-python\"}}>{`Decision Tree Regression in Python`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"intuition\"}}>{`Intuition`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`CART: Classification and Regression Trees`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We speak about both types, but for now - focus on regression trees.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Regression trees are a bit more complex than classification trees.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Imagine a scatter plot with two IV and we are predicting an DV y (which you wouldn't be able to see on the chart). Essentially the DV would sit on the z axis.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once you run the regression decision tree algorithm, the scatter plot will be split up into segments.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For example, x1 might be split at 20. Another split may happen for x2 at 170, 200 etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The question, are the splits adding value to way we want to group our points?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Each split itself is known as a leaf.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The algorithm can handle mathematical issues and we can focus on the practical element of the algorithm.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Splitting`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we split `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[1] < 20`}</MDXTag>{`, we have two options (y/N). If we then split `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[2] < 170`}</MDXTag>{`, we add a child node to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[1] < 20`}</MDXTag>{` that checks y/N. If we then set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{``}</MDXTag>{`x`}{`[2]`}{` < 200\\`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After having a two child tree, if we set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[1] < 40`}</MDXTag>{` such that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[1] < 20`}</MDXTag>{` is not true and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[2] < 170`}</MDXTag>{` is true, we can then set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[1] < 40`}</MDXTag>{` as the child to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x[2] < 170`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we start this tree, what do we populate into those boxes? Well, we decide how we predict `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`y`}</MDXTag>{` with a new observation added to the plane x`}{`[1]`}{` and x`}{`[2]`}{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Key note: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Adding splits adds information`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What we do is that for each terminal leaf, we take the average and assign the value that we give to any new element that falls into that leaf.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now, if we have a new value, we check the decision tree where it falls and then assign the new element the value of where it falls as a prediction.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"decision-tree-regression-in-python\"}}>{`Decision Tree Regression in Python`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Warning for the decision tree, because we need to consider the entropy and split the result into data points. If we stick to one dimension, how do we have a line that is not horizontal? If the splits are made, they should remain a constant.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Either the intervals are infinite (which they are not), or the model has an issue.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The reason the issue came up, is because of what we have used to create the plot since this is no longer linear.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is now a non-linear, non-continuous regression model.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What is the best way to view something non-continuous?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`# Visualising the Decision Tree results\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape(len(X_grid), 1)\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.savefig('decision-tree.png')\nplt.show()\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As for getting the decision tree code to run:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`# Prediciting the Decision Tree results\n# Create the Regressor\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state=0)\nregressor.fit(X, y)\n\ny_pred = regressor.predict(6.5)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ensure you have a higher resolution in order to visualize the splits. Given that the example in the tutorial has just 1 DV and 1 IV, it will come out like steps as the only splits will occur on the x axis.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The model itself is not necessarily that interesting in 1D, but over many dimensions it becomes far more interesting.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`What happens when you use a random forest?`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A Random Forest is a team of decision trees. What happens with a team of 10 trees? 50 trees? 500 trees?`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}