{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Redis/Redis-Kue-Nodejs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Redis/Redis-Kue-Nodejs.md","mtime":1562563032085},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Redis/Redis-Kue-Nodejs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AACrB,YAAQ;AADa,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGAAH,QAGF;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAChB,YAAQ;AADQ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAHE,QAMF;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AAChB,YAAQ;AADQ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CANE,CALK,EAcL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdK,EAiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,okEAAL,CAjBK,CAAP;AAmGD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAlHMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"redis-queues-and-forking-with-kue\"\n    }}>{`Redis queues and forking with Kue`}</h1>\n    <p>{`Reference these links:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917\"\n      }}>{`https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf\"\n      }}>{`https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Automattic/kue\"\n      }}>{`https://github.com/Automattic/kue`}</a></p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { fork } = require('child_process');\n\nconst kue = require('kue');\nkue.app.listen(3050);\nconst port = process.env.REDIS_PORT ? process.env.REDIS_PORT : '6379';\nconst host = process.env.REDIS_HOST ? process.env.REDIS_HOST : '127.0.0.1';\n\nlet queue = kue.createQueue({\n  redis: {\n    host: host,\n    port: port\n  }\n});\n\nqueue.process('build', 1, (job, done) => {\n  run(job, done);\n});\n\nconst run = async (job, done) => {\n  try {\n    const { data } = job.data;\n    // process is a forked process\n    const compute = fork('./processes/buildWeb.js');\n    compute.send(data);\n\n    compute.on('message', (_) => {\n      return done();\n    });\n  } catch (err) {\n    console.error(err);\n    return done(new Error(JSON.stringify(err)));\n  }\n};\n\nmodule.exports = (app) => {\n  app.post('/', async function(req, res) {\n    try {\n      // Create a fork for a process\n      const buildJob = queue\n        .create('build', {\n          // Job Type\n          project: project, // Job Data\n          data: req.body\n        })\n        .removeOnComplete(true) // REMOVE THE JOB FROM THE QUEUE ONCE IT'S COMPLETED\n        .attempts(5) // The maximum number of retries you want the job to have\n        .backoff({ delay: 60 * 1000, type: 'exponential' }) // Time between retries. Read docs.\n        .save(); // PERSIST THE DAMN JOB LOL\n\n      buildJob.on('failed', function(errorMessage) {\n        console.log('Job failed');\n        let error = JSON.parse(errorMessage);\n        // error now contains the object passed from the worker when the job failed\n        console.log(error); // Check it out for yourself\n        // call pagerduty or whatever jazz you wanna do in case of failure\n      });\n\n      res.status(200).send('Building ' + project);\n    } catch (err) {\n      return res.status(500).send('Failed');\n    }\n  });\n};\n\n// buildWeb.js\nconst run = async (data) => {\n  try {\n    setTimeout(() => {\n      process.send('Done');\n    }, 3000);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nprocess.on('message', (data) => {\n  run(data);\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}