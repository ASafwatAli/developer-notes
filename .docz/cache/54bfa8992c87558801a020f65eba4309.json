{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Amplify/Graphql-Setup.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Amplify/Graphql-Setup.md","mtime":1548282824941},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiZ3JhcGhxbC1zZXR1cCJ9LCJHcmFwaFFMIFNldHVwIiksbWR4KCJoMiIseyJpZCI6ImxpbmtzIn0sIkxpbmtzIiksbWR4KCJwIixudWxsLG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vYmxvZy5leHBvLmlvL2hvdy10by1idWlsZC1jbG91ZC1wb3dlcmVkLW1vYmlsZS1hcHBzLXdpdGgtZXhwby1hd3MtYW1wbGlmeS0yZmRkYzg5OGY5YTIifSksImh0dHBzOi8vYmxvZy5leHBvLmlvL2hvdy10by1idWlsZC1jbG91ZC1wb3dlcmVkLW1vYmlsZS1hcHBzLXdpdGgtZXhwby1hd3MtYW1wbGlmeS0yZmRkYzg5OGY5YTIiKSwiXG4iLG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vaGFja2Vybm9vbi5jb20vaW50cm9kdWNpbmctdGhlLWF3cy1hbXBsaWZ5LWdyYXBocWwtY2xpZW50LThhMWExZTUxNGZkZSJ9KSwiaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9pbnRyb2R1Y2luZy10aGUtYXdzLWFtcGxpZnktZ3JhcGhxbC1jbGllbnQtOGExYTFlNTE0ZmRlIikpLG1keCgiaDIiLHsiaWQiOiJ0by1nZXQtaXQtcnVubmluZyJ9LCJUbyBnZXQgaXQgcnVubmluZyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCJhbXBsaWZ5IGluaXRcbmFtcGxpZnkgYWRkIGFwaVxuIyA+IEdyYXBoUUxcbiMgPiBuYW1lXG4jID4gQVBJIEtleVxuIyA+IE5vXG4jID4gWWVzXG4jIFNlbGVjdCBzaW5nbGUgb3Igb25lLXRvLW1hbnlcbiMgeVxuIikpLG1keCgicCIsbnVsbCwiTm90IHRoYXQgeW91IGNhbiBwcmVzZXQgYSBzY2hlbWEgdG8gaGF2ZSB1c2VkIGZvciBBbXBsaWZ5LiIpLG1keCgicCIsbnVsbCwiRXhhbXBsZSwgY3JlYXRlIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInNjaGVtYS5ncmFwaHFsIiksIiBmaWxlIHdpdGggZm9sbG93aW5nIGFuZCBwYXNzIHRoZSBwYXRoIGR1cmluZyBzZXR1cDoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwidHlwZSBQZXQgQG1vZGVsIHtcbiAgaWQ6IElEIVxuICBuYW1lOiBTdHJpbmchXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmdcbiAgaGVsbG86IFN0cmluZ1xufVxuIikpLG1keCgiaDMiLHsiaWQiOiJleGFtcGxlLXNjaGVtYSJ9LCJFeGFtcGxlIHNjaGVtYSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhc2NyaXB0In0pLCJ0eXBlIFBldCBAbW9kZWwge1xuICBpZDogSUQhXG4gIG5hbWU6IFN0cmluZyFcbiAgZGVzY3JpcHRpb246IFN0cmluZ1xufVxuIikpLG1keCgiaDMiLHsiaWQiOiJleGFtcGxlLW11dGF0aW9uIn0sIkV4YW1wbGUgbXV0YXRpb24iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiaW1wb3J0IEFQSSwgeyBncmFwaHFsT3BlcmF0aW9uIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2FwaSc7XG5cbi8vIGRlZmluZSBtdXRhdGlvblxuY29uc3QgY3JlYXRlUGV0ID0gYFxuICBtdXRhdGlvbigkbmFtZTogU3RyaW5nISwgJGRlc2NyaXB0aW9uOiBTdHJpbmcpIHtcbiAgICBjcmVhdGVQZXQoaW5wdXQ6IHtcbiAgICAgIG5hbWU6ICRuYW1lXG4gICAgICBkZXNjcmlwdGlvbjogJGRlc2NyaXB0aW9uXG4gIH0pIHtcbiAgICBpZFxuICAgIG5hbWVcbiAgICBkZXNjcmlwdGlvblxuICB9XG59YDtcbi8vIGV4ZWN1dGUgYSBtdXRhdGlvblxuc3RhdGUgPSB7IG5hbWU6ICcnIH07XG5vbkNoYW5nZVRleHQgPSAodmFsdWUpID0+IHtcbiAgdGhpcy5zZXRTdGF0ZSh7IG5hbWU6IHZhbHVlIH0pO1xufTtcbmNyZWF0ZVBldCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgcGV0ID0gdGhpcy5zdGF0ZTtcbiAgYXdhaXQgQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbihjcmVhdGVQZXQsIHBldCkpO1xufTtcbiIpKSxtZHgoImgzIix7ImlkIjoiZXhhbXBsZS1xdWVyeSJ9LCJFeGFtcGxlIHF1ZXJ5IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmFzY3JpcHQifSksIi8vIGRlZmluZSBxdWVyeVxuY29uc3QgbGlzdFBldHMgPSBgXG4gIHF1ZXJ5IHtcbiAgICBsaXN0UGV0cyB7XG4gICAgICBpdGVtcyB7XG4gICAgICAgIGlkXG4gICAgICAgIG5hbWVcbiAgICAgICAgZGVzY3JpcHRpb25cbiAgICAgIH1cbiAgICB9XG4gfVxuYFxuLy8gZXhlY3V0ZSBxdWVyeVxuZ2V0UGV0cyA9ICgpID0+IHtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24obGlzdFBldHMpKVxuICAvLyBkbyBzb21ldGhpbmcgd2l0aCBkYXRhXG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImF1dG9nZW5lcmF0aW5nLWNvZGUtZm9yLXRoZS1zY2hlbWEifSwiQXV0b2dlbmVyYXRpbmcgY29kZSBmb3IgdGhlIHNjaGVtYSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0pLCJhbXBsaWZ5IGNvZGVnZW4gYWRkXG4iKSksbWR4KCJoMiIseyJpZCI6IjEtbWFueS1tYW55LXRvLW1hbnktcmVsYXRpb25zaGlwLXNjaGVtYXMifSwiMS1tYW55LCBtYW55LXRvLW1hbnkgcmVsYXRpb25zaGlwIHNjaGVtYXMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwidHlwZSBQb3N0IEBtb2RlbCB7XG4gIGlkOiBJRCFcbiAgdGl0bGU6IFN0cmluZyFcbiAgZWRpdG9yczogW1Bvc3RFZGl0b3JdIEBjb25uZWN0aW9uKG5hbWU6IFwiUG9zdEVkaXRvcnNcIilcbn1cbiMgQ3JlYXRlIGEgam9pbiBtb2RlbCBhbmQgZGlzYWJsZSBxdWVyaWVzIGFzIHlvdSBkb24ndCBuZWVkIHRoZW1cbiMgYW5kIGNhbiBxdWVyeSB0aHJvdWdoIFBvc3QuZWRpdG9ycyBhbmQgVXNlci5wb3N0c1xudHlwZSBQb3N0RWRpdG9yIEBtb2RlbChxdWVyaWVzOiBudWxsKSB7XG4gIGlkOiBJRCFcbiAgcG9zdDogUG9zdCEgQGNvbm5lY3Rpb24obmFtZTogXCJQb3N0RWRpdG9yc1wiKVxuICBlZGl0b3I6IFVzZXIhIEBjb25uZWN0aW9uKG5hbWU6IFwiVXNlckVkaXRvcnNcIilcbn1cbnR5cGUgVXNlciBAbW9kZWwge1xuICBpZDogSUQhXG4gIHVzZXJuYW1lOiBTdHJpbmchXG4gIHBvc3RzOiBbUG9zdEVkaXRvcl0gQGNvbm5lY3Rpb24obmFtZTogXCJVc2VyRWRpdG9yc1wiKVxufVxuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvQW1wbGlmeS9HcmFwaHFsLVNldHVwLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Amplify/Graphql-Setup.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,eADA,CAAR,iBADK,CAIL,SAAQ,CACN,KAAM,OADA,CAAR,SAJK,CAOL,aAAG,uBAAG,UAAU,CAAC,GAAd,EAAsB,CACrB,OAAQ,gGADa,CAAtB,mGAAH,MAGF,uBAAG,UAAU,CAAC,GAAd,EAAsB,CAChB,OAAQ,gFADQ,CAAtB,mFAHE,CAPK,CAaL,SAAQ,CACN,KAAM,mBADA,CAAR,qBAbK,CAgBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,8HAAL,CAhBK,CA4BL,0EA5BK,CA6BL,kCAAyB,kBAAY,UAAU,CAAC,GAAvB,mBAAzB,wDA7BK,CA8BL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,+FAAL,CA9BK,CAuCL,SAAQ,CACN,KAAM,gBADA,CAAR,kBAvCK,CA0CL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,8EAAL,CA1CK,CAkDL,SAAQ,CACN,KAAM,kBADA,CAAR,oBAlDK,CAqDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,ogBAAL,CArDK,CA+EL,SAAQ,CACN,KAAM,eADA,CAAR,iBA/EK,CAkFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,6RAAL,CAlFK,CAsGL,SAAQ,CACN,KAAM,oCADA,CAAR,sCAtGK,CAyGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,0BAAL,CAzGK,CA6GL,SAAQ,CACN,KAAM,0CADA,CAAR,6CA7GK,CAgHL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,0fAAL,CAhHK,CAAP,CAqID,C,2QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"graphql-setup\"\n    }}>{`GraphQL Setup`}</h1>\n    <h2 {...{\n      \"id\": \"links\"\n    }}>{`Links`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2\"\n      }}>{`https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\"\n      }}>{`https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde`}</a></p>\n    <h2 {...{\n      \"id\": \"to-get-it-running\"\n    }}>{`To get it running`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y\n`}</code></pre>\n    <p>{`Not that you can preset a schema to have used for Amplify.`}</p>\n    <p>{`Example, create a `}<inlineCode parentName=\"p\">{`schema.graphql`}</inlineCode>{` file with following and pass the path during setup:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema\"\n    }}>{`Example schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-mutation\"\n    }}>{`Example mutation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = \\`\n  mutation($name: String!, $description: String) {\n    createPet(input: {\n      name: $name\n      description: $description\n  }) {\n    id\n    name\n    description\n  }\n}\\`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-query\"\n    }}>{`Example query`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// define query\nconst listPets = \\`\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n\\`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"autogenerating-code-for-the-schema\"\n    }}>{`Autogenerating code for the schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`amplify codegen add\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1-many-many-to-many-relationship-schemas\"\n    }}>{`1-many, many-to-many relationship schemas`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: \"PostEditors\")\n}\n# Create a join model and disable queries as you don't need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: \"PostEditors\")\n  editor: User! @connection(name: \"UserEditors\")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: \"UserEditors\")\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}