{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","mtime":1562563032056},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"7-microservices\"\n    }}>{`7. Microservices`}</h1>\n    <p>{`If we have multiple apps that require information from between each other, we need to start talking about the  `}<strong parentName=\"p\">{`service mesh`}</strong>{`. Normally between applications,  we run into the following problems:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There is no encryption`}</li>\n      <li parentName=\"ul\">{`No retries.`}</li>\n      <li parentName=\"ul\">{`No fallover.`}</li>\n      <li parentName=\"ul\">{`No intelligent load balancer.`}</li>\n      <li parentName=\"ul\">{`No routing decisions.`}</li>\n      <li parentName=\"ul\">{`No metrics/logs/traces.`}</li>\n      <li parentName=\"ul\">{`No access control.`}</li>\n    </ul>\n    <p>{`One solution is to implement `}<strong parentName=\"p\">{`sidecars`}</strong>{` which is a proxy to every single microservice. This can resolve issues such as encryption, retries when a connection fails, intelligent load balancing.`}</p>\n    <p>{`You could also add a `}<strong parentName=\"p\">{`management interface`}</strong>{` which resolves routing decisions, metrics/logs/traces and access control (ie valid certificate etc).`}</p>\n    <p>{`This brings us to `}<strong parentName=\"p\">{`Istio`}</strong>{`.`}</p>\n    <p><img alt=\"Istio diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540090167/istio-diagram.png\" /></p>\n    <h2 {...{\n      \"id\": \"71-istio-installation\"\n    }}>{`7.1 Istio Installation`}</h2>\n    <p>{`If you want to use Istio, it's worth now using a node with enough memory ie t2.medium.`}</p>\n    <h3 {...{\n      \"id\": \"kops-configuration\"\n    }}>{`Kops configuration`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kops edit cluster kubernetes.newtech.academy\n`}</code></pre>\n    <p>{`Add:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`spec:\n  kubeAPIServer:\n    admissionControl:\n    - NamespaceLifecycle\n    - LimitRanger\n    - ServiceAccount\n    - PersistentVolumeLabel\n    - DefaultStorageClass\n    - DefaultTolerationSeconds\n    - MutatingAdmissionWebhook\n    - ValidatingAdmissionWebhook\n    - ResourceQuota\n    - NodeRestriction\n    - Priority\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-102\"\n    }}>{`Download (1.0.2):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ wget https://github.com/istio/istio/releases/download/1.0.2/istio-1.0.2-linux.tar.gz\ntar -xzvf istio-1.0.2-linux.tar.gz\n$ cd istio-1.0.2\n# Alternatively just export the PATH so you don't have to logout\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile\n$ istioctl # check everything is running correctly\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-latest\"\n    }}>{`Download (latest):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ curl -L https://git.io/getLatestIstio | sh -\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile # change 1.0.2 in your version -- alternative just export the PATH so you don't have to logout\n$ cd istio-1.0.2 # change 1.0.2 in your version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"istio-install\"\n    }}>{`Istio install`}</h3>\n    <p>{`Apply CRDs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/helm/istio/templates/crds.yaml\n`}</code></pre>\n    <p>{`Wait a few seconds.`}</p>\n    <p>{`Option 1: with no mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo.yaml\n`}</code></pre>\n    <p>{`Option 2: or with mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo-auth.yaml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"72-example-app\"\n    }}>{`7.2 Example app`}</h2>\n    <p><img alt=\"Example app diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540091246/Screen_Shot_2018-10-21_at_2.07.07_pm.png\" /></p>\n    <h3 {...{\n      \"id\": \"example-app-from-istio\"\n    }}>{`Example app (from istio)`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hello-world-app\"\n    }}>{`Hello world app`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f helloworld.yaml)\nkubectl apply -f helloworld-gw.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld.yaml\n# Spinning up the container for a simple hello world app\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing a service for \"hello\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# Spinning up container for world\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing world container\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# World 2 deployment\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\" \n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing service for world 2 deployment\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n`}</code></pre>\n    <p>{`After deploying and applying the Istio injection from following the above istio commands, we will see that each deploying will have an app running with it along with the sidebar.`}</p>\n    <p>{`For the Istio gateway, we launch the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  # if we match uri /hello, then follow routing\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"73-advanced-istio-routing\"\n    }}>{`7.3 Advanced Istio Routing`}</h2>\n    <p><img alt=\"Advanced Routing Setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540109060/Screen_Shot_2018-10-21_at_7.04.07_pm.png\" /></p>\n    <p>{`Thanks to Istio, we can do advanced routing based around the above diagram thanks to the Deployments having different metadata:`}</p>\n    <p>{`The deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v2\nspec:\n  replicas: 3\n  template:\n    # we use this metadata for Istio to distinguish on routes\n    metadata:\n      labels:\n        app: hello\n        version: v2\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello, this is v2\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n`}</code></pre>\n    <p>{`The routing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v2-routing\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # ! Subsets is where the magic happens!\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: john\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2 # ! match v2 only\n        port:\n          number: 8080\n  - route: # default route for hello.example.com\n    - destination:\n        host: ! hello.default.svc.cluster.local\n        subset: v1 # match v1 only\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`Now, if we apply this virtual service to the service mesh, then based on whether we pass the \"end-user\" header or not, we will hit either v1 or v2!`}</p>\n    <p>{`We can test by running `}<inlineCode parentName=\"p\">{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\"`}</inlineCode>{`.`}</p>\n    <p>{`For v2 we can run `}<inlineCode parentName=\"p\">{``}</inlineCode>{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\" -H \"end-user: John\"\\`. `}</p>\n    <h2 {...{\n      \"id\": \"74-canary-deployments\"\n    }}>{`7.4 Canary deployments`}</h2>\n    <p>{`Canary deployments basically want routing mainly to the first version, but we also want some A/B testing to have version 2 having a 10% weight.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n      weight: 90\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2\n        port:\n          number: 8080\n      weight: 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"75-running-retries\"\n    }}>{`7.5 Running retries`}</h2>\n    <p>{`If one of the pods stop working, we can retry to another pod without the client seeing any of the issues. The example app has one of three pods running with a 5s latency but a 2s timeout to demonstrate this. It looks like the following:`}</p>\n    <p><img alt=\"Retry diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540110459/Screen_Shot_2018-10-21_at_7.26.50_pm.png\" /></p>\n    <p>{`We can see this being done with `}<inlineCode parentName=\"p\">{`Hello World v3`}</inlineCode>{` so we can see this in action with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v3.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3-latency\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        - name: LATENCY\n          value: \"5\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-v3\nspec:\n  hosts:\n  - \"hello-v3.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route: # default route for hello.example.com\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v3 # match v3 only\n        port:\n          number: 8080\n    timeout: 10s\n    retries:\n      attempts: 2\n      perTryTimeout: 2s\n`}</code></pre>\n    <p>{`We can also call `}<inlineCode parentName=\"p\">{`kubectl get destinationrule`}</inlineCode>{` etc to get and describe particular rules.`}</p>\n    <h2 {...{\n      \"id\": \"76-mutual-tls-example\"\n    }}>{`7.6 Mutual TLS example`}</h2>\n    <p>{`Create pods, services, destinationrules, virtualservices`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-tls.yaml)\nkubectl create -f helloworld-legacy.yaml\n`}</code></pre>\n    <p>{`The goals of Istio security are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Security by default:`}</strong>{` no changes needed for application code and infrastructure.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Defense in depth:`}</strong>{` integrate with existing security systems to provide multiple layers of defense.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Zero-trust network:`}</strong>{` build security solutions on untrusted networks.`}</li>\n    </ul>\n    <p>{`Two types of auth:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Transport authentication (service to service authentication) using Mutual TLS.`}</li>\n      <li parentName=\"ol\">{`Origin authentication (end-user authentication). Verifying the end user using JWTs.`}</li>\n    </ol>\n    <p>{`Mutual TLS can be turned on `}<strong parentName=\"p\">{`without having to change the code of applications`}</strong>{` (because of the sidecar deployment).`}</p>\n    <p>{`It provides each service with a `}<strong parentName=\"p\">{`strong identity`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Attacks like impersonation be rerouting DNS records will fail, because a fake application can't prove its identity using the certificate mechanism.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Secures (encrypts)`}</strong>{` service-to-service and end-user-to-service communication.`}</li>\n      <li parentName=\"ul\">{`Provides key and certificate management to `}<strong parentName=\"li\">{`manage generation, distribution and rotation`}</strong>{`.`}</li>\n    </ul>\n    <p><img alt=\"TLS Example App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540153502/Screen_Shot_2018-10-22_at_7.24.10_am.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">{`Legacy applications with not have a sidecar. `}</li>\n      <li parentName=\"ul\">{`One service will go LTR, and the other RTL.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns2\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end.legacy:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-reverse-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end-reverse.ns1:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-reverse-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: ns1\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  namespace: ns2\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-reverse\n  namespace: ns2\n  labels:\n    app: world-reverse\nspec:\n  selector:\n    app: world-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end-reverse\n  namespace: ns1\n  labels:\n    app: end-reverse\nspec:\n  selector:\n    app: end-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.ns1.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello-reverse\nspec:\n  host: hello-reverse.legacy.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls\nspec:\n  hosts:\n  - \"hello-tls.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.ns1.svc.cluster.local\n        subset: v1-tls # match v3 only\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls-reverse\nspec:\n  hosts:\n  - \"hello-tls-reverse.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello-reverse.legacy.svc.cluster.local\n        subset: v1-tls\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`As for the missing legacy services, they can be found in the `}<inlineCode parentName=\"p\">{`helloworld-legacy`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: legacy\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-reverse-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world-reverse.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end\n  namespace: legacy\n  labels:\n    app: end\nspec:\n  selector:\n    app: end\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-reverse\n  namespace: legacy\n  labels:\n    app: hello-reverse\nspec:\n  selector:\n    app: hello-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n`}</code></pre>\n    <p>{`Both these files can applied by running the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)\n$ kubectl apply -f helloworld-legacy.yaml\n$ kubetl get svc -o wide -n istio-system # get services from istio-system services\n# After getting the load balancer, you can then curl the ELB passing the Host header\n`}</code></pre>\n    <p>{`Now we need to `}<strong parentName=\"p\">{`enable TLS authetication.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p>{`Apply this file to enable mutual TLS that works one way but not the other (as like in the diagram). However, in the above yaml files we did now enable the traffic policy, so you need to update that and apply the updated files for all of this to work.`}</p>\n    <h2 {...{\n      \"id\": \"77-end-user-authentication\"\n    }}>{`7.7 End-user authentication`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-jwt.yaml)\nkubectl create -f helloworld-jwt-enable.yaml\n`}</code></pre>\n    <p>{`If we want to access a Pod, we need to use a gateway. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-gw.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`If you want a service within Istio, you will always need to define the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{`. We don't need the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{` for services that are accessed by the client.`}</p>\n    <h2 {...{\n      \"id\": \"78-rbac-with-istio-and-mtls\"\n    }}>{`7.8 RBAC with Istio and MTLS`}</h2>\n    <p>{`Now that we have MTLS, we have strong identites.`}</p>\n    <p>{`Based on those identities, we can start doing `}<strong parentName=\"p\">{`Role Based Access Control (RBAC)`}</strong>{`.`}</p>\n    <p>{`RBAC allows us to limit access `}<strong parentName=\"p\">{`between our services`}</strong>{` and from `}<strong parentName=\"p\">{`end-user to services`}</strong>{`.`}</p>\n    <p>{`Istio is able to verify the identity of a service by `}<strong parentName=\"p\">{`checking the identity of the x.509 certificate (which comes with enabled mutual TLS)`}</strong>{`. Example: with RBAC, service A might be able to be contacted by B, but not by C.`}</p>\n    <p>{`Istio is using SPIFFE standard (another CNFC project).`}</p>\n    <p>{`RBAC in istio:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Can provide `}<strong parentName=\"li\">{`service-to-service`}</strong>{` and `}<strong parentName=\"li\">{`end-user-to-service`}</strong>{` auth.`}</li>\n      <li parentName=\"ul\">{`Supports `}<strong parentName=\"li\">{`conditions`}</strong>{` and `}<strong parentName=\"li\">{`role-binding`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can bind to `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` (which can be linked to pods).`}</li>\n          <li parentName=\"ul\">{`End-user-to-service can for example let you create `}<strong parentName=\"li\">{`condition on being authenticated using JWT`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`It has high performance.`}</li>\n          <li parentName=\"ul\">{`Not enabled by default.`}</li>\n          <li parentName=\"ul\">{`We can enable it globally or on a namespace.`}</li>\n        </ul></li>\n    </ul>\n    <p>{`Example for including it on the \"default\" namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: \"rbac.istio.io/v1alpha1\"\nkind: RbacConfig\nmetadata:\n  name: default\nspec:\n  mode: 'ON_WITH_INCLUSION'\n  inclusion:\n    namespaces: [\"default\"]\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`We can then create a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` specifying the rules and a `}<strong parentName=\"p\">{`ServiceRoleBinding`}</strong>{` to link a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` to a subject (example Kubernetes `}<strong parentName=\"p\">{`ServiceAccount`}</strong>{`).`}</p>\n    <p>{`Example of how we want the demo to look when it comes to what it can contact:`}</p>\n    <p><img alt=\"Contact rules\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540155683/Screen_Shot_2018-10-22_at_8.00.47_am.png\" /></p>\n    <p>{`The order for the following is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` that only enable certain methods and services with specific access.`}</li>\n      <li parentName=\"ol\">{`Enable `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{` to bind that the `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` to a `}<strong parentName=\"li\">{`subject`}</strong>{` (or `}<strong parentName=\"li\">{`ingress controller name`}</strong>{` in the first case).`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` that have the correct metadata required for the `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Deployments`}</strong>{` that have the affiliated `}<strong parentName=\"li\">{`ServiceAccount`}</strong>{` required.`}</li>\n      <li parentName=\"ol\">{`Create a `}<strong parentName=\"li\">{`Service`}</strong>{` for that `}<strong parentName=\"li\">{`Deployment`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Gateway`}</strong>{` that uses the default `}<strong parentName=\"li\">{`Istio Gateway`}</strong>{` to access the `}<strong parentName=\"li\">{`Services`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` that gives us access to the hello world app through the `}<strong parentName=\"li\">{`Gateway`}</strong>{` connected to the `}<strong parentName=\"li\">{`Service`}</strong>{` which sits within the `}<strong parentName=\"li\">{`ServiceMesh`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`DestinationRule`}</strong>{` that allows allows access to the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` using `}<strong parentName=\"li\">{`MTLS`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{` which is a `}<strong parentName=\"li\">{`Reverse Proxy internal load balancer`}</strong>{` accessed from the external `}<strong parentName=\"li\">{`AWS LoadBalancer`}</strong>{` tied to the accessible `}<strong parentName=\"li\">{`DNS Records`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`You can now access the microservice from the `}<strong parentName=\"li\">{`AWS LoadBalancer Route53 alias`}</strong>{` passing the `}<strong parentName=\"li\">{`internal namespace domain`}</strong>{` as the `}<strong parentName=\"li\">{`host header`}</strong>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ! helloworld-rbac.yaml file\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: hello-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"hello.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-2-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world-2.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: istio-ingress-binding\n  namespace: default\nspec:\n  subjects:\n  - properties:\n      source.namespace: \"istio-system\"\n  roleRef:\n    kind: ServiceRole\n    name: \"hello-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: hello-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/hello\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: world-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/world\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-2-viewer\"\n---\n###\n### Kubernetes Service accounts\n###\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: world\n---\n###\n### helloworld.yaml deployments, including a serviceaccount\n### for the hello deployment and the world deployment\n###\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      serviceAccountName: hello  # service account\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      serviceAccountName: world  # service account\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello-rbac.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # uncomment to enable mutual TLS\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n`}</code></pre>\n    <p>{`This again requires the rbac prequisite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p><img alt=\"After applying the files to Istio\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540159695/Screen_Shot_2018-10-22_at_9.07.45_am.png\" /></p>\n    <p>{`Evidently enough, it is incredibly important to ensure the routing is set up correctly so there is no large scale failure.`}</p>\n    <h2 {...{\n      \"id\": \"79-end-user-authentication\"\n    }}>{`7.9 End-user Authentication`}</h2>\n    <p>{`Istio currently supports JWT tokens to authenticate users.`}</p>\n    <p>{`In the implementation, the user will receive a JWT token from an authenticated server after logging in.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This app will provide us with a token that is `}<strong parentName=\"li\">{`signed with a key`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`The data is not encrypted, but the `}<strong parentName=\"li\">{`token contains a signature`}</strong>{`, which can be `}<strong parentName=\"li\">{`verified`}</strong>{` to see `}<strong parentName=\"li\">{`whether it was really created by the server`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Only the server has the `}<strong parentName=\"li\">{`private key`}</strong>{`, so we can't recreate or tamper with the token.`}</li>\n      <li parentName=\"ul\">{`Using microservices, every app would need to be `}<strong parentName=\"li\">{`seperately configured`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Every service would need to `}<strong parentName=\"li\">{`validate the token`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Once validated the service would need to check whether the user has access to this service.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`With Istio, `}<strong parentName=\"li\">{`this can be taken away from the app code and managed centrally.`}</strong></li>\n      <li parentName=\"ul\">{`You can configure the `}<strong parentName=\"li\">{`jwt token signature/properties`}</strong>{` you expect in into and have `}<strong parentName=\"li\">{`policies to allow/disallow access to a service.`}</strong><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Example \"hello\" app might only be accessible if user is authenticated.`}</li>\n          <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`sidecar`}</strong>{` will verify the `}<strong parentName=\"li\">{`validity`}</strong>{` of the signature, to make sure the token is valid.`}</li>\n        </ul></li>\n    </ul>\n    <p><img alt=\"JWT Token setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540160832/Screen_Shot_2018-10-22_at_9.26.42_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# Istio with JWT Auth\n# helloworld-jwt.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-auth\nspec:\n  # this is a change to previous\n  hosts:\n  - \"auth.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: auth.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-hello\nspec:\n  hosts:\n  - \"hello.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: auth\n        version: v1\n    spec:\n      containers:\n      - name: auth\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: this is the authentication service\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: Hello, you can only reach this service when authenticated\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n###\n### Enable TLS\n###\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`To get to auth, we need to create an alias for `}<inlineCode parentName=\"p\">{`auth.domain.name`}</inlineCode>{` in Route 53 to expose the load balancer.`}</p>\n    <p>{`To enable the policy for the JWT token auth to take effect, we need to apply the following to the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-jwt-enable.yaml\napiVersion: \"authentication.istio.io/v1alpha1\"\nkind: \"Policy\"\nmetadata:\n  name: \"jwt-example\"\nspec:\n  targets:\n  - name: hello\n  peers:\n  - mtls: {}\n  origins:\n  - jwt:\n      # jwksUri is from auth uri we setup in Route53\n      issuer: \"http-echo@http-echo.kubernetes.newtech.academy\"\n      jwksUri: \"http://auth.kubernetes.newtech.academy/.well-known/jwks.json\"\n  principalBinding: USE_ORIGIN\n---\n`}</code></pre>\n    <p>{`After fetching the token, we can now access authenticated routes by passing the header `}<inlineCode parentName=\"p\">{`\"Authorization\": \"Bearer $TOKEN\"`}</inlineCode>{`.`}</p>\n    <p>{`The example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wardviaene/http-echo/blob/master/main.go\"\n      }}>{`this Github repo`}</a>{` with the /login route to do auth and another route to check the auth from other services.`}</p>\n    <p>{`Something useful is that you can also check the logs of the Istio proxy. This can be done with `}<inlineCode parentName=\"p\">{`kubectl logs <% pod_name %> -c istio-proxy`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"710-istio-ingress-traffic\"\n    }}>{`7.10 Istio Ingress Traffic`}</h2>\n    <p>{`To enable ingress traffic to allow to access outside services, we can apply an external service file. The following example will allow the `}<inlineCode parentName=\"p\">{`ifconfig.co`}</inlineCode>{` hostname to be accessible from the pods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# external-service.yaml\n#\n# http\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-http\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\n#\n# https\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-https\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ifconfig-co\nspec:\n  hosts:\n  - ifconfig.co\n  tls:\n  - match:\n    - port: 443\n      sni_hosts:\n      - ifconfig.co\n    route:\n    - destination:\n        host: ifconfig.co\n        port:\n          number: 443\n      weight: 100\n`}</code></pre>\n    <p>{`You should now be able to log into the pod to try out contacting other services.`}</p>\n    <h2 {...{\n      \"id\": \"710-distributed-tracing-with-jaegar\"\n    }}>{`7.10 Distributed Tracing with Jaegar`}</h2>\n    <p>{`Jaegar is automatically stored in the `}<inlineCode parentName=\"p\">{`isto-system`}</inlineCode>{`. You can confirm this with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get pod -n istio-system # istio-tracing pod\n$ kubectl get svc -n istio-system # jaegar-[agent/collector/query]\n# You could export the port for jaegar-query by updating the service\n$ kubectl edit svc jaegar-query -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    <p>{`To find the traces, you need to find the svc `}<strong parentName=\"p\">{`LoadBalancer`}</strong>{` port for Jaegar Query and then you can access the web url using the port.`}</p>\n    <p>{`This ports are only internal, so you would either need to expose the IP address or use `}<inlineCode parentName=\"p\">{`kubectl port-forward`}</inlineCode>{` to forward all the ports on.`}</p>\n    <p>{`To results, you'll need to use the `}<inlineCode parentName=\"p\">{`open-tracing`}</inlineCode>{` headers.`}</p>\n    <h2 {...{\n      \"id\": \"711-istio-metrics-with-grafana\"\n    }}>{`7.11 Istio Metrics with Grafana`}</h2>\n    <p>{`Similar to Jaegar, you can find the Grafana service by getting the services for the Istio System.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get svc -n istio-system # grafana\n# You could export the port for grafana by updating the service\n$ kubectl edit svc grafana -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}