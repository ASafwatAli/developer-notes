{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","mtime":1562563032061},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"random-forest-regression\"\n    }}>{`Random Forest Regression`}</h1>\n    <h2 {...{\n      \"id\": \"intuition\"\n    }}>{`Intuition`}</h2>\n    <p>{`Random forest is a version of ensemble learning.`}</p>\n    <p>{`It's when you take the same algorithm multiple times and create something more powerful.`}</p>\n    <p><strong parentName=\"p\">{`Steps`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Pick at random K data points from the Training Set.`}</li>\n      <li parentName=\"ol\">{`Build the Decision Tree associated to these K data points.`}</li>\n      <li parentName=\"ol\">{`Choose the number Ntree of trees you want to build and repeat steps 1 and 2.`}</li>\n      <li parentName=\"ol\">{`For a new data point, make each one of your Ntree trees predict the value of `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` for the data point in question, and assign the new data point the average across all the predicted `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` values.`}</li>\n    </ol>\n    <p>{`Doing this allows you to improve the accuracy of your prediction.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <p>{`How many lollies in a jar? Imagine taking notes of every guess - getting around 1000 and then beginning to average them out or take the median. Statistically speaking, you have a highly likelihood of being closer to the truth.`}</p>\n    <p>{`Once you hit the middle of the normal distribution, you are more likely to be on the money for the guess.`}</p>\n    <h2 {...{\n      \"id\": \"python\"\n    }}>{`PYTHON`}</h2>\n    <p>{`This is the last regression model. If you understand decision tree regression, you'll understand random forest.`}</p>\n    <p>{`From decision tree, we know that we will need the visualisation using the non-continuous result.`}</p>\n    <p>{`For the regressor, we use RandomForestRegressor library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Prediciting the Random Forest results\n# Create the Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(random_state=0)\nregressor.fit(X, y)\n`}</code></pre>\n    <p>{`Simply, with these lines, we can already determine that the graph is no longer continuous.`}</p>\n    <p>{`By having several decision trees, we end up with a lot more \"steps\" than we had with just one decision tree.`}</p>\n    <p>{`More tree !== more steps. The more trees you have, the more the average will converge towards the same average.`}</p>\n    <p>{`Generally the steps will become better placed depending on the average.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}