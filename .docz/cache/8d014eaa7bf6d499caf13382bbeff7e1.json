{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md","mtime":1574497642682},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAApB,CADF,CAPK,EAYL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAZK,EAeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GAfK,EAgBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAAiE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAjE,sBAhBK,EAiBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAjBK,EAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+uCAAL,CApBK,EAuEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAe;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAf,0CAvEK,CAAP;AAyED;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAxFMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"cloud-vision-w-nodejs\"\n    }}>{`Cloud Vision w/ Nodejs`}</h1>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs\"\n        }}>{`https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Ensure you have set up a GCP project with Cloud Vision enabled. Follow the link above if you need help.`}</p>\n    <p>{`Move the project creds to the right directory and install `}<inlineCode parentName=\"p\">{`@google-cloud/vision`}</inlineCode>{` for the project.`}</p>\n    <h2 {...{\n      \"id\": \"typescript-example\"\n    }}>{`TypeScript Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/index.ts\nconst vision = require('@google-cloud/vision');\nconst util = require('util');\nconst ss = require('string-similarity');\nconst cc = require('lodash.camelcase');\nconst up = require('lodash.capitalize');\nconst path = require('path');\n\nconst components: string[] = [\n  'Select',\n  'Text',\n  'Button',\n  'TextField',\n  'Image',\n  'Icon',\n];\n\nconst run = async () => {\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Base file required for the src folder detection\n  const fileName = './src/img/testFour.jpg';\n\n  // Performs text detection on the local file\n  const [result] = await client.textDetection(fileName);\n  const detections = result.textAnnotations;\n  console.log('=== STARTING ===');\n  const fullDetection = detections[0];\n  const { description } = fullDetection;\n\n  console.log('Description:', description);\n\n  let res = '';\n\n  description.split('\\\\n').map((line: string) => {\n    res += '<div>\\\\n';\n    line.split(',').map((text) => {\n      const { bestMatch } = ss.findBestMatch(up(cc(text)), components);\n      res += \\`\\\\t<\\${bestMatch.target} />\\\\n\\`;\n    });\n    res += '</div>\\\\n';\n  });\n  console.log('=== RES ===');\n  console.log(res);\n};\n\nrun();\n`}</code></pre>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`node --require ts-node/register src/index.ts`}</inlineCode>{` should result in the output we want.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}