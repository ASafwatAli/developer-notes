{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Basics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Basics.md","mtime":1562563032054},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Basics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kubernetes-basics\"\n    }}>{`Kubernetes Basics`}</h1>\n    <h3 {...{\n      \"id\": \"node-architecture\"\n    }}>{`Node Architecture`}</h3>\n    <p>{`Within each node can be a collection of pods routed by iptables and within each pod are the Docker containers.`}</p>\n    <p>{`These containers can talk easily to each other using localhost and ports.`}</p>\n    <p>{`Each node also has a `}<inlineCode parentName=\"p\">{`kubelet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`kube-proxy`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`kubelet`}</inlineCode>{` talks to the master node and `}<inlineCode parentName=\"p\">{`kube-proxy`}</inlineCode>{` talks to the iptables.`}</p>\n    <p>{`A service itself can be like the load balancer. The service will be publicly available.`}</p>\n    <p>{`When we look deeper at a pod yaml file, we have the containers called as the specs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n    image: okeeffed/docker-demo\n    ports:\n    - containerPort: 3000\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"replication-controller\"\n    }}>{`Replication Controller`}</h3>\n    <h4 {...{\n      \"id\": \"scaling\"\n    }}>{`Scaling`}</h4>\n    <p>{`If your application is `}<inlineCode parentName=\"p\">{`stateless`}</inlineCode>{` you can horizontally scale it.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stateless = your appllication doesn't have a `}<inlineCode parentName=\"li\">{`state`}</inlineCode>{`, it doesn't write any local files / keeps local sessions. This prevents pods from falling out of sync.`}</li>\n      <li parentName=\"ul\">{`All traditional databases are `}<inlineCode parentName=\"li\">{`stateful`}</inlineCode></li>\n      <li parentName=\"ul\">{`Most `}<inlineCode parentName=\"li\">{`web applications`}</inlineCode>{` can be made stateless`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Session management needs to be done outside the container`}</li>\n          <li parentName=\"ul\">{`Any file to be saved cannot be saved locally`}</li>\n        </ul></li>\n    </ul>\n    <p>{`If needed, you can use `}<inlineCode parentName=\"p\">{`volumes`}</inlineCode>{` to still run stateful apps.`}</p>\n    <p>{`Those stateful apps can't horizontally scale, but you can run them in a single container and vertically scale (allocate more CPU/Mem/Disk).`}</p>\n    <p>{`Scaling in Kubernetes can be done using the `}<inlineCode parentName=\"p\">{`Replication Controller`}</inlineCode>{`.`}</p>\n    <p>{`The replication controller will ensure a specified number of pod replicas will run at all times.`}</p>\n    <p>{`A pod created with the replica controller will automatically be replaced if they fail, get deleted or are terminated.`}</p>\n    <p>{`Using the replication controller is also recommended if you just want to make sure 1 pod is always running, even after reboots.`}</p>\n    <p>{`You can then run a replication controller with just 1 replica to ensure that it is always running.`}</p>\n    <p>{`To create a replication controller:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# rc-helloworld.yml\napiVersion: v1\nkind: ReplicationController # Changed from Pod\nmetadata:\n  name: helloworld-container\nspec: # Replation controller also has a spec\n  replicas: 2 # set two pod replicas\n  selector:  # select the app\n  app: helloworld\n  template:\n  # stand Pod metadata and spec\n  metadata:\n    name: nodehelloworld.example.com\n    labels:\n    app: helloworld\n  spec:\n    # The containers are listed here\n    containers:\n    - name: k8s-demo\n      image: okeeffed/docker-demo\n      ports:\n      - containerPort: 3000\n`}</code></pre>\n    <p>{`When this controller is created with `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{`, you will see that the two pods are created with a differing suffix.`}</p>\n    <p>{`Now we have horizontally scaled this pod.`}</p>\n    <p>{`If one of these pods is now deleted, the master node will automatically schedule a new one.`}</p>\n    <p>{`We can also scale this by using `}<inlineCode parentName=\"p\">{`kubectl scale --replicas=4 -f <replication-controller-name.yml>`}</inlineCode>{`.`}</p>\n    <p>{`We can also use it with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl get rc # get replication controllers\n# assume helloworld-controller shows up\nkubectl scale --replicas=1 rc/helloworld-container\nkubectl get pods # will show only one pod remaining\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deployments\"\n    }}>{`Deployments`}</h2>\n    <p>{`Replication Set is the next gen Replication Controller:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It supports new selector that can do selection based on filtering according a set of values eg environment either \"dev\" or \"qa\"`}</li>\n      <li parentName=\"ul\">{`It's not only based on equality. You can do more complex things.`}</li>\n      <li parentName=\"ul\">{`This RS is used by the Deployment.`}</li>\n    </ul>\n    <p>{`A deployment is a declaration that allows you to do app `}<inlineCode parentName=\"p\">{`deployments`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`updates`}</inlineCode>{`.`}</p>\n    <p>{`When using the deployment object, you definte the `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` of your application. Kubernetes will then make sure the clusters matches your desired state.`}</p>\n    <p>{`Just using the replication controller or replication set might be cumbersome to deploy apps.`}</p>\n    <p>{`With a deployment object you can:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a deployment (e.g. deploying an app)`}</li>\n      <li parentName=\"ol\">{`Update a deployment (e.g. new version)`}</li>\n      <li parentName=\"ol\">{`Do rolling updates (zero downtime deployments)`}</li>\n      <li parentName=\"ol\">{`Roll back`}</li>\n      <li parentName=\"ol\">{`Pause/resume a deployment (ie rollout to only certain percentage of pods)`}</li>\n    </ol>\n    <p>{`An example of a deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# deployment-helloworld.yml\napiVersion: extensions/v1beta1\nkind: Deployment # Changed from Pod\nmetadata:\n  name: helloworld-deployment\nspec: # Replation controller also has a spec\n  replicas: 3 # set two pod replicas\n  template:\n  # stand Pod metadata and spec\n  metadata:\n    labels:\n    app: helloworld\n  spec:\n    # The containers are listed here\n    containers:\n    - name: k8s-demo\n      image: okeeffed/docker-demo\n      ports:\n      - containerPort: 3000\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"useful-commands\"\n    }}>{`Useful commands`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl get deployments`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get info on current deployments`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl get rs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get info about the replica set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl get pods --show-labels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get pods + labels attached to pods`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl rollout status deployment/helloworld-deployment`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get deployment status`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Run k8s-demo with the image label version 2`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl edit deployment/helloworld-deployment`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Edit the deployment object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl rollout status deployment/helloworld-deployment`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get the status of the rollout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl rollout history `}{`[deployment]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get the rollout history`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl rollout undo `}{`[deployment]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Rollback to previous version`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`kubectl rollout undo `}{`[deployment]`}{` --to-revision=n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Rollback to previous version`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"demo-deployment-notes\"\n    }}>{`Demo: Deployment notes`}</h3>\n    <p>{`Again, get pods will sho the pods with appended suffixes auto-determined by Kubernetes.`}</p>\n    <p>{`You can verify rollout status using the commands above.`}</p>\n    <h2 {...{\n      \"id\": \"services\"\n    }}>{`Services`}</h2>\n    <p>{`Pods themselves are very dynamic, they come and go on the Kubernetes cluster.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When using a `}<inlineCode parentName=\"li\">{`Replication Controller`}</inlineCode>{`, pods are termined and created during scaling operations.`}</li>\n      <li parentName=\"ul\">{`Wehn using `}<inlineCode parentName=\"li\">{`Deployments`}</inlineCode>{`, when updating the image version, pods are terminated and new pods take the place of older pods.`}</li>\n    </ul>\n    <p>{`That's why Pods should never be accessed directly, but always through a Service.`}</p>\n    <p>{`A service is the `}<inlineCode parentName=\"p\">{`logical bridge`}</inlineCode>{` between the \"mortal\" pods and other services or end-users.`}</p>\n    <p>{`When using the `}<inlineCode parentName=\"p\">{`kubectl expose`}</inlineCode>{` command, you create a service for you pod to be accessed externally.`}</p>\n    <p>{`Creating a service will create an endpoint for your pod(s):`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A ClusterIP: a virtual IP address only reachable from within the cluster (this is default)`}</li>\n      <li parentName=\"ol\">{`A NodePort: a port that is the same on each node that is also reachable externally.`}</li>\n      <li parentName=\"ol\">{`A LoadBalancer: created by the Cloud provider that will route external traffic on every node on the NodePort`}</li>\n    </ol>\n    <p>{`The options shown only allow virtual IPs and ports.`}</p>\n    <p>{`There is also a possibility to use `}<inlineCode parentName=\"p\">{`DNS Names`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ExternalName`}</inlineCode>{` can provide a DNS name for the service e.g. for service discovery using DNS.`}</p>\n    <p>{`This `}<strong parentName=\"p\">{`only`}</strong>{` works when the DNS add-on is enabled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-service.yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: helloworld-service\nspec:\n  ports: # specify the ports the service uses\n  - port: 31001\n    nodePort: 31001\n    # name below defined from pod\n    targetPort: nodejs-port\n    protocol: TCP\n  selector:\n  # service for this app\n  app: helloworld\n  type: NodePort\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tags\"\n    }}>{`Tags`}</h2>\n    <p>{`Similar to Labels for AWS`}</p>\n    <p>{`For example, you can label your objects.`}</p>\n    <p>{`For instance: Key could be `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{`, and the value could be `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`staging`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`qa`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`prod`}</inlineCode>{`.`}</p>\n    <p>{`Maybe you could also tag the department that is comes from etc.`}</p>\n    <p>{`Labels are not unique. You can then use `}<inlineCode parentName=\"p\">{`label selectors`}</inlineCode>{` to match labels.`}</p>\n    <p>{`Eg. a particular pod can only run on a node label with \"evironment\" equals \"development\".`}</p>\n    <p>{`More complex matching: \"environment\" in \"development\" or \"qa\".`}</p>\n    <p>{`You can also use labels to tag nodes. Once tagged, you can use labels selectors to let pods only run on specific nodes.`}</p>\n    <p>{`There are two steps required to run a pod on a specific set of nodes:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`First you tag the node`}</li>\n      <li parentName=\"ol\">{`Then you add a `}<inlineCode parentName=\"li\">{`nodeSelector`}</inlineCode>{` to your pod configuration`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl label nodes node1 hardware=high-spec\nkubectl label nodes node1 hardware=low-spec\n`}</code></pre>\n    <p>{`Secondly, add a pod that uses those labels:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n    image: okeeffed/docker-demo\n    ports:\n    - containerPort: 3000\n  nodeSelector:\n  hardware: high-spec\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-using-tags\"\n    }}>{`Demo: Using tags`}</h3>\n    <p>{`It only really makes sense if you have multiple nodes (doesn't really make sense on minikube).`}</p>\n    <h2 {...{\n      \"id\": \"healthchecks\"\n    }}>{`Healthchecks`}</h2>\n    <p>{`If the application malfunctions, the pod and container may still be running but the application may no longer be running. This is where health checks come in.`}</p>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Running a command in the container periodically`}</li>\n      <li parentName=\"ol\">{`Periodic checks on a URL`}</li>\n    </ol>\n    <p>{`The typical prod application behind a load balancer should always have health checks implemented in some way to ensure availability and resiliency.`}</p>\n    <p>{`Below you can see where the healthcheck is. You can check the port or container port name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n    image: okeeffed/docker-demo\n    ports:\n    - containerPort: 3000\n    # ! This is the health check\n    livenessProbe:\n    httpGet:\n      path: /\n      port: 3000\n    initialDelaySeconds: 15\n    timeoutSeconds: 30\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"secrets\"\n    }}>{`Secrets`}</h2>\n    <p>{`A way to distribute credentials, keys, passwords or secret data to the pods.`}</p>\n    <p>{`Kubernetes itself uses this Secrets mechanism to provide the credentials to access the internal API.`}</p>\n    <p>{`You can use the same mechanism to provide secrets to your application.`}</p>\n    <p><inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` is just one way to provide secrets that is native to Kubernetes. There are still other ways to do this.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-use-them\"\n    }}>{`How to use them`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Use as env vars`}</li>\n      <li parentName=\"ul\">{`Use as a file in a pod`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`This requires volumes to be mounted`}</li>\n          <li parentName=\"ul\">{`In this volume you have files`}</li>\n          <li parentName=\"ul\">{`This can be use for things like dotenv files`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`You can use an external image to pull secrets (private image registry)`}</li>\n    </ul>\n    <p>{`Generating:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo -n \"root\" > ./username.txt\necho -n \"password\" > ./password.txt\nkubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt\n# > secret \"db-user-pass\" created\n`}</code></pre>\n    <p>{`A secret can also be a SSH key or SSL cert.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create secret generic ssl-cert --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert-=ssl-cert=mysslcert.crt\n`}</code></pre>\n    <p>{`To generate secrets using yaml defs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Secret\nmetadata:\n  name: db-secret\ntype: Opaque\ndata:\n  password: pwd\n  username: usr\n`}</code></pre>\n    <p>{`Then, you can generate it as base64 like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo -n \"password\" | base64\n# > pwd\n\nkubectl create -f secrets-db-secret.yml\n# > secret \"db-secret\" created\n`}</code></pre>\n    <p>{`To create a pod that uses secrets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n    image: okeeffed/docker-demo\n    ports:\n    - containerPort: 3000\n    # @@@ This are the envs\n    env:\n    - name: SECRET_USERNAME\n      valueFrom:\n      secretKeyRef:\n        name: db-secret\n        key: username\n    - name: SECRET_PASSWORD\n      [...]\n`}</code></pre>\n    <p>{`Alternatively when providing in a file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n  image: okeeffed/docker-demo\n  ports:\n  - containerPort: 3000\n  # @@@ This are the envs in a volume mount\n  volumeMounts:\n  - name: credvolume\n    mountPath: /etc/creds\n    readOnly: true\n  volumes:\n  - name: credvolume\n  secret:\n    secretName: db-secrets\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-wordpress-secrets\"\n    }}>{`Demo: Wordpress Secrets`}</h3>\n    <p>{`This demo ends up creating a secrets file, a pod definition and a service to expose the wordpress pod.`}</p>\n    <p>{`However, note that deleting the current setup will result in a container restarting to maintain state, but when that happens the WordPress site has to be re-installed because the data was not saved. The solution for this will be in the volumes lab.`}</p>\n    <h2 {...{\n      \"id\": \"web-ui\"\n    }}>{`Web UI`}</h2>\n    <p>{`Kubernetes comes with a `}<inlineCode parentName=\"p\">{`Web UI`}</inlineCode>{` you can use instead of kubectl commands.`}</p>\n    <p>{`You can use it to:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Get an overview of running applications on your cluster`}</li>\n      <li parentName=\"ol\">{`Creating and modifying individual Kubernetes resources and workloads (like kubectl create and delete)`}</li>\n      <li parentName=\"ol\">{`Retrieve info on state or resources.`}</li>\n    </ol>\n    <p>{`You can reach this UI at `}<inlineCode parentName=\"p\">{`https://<kubernetes-master>/ui`}</inlineCode></p>\n    <p>{`If you cannot access it, you can install it manually:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml\n# If the password is asked\nkubectl config view\n\n# If you're on minikube\nminikube dashboard # or --url for the url\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-web-ui\"\n    }}>{`Demo: Web UI`}</h3>\n    <p>{`Using the web ui you can see some really interesting info and graphs on usage.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}