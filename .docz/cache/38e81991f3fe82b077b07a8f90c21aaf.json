{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","mtime":1562563032042},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAA2C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA3C,WAAmG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAnG,6BAA6K;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA7K,kCAAsQ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAtQ,uCAJK,EAKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6yCAAL,CARK,EAsEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0kBAAL,CAtEK,EAmGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,06CAAL,CAnGK,CAAP;AAmKD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAlLMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java---basic-tree-data-structure\"\n    }}>{`Java - Basic Tree Data Structure`}</h1>\n    <p>{`This is a basic implementation. The `}<inlineCode parentName=\"p\">{`bfs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dfs`}</inlineCode>{` methods each return a `}<inlineCode parentName=\"p\">{`List<Integer>`}</inlineCode>{` of the data stored in each `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` to make a comparison in the test.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Tree.java\nimport main.java.Node;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Tree {\n    public Node root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Tree(Node root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"this.root is null\");\n        }\n\n        List<Node> n = new ArrayList<>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n            if (child.children != null) {\n                n.addAll(child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n\n    public List<Integer> dfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"No root\");\n        }\n\n        List<Node> n = new ArrayList<Node>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<Integer>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n\n            if (child.children != null) {\n                n.addAll(0, child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Node.java\npackage main.java;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Node {\n    public Integer data;\n    public List<Node> children;\n\n    public Node() {\n        this.data = null;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data) {\n        this.data = data;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data, List<Node> children) {\n        this.data = data;\n        this.children = new ArrayList<>();\n        this.children.addAll(children);\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// test/java/TreeTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class TreeTest {\n    @Test\n    public void testBFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            expected.add(i + 1);\n        }\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.bfs();\n\n        assertEquals(expected, res);\n    }\n\n    @Test\n    public void testDFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(4);\n        expected.add(3);\n        expected.add(5);\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.dfs();\n\n        assertEquals(expected, res);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}