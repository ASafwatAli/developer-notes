{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/TH-React-Basics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/TH-React-Basics.md","mtime":1562563032084},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/TH-React-Basics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAJK,EAOL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAPK,EAUL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAVK,EAWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAXK,EAYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CAZK,EAgBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,CAhBK,EAiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAjBK,EAkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAlBK,EAmBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAnBK,EAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH,CApBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DArBK,EAsBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAtBK,EAuBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uHAvBK,EAwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+HAxBK,EAyBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAAmG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnG,CAzBK,EA0BL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA1BK,EA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DA7BK,EA8BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GA9BK,EA+BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EA/BK,EAgCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IAhCK,EAiCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGAjCK,EAkCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAlCK,EAqCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BArCK,EAsCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAHF,CAtCK,EA2CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtB,4BA3CK,EA4CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAAL,CA5CK,EAsDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAtDK,EAuDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAvDK,EAwDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAL,CAxDK,EA4DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEA5DK,EA6DL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA7DK,EAgEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAhEK,EAmEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,CAnEK,EAoEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sdAAL,CApEK,EAuFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,CAvFK,EAwFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sPAAL,CAxFK,EAqGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFArGK,EAsGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAtGK,EAuGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAvGK,EAwGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,CAxGK,EAyGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uPAAL,CAzGK,EAsHL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAtHK,EAyHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAzHK,EA0HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EA1HK,EA2HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCA3HK,EA4HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uIA5HK,EA6HL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA7HK,EAgIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAhIK,EAmIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAnIK,EAoIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CApIK,EAqIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uNAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CALF,CArIK,EA4IL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+pBAAL,CA5IK,EAqKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BArKK,EAwKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kLAxKK,EAyKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mNAHF,CAzKK,EA8KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mxBAAL,CA9KK,EA4ML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CA5MK,EA+ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GA/MK,EAgNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6QAJF,CAhNK,EAsNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,25BAAL,CAtNK,EA4PL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDA5PK,EA+PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DA/PK,EAgQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAhQK,EAiQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6IADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAQ,IAAA,UAAU,EAAC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAApB,4KAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAQ,IAAA,UAAU,EAAC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAApB,yLAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFALF,CAjQK,EAwQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,i6CAAL,CAxQK,EA8UL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CA9UK,EAiVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GAjVK,EAkVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8KADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wZAHF,CAlVK,EAuVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,knEAAL,CAvVK,EAobL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCApbK,EAubL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAvbK,EA0bL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFA1bK,EA2bL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iJA3bK,EA4bL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHA5bK,EA6bL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+JADF,CA7bK,EAgcL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,i4EAAL,CAhcK,EAoiBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCApiBK,EAuiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sNAviBK,EAwiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gMAxiBK,EAyiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yHAziBK,EA0iBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kIAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oKAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAJF,CA1iBK,EAgjBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0gGAAL,CAhjBK,EAuqBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAvqBK,EA0qBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA1qBK,EA6qBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GA7qBK,EA8qBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CA9qBK,EAkrBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAlrBK,EAmrBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAnrBK,EAorBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8OAprBK,EAqrBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJArrBK,EAsrBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oLAtrBK,EAurBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAvrBK,EAwrBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAxrBK,EA2rBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0MA3rBK,EA4rBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEA5rBK,EA6rBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAHF,CA7rBK,EAksBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ilFAAL,CAlsBK,EAgzBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAhzBK,EAmzBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAnzBK,EAozBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0KAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sPAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+KALF,CApzBK,EA2zBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4sGAAL,CA3zBK,EAi7BL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAj7BK,EAo7BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJAp7BK,EAq7BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAr7BK,EAs7BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gJADF,CAt7BK,EAy7BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,k9HAAL,CAz7BK,EA2kCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDA3kCK,EA8kCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFA9kCK,EA+kCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJADF,CA/kCK,EAklCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+6LAAL,CAllCK,EAkyCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAlyCK,EAqyCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAryCK,EAwyCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAxyCK,EAyyCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAzyCK,EA0yCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GADF,CA1yCK,EA6yCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,myMAAL,CA7yCK,EA2gDL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCA3gDK,EA8gDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDA9gDK,EA+gDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oHAAmI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnI,CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFAHF,CA/gDK,EAohDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mxNAAL,CAphDK,EAqwDL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CArwDK,EAwwDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yJADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IAFF,CAxwDK,EA4wDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mnPAAL,CA5wDK,EAshEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAthEK,EAyhEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAzhEK,EA0hEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FALF,CA1hEK,CAAP;AAkiED;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAjjEMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"th-react-basics-notes\"\n    }}>{`TH React Basics Notes`}</h1>\n    <h2 {...{\n      \"id\": \"threact-1-first-steps-in-react\"\n    }}>{`THREACT-1: First Steps in React`}</h2>\n    <h4 {...{\n      \"id\": \"threact-2-why-react\"\n    }}>{`THREACT-2: Why React`}</h4>\n    <p>{`React is a library for creating UIs.`}</p>\n    <p>{`Two huge benefits:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`It's declarative`}</li>\n      <li parentName=\"ol\">{`It's component based`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Components`}</strong></p>\n    <p>{`UI Composed of divs, spans, inputs and others.`}</p>\n    <p>{`React allows us to build our own components and use them as built in HTML elements.`}</p>\n    <p>{`Tested once, reused everywhere.`}</p>\n    <p><strong parentName=\"p\">{`Declarative`}</strong></p>\n    <p>{`This means our program describes what we are doing.`}</p>\n    <p>{`JS is normally imperative, whereas something like HTML is declarative.`}</p>\n    <p>{`Normally, we would have a data model with JS and then the view made up with HTML. This is hard to keep in sync.`}</p>\n    <p>{`Example, if the second item in the data model is removed, then we would also need to remove a second list item in HTML.`}</p>\n    <p>{`React makes an efficient and fast way to \"remove a DOM and reload\". This is done by using a `}<em parentName=\"p\">{`Virtual DOM`}</em></p>\n    <h4 {...{\n      \"id\": \"threact-3-state-and-the-virtual-dom\"\n    }}>{`THREACT-3: State and the Virtual DOM`}</h4>\n    <p>{`We describe the application entirely in the .js files.`}</p>\n    <p>{`The JS representation of the DOM is referred to as the Virtual DOM. This is cheap and fast to use.`}</p>\n    <p>{`Interacting with the DOM is a lot slower than manipulating JavaScript.`}</p>\n    <p>{`When we write our React markup code, React takes on the responsibility of rendering the real DOM element on the Virtual DOM we define.`}</p>\n    <p>{`It's smart to remember the previous and current DOM and makes the minimum changes needed.`}</p>\n    <h4 {...{\n      \"id\": \"threact-3-understanding-jsx\"\n    }}>{`THREACT-3: Understanding JSX`}</h4>\n    <p>{`DOM Elements have:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The name eg. div, span`}</li>\n      <li parentName=\"ol\">{`A list of attribtues -> key, value pairs eg href=\"value\"`}</li>\n      <li parentName=\"ol\">{`It may or may not have children`}</li>\n    </ol>\n    <p>{`To describe an `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{` tag, we use all three:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`React.createElement(\n  'a',\n  {\n    href: 'https://abc.com'\n  },\n  'abc'\n);\n`}</code></pre>\n    <p>{`However, it is not convenient to do this call. This is where JSX comes in.`}</p>\n    <p>{`So the above is equivalent to...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const myLink = <a href=\"https://abc.com\">abc</a>;\n`}</code></pre>\n    <p>{`The compiler that we change JSX to what we need is Babel.`}</p>\n    <h4 {...{\n      \"id\": \"threact-4-first-application\"\n    }}>{`THREACT-4: First Application`}</h4>\n    <p>{`app.css\napp.jsx\nindex.html`}</p>\n    <p><strong parentName=\"p\">{`index.html`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Scoreboard</title>\n    <link rel=\"stylesheet\" href=\"./app.css\" />\n  </head>\n\n  <body>\n    <div id=\"container\">Loading...</div>\n    <script src=\"./vendor/react.js\"></script>\n    <script src=\"./vendor/react-dom.js\"></script>\n    <script src=\"./vendor/babel-browser.min.js\"></script>\n    <script type=\"text/babel\" src=\"./app.jsx\"></script>\n  </body>\n</html>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`app.jsx`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Application() {\n  return (\n    <div>\n      <h1>Hello from React</h1>\n      <p>I was rendered from the Application component</p>\n    </div>\n  );\n}\n\nReactDOM.render(<h1>Hello</h1>, document.getElementById('container'));\n`}</code></pre>\n    <p>{`Really, we want to create a component to render instead of individual components.`}</p>\n    <p>{`Components need to start with a capital as convention.`}</p>\n    <p>{`A react component must only return one DOM element.`}</p>\n    <p><strong parentName=\"p\">{`app.jsx`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Application() {\n  return (\n    <div>\n      <h1>Hello from React</h1>\n      <p>I was rendered from the Application component</p>\n    </div>\n  );\n}\n\nReactDOM.render(<Application />, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-5-react-developer-tools\"\n    }}>{`THREACT-5: React Developer Tools`}</h4>\n    <p>{`It is a lot easier to debug with the React DevTools extension.`}</p>\n    <p>{`Download React Developer Tools. Available on both Chrome and Firefox.`}</p>\n    <p>{`This represents the virtual DOM.`}</p>\n    <p>{`React also highlights what is being inspected if you click on the React tab after highlighting the section you are looking for.`}</p>\n    <h2 {...{\n      \"id\": \"threact-6-thinking-in-components\"\n    }}>{`THREACT-6: Thinking in Components`}</h2>\n    <h4 {...{\n      \"id\": \"threact-7-mocking-up-an-app\"\n    }}>{`THREACT-7: Mocking up an App`}</h4>\n    <p>{`It's best to mock up the application in JSX.`}</p>\n    <p>{`That way, we can apply some styles now.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`className in JSX is used to define a class`}</li>\n      <li parentName=\"ul\">{`in React JSX, it is customary to use double quotes`}</li>\n      <li parentName=\"ul\">{`if you need to evaluate a numeral, use {} instead of \"\"`}</li>\n      <li parentName=\"ul\">{`in the following example, we could copy and past the \"player\" div to have multiple players, however as you could image, this will be anti-DRY practise. We will eventually create another component for this!`}</li>\n      <li parentName=\"ul\">{`right now, the following code is static`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Application() {\n  return (\n    <div className=\"scoreboard\">\n      <div className=\"header\">\n        <h1>Scoreboard</h1>\n      </div>\n\n      <div className=\"players\">\n        <div className=\"player\">\n          <div className=\"player-name\">Dennis</div>\n          <div className=\"player-score\">\n            <div className=\"counter\">\n              <button className=\"counter-action decrement\"> - </button>\n              <div className=\"counter-score\"> 31 </div>\n              <button className=\"counter-action increment\"> + </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-8-properties\"\n    }}>{`THREACT-8: Properties`}</h4>\n    <p>{`The application so far is pretty useless. We can use properties to customise our components. We can then use the attribute syntax which is used to create the virtual DOM.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`we can allow our function to take an argument which will come from our reactDom.render function.`}</li>\n      <li parentName=\"ul\">{`props is the convention for argument named used`}</li>\n      <li parentName=\"ul\">{`anything with {} will be evaluated as plain old JavaScript - it MUST be an expression that brings back a value - at the moment, this means no conditional logic (if/else), we can see how to do this later!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Application(props) {\n  return (\n    <div className=\"scoreboard\">\n      <div className=\"header\">\n        <h1>{props.title}</h1>\n      </div>\n\n      <div className=\"players\">\n        <div className=\"player\">\n          <div className=\"player-name\">Dennis</div>\n          <div className=\"player-score\">\n            <div className=\"counter\">\n              <button className=\"counter-action decrement\"> - </button>\n              <div className=\"counter-score\"> 31 </div>\n              <button className=\"counter-action increment\"> + </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <Application title=\"My Scoreboard\" />,\n  document.getElementById('container')\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-9-proptypes-and-defaultprops\"\n    }}>{`THREACT-9: PropTypes and DefaultProps`}</h4>\n    <p>{`PropTypes is an object that contains all the keys our object can take and a special type definition.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`if you place a numeral instead of a string, it will render, but it will cause a React error because PropTypes \"title\" is looking for a string`}</li>\n      <li parentName=\"ul\">{`we can use .isRequired to make a PropType property required`}</li>\n      <li parentName=\"ul\">{`we can set default values with .defaultProps if we want`}</li>\n      <li parentName=\"ul\">{`you can find a list of propTypes in the docs - propTypes aren't required, but can add more clarity - a defaultProps value is essentially redundant if propTypes has that same value as required, but it is left in this next code block for clarity (will be removed)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Application(props) {\n  return (\n    <div className=\"scoreboard\">\n      <div className=\"header\">\n        <h1>{props.title}</h1>\n      </div>\n\n      <div className=\"players\">\n        <div className=\"player\">\n          <div className=\"player-name\">Dennis</div>\n          <div className=\"player-score\">\n            <div className=\"counter\">\n              <button className=\"counter-action decrement\"> - </button>\n              <div className=\"counter-score\"> 31 </div>\n              <button className=\"counter-action increment\"> + </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nApplication.propTypes = {\n  title: React.PropTypes.string.isRequired\n};\n\nApplication.defaultProps = {\n  title: 'Scoreboard'\n};\n\nReactDOM.render(\n  <Application title=\"My Scoreboard\" />,\n  document.getElementById('container')\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-10-decomposing-our-application\"\n    }}>{`THREACT-10: Decomposing our Application`}</h4>\n    <p>{`Breaking down our Application into smaller components.`}</p>\n    <p>{`To this is, we think of Application from a high level.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`In this example, we can set \"isRequired\" to Header.propTypes because the default will be passed down from the Application.propTypes`}</li>\n      <li parentName=\"ul\">{`The Player function is using JSX to replace my name and my score with props values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Note:`}</strong>{` if you look into the React console, you should note that these functions we declare and render in the virtual DOM also come up as components. How handy for debugging!`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Note:`}</strong>{` if you look at the Counter function, it has been decomposed from Application -> Player -> Counter. The required props have been passed down. This is very common practise in React!`}</li>\n      <li parentName=\"ul\">{`How to break it down is up to you. Pros and cons for how modular you go.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Header(props) {\n  return (\n    <div className=\"header\">\n      <h1>{props.title}</h1>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  title: React.PropTypes.string.isRequired\n};\n\nfunction Counter(props) {\n  return (\n    <div className=\"counter\">\n      <button className=\"counter-action decrement\"> - </button>\n      <div className=\"counter-score\"> {props.score}</div>\n      <button className=\"counter-action increment\"> + </button>\n    </div>\n  );\n}\n\nCounter.propTypes = {\n  score: React.PropTypes.number.isRequired\n};\n\nfunction Player(props) {\n  return (\n    <div className=\"player\">\n      <div className=\"player-name\">{props.name}</div>\n      <div className=\"player-score\">\n        <Counter score={props.score} />\n      </div>\n    </div>\n  );\n}\n\nPlayer.propTypes = {\n  name: React.PropTypes.string.isRequired,\n  score: React.PropTypes.number.isRequired\n};\n\nfunction Application(props) {\n  return (\n    <div className=\"scoreboard\">\n      <Header title={props.title} />\n\n      <div className=\"players\">\n        <Player name=\"Dennis\" score={32} />\n        <Player name=\"Ben\" score={34} />\n      </div>\n    </div>\n  );\n}\n\nApplication.propTypes = {\n  title: React.PropTypes.string\n};\n\nApplication.defaultProps = {\n  title: 'Scoreboard'\n};\n\nReactDOM.render(\n  <Application title=\"My Scoreboard\" />,\n  document.getElementById('container')\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-11-loops-and-lists-in-jsx\"\n    }}>{`THREACT-11: Loops and Lists in JSX`}</h4>\n    <p>{`Currently, we have two hard coded players, but we want to be able to loop through an array of this.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Notice that Application.propTypes now requires an array of objects for the term players. We use shape to define exactly the properties of this object that we require.`}</li>\n      <li parentName=\"ul\">{`The JSX map function used to dynamically create players will return an array which in turn will be rendered as a list`}</li>\n      <li parentName=\"ul\">{`We use a \"key\" for each component in the loop to let the virtual DOM know which components are simply being rearranged or reordered so that we do not need to re-render more than we have to! (remember, the goal of React is to efficiently render the DOM) - The key must be unique for each DOM node - To see how the error would work, run this code but take out the \"key\" from the renderDOM function.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\"> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\"> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} />\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n}\n\nfunction Application(props) {\n    return(\n        <div className=\"scoreboard\">\n            <Header title={props.title}/>\n\n            <div className=\"players\">\n                {props.players.map(function (player) {\n                    return <Player name={player.name} score{player.score} key={player.id} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nApplication.propTypes = {\n    title: React.PropTypes.string,\n    player: React.PropTypes.arrayOf(React.PropTypes.shape({\n        name: React.PropTypes.string.isRequired,\n        score: React.PropTypes.number.isRequired,\n        id: React.PropTypes.number.isRequired,\n    })).isRequired,\n};\n\nApplication.defaultProps = {\n    title: \"Scoreboard\",\n};\n\nReactDOM.render(<Application players={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"threact-12-stateful-components\"\n    }}>{`THREACT-12: Stateful Components`}</h2>\n    <h4 {...{\n      \"id\": \"threact-13-creating-a-component-class\"\n    }}>{`THREACT-13: Creating a Component Class`}</h4>\n    <p>{`Right now, our application is still static. We cannot update any data details.`}</p>\n    <p>{`We need to add some State. So far, we have been writing Stateless Function Components (SFC). This form isn't designed for handling state.`}</p>\n    <p>{`We need to build a component class, but this comes with complexity. Now we will refactor to reflect this.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`note, when create a object literal (or class in ECMA2015), you also must not forget to use the keyword \"this\" - eg. React.createClass is pre ECMA2015`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\n// functionally the same, we are preparing to be able to add state to the component\n\nvar Counter = React.createClass({\n    propTypes: {\n        score: React.PropTypes.number.isRequired,\n    },\n    render: function() {\n        return (\n            <div className=\"counter\">\n                <button className=\"counter-action decrement\"> - </button>\n                <div className=\"counter-score\"> {this.props.score }</div>\n                <button className=\"counter-action increment\"> + </button>\n            </div>\n        );\n    }\n});\n\n// function Counter(props) {} - this can be removed\n\n// Counter.propTypes = {} - this can be removed\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} />\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n}\n\nfunction Application(props) {\n    return(\n        <div className=\"scoreboard\">\n            <Header title={props.title}/>\n\n            <div className=\"players\">\n                {props.players.map(function (player) {\n                    return <Player name={player.name} score{player.score} key={player.id} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nApplication.propTypes = {\n    title: React.PropTypes.string,\n    player: React.PropTypes.arrayOf(React.PropTypes.shape({\n        name: React.PropTypes.string.isRequired,\n        score: React.PropTypes.number.isRequired,\n        id: React.PropTypes.number.isRequired,\n    })).isRequired,\n};\n\nApplication.defaultProps = {\n    title: \"Scoreboard\",\n};\n\nReactDOM.render(<Application players={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-14-understanding-state\"\n    }}>{`THREACT-14: Understanding State`}</h4>\n    <p>{`Managing data that can change. React has a mechanism to deal with State. React doesn't provide everything, and you're encouraged to use other libraries to deal with things such as AJAX and State Management.`}</p>\n    <p>{`A popular design pattern used is Flux (what we will use). It is also recommended to use Redux which takes Flux a little bit further, however Flux and Redux are topics for another time.`}</p>\n    <p>{`After understanding state, it is recommended to use these other libraries to save time and work more effectively.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`After clicking on a button, the DOM will know to be re-rendered to show to correct State`}</li>\n      <li parentName=\"ul\">{`We need to the this.setState() function to let React know to re-render itself, this is why we don't just update the score!`}</li>\n      <li parentName=\"ul\">{`We use this.decrementScore in the onClick attribute, but not this.decrementScore.bind(this). React does this automatically for us in a high performance way.`}</li>\n      <li parentName=\"ul\">{`We have updated props to show an example if we want to pass props and then use them for an initial state.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\n// functionally the same, we are preparing to be able to add state to the component\n\nvar Counter = React.createClass({\n    propTypes: {\n        // this is no longer needed\n        // score: React.PropTypes.number.isRequired,\n        initialScore: React.PropTypes.number.isRequired\n    },\n    getInitialState: function() {\n        return {\n            score: this.props.initialScore,\n        }\n    },\n    incrementScore: function(e) {\n        // uncomment if you want to check out the event in the console\n        // console.log(\"increment score\", e);\n        this.setState({\n            score: (this.state.score + 1),\n        })\n    },\n    decrementScore: function(e) {\n        this.setState({\n            score: (this.state.score - 1),\n        })\n    },\n    render: function() {\n        return (\n            <div className=\"counter\">\n                <button className=\"counter-action decrement\" onClick={this.decrementScore}> - </button>\n                <div className=\"counter-score\"> {this.state.score }</div>\n                <button className=\"counter-action increment\" onClick={this.incrementScore}> + </button>\n            </div>\n        );\n    }\n});\n\n// function Counter(props) {} - this can be removed\n\n// Counter.propTypes = {} - this can be removed\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter initialScore={props.score}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n}\n\nfunction Application(props) {\n    return(\n        <div className=\"scoreboard\">\n            <Header title={props.title}/>\n\n            <div className=\"players\">\n                {props.players.map(function (player) {\n                    return <Player name={player.name} score{player.score} key={player.id} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nApplication.propTypes = {\n    title: React.PropTypes.string,\n    player: React.PropTypes.arrayOf(React.PropTypes.shape({\n        name: React.PropTypes.string.isRequired,\n        score: React.PropTypes.number.isRequired,\n        id: React.PropTypes.number.isRequired,\n    })).isRequired,\n};\n\nApplication.defaultProps = {\n    title: \"Scoreboard\",\n};\n\nReactDOM.render(<Application players={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"threact-15-designing-data-flow\"\n    }}>{`THREACT-15: Designing Data Flow`}</h2>\n    <h4 {...{\n      \"id\": \"threact-16-unidirectional-data-flow\"\n    }}>{`THREACT-16: Unidirectional Data Flow`}</h4>\n    <p>{`It's cumbersome to maintain State when applications scale. We should think of State as the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Application State`}</li>\n      <li parentName=\"ol\">{`Component State`}</li>\n    </ol>\n    <p>{`Component state is normally not shared or visible outside of a component.`}</p>\n    <p>{`Application state should be handled as high up as possible. We can pass all the changes down using properties.`}</p>\n    <p>{`Because of the direction of data flow, parents don't call methods to change the values of children. Instead, they pass down new values to declare how the children should be re-rendered. (Back to the whole Declarative programming!)`}</p>\n    <p>{`This Parent passing down to Child is what we call Unidirectional Data Flow. If it changes at the top, it will cascade down the virtual DOM.`}</p>\n    <p>{`Since children cannot talk to parents, we can implement callback functions to update data. When a child wants to indicate a State should change, they will use the callback.`}</p>\n    <p>{`Currently, we have State in a number of places. We will change this to become more unidirectional.`}</p>\n    <h4 {...{\n      \"id\": \"threact-17-restructuring-state\"\n    }}>{`THREACT-17: Restructuring State`}</h4>\n    <p>{`At the moment, we have one State. Our counter component. However, as useful as it has been to show how States work by using counter, the State of the counter is really a state of a Player Score.`}</p>\n    <p>{`We're going to relocate the state up to the Application.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`implement back the Counter function`}</li>\n      <li parentName=\"ul\">{`onClick handlers removed`}</li>\n      <li parentName=\"ul\">{`Application is going to become the stateful component`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\"> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\"> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n}\n\n// function Application(props) {} - now this is removed\n// props moved into the class\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title}/>\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player) {\n                        return <Player name={player.name} score{player.score} key={player.id} />\n                    })}\n                </div>\n            </div>\n        );\n    }\n});\n\n// this is also removed\n// Application.defaultProps = {\n//  title: \"Scoreboard\",\n// };\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-18-communicating-events\"\n    }}>{`THREACT-18: Communicating Events`}</h4>\n    <p>{`We now need to implement these callback functions so that we can change our counter.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`reimplement the onClick function`}</li>\n      <li parentName=\"ul\">{`we add onChange functions to pass data up the tree`}</li>\n      <li parentName=\"ul\">{`at the Application level where player is called, we can call the function but we do need to .bind(this) for the particular instance since it is called on an array`}</li>\n      <li parentName=\"ul\">{`to know which player score to update, we use the map function's second parameter which will pass an index. This we can continue passing to let the function know which score to change. - AGAIN, MAKE SURE YOU BIND SINCE WE PASS AN ANON FUNC`}</li>\n      <li parentName=\"ul\">{`You can verify that the score is being tracked by the Application and not the Counter by inspecting this in the console and checking out the values of the Application.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title}/>\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-19-building-the-statistics-component\"\n    }}>{`THREACT-19: Building the Statistics Component`}</h4>\n    <p>{`The problem with keeping the score locally is that if wanted to do something (eg show to total score) we wouldn't have had access to that.`}</p>\n    <p>{`Let's show that by creating some stats.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When creating table elements, make sure you add in the tbody tag too! Otherwise, this will cause issues between the DOM and Virtual DOM.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nfunction Stats(props) {\n    // you don't have to store it, but it's handy for organisation\n    var totalPlayers = props.players.length;\n    var totalPoints = props.players.reduce(function(total, player){\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    players: React.PropTypes.array.isRequired,\n};\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <Stats />\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title} players={this.state.players} />\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-20-adding-players-to-the-scoreboard\"\n    }}>{`THREACT-20: Adding Players to the Scoreboard`}</h4>\n    <p>{`In React, States are our responsibility. What happens if we need to add players?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`form values need to be handled differently due to the unidirectional flow and re-rendering. - to update State, we need an onChange handler`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nvar nextId = 4;\n\nvar AddPlayerForm = React.createClass({\n    propTypes: {\n        onAdd: React.PropTypes.func.isRequired,\n    },\n    getInitialState: function() {\n        return {\n            name: \"\"\n        };\n    },\n    onNameChange: function(e) {\n        // uncomment to see the changes on target value\n        // console.log(\"onNameChange\", e.target.value);\n        this.setState({name: e.target.value});\n    },\n    onSubmit: function(e) {\n        e.preventDefault();\n\n        this.props.onAdd(this.state.name);\n        this.setState({name: \"\"});\n    },\n    render: function() {\n        return (\n            <div className=\"add-player-form\">\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" value={this.state.name} onChange={this.onNameChange} />\n                    <input type=\"submit\" value=\"Add Player\" />\n                </form>\n            </div>\n        );\n    }\n});\n\nfunction Stats(props) {\n    // you don't have to store it, but it's handy for organisation\n    var totalPlayers = props.players.length;\n    var totalPoints = props.players.reduce(function(total, player){\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    players: React.PropTypes.array.isRequired,\n};\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <Stats />\n            <h1>{props.title}</h1>\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                <a className=\"remove-player\" onClick={props.onRemove}>x</a>\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n    onRemove: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n    onPlayerRemove: function(index) {\n        // uncomment to see the player index\n        // console.log('remove', index);\n        this.state.players.splice(index, 1);\n        setState(this.state);\n    },\n    onPlayerAdd: function() {\n        // uncomment to see new player name\n        //console.log('Player added:', name);\n        this.state.players.push({\n            name: name,\n            score: 0,\n            id: nextId,\n        });\n\n        /*\n            NOTE: in something like Redux, we don't update the state itself, we actually create a brand new state object\n        */\n\n        this.setState(this.state);\n        nextId += 1;\n    };\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title} players={this.state.players} />\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            onRemove={function() {\n                                this.onRemovePlayer(index);\n                                }.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n                <AddPlayerForm onAdd={this.onPlayerAdd} />\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"threact-21-component-lifecyle\"\n    }}>{`THREACT-21: Component Lifecyle`}</h2>\n    <h4 {...{\n      \"id\": \"threact-22-designing-a-stopwatch\"\n    }}>{`THREACT-22: Designing a Stopwatch`}</h4>\n    <p>{`Let's build a more advanced component. A stopwatch.`}</p>\n    <p>{`We will need a timer in seconds. We will have a button to stop and start the timer.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The clock will continue ticking, so this presents the unique challenge of continually changing State.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nvar nextId = 4;\n\nvar StopWatch = React.createClass({\n    render: function() {\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <div className=\"stopwatch-time\">0</div>\n                <button>Start</button>\n                <button>Reset</button>\n            </div>\n        );\n    }\n});\n\nvar AddPlayerForm = React.createClass({\n    propTypes: {\n        onAdd: React.PropTypes.func.isRequired,\n    },\n    getInitialState: function() {\n        return {\n            name: \"\"\n        };\n    },\n    onNameChange: function(e) {\n        // uncomment to see the changes on target value\n        // console.log(\"onNameChange\", e.target.value);\n        this.setState({name: e.target.value});\n    },\n    onSubmit: function(e) {\n        e.preventDefault();\n\n        this.props.onAdd(this.state.name);\n        this.setState({name: \"\"});\n    },\n    render: function() {\n        return (\n            <div className=\"add-player-form\">\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" value={this.state.name} onChange={this.onNameChange} />\n                    <input type=\"submit\" value=\"Add Player\" />\n                </form>\n            </div>\n        );\n    }\n});\n\nfunction Stats(props) {\n    // you don't have to store it, but it's handy for organisation\n    var totalPlayers = props.players.length;\n    var totalPoints = props.players.reduce(function(total, player){\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    players: React.PropTypes.array.isRequired,\n};\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <Stats />\n            <h1>{props.title}</h1>\n            <Stopwatch />\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                <a className=\"remove-player\" onClick={props.onRemove}>x</a>\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n    onRemove: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n    onPlayerRemove: function(index) {\n        // uncomment to see the player index\n        // console.log('remove', index);\n        this.state.players.splice(index, 1);\n        setState(this.state);\n    },\n    onPlayerAdd: function() {\n        // uncomment to see new player name\n        //console.log('Player added:', name);\n        this.state.players.push({\n            name: name,\n            score: 0,\n            id: nextId,\n        });\n\n        /*\n            NOTE: in something like Redux, we don't update the state itself, we actually create a brand new state object\n        */\n\n        this.setState(this.state);\n        nextId += 1;\n    };\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title} players={this.state.players} />\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            onRemove={function() {\n                                this.onRemovePlayer(index);\n                                }.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n                <AddPlayerForm onAdd={this.onPlayerAdd} />\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-23-stopwatch-state\"\n    }}>{`THREACT-23: Stopwatch State`}</h4>\n    <p>{`Stopwatch will either be running, or it won't be.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Implement the getInitialState method for Stopwatch`}</li>\n      <li parentName=\"ul\">{`One way to implement the button name depending on the state is to have control logic and a var that equals `}<button>{`[state]`}</button></li>\n      <li parentName=\"ul\">{`The other way is to use a ternary operator. We can use this in a JSX expression!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nvar nextId = 4;\n\nvar StopWatch = React.createClass({\n    getInitialState: function () {\n        return {\n            running: false,\n\n        };\n    },\n    onStop: function() {\n        this.setState({ running: false });\n    },\n    onStart: function() {\n        this.setState({ running: true });\n    },\n    onReset: function() {\n\n    },\n    render: function() {\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <div className=\"stopwatch-time\">0</div>\n                { this.state.running ?\n                    <button onClick={this.onStop}>Stop</button>\n                    :\n                    <button onClick={this.onStart}>Start</button>;\n                }\n                <button onClick={this.onReset}>Reset</button>\n            </div>\n        );\n    }\n});\n\nvar AddPlayerForm = React.createClass({\n    propTypes: {\n        onAdd: React.PropTypes.func.isRequired,\n    },\n    getInitialState: function() {\n        return {\n            name: \"\"\n        };\n    },\n    onNameChange: function(e) {\n        // uncomment to see the changes on target value\n        // console.log(\"onNameChange\", e.target.value);\n        this.setState({name: e.target.value});\n    },\n    onSubmit: function(e) {\n        e.preventDefault();\n\n        this.props.onAdd(this.state.name);\n        this.setState({name: \"\"});\n    },\n    render: function() {\n        return (\n            <div className=\"add-player-form\">\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" value={this.state.name} onChange={this.onNameChange} />\n                    <input type=\"submit\" value=\"Add Player\" />\n                </form>\n            </div>\n        );\n    }\n});\n\nfunction Stats(props) {\n    // you don't have to store it, but it's handy for organisation\n    var totalPlayers = props.players.length;\n    var totalPoints = props.players.reduce(function(total, player){\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    players: React.PropTypes.array.isRequired,\n};\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <Stats />\n            <h1>{props.title}</h1>\n            <Stopwatch />\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                <a className=\"remove-player\" onClick={props.onRemove}>x</a>\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n    onRemove: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n    onPlayerRemove: function(index) {\n        // uncomment to see the player index\n        // console.log('remove', index);\n        this.state.players.splice(index, 1);\n        setState(this.state);\n    },\n    onPlayerAdd: function() {\n        // uncomment to see new player name\n        //console.log('Player added:', name);\n        this.state.players.push({\n            name: name,\n            score: 0,\n            id: nextId,\n        });\n\n        /*\n            NOTE: in something like Redux, we don't update the state itself, we actually create a brand new state object\n        */\n\n        this.setState(this.state);\n        nextId += 1;\n    };\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title} players={this.state.players} />\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            onRemove={function() {\n                                this.onRemovePlayer(index);\n                                }.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n                <AddPlayerForm onAdd={this.onPlayerAdd} />\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-24-making-the-stopwatch-tick\"\n    }}>{`THREACT-24: Making the Stopwatch Tick`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Create the onTick function. - We don't want this function in Render. - There are several lifecycle methods in React, we'll use componentDidMount.`}</li>\n      <li parentName=\"ul\">{`Be careful with componentDidMount. The memory attachment with 'this' creates a strong cycle. We need to also use componentWillUnmount.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let PLAYERS = [\n    {\n        name: \"Dennis\",\n        score: 33,\n        id:1,\n    },\n    {\n        name: \"Ben\",\n        score: 34,\n        id:2,\n    },\n    {\n        name: \"Clark From InVision\",\n        score: 12,\n        id:3,\n    }\n];\n\nvar nextId = 4;\n\nvar StopWatch = React.createClass({\n    getInitialState: function () {\n        return {\n            running: false,\n            elapsedTime: 0,\n            previousTime: 0,\n        };\n    },\n    componentDidMount: function() {\n        this.interval = setInterval(this.onTick, 100);\n    },\n    componentWillUnmount: function() {\n        clearInterval(this.setInterval);\n    },\n    onTick: function() {\n        //uncomment to confirm the tick in the console.\n        //console.log('onTick');\n        if (this.state.running) {\n            var now = Date.now();\n            this.setState({\n                previousTime: now,\n                elapsedTime: this.state.elapsedTime + (now - this.state.previousTime),\n            });\n        }\n    },\n    onStop: function() {\n        this.setState({ running: false });\n    },\n    onStart: function() {\n        this.setState({\n            running: true,\n            previousTime: Date.now(),\n        });\n    },\n    onReset: function() {\n        this.setState({\n            elapsedTime: 0,\n            previousTime: Date.now(),\n        });\n    },\n    render: function() {\n        var seconds = Math.floor(this.state.elapsedTime / 1000);\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <div className=\"stopwatch-time\">{seconds}</div>\n                { this.state.running ?\n                    <button onClick={this.onStop}>Stop</button>\n                    :\n                    <button onClick={this.onStart}>Start</button>;\n                }\n                <button onClick={this.onReset}>Reset</button>\n            </div>\n        );\n    }\n});\n\nvar AddPlayerForm = React.createClass({\n    propTypes: {\n        onAdd: React.PropTypes.func.isRequired,\n    },\n    getInitialState: function() {\n        return {\n            name: \"\"\n        };\n    },\n    onNameChange: function(e) {\n        // uncomment to see the changes on target value\n        // console.log(\"onNameChange\", e.target.value);\n        this.setState({name: e.target.value});\n    },\n    onSubmit: function(e) {\n        e.preventDefault();\n\n        this.props.onAdd(this.state.name);\n        this.setState({name: \"\"});\n    },\n    render: function() {\n        return (\n            <div className=\"add-player-form\">\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" value={this.state.name} onChange={this.onNameChange} />\n                    <input type=\"submit\" value=\"Add Player\" />\n                </form>\n            </div>\n        );\n    }\n});\n\nfunction Stats(props) {\n    // you don't have to store it, but it's handy for organisation\n    var totalPlayers = props.players.length;\n    var totalPoints = props.players.reduce(function(total, player){\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nStats.propTypes = {\n    players: React.PropTypes.array.isRequired,\n};\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <Stats />\n            <h1>{props.title}</h1>\n            <Stopwatch />\n        </div>\n    );\n}\n\nHeader.propTypes = {\n    title: React.PropTypes.string.isRequired,\n};\n\nfunction Counter(props) {\n    return (\n        <div className=\"counter\">\n            <button className=\"counter-action decrement\" onClick={function() {props.onChange(-1)}}> - </button>\n            <div className=\"counter-score\"> {props.score }</div>\n            <button className=\"counter-action increment\" onClick={function() {props.onChange(1)}}> + </button>\n        </div>\n    );\n}\n\nCounter.propTypes = {\n    score: React.PropTypes.number.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n}\n\nfunction Player(props) {\n    return (\n        <div className=\"player\">\n            <div className=\"player-name\">\n                <a className=\"remove-player\" onClick={props.onRemove}>x</a>\n                {props.name}\n            </div>\n            <div className=\"player-score\">\n                <Counter score={props.score} onChange={props.onScoreChange}/>\n            </div>\n        </div>\n    );\n}\n\nPlayer.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    score: React.PropTypes.number.isRequired,\n    onScoreChange: React.PropTypes.func.isRequired,\n    onRemove: React.PropTypes.func.isRequired,\n}\n\nvar Application = React.createClass({\n    propTypes: {\n        title: React.PropTypes.string,\n        initialPlayers: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            score: React.PropTypes.number.isRequired,\n            id: React.PropTypes.number.isRequired,\n        })).isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Scoreboard\",\n        }\n    },\n    getInitialState: function() {\n        return {\n            players: this.props.initialPlayers,\n        };\n    },\n    onScoreChange: function(index, delta) {\n        // uncomment this to double check value change on the application\n        // console.log('onScoreChange', index, delta);\n        this.state.players[index].score += delta;\n        this.setState(this.state);\n    },\n    onPlayerRemove: function(index) {\n        // uncomment to see the player index\n        // console.log('remove', index);\n        this.state.players.splice(index, 1);\n        setState(this.state);\n    },\n    onPlayerAdd: function() {\n        // uncomment to see new player name\n        //console.log('Player added:', name);\n        this.state.players.push({\n            name: name,\n            score: 0,\n            id: nextId,\n        });\n\n        /*\n            NOTE: in something like Redux, we don't update the state itself, we actually create a brand new state object\n        */\n\n        this.setState(this.state);\n        nextId += 1;\n    };\n    render: function() {\n        return(\n            <div className=\"scoreboard\">\n                <Header title={this.props.title} players={this.state.players} />\n\n                <div className=\"players\">\n                    {this.state.players.map(function (player, index) {\n                        return (\n                            <Player\n                            onScoreChange={function(delta) {\n                                this.onScoreChange(index,delta)}.bind(this)\n                            }\n                            onRemove={function() {\n                                this.onRemovePlayer(index);\n                                }.bind(this)\n                            }\n                            name={player.name}\n                            score{player.score}\n                            key={player.id} />\n                        );\n                    }.bind(this))}\n                </div>\n                <AddPlayerForm onAdd={this.onPlayerAdd} />\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<Application intialPlayers={PLAYERS}/>, document.getElementById('container'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"threact-25-review-and-next-steps\"\n    }}>{`THREACT-25: Review and Next Steps`}</h4>\n    <p>{`What did we learn?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Managing State, a key component of design we focused on.`}</li>\n      <li parentName=\"ul\">{`We used intermediate components to use callbacks to send upwards.`}</li>\n      <li parentName=\"ul\">{`Redux can give us useful utilities for managing state.`}</li>\n      <li parentName=\"ul\">{`Babel.js has been used to precompile our JSX.`}</li>\n      <li parentName=\"ul\">{`React for mobile doesn't render to the DOM, but the native components for the platform.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}