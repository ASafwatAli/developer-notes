{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Python/Python-Collections.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Python/Python-Collections.md","mtime":1548209344414},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(\"div\",{id:\"intro\"}),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"intro-to-python-collections\"}},\"Intro to Python Collections\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Appending and adding to lists.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-python\"}},\"### a_list=[1,2,3]\\n### a_list\\na_list.append([4,5]) # [1,2,3,[4,5]]\\nour_list = list(range(10))\\n### our_list\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\n### our_list + [10,11,12]\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\\n### our_list\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\n### our_list=our_list+[10,11,12]\\n### our_list\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"For splitting strings themselves we can use \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"str.split(str=\\\"\\\", num=string.count(str))\")),React.createElement(\"div\",{id:\"collections\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----extending-collections\"}},\"---- Extending Collections\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Normally cleaner for larger lists than the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"+\"),\" symbol.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-python\"}},\">>> our_list\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\\n>>> our_list.extend(range(13, 20))\\n>>> our_list\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"How do add new items inside the list?\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-python\"}},\">>> alpha= list('acdf')\\n>>> alpha\\n['a', 'c', 'd', 'f']\\n>>> alpha.insert(1,'b')\\n>>> alpha\\n['a', 'b', 'c', 'd', 'f']\\n>>> alpha.insert(4,'e')\\n>>> alpha\\n['a', 'b', 'c', 'd', 'e', 'f']\\n\")),React.createElement(\"div\",{id:\"shoppinglist\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----shopping-list\"}},\"---- Shopping List\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"# note - you should use enumerate once you get there\\n>>> def show_help():\\n     print(\\\"\\nDoing a print_\\\")\\n\\n>>> def show_list():\\n     count=1\\n     for item in shopping_list:\\n             print(\\\"{}: {}\\\".format(count, item))\\n             count+=1\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Other helpful use cases...\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"while True:\\n    #do stuff\\n    new_stuff = input(\\\"> \\\")\\n\\n    if new_stuff == \\\"DONE\\\":\\n        print('Done')\\n        break\\n    elif\\n        #do other stuff\\n        break\\n    else\\n        ...\\n\")),React.createElement(\"div\",{id:\"3\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----removing-items-from-a-list\"}},\"---- Removing Items from a List\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"a_list=list('abzde')\\na_list.index('z')\\ndel a_list[2]\\n\\na_string = \\\"Hello\\\"\\n# this will delete the string - although the del can't be used to delete within the string\\n# strings themselves are immutable\\ndel a_string\\n\\n# remove for the list\\nmy_list = [1,2,3,1]\\n# remove ONLY removes the first instance from the list\\nmy_list.remove(1)\\nmy_list\\n# [2,3,1]\\n\")),React.createElement(\"div\",{id:\"4\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----removing-vowels-from-a-list-of-words-and-capitalising-them\"}},\"---- Removing vowels from a list of words and capitalising them\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"names = [\\\"Dennis\\\", \\\"Billy\\\", \\\"Trojan\\\", \\\"Horse\\\"]\\nvowels = list('aeiou')\\noutput = []\\n\\nfor name in names:\\n    name_list = list(name.lower())\\n\\n    for vowel in vowels:\\n        while True:\\n            try:\\n                state_list.remove(vowel)\\n            except:\\n                break\\n    output.append(''.join(name_list).capitalize())\\n\\nprint(output)\\n\")),React.createElement(\"div\",{id:\"5\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----pop-an-item-from-the-list\"}},\"---- Pop an item from the list\"),React.createElement(MDXTag,{name:\"p\",components:components},\"pop() removes an item by index but gives us the item.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"names = [\\\"Dennis\\\", \\\"Billy\\\", \\\"Trojan\\\", \\\"Horse\\\"]\\nfirst = names.pop() // gives the first name\\nanother = names.pop(2) // gives index 3\\n\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// Quiz Challenge\\n\\n// 1. Move the '1' to the front of the list\\n\\nthe_list = [\\\"a\\\", 2, 3, 1, False, [1, 2, 3]]\\n\\n# Your code goes below here\\nthe_list.insert(0, the_list.pop(3))\\n\")),React.createElement(\"div\",{id:\"slices\"}),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"slices\"}},\"Slices\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Slices mean we can get back more than one item from a list. We call this \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"slicing\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Something important to not is the useability of have the \",\"[:]\",\" call for a copy of the list!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"my_string=\\\"Hello there!\\\"\\nmy_string[0:5]\\n\\nmy_list=list(range(1,6))\\nmy_list[0:2] // same as my_list[:2]\\nmy_list[2:len(my_list)]\\n\\nmy_list[1:]\\nmy_list[:] // gets back a copy of the list\\n\\nmy_new_list = [4,2,1,3,5]\\nmy_new_list.sort()\\nmy_new_list\\n\")),React.createElement(\"div\",{id:\"6\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----slicing-with-a-step\"}},\"---- Slicing with a Step\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How can we slice that move backward or that skip items?\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"my_list=list(range(20))\\n\\n# let's get the even numbers\\nmy_list[::2]\\n\\\"Testing\\\"[::2]\\n\\n# reversing\\n\\\"Slap\\\"[::-1]\\n\\n# getting the middle slice - must swap positions!\\nmy_list[8:2:-1]\\n\\n# negative indexes will also give you the positions from the end\\nmy_list[-1]\\n\\n# example of grabbing the first four iterables through a Python function\\ndef first_4(iter):\\n    return iter[:4]\\n\")),React.createElement(\"div\",{id:\"7\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----deleting-or-replacing-slices\"}},\"---- Deleting or Replacing Slices\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can delete and replace with lists.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"my_list = [1,2, 'a', 'b', 5,6,'f','g']\\n\\n# what if I just want letters?\\nmy_list[4:7] = ['e','f']\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Code Challenge\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def sillycase(c):\\n    return c[:round(len(c) / 2)].lower() + c[round(len(c) / 2):].upper()\\n\")),React.createElement(\"div\",{id:\"dict1\"}),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"dictionaries\"}},\"Dictionaries\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Key-Value organisation. They themselves do not have an order.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"my_dict = {'name': 'Dennis', 'job': 'Software Engineer'}\\n\\n# to access it, you need to use the key name\\nmy_dict['name']\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Dictionaries can contain anything - even your own custom classes.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"named_dict = { 'name' : { 'first' : 'Dennis', 'last': 'OKeeffe'} }\\nnamed_dict['name']['first']\\n\\n# tuple game dict\\ngame_dict = {(1,2) : True}\\ngame_dict[(1,2)]\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Challenge: Check if a dict key is in the list\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def members(dict, keys):\\n    counter = 0\\n    for key in dict:\\n        if key in keys:\\n            counter = counter + 1\\n    return counter\\n\")),React.createElement(\"div\",{id:\"dict2\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----managing-keys\"}},\"---- Managing Keys\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"del\"),\" keys etc similar to the way we do it for keys.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> my_dict['test'] = 'value'\\n>>> my_dict\\n{'test': 'value', 'job': 'Software Engineer', 'name': 'Dennis'}\\n>>> del my_dict['test']\\n>>> my_dict\\n{'job': 'Software Engineer', 'name': 'Dennis'}\\n\\n# we can use update for multiple keys etc\\n>>> my_dict.update({'job': 'Developer', 'age': 24, 'state': 'New South Wales'})\\n>>> my_dict\\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Challenge: Create a function named word_count() that takes a string. Return a dictionary with each word in the string as the key and the number of times it appears as the value.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def word_count(sentence):\\n    new_dict = {}\\n    word_list = sentence.split()\\n    count = 0\\n\\n    for original_word in word_list:\\n        if original_word not in new_dict:\\n            count = 0\\n            for comparison_word in word_list:\\n                if original_word == comparison_word:\\n                    count += 1\\n                    new_dict.update({original_word: count})\\n    return new_dict\\n\")),React.createElement(\"div\",{id:\"dict3\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----unpacking-dictionaries\"}},\"---- Unpacking Dictionaries\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You can give placeholders a name and use dictionaries to make it a little easier.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> my_string = \\\"Hi my name is {name} and I live in {state}\\\"\\n>>> my_string\\n'Hi my name is {name} and I live in {state}'\\n>>> my_string.format('Dennis', 'Sydney')\\nTraceback (most recent call last):\\n  File \\\"<stdin>\\\", line 1, in <module>\\nKeyError: 'name'\\n>>> my_string.format('name'='Dennis', state='Sydney')\\n  File \\\"<stdin>\\\", line 1\\nSyntaxError: keyword can't be an expression\\n>>> my_string.format(name='Dennis', state='Sydney')\\n'Hi my name is Dennis and I live in Sydney'\\n\\n# how do we make this programmatic?\\n>>> test_dict = {'name':'Dennis', 'state':'Sydney'}\\n>>> my_string.format(**test_dict)\\n'Hi my name is Dennis and I live in Sydney'\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Code Challenge: Create a function named string_factory that accepts a list of dictionaries and a string. Return a new list built by using .format() on the string, filled in by each of the dictionaries in the list.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"dicts = [\\n    {'name': 'Michelangelo',\\n     'food': 'PIZZA'},\\n    {'name': 'Garfield',\\n     'food': 'lasanga'},\\n    {'name': 'Walter',\\n     'food': 'pancakes'},\\n    {'name': 'Galactus',\\n     'food': 'worlds'}\\n]\\n\\nstring = \\\"Hi, I'm {name} and I love to eat {food}!\\\"\\n\\ndef string_factory(list_of_dict, str):\\n    new_list = []\\n    for ind_list in list_of_dict:\\n        new_list.append(str.format(**ind_list))\\n    return new_list\\n\")),React.createElement(\"div\",{id:\"dict4\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----dictionary-iteration\"}},\"---- Dictionary Iteration\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Again, Dictionaries in Python do not have a set order, but we can still iterate over them.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> my_dict\\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\\n>>> for thing in my_dict:\\n...     print(thing)\\n...\\njob\\nname\\nage\\nstate\\n\\n>>> for key in my_dict:\\n...     print(my_dict[key])\\n...\\nDeveloper\\nDennis\\n24\\nNew South Wales\\n\\n>>> for value in my_dict.values():\\n...     print(value)\\n...\\nDeveloper\\nDennis\\n24\\nNew South Wales\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Create a function named most-classes that takes a dictionary of teachers. Each key is a teacher's name and their value is a list of classes they've taught. most-classes should return the teacher with the most classes.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Next, create a function named num_teachers that takes the same dictionary of teachers and classes. Return the total number of teachers.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now, create a function named stats that takes the teacher dictionary. Return a list of lists in the format \",\"[\",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"<teacher name>\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"<number of classes>\"),\"]\",\". For example, one item in the list would be \",\"['Dave McFarland', 1]\",\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Great work! Finally, write a function named courses that takes the teachers dictionary. It should return a single list of all of the courses offered by all of the teachers.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def most_classes(teachers):\\n    highest_value = 0\\n    teacher_name = \\\"\\\"\\n    for teacher in teachers:\\n        if len(teachers[teacher]) > highest_value:\\n            highest_value = len(teachers[teacher])\\n            teacher_name = teacher\\n    return teacher_name\\n\\ndef num_teachers(teachers):\\n    return len(teachers)\\n\\ndef stats(teachers):\\n    return_list = []\\n    for teacher in teachers:\\n        return_list.append([teacher, len(teachers[teacher])])\\n    return return_list\\n\\ndef courses(teachers):\\n    single_courses = []\\n    for courses in teachers.values():\\n        for course in courses:\\n            if course not in single_courses:\\n                single_courses.append(course)\\n    return single_courses\\n\")),React.createElement(\"div\",{id:\"tuples\"}),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"tuples\"}},\"Tuples\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Lists themselves can be mutated, but sometimes we want the collections to stay the same. That's where tuples come in. They themselves are immutable.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Tuples do not support item assignment.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> tupleTest = (1,2,3)\\n>>> tupleTest\\n(1, 2, 3)\\n>>> my_second_tuple = 1,2,3\\n>>> my_second_tuple\\n(1, 2, 3)\\n>>> my_third_tuple = tuple([1,2,3])\\n>>> my_third_tuple\\n(1, 2, 3)\\n>>> dir(tuple)\\n['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']\\n\")),React.createElement(\"div\",{id:\"tuples2\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----tuple-packing-and-unpacking\"}},\"---- Tuple Packing and Unpacking\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Here we create a tuple that has valued assigned by another tuple. It's referred to as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"simulatneous assignment\"),\".\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> a,b = 1,2\\n>>> a\\n1\\n>>> b\\n2\\n\\n# unpacking\\n>>> c = (3,4)\\n>>> (d,e) = c\\n>>> d\\n3\\n>>> e\\n4\\n\\n# packing\\n>>> f = d,e\\n>>> f\\n(3, 4)\\n>>> f == c\\nTrue\\n\\n# swapping the value\\n>>> del a\\n>>> del b\\n>>> a = 1\\n>>> b = 2\\n>>> a,b = b,a\\n>>> a\\n2\\n>>> b\\n1\\n\\n# function example\\n>>> def my_func():\\n...     return 1,2,3\\n...\\n>>> my_func()\\n(1, 2, 3)\\n>>> a,b,c = my_func()\\n>>> a\\n1\\n>>> b\\n2\\n>>> c\\n3\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Challenge: Create a function named stringcases that takes a string and returns a tuple of four versions of the string: uppercased, lowercased, titlecased (where every word's first letter is capitalized), and a reversed version of the string.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def stringcases(str):\\n    uppercased = str.upper()\\n    lowercased = str.lower()\\n    titlecased = str.title()\\n    reverse = str[::-1]\\n    return uppercased, lowercased, titlecased, reverse\\n\")),React.createElement(\"div\",{id:\"tuples3\"}),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"-----tuples-with-functions\"}},\"---- Tuples with functions\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can use enumerate for some packing etc.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> alpha = list('abcdefghijklmnopqrstuvwxyz')\\n>>> alpha\\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\\n>>> dir(enumerate)\\n['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'next']\\n# prints the help\\n>>> help(enumerate)\\n>>> for (index, letter) in enumerate(alpha):\\n...     print('{}: {}').format(index,letter)\\n...\\n0: a\\n1: b\\n2: c\\n3: d\\n4: e\\n5: f\\n6: g\\n7: h\\n8: i\\n9: j\\n10: k\\n11: l\\n12: m\\n13: n\\n14: o\\n15: p\\n16: q\\n17: r\\n18: s\\n19: t\\n20: u\\n21: v\\n22: w\\n23: x\\n24: y\\n25: z\\n\\n>>> for step in enumerate(alpha):\\n...     print('{}: {}'.format(*step))\\n...\\n0: a\\n1: b\\n2: c\\n3: d\\n4: e\\n5: f\\n6: g\\n7: h\\n8: i\\n9: j\\n10: k\\n11: l\\n12: m\\n13: n\\n14: o\\n15: p\\n16: q\\n17: r\\n18: s\\n19: t\\n20: u\\n21: v\\n22: w\\n23: x\\n24: y\\n25: z\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We can also unpack dictionaries in a similar matter:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\">>> my_dict\\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\\n>>> for key, value in my_dict.items():\\n...     print('{}: {}'.format(key.title(), value))\\n...\\nJob: Developer\\nName: Dennis\\nAge: 24\\nState: New South Wales\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Create a function named combo() that takes two iterables and returns a list of tuples. Each tuple should hold the first item in each list, then the second set, then the third, and so on. Assume the iterables will be the same length.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"def combo(iter1, iter2):\\n    ret = []\\n    length = len(iter1)\\n    counter = 0\\n    while counter < length:\\n        ret.append((iter1[counter],iter2[counter]))\\n        counter += 1\\n    return ret\\n\\n# better alternatives\\n\\ndef combo(iterable_1, iterable_2):\\n  list_of_tuples = []\\n  for index in range(len(iterable_1)):\\n    list_of_tuples.append((iterable_1[index], iterable_2[index]))\\n\\n  return list_of_tuples\\n\\ndef combo(iterable_1, iterable_2):\\n  list_of_tuples = []\\n  for index, item2 in enumerate(iterable_2):\\n    list_of_tuples.append( (iterable_1[index], item2) )\\n\\n  return list_of_tuples\\n\\ndef combo(iterable_1, iterable_2):\\n  return list(zip(iterable_1, iterable_2))\\n\\ndef combo(iter1, iter2):\\n  combo_list = []\\n  for index, value in enumerate(iter1):\\n    tuple = value, iter2[index]\\n    combo_list.append(tuple)\\n  return combo_list\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Python/Python-Collections.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><div id=\"intro\"></div>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"intro-to-python-collections\"}}>{`Intro to Python Collections`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Appending and adding to lists.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`### a_list=[1,2,3]\n### a_list\na_list.append([4,5]) # [1,2,3,[4,5]]\nour_list = list(range(10))\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n### our_list + [10,11,12]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n### our_list=our_list+[10,11,12]\n### our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`For splitting strings themselves we can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`str.split(str=\"\", num=string.count(str))`}</MDXTag></MDXTag>\n<div id=\"collections\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----extending-collections\"}}>{`---- Extending Collections`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Normally cleaner for larger lists than the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`+`}</MDXTag>{` symbol.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`>>> our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n>>> our_list.extend(range(13, 20))\n>>> our_list\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do add new items inside the list?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`>>> alpha= list('acdf')\n>>> alpha\n['a', 'c', 'd', 'f']\n>>> alpha.insert(1,'b')\n>>> alpha\n['a', 'b', 'c', 'd', 'f']\n>>> alpha.insert(4,'e')\n>>> alpha\n['a', 'b', 'c', 'd', 'e', 'f']\n`}</MDXTag></MDXTag>\n<div id=\"shoppinglist\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----shopping-list\"}}>{`---- Shopping List`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`# note - you should use enumerate once you get there\n>>> def show_help():\n     print(\"\\nDoing a print_\")\n\n>>> def show_list():\n     count=1\n     for item in shopping_list:\n             print(\"{}: {}\".format(count, item))\n             count+=1\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Other helpful use cases...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`while True:\n    #do stuff\n    new_stuff = input(\"> \")\n\n    if new_stuff == \"DONE\":\n        print('Done')\n        break\n    elif\n        #do other stuff\n        break\n    else\n        ...\n`}</MDXTag></MDXTag>\n<div id=\"3\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----removing-items-from-a-list\"}}>{`---- Removing Items from a List`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`a_list=list('abzde')\na_list.index('z')\ndel a_list[2]\n\na_string = \"Hello\"\n# this will delete the string - although the del can't be used to delete within the string\n# strings themselves are immutable\ndel a_string\n\n# remove for the list\nmy_list = [1,2,3,1]\n# remove ONLY removes the first instance from the list\nmy_list.remove(1)\nmy_list\n# [2,3,1]\n`}</MDXTag></MDXTag>\n<div id=\"4\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----removing-vowels-from-a-list-of-words-and-capitalising-them\"}}>{`---- Removing vowels from a list of words and capitalising them`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`names = [\"Dennis\", \"Billy\", \"Trojan\", \"Horse\"]\nvowels = list('aeiou')\noutput = []\n\nfor name in names:\n    name_list = list(name.lower())\n\n    for vowel in vowels:\n        while True:\n            try:\n                state_list.remove(vowel)\n            except:\n                break\n    output.append(''.join(name_list).capitalize())\n\nprint(output)\n`}</MDXTag></MDXTag>\n<div id=\"5\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----pop-an-item-from-the-list\"}}>{`---- Pop an item from the list`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`pop() removes an item by index but gives us the item.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`names = [\"Dennis\", \"Billy\", \"Trojan\", \"Horse\"]\nfirst = names.pop() // gives the first name\nanother = names.pop(2) // gives index 3\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// Quiz Challenge\n\n// 1. Move the '1' to the front of the list\n\nthe_list = [\"a\", 2, 3, 1, False, [1, 2, 3]]\n\n# Your code goes below here\nthe_list.insert(0, the_list.pop(3))\n`}</MDXTag></MDXTag>\n<div id=\"slices\"></div>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"slices\"}}>{`Slices`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Slices mean we can get back more than one item from a list. We call this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`slicing`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Something important to not is the useability of have the `}{`[:]`}{` call for a copy of the list!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`my_string=\"Hello there!\"\nmy_string[0:5]\n\nmy_list=list(range(1,6))\nmy_list[0:2] // same as my_list[:2]\nmy_list[2:len(my_list)]\n\nmy_list[1:]\nmy_list[:] // gets back a copy of the list\n\nmy_new_list = [4,2,1,3,5]\nmy_new_list.sort()\nmy_new_list\n`}</MDXTag></MDXTag>\n<div id=\"6\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----slicing-with-a-step\"}}>{`---- Slicing with a Step`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How can we slice that move backward or that skip items?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`my_list=list(range(20))\n\n# let's get the even numbers\nmy_list[::2]\n\"Testing\"[::2]\n\n# reversing\n\"Slap\"[::-1]\n\n# getting the middle slice - must swap positions!\nmy_list[8:2:-1]\n\n# negative indexes will also give you the positions from the end\nmy_list[-1]\n\n# example of grabbing the first four iterables through a Python function\ndef first_4(iter):\n    return iter[:4]\n`}</MDXTag></MDXTag>\n<div id=\"7\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----deleting-or-replacing-slices\"}}>{`---- Deleting or Replacing Slices`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can delete and replace with lists.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`my_list = [1,2, 'a', 'b', 5,6,'f','g']\n\n# what if I just want letters?\nmy_list[4:7] = ['e','f']\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Code Challenge`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def sillycase(c):\n    return c[:round(len(c) / 2)].lower() + c[round(len(c) / 2):].upper()\n`}</MDXTag></MDXTag>\n<div id=\"dict1\"></div>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"dictionaries\"}}>{`Dictionaries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Key-Value organisation. They themselves do not have an order.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`my_dict = {'name': 'Dennis', 'job': 'Software Engineer'}\n\n# to access it, you need to use the key name\nmy_dict['name']\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Dictionaries can contain anything - even your own custom classes.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`named_dict = { 'name' : { 'first' : 'Dennis', 'last': 'OKeeffe'} }\nnamed_dict['name']['first']\n\n# tuple game dict\ngame_dict = {(1,2) : True}\ngame_dict[(1,2)]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Challenge: Check if a dict key is in the list`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def members(dict, keys):\n    counter = 0\n    for key in dict:\n        if key in keys:\n            counter = counter + 1\n    return counter\n`}</MDXTag></MDXTag>\n<div id=\"dict2\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----managing-keys\"}}>{`---- Managing Keys`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`del`}</MDXTag>{` keys etc similar to the way we do it for keys.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> my_dict['test'] = 'value'\n>>> my_dict\n{'test': 'value', 'job': 'Software Engineer', 'name': 'Dennis'}\n>>> del my_dict['test']\n>>> my_dict\n{'job': 'Software Engineer', 'name': 'Dennis'}\n\n# we can use update for multiple keys etc\n>>> my_dict.update({'job': 'Developer', 'age': 24, 'state': 'New South Wales'})\n>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Challenge: Create a function named word_count() that takes a string. Return a dictionary with each word in the string as the key and the number of times it appears as the value.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def word_count(sentence):\n    new_dict = {}\n    word_list = sentence.split()\n    count = 0\n\n    for original_word in word_list:\n        if original_word not in new_dict:\n            count = 0\n            for comparison_word in word_list:\n                if original_word == comparison_word:\n                    count += 1\n                    new_dict.update({original_word: count})\n    return new_dict\n`}</MDXTag></MDXTag>\n<div id=\"dict3\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----unpacking-dictionaries\"}}>{`---- Unpacking Dictionaries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can give placeholders a name and use dictionaries to make it a little easier.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> my_string = \"Hi my name is {name} and I live in {state}\"\n>>> my_string\n'Hi my name is {name} and I live in {state}'\n>>> my_string.format('Dennis', 'Sydney')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'name'\n>>> my_string.format('name'='Dennis', state='Sydney')\n  File \"<stdin>\", line 1\nSyntaxError: keyword can't be an expression\n>>> my_string.format(name='Dennis', state='Sydney')\n'Hi my name is Dennis and I live in Sydney'\n\n# how do we make this programmatic?\n>>> test_dict = {'name':'Dennis', 'state':'Sydney'}\n>>> my_string.format(**test_dict)\n'Hi my name is Dennis and I live in Sydney'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Code Challenge: Create a function named string_factory that accepts a list of dictionaries and a string. Return a new list built by using .format() on the string, filled in by each of the dictionaries in the list.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`dicts = [\n    {'name': 'Michelangelo',\n     'food': 'PIZZA'},\n    {'name': 'Garfield',\n     'food': 'lasanga'},\n    {'name': 'Walter',\n     'food': 'pancakes'},\n    {'name': 'Galactus',\n     'food': 'worlds'}\n]\n\nstring = \"Hi, I'm {name} and I love to eat {food}!\"\n\ndef string_factory(list_of_dict, str):\n    new_list = []\n    for ind_list in list_of_dict:\n        new_list.append(str.format(**ind_list))\n    return new_list\n`}</MDXTag></MDXTag>\n<div id=\"dict4\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----dictionary-iteration\"}}>{`---- Dictionary Iteration`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Again, Dictionaries in Python do not have a set order, but we can still iterate over them.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n>>> for thing in my_dict:\n...     print(thing)\n...\njob\nname\nage\nstate\n\n>>> for key in my_dict:\n...     print(my_dict[key])\n...\nDeveloper\nDennis\n24\nNew South Wales\n\n>>> for value in my_dict.values():\n...     print(value)\n...\nDeveloper\nDennis\n24\nNew South Wales\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Create a function named most-classes that takes a dictionary of teachers. Each key is a teacher's name and their value is a list of classes they've taught. most-classes should return the teacher with the most classes.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Next, create a function named num_teachers that takes the same dictionary of teachers and classes. Return the total number of teachers.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now, create a function named stats that takes the teacher dictionary. Return a list of lists in the format `}{`[`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<teacher name>`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<number of classes>`}</MDXTag>{`]`}{`. For example, one item in the list would be `}{`['Dave McFarland', 1]`}{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Great work! Finally, write a function named courses that takes the teachers dictionary. It should return a single list of all of the courses offered by all of the teachers.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def most_classes(teachers):\n    highest_value = 0\n    teacher_name = \"\"\n    for teacher in teachers:\n        if len(teachers[teacher]) > highest_value:\n            highest_value = len(teachers[teacher])\n            teacher_name = teacher\n    return teacher_name\n\ndef num_teachers(teachers):\n    return len(teachers)\n\ndef stats(teachers):\n    return_list = []\n    for teacher in teachers:\n        return_list.append([teacher, len(teachers[teacher])])\n    return return_list\n\ndef courses(teachers):\n    single_courses = []\n    for courses in teachers.values():\n        for course in courses:\n            if course not in single_courses:\n                single_courses.append(course)\n    return single_courses\n`}</MDXTag></MDXTag>\n<div id=\"tuples\"></div>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"tuples\"}}>{`Tuples`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Lists themselves can be mutated, but sometimes we want the collections to stay the same. That's where tuples come in. They themselves are immutable.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Tuples do not support item assignment.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> tupleTest = (1,2,3)\n>>> tupleTest\n(1, 2, 3)\n>>> my_second_tuple = 1,2,3\n>>> my_second_tuple\n(1, 2, 3)\n>>> my_third_tuple = tuple([1,2,3])\n>>> my_third_tuple\n(1, 2, 3)\n>>> dir(tuple)\n['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']\n`}</MDXTag></MDXTag>\n<div id=\"tuples2\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----tuple-packing-and-unpacking\"}}>{`---- Tuple Packing and Unpacking`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here we create a tuple that has valued assigned by another tuple. It's referred to as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`simulatneous assignment`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> a,b = 1,2\n>>> a\n1\n>>> b\n2\n\n# unpacking\n>>> c = (3,4)\n>>> (d,e) = c\n>>> d\n3\n>>> e\n4\n\n# packing\n>>> f = d,e\n>>> f\n(3, 4)\n>>> f == c\nTrue\n\n# swapping the value\n>>> del a\n>>> del b\n>>> a = 1\n>>> b = 2\n>>> a,b = b,a\n>>> a\n2\n>>> b\n1\n\n# function example\n>>> def my_func():\n...     return 1,2,3\n...\n>>> my_func()\n(1, 2, 3)\n>>> a,b,c = my_func()\n>>> a\n1\n>>> b\n2\n>>> c\n3\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Challenge: Create a function named stringcases that takes a string and returns a tuple of four versions of the string: uppercased, lowercased, titlecased (where every word's first letter is capitalized), and a reversed version of the string.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def stringcases(str):\n    uppercased = str.upper()\n    lowercased = str.lower()\n    titlecased = str.title()\n    reverse = str[::-1]\n    return uppercased, lowercased, titlecased, reverse\n`}</MDXTag></MDXTag>\n<div id=\"tuples3\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----tuples-with-functions\"}}>{`---- Tuples with functions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can use enumerate for some packing etc.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> alpha = list('abcdefghijklmnopqrstuvwxyz')\n>>> alpha\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> dir(enumerate)\n['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'next']\n# prints the help\n>>> help(enumerate)\n>>> for (index, letter) in enumerate(alpha):\n...     print('{}: {}').format(index,letter)\n...\n0: a\n1: b\n2: c\n3: d\n4: e\n5: f\n6: g\n7: h\n8: i\n9: j\n10: k\n11: l\n12: m\n13: n\n14: o\n15: p\n16: q\n17: r\n18: s\n19: t\n20: u\n21: v\n22: w\n23: x\n24: y\n25: z\n\n>>> for step in enumerate(alpha):\n...     print('{}: {}'.format(*step))\n...\n0: a\n1: b\n2: c\n3: d\n4: e\n5: f\n6: g\n7: h\n8: i\n9: j\n10: k\n11: l\n12: m\n13: n\n14: o\n15: p\n16: q\n17: r\n18: s\n19: t\n20: u\n21: v\n22: w\n23: x\n24: y\n25: z\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can also unpack dictionaries in a similar matter:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`>>> my_dict\n{'job': 'Developer', 'name': 'Dennis', 'age': 24, 'state': 'New South Wales'}\n>>> for key, value in my_dict.items():\n...     print('{}: {}'.format(key.title(), value))\n...\nJob: Developer\nName: Dennis\nAge: 24\nState: New South Wales\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Create a function named combo() that takes two iterables and returns a list of tuples. Each tuple should hold the first item in each list, then the second set, then the third, and so on. Assume the iterables will be the same length.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`def combo(iter1, iter2):\n    ret = []\n    length = len(iter1)\n    counter = 0\n    while counter < length:\n        ret.append((iter1[counter],iter2[counter]))\n        counter += 1\n    return ret\n\n# better alternatives\n\ndef combo(iterable_1, iterable_2):\n  list_of_tuples = []\n  for index in range(len(iterable_1)):\n    list_of_tuples.append((iterable_1[index], iterable_2[index]))\n\n  return list_of_tuples\n\ndef combo(iterable_1, iterable_2):\n  list_of_tuples = []\n  for index, item2 in enumerate(iterable_2):\n    list_of_tuples.append( (iterable_1[index], item2) )\n\n  return list_of_tuples\n\ndef combo(iterable_1, iterable_2):\n  return list(zip(iterable_1, iterable_2))\n\ndef combo(iter1, iter2):\n  combo_list = []\n  for index, value in enumerate(iter1):\n    tuple = value, iter2[index]\n    combo_list.append(tuple)\n  return combo_list\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}