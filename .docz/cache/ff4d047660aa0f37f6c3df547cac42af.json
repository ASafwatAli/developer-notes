{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Advanced-Topics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Advanced-Topics.md","mtime":1562563032050},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Advanced-Topics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"advanced-topics\"\n    }}>{`Advanced Topics`}</h1>\n    <h2 {...{\n      \"id\": \"service-discovery\"\n    }}>{`Service Discovery`}</h2>\n    <p>{`As of Kubernetes 1.3, DNS is a `}<inlineCode parentName=\"p\">{`built-in`}</inlineCode>{` service launched automatically using the addon manager.`}</p>\n    <p>{`The addons are in the `}<inlineCode parentName=\"p\">{`/etc/kubernetes/addons`}</inlineCode>{` directory on the master node.`}</p>\n    <p>{`The service can be used within pods to find other services running on the same cluster.`}</p>\n    <p>{`Multiple containers within 1 pod don't need this service, as they can contact each other directly. A container in the same pod can just use `}<inlineCode parentName=\"p\">{`localhost:port`}</inlineCode>{`.`}</p>\n    <p>{`To make DNS work, a pod will need a `}<inlineCode parentName=\"p\">{`service definition`}</inlineCode>{`.`}</p>\n    <p>{`How can app 1 reach app 2 using DNS? The container itself can talk to the service of App 2.`}</p>\n    <p>{`If you ran the host for `}<inlineCode parentName=\"p\">{`app1-service`}</inlineCode>{` and got back 10.0.0.1, `}<inlineCode parentName=\"p\">{`host app2-service`}</inlineCode>{` could get back 10.0.0.2.`}</p>\n    <p>{`Examples from the CL`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`host app1-service\n# has addr 10.0.0.1\nhost app2-service\n# has addr 10.0.0.2\nhost app2-service.default\n# app2-service.default has address 10.0.0.2\nhost app2-service.default.svc.cluster.local\n# app2-service.default.svc.cluster.local has addr 10.0.0.2\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` stands for default namespace. Pods and services can be launched in different namespaces (to logically seperate your cluster).`}</p>\n    <p>{`So how does this resolution work?`}</p>\n    <p>{`Say we have a pod and we run `}<inlineCode parentName=\"p\">{`kubectl run -i -tty busybox --image=busybox --restart=Never -- sh`}</inlineCode>{` and the from the shell run `}<inlineCode parentName=\"p\">{`cat /etc/resolv.conf`}</inlineCode>{`, can can see that there will be a `}<inlineCode parentName=\"p\">{`nameserver`}</inlineCode>{`. If you do a lookup of the service name in this folder, you'll see why the above works with `}<inlineCode parentName=\"p\">{`.default`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.default.svc.whatever`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"demo-service-discovery\"\n    }}>{`Demo: Service Discovery`}</h3>\n    <p>{`After creating a secrets type, pod type for a database (SQL using the secrets), and a service for exposing certain ports for the database and then deploying three replicas for a `}<inlineCode parentName=\"p\">{`helloworld-deployment`}</inlineCode>{` that also has a `}<inlineCode parentName=\"p\">{`index-db.js`}</inlineCode>{` file which we run `}<inlineCode parentName=\"p\">{`node index-db.js`}</inlineCode>{` which will have code that works on the service. The value of the `}<inlineCode parentName=\"p\">{`MYSQL_HOST`}</inlineCode>{` being set to `}<inlineCode parentName=\"p\">{`database-service`}</inlineCode>{` will resolve with the database-service.yml file where the metadata `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`database-service`}</inlineCode>{`.`}</p>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`kubectl get pod`}</inlineCode>{` we should see the database plus 3 pods running for the deployment.`}</p>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`kubectl logs [deployment-name]`}</inlineCode>{` will also show us the logs for that pod.`}</p>\n    <p>{`Again, remember that running `}<inlineCode parentName=\"p\">{`kubectl get svc`}</inlineCode>{` will get all the services available.`}</p>\n    <h2 {...{\n      \"id\": \"configmap\"\n    }}>{`ConfigMap`}</h2>\n    <p>{`Config params that are not secret can be put in the ConfigMap.`}</p>\n    <p>{`The input is again key-value pairs.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ConfigMap`}</inlineCode>{` key-value pairs can then be read by the app using:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Env variables`}</li>\n      <li parentName=\"ol\">{`Container commandline args in the Pod config`}</li>\n      <li parentName=\"ol\">{`Using volumes`}</li>\n    </ol>\n    <p>{`It can also contain full config files eg. a webserver config file. Then that file can then be mounted using volumes where the application expects its config file.`}</p>\n    <p>{`This was you can `}<inlineCode parentName=\"p\">{`inject`}</inlineCode>{` config settings into containers without changing the container itself.`}</p>\n    <p>{`To generate a configmap using files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cat << EOF > app.properties\ndriver=jdbc\ndatabase=postgres\nlookandfeel=1\notherparams=xyz\nparam.with.hierarchy=xyz\nEOF\n$ kubectl create configmap app-config --from-file=app.properties\n`}</code></pre>\n    <p>{`How to use it? You can create a pod that exposes the ConfigMap using a volume.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n  image: okeeffed/docker-demo\n  ports:\n  - containerPort: 3000\n  # @@@ This are the envs in a volume mount\n  volumeMounts:\n  - name: credvolume\n    mountPath: /etc/creds\n    readOnly: true\n  # @@@ For the ConfigMap\n  - name: config-volume\n    mountPath: /etc/config\n  volumes:\n  - name: credvolume\n  secret:\n    secretName: db-secrets\n  # @@@ For the ConfigMap\n  - name: config-volume\n  configMap:\n    name: app-config\n`}</code></pre>\n    <p>{`From `}<inlineCode parentName=\"p\">{`/etc/config`}</inlineCode>{` , the config values will be stored in files at `}<inlineCode parentName=\"p\">{`/etc/config/driver`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`/etc/config/param/with/hierarchy`}</inlineCode>{`.`}</p>\n    <p>{`This is an example of a pod that exposes the ConfigMap as env variables:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nodehelloworld.example.com\n  labels:\n  app: helloworld\nspec:\n  # The containers are listed here\n  containers:\n  - name: k8s-demo\n  image: okeeffed/docker-demo\n  ports:\n  - containerPort: 3000\n  # @@@ This are the envs in a volume mount\n  env:\n  - name: DRIVER\n    valueFrom: # where you get the value from\n    configMapKeyRef: # ensuring the ref comes from the configMap\n    name: app-config\n    key: driver\n  - name: DATABASE\n  [ ... ]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-config-map\"\n    }}>{`Demo: Config Map`}</h3>\n    <p>{`Using an example for a reverse proxy config for NGINX:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`server {\n  listen  80;\n  server_name localhost;\n\n  location / {\n  proxy_bind 127.0.0.1;\n  proxy_pass http://127.0.0.1:3000;\n  }\n\n  error_page  500 502 503 504 /50x.html;\n  location = /50x.html {\n  root    /usr/share/nginx/html;\n  }\n}\n`}</code></pre>\n    <p>{`We could then create this config map with `}<inlineCode parentName=\"p\">{`kubectl create configmap nginx-config --from-file=reverseproxy.conf`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hellonginx.example.com\n  labels:\n  app: hellonginx\nspec:\n  # The containers are listed here\n  containers:\n    - name: nginx\n    image: nginx:1.11\n    ports:\n    - containerPort: 80\n    # @@@ The import conf stuff\n    volumeMounts:\n    - name: config-volume\n        mountPath: /etc/nginx/conf.d\n  - name: k8s-demo\n  image: okeeffed/docker-demo\n  ports:\n    - containerPort: 3000\n  # @@@ The important mounting\n  volumes:\n    - name: config-volume # @@@ this is referred to above in volumeMounts\n    configMap:\n        name: nginx-config\n        items:\n        - key: reverseproxy.conf\n        path: reverseproxy.conf\n`}</code></pre>\n    <p>{`After then also creating the service, we can grab the minikube service url and use curl to get info on that request. From here, would could see that it is `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode>{` answer the request and transferring it to the Node port.`}</p>\n    <p>{`If we then want to jump into the nginx container to see what is going on, we can run `}<inlineCode parentName=\"p\">{`kubectl exec -i -t helloworld-nginx -c nginx -- bash`}</inlineCode>{` (-c flag to specify container) and run `}<inlineCode parentName=\"p\">{`ps x`}</inlineCode>{` to see the processes and we can `}<inlineCode parentName=\"p\">{`cat /etc/nginx/conf.d/reverseproxy.conf`}</inlineCode>{`.`}</p>\n    <p>{`At this stage, we can enable SSL for NGINX.`}</p>\n    <h2 {...{\n      \"id\": \"ingress-controller\"\n    }}>{`Ingress Controller`}</h2>\n    <p>{`Ingress a solution since Kub 1.1 that allows inbound connections to the cluster.`}</p>\n    <p>{`It's an alternative to the external `}<inlineCode parentName=\"p\">{`LoadBalancer`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`nodePorts`}</inlineCode>{`. It allows you to easily expose services that need to be accessible from outside to the cluster.`}</p>\n    <p>{`With ingress you can run your own ingress controller (basically a loudbalancer) within the Kub Cluster.`}</p>\n    <p>{`There are default ingress controller available, or you can write your own ingress controller.`}</p>\n    <p>{`How does it work? If you connect over 80/443 you will first hit the `}<inlineCode parentName=\"p\">{`Ingress Controller`}</inlineCode>{`. You can use the NGINX controller that comes with Kubernetes. That controller will the dirrect all the traffic.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ingress rules`}</inlineCode>{` could define that if you go to `}<inlineCode parentName=\"p\">{`host-x.example.com`}</inlineCode>{` you go to `}<inlineCode parentName=\"p\">{`Pod 1`}</inlineCode>{` etc. You can even redirect slash URLs specifically.`}</p>\n    <p>{`To create an Ingress Controller:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ingress-controller.yml w/ secrets\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: helloworld-rules\nspec:\n  # @@@ Setting the important rules\n  rules:\n    - host: helloworld-v1.example.com\n      http:\n        paths:\n          - path: /\n          backend:\n            serviceName: helloworld-v1\n            servicePort: 80\n    - host: helloworld-v2.example.com\n      http:\n        paths:\n          - path: /\n          backend:\n            serviceName: helloworld-v2\n            servicePort: 80\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-ingress-controller\"\n    }}>{`Demo: Ingress Controller`}</h3>\n    <p>{`In the example, the ingress controller is a `}<inlineCode parentName=\"p\">{`Replication Controller`}</inlineCode>{` to ensure that there is always one up and running.`}</p>\n    <p>{`After deploying, if we curl with the -H host flag with `}<inlineCode parentName=\"p\">{`helloworld-v1.whatever.com`}</inlineCode>{` and v2 respectively, it would have the ingress controller route to each server.`}</p>\n    <h2 {...{\n      \"id\": \"external-dns\"\n    }}>{`External DNS`}</h2>\n    <p>{`On public cloud providers, you can use the ingress controller to `}<strong parentName=\"p\">{`reduce the cost of your LoadBalancers`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You could use 1 LoadBalancer that captures all the external traffic and send it to the ingress controller.`}</li>\n      <li parentName=\"ul\">{`IngCont can be configured to route the different traffic to all your apps based on HTTP rules.`}</li>\n      <li parentName=\"ul\">{`Only works for HTTP(s)-based apps`}</li>\n    </ul>\n    <p>{`The External DNS tool will automatically create the necessary DNS records in your external DNS server (like route53).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For every hostname used in ingress, it'll create a new record to send traffic to load balancer.`}</li>\n      <li parentName=\"ul\">{`The major DNS providers are supported: Route53, Google CloudDNS, CloudFlare etc.`}</li>\n    </ul>\n    <p><img alt=\"Diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1539998347/Screen_Shot_2018-10-20_at_12.18.14_pm.png\" /></p>\n    <h2 {...{\n      \"id\": \"volumes\"\n    }}>{`Volumes`}</h2>\n    <p>{`How can we run stateful apps?`}</p>\n    <p>{`Volumes in kubernetes allow you to store data outside of the container. So far, all the applications have been stateless for this reason. This can be done with external services like a database, caching server (eg MySQL, AWS S3).`}</p>\n    <p>{`Persistent Volumes in Kubernetes allow you to attach a volume to a container that exists even when the container stops. Volumes can be attached using different volume plugins. Eg local volume, EBS Storage etc.`}</p>\n    <h3 {...{\n      \"id\": \"using-ebs-storage\"\n    }}>{`Using EBS Storage`}</h3>\n    <p>{`With this, we can keep state. You could run a `}<inlineCode parentName=\"p\">{`MySQL`}</inlineCode>{` database using persistent volumes, although this may not be ready for production yet.`}</p>\n    <p>{`The use case is that if your node stops working, the pod can be rescheduled on another node, and the volume can be attached to the new node.`}</p>\n    <p>{`To use volumes, you first need to create the volume:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aws ec2 create-volume --sze 1- --region us-east-1 --availability-zone us-east-1 --volume-type gp2\n`}</code></pre>\n    <p>{`Next, we need to create a pod with a volume def:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hellonginx.example.com\n  labels:\n  app: hellonginx\nspec:\n  # The containers are listed here\n  containers:\n    - name: k8s-demo\n    image: okeeffed/k8s-demo\n    volumeMounts:\n    - name: myvolume\n      mountPath: myvolume\n  # @@@ The important mounting\n  volumes:\n    - name: myvolume # @@@ this is referred to above in volumeMounts\n      awsElasticBlockStore:\n        volumeID: vol-9835id\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"demo-volumes\"\n    }}>{`Demo: Volumes`}</h3>\n    <p>{`Using Vagrant for kops, we can first create a volume using the above mentioned command.`}</p>\n    <p>{`After receiving a response, you can replace the .yml pod definition config file to attach that volumeID. Once the deployment is created and deployed. `}</p>\n    <ul>\n      <li parentName=\"ul\">{`After create and confirmation, we can get the pod name `}<inlineCode parentName=\"li\">{`kubectl get pod`}</inlineCode>{` and attach `}<inlineCode parentName=\"li\">{`kubectl exec helloworld-deployment-923id -i -t -- bash`}</inlineCode>{` and then run `}<inlineCode parentName=\"li\">{`ls -ahl /myvol/`}</inlineCode>{` to check for volume.`}</li>\n      <li parentName=\"ul\">{`If we run `}<inlineCode parentName=\"li\">{`echo 'test' > /myvol/myvol.txt`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`echo 'test 2' > /test.txt`}</inlineCode>{`, we know that the latter file will not persist if the pod is restarted/rescheduled.`}</li>\n      <li parentName=\"ul\">{`If we run `}<inlineCode parentName=\"li\">{`kubectl drain ip --force`}</inlineCode>{` we can drain the pod. Assuming this is a `}<inlineCode parentName=\"li\">{`Replication Controller`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Deployment`}</inlineCode>{`, another container should spin up.`}</li>\n      <li parentName=\"ul\">{`Once that pod is attached to another node, we can also attach back to the pod on the new node with the `}<inlineCode parentName=\"li\">{`exec`}</inlineCode>{` command and we can confirm that the `}<inlineCode parentName=\"li\">{`/myvol/myvol.txt`}</inlineCode>{` is still there, although the other `}<inlineCode parentName=\"li\">{`/test.txt`}</inlineCode>{` is no longer there since it was not saved to the volume.`}</li>\n    </ul>\n    <p>{`If you need to remove the ebs volume, you can run `}<inlineCode parentName=\"p\">{`aws ec2 delete-volume --volume-id vol-[id]`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"volume-provisioning\"\n    }}>{`Volume Provisioning`}</h2>\n    <p>{`The kubs plugins have the capability to `}<inlineCode parentName=\"p\">{`provision storage`}</inlineCode>{` for you. The AWS Plugin can for instance `}<inlineCode parentName=\"p\">{`provision storage`}</inlineCode>{` for you by creating the volumes in AWS before attaching them to a node.`}</p>\n    <p>{`This is done using the `}<inlineCode parentName=\"p\">{`StorageClass`}</inlineCode>{` object -- this is beta for the course but should be stable soon.`}</p>\n    <p>{`To use autoprovisioing, create the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# storage.yml\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\n  zone: ap-southeast-1\n`}</code></pre>\n    <p>{`Next, you can create a volume claim and specify the size:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# my-volume-claim.yml\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: myclaim\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"standard\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 8Gi\n`}</code></pre>\n    <p>{`Finally, if launching a pod:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-helloworld.yml w/ secrets\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  # The containers are listed here\n  containers:\n    - name: myfrontend\n    image: nginx\n    volumeMounts:\n    - name: mypd\n      mountPath: '/var/www/html'\n  # @@@ The important mounting\n  volumes:\n    - name: mypd # @@@ this is referred to above in volumeMounts\n      persistentVolumeClaim:\n        claimName: myclaim # @@@ refers to my claim from the previous type definition\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demo-using-wordpress-with-volumes\"\n    }}>{`Demo: Using Wordpress with Volumes`}</h2>\n    <p>{`After declaring a `}<inlineCode parentName=\"p\">{`StorageClass`}</inlineCode>{` class from a yaml file and a `}<inlineCode parentName=\"p\">{`PersistentVolumeClaim`}</inlineCode>{` class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# storage.yml\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\n  zone: eu-west-1a\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# PV Claim\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: db-storage\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"standard\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 8Gi\n`}</code></pre>\n    <p>{`There is also a simple ReplicationController for the Wordpress DB. In the spe for the container for mysql, we declare where the `}<inlineCode parentName=\"p\">{`mountPath`}</inlineCode>{` will be.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: wordpress-db\nspec:\n  replicas: 1\n  selector:\n    app: wordpress-db\n  template:\n    metadata:\n      name: wordpress-db\n      labels:\n        app: wordpress-db\n    spec:\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        args:\n          - \"--ignore-db-dir=lost+found\"\n        ports:\n        - name: mysql-port\n          containerPort: 3306\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: db-password\n        volumeMounts:\n        - mountPath: \"/var/lib/mysql\"\n          name: mysql-storage\n      volumes:\n        - name: mysql-storage\n          persistentVolumeClaim:\n            claimName: db-storage\n`}</code></pre>\n    <p>{`Having a makeshift secrets file for secrets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Secret\nmetadata:\n  name: wordpress-secrets\ntype: Opaque\ndata:\n  db-password: cGFzc3dvcmQ=\n  # random sha1 strings - change all these lines\n  authkey: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ4OA==\n  loggedinkey: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ4OQ==\n  secureauthkey: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5MQ==\n  noncekey: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5MA==\n  authsalt: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5Mg==\n  secureauthsalt: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5Mw==\n  loggedinsalt: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5NA==\n  noncesalt: MTQ3ZDVhMTIzYmU1ZTRiMWQ1NzUyOWFlNWE2YzRjY2FhMDkyZGQ5NQ==\n`}</code></pre>\n    <p>{`To open up the service for the port:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  name: wordpress-db\nspec:\n  ports:\n  - port: 3306\n    protocol: TCP\n  selector:\n    app: wordpress-db\n  type: NodePort\n`}</code></pre>\n    <p>{`Opening up the web and web service:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: wordpress-deployment\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: wordpress\n    spec:\n      containers:\n      - name: wordpress\n        image: wordpress:4-php7.0\n        # uncomment to fix perm issue, see also https://github.com/kubernetes/kubernetes/issues/2630\n        # command: ['bash', '-c', 'chown www-data:www-data /var/www/html/wp-content/uploads && apache2-foreground']\n        ports:\n        - name: http-port\n          containerPort: 80\n        env:\n          - name: WORDPRESS_DB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: db-password\n          - name: WORDPRESS_AUTH_KEY\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: authkey\n          - name: WORDPRESS_LOGGED_IN_KEY\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: loggedinkey\n          - name: WORDPRESS_SECURE_AUTH_KEY\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: secureauthkey\n          - name: WORDPRESS_NONCE_KEY\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: noncekey\n          - name: WORDPRESS_AUTH_SALT\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: authsalt\n          - name: WORDPRESS_SECURE_AUTH_SALT\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: secureauthsalt\n          - name: WORDPRESS_LOGGED_IN_SALT\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: loggedinsalt\n          - name: WORDPRESS_NONCE_SALT\n            valueFrom:\n              secretKeyRef:\n                name: wordpress-secrets\n                key: noncesalt\n          - name: WORDPRESS_DB_HOST\n            value: wordpress-db\n        volumeMounts:\n        # shared storage for things like media\n        - mountPath: /var/www/html/wp-content/uploads\n          name: uploads\n      volumes:\n      - name: uploads\n        nfs:\n          server: eu-west-1a.fs-5714e89e.efs.eu-west-1.amazonaws.com\n          path: /\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  name: wordpress\nspec:\n  ports:\n  - port: 80\n    targetPort: http-port\n    protocol: TCP\n  selector:\n    app: wordpress\n  type: LoadBalancer\n`}</code></pre>\n    <p>{`With the AWS Commandline, you can create a file system and mount target. For the fs, run `}<inlineCode parentName=\"p\">{`aws efs create-file-system --creation-token`}</inlineCode>{` and then after grabbing the file-system-id and subnet-id, you can run `}<inlineCode parentName=\"p\">{`aws efs create-mount-target --file-system-id <id> --security-groups <sg>`}</inlineCode>{`. Ensure in the above `}<inlineCode parentName=\"p\">{`nfs`}</inlineCode>{` volume you update the fs id.`}</p>\n    <h2 {...{\n      \"id\": \"pod-presets\"\n    }}>{`Pod Presets`}</h2>\n    <p>{`Pod presets can inject information into pods at runtime.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Used to inject Kubernetes Resources like Secrets, ConfigMaps, Volumes and Environment variables. `}</li>\n    </ul>\n    <p>{`Imagine you have 20 apps to deploy, all with a specific credential. You can edit the 20 specs and add the creds, or you can use presets to create 1 `}<strong parentName=\"p\">{`Preset Object`}</strong>{`, which will `}<strong parentName=\"p\">{`inject an environment variable or config file to all matching pods.`}</strong></p>\n    <p>{`When injecting env vars and volume mounts, the Pod Preset will apply the changes to ll containers within the pod.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# PodPreset File\napiVersion: settings.k8s.io/v1alpha1\nkind: PodPreset\nmetadata:\n  name: allow-database\nspec:\n  selector:\n    matchLabels:\n      role: frontend\n  env:\n    - name: DB_PORT\n      value: '6379'\n  volumeMounts:\n    - mountPath: /cache\n      name: cache-volume\n  volumes:\n    - name: cache-volume\n      emptyDir: {}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`# Pod file using PodPreset\napiVersion: v1\nkind: Pod\nmetadata:\n  name: website\n  labels:\n    app: website\n    role: frontend\nspec:\n  containers:\n    - name: website\n      image: nginx\n      ports:\n        - containerPort: 80\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl create -f pod-preset.yml\n$ kubectl create -f pod.yml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stateful-sets---formerly-pet-sets\"\n    }}>{`Stateful Sets - (formerly Pet Sets)`}</h2>\n    <p>{`Stateful dist apps - new feature from Kub 1.3.`}</p>\n    <p>{`It is introduced to be able to run `}<inlineCode parentName=\"p\">{`stateful applications`}</inlineCode>{` that need:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A stable pod hostname (instead of podname-randomstr) - will have an index ie podname-0, podname-1 etc.`}</li>\n      <li parentName=\"ol\">{`Stateful app requires multi pods with vols based on their ordinal number. Currently deleting and/or scaling a PetSet down will not deleted volumes associated.`}</li>\n    </ol>\n    <p>{`A pet set will allow your stateful app to use DNS to find out peers. One running node of the Pet Set is called a `}<inlineCode parentName=\"p\">{`Pet`}</inlineCode>{`. Using Pet Sets you can run for instance 5 cassandra nodes on Kubs named cass-1 until cass-5.`}</p>\n    <p>{`The big difference is that you don't want to connect just any specific service, you want to make sure pod whatever definitely connects to another pod.`}</p>\n    <p>{`This pet set also allows order to startup and teardown of pets.`}</p>\n    <p>{`Still a lot of work for future work.`}</p>\n    <h2 {...{\n      \"id\": \"daemon-sets\"\n    }}>{`Daemon Sets`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Ensure that every single node in the Kubernetes cluster runs the same pod resource. This is useful to ensure a certain pod is running on every single kubernetes node.`}</li>\n      <li parentName=\"ul\">{`When a node is added to the cluster, a new pod will be started automatically`}</li>\n      <li parentName=\"ul\">{`Same when a node is removed, the pod will not be rescheduled on another node`}</li>\n    </ul>\n    <p>{`Use cases:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Logging aggregators`}</li>\n      <li parentName=\"ol\">{`Monitoring`}</li>\n      <li parentName=\"ol\">{`Load Balancers/Reverse Proxies/API Gateways`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"resource-usage-monitoring\"\n    }}>{`Resource Usage Monitoring`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Heapster enables `}<strong parentName=\"li\">{`Container Cluster Monitoring`}</strong>{` and `}<strong parentName=\"li\">{`Performance Analysis`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`It's providing a monitoring platform for Kubernetes.`}</li>\n      <li parentName=\"ul\">{`It's a prerequisite if you want to do `}<strong parentName=\"li\">{`pod auto-scaling`}</strong>{` in Kubernetes.`}</li>\n      <li parentName=\"ul\">{`Heapster exports cluster metrix `}<strong parentName=\"li\">{`via REST endpoints`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`You can use different backends with Heapster.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Demo uses `}<strong parentName=\"li\">{`InfluxDB`}</strong>{`, but Kafka is also possible.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Visualisations can be shown with Grafana. `}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Kubernetes dashboard will also show graphs once monitoring is enabled.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`All these technologies can be started in pods`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`yaml files`}</strong>{` can be found on the github repo of Heapster.`}</li>\n    </ul>\n    <p>{`Since Heapster is now deprecated, you would have to use `}<inlineCode parentName=\"p\">{`metrics-server`}</inlineCode>{` or an alternative like `}<strong parentName=\"p\">{`Prometheus`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"horiztonal-pod-autoscaling\"\n    }}>{`Horiztonal Pod Autoscaling`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/\"\n      }}>{`Link to main Kubernetes site`}</a></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Kubernetes has the possibility to autoscale pods based on metrics.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Kubernetes can autoscale Deployment, Replication Controller or ReplicaSet.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In Kubernetes 1.3 `}<strong parentName=\"p\">{`scaling based on CPU`}</strong>{` usage is possible out of the box.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Application based metrics are also available (like queries per second or average request latency).`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`To enable, the cluster has to be started with env var ENABLE_CUSTOM_METRICS to be true.`}</li>\n            </ul></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It will periodically query the utilization for the targeted pods.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`By default 30 sec, can be changed using the `}<inlineCode parentName=\"li\">{`--horizontal-pod-autoscaler-sync-period`}</inlineCode>{`flag when launching the controller manager.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Requires the metrics system to work.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: hpa-example-autoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: extensions/v1beta1\n    kind: Deployment\n    name: hpa-example\n  minReplicas: 1\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 50\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"affinityanti-affinity\"\n    }}>{`Affinity/Anti-Affinity`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The affinity/anti-affinity feature allows you to do `}<strong parentName=\"li\">{`more complex scheduling`}</strong>{` than the nodeSelector and also `}<strong parentName=\"li\">{`works on Pods`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`The language is `}<strong parentName=\"li\">{`more expressive`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`You can create `}<strong parentName=\"li\">{`rules that are not hard requirements`}</strong>{`, but rather a `}<strong parentName=\"li\">{`preferred rule`}</strong>{`, meaning that the scheduler will stil be able to schedule your pod, even if the rules cannot be met.`}</li>\n          <li parentName=\"ul\">{`You can create rules to take other pod labels into account`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`Example, you can make sure two different pods are never on the same node.`}</li>\n            </ul></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Kubernetes can do `}<strong parentName=\"li\">{`node affinity`}</strong>{` and `}<strong parentName=\"li\">{`pod affinity/anti-affinity`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Node affinity is similar to the nodeSelector.`}</li>\n          <li parentName=\"ul\">{`Pod affinity/anti-affinity allows you to create rules `}<strong parentName=\"li\">{`how pods should be scheduled taking into account other running pods`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`Affinity/anti-affinity mechanism is only relevant during scheduling, once a pod is running, it'll need to be recreated to apply the rules again.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`There are currently 2 types you can use for node affinity:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`1) requiredDuringSchedulingIgnoredDuringExecution`}</li>\n          <li parentName=\"ul\">{`2) preferredDuringSchedulingIgnoredDuringExecution`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`first one`}</strong>{` sets a `}<strong parentName=\"li\">{`hard requirement`}</strong>{` (like the nodeSelector).`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`The rules must be met before the pod can be scheduled.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`second type`}</strong>{` will try to enforce the rule, but it will not guarantee it.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Even if the rule is not met, the pod can still be scheduled, it's a soft requirement, a preference.`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: <% helloworld-deployment %>\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: <% app_name %>\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: env\n                    operator: In\n                    values:\n                      - dev\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - weight: 1 # higher the weighting, the more emphasis on rule\n              preference:\n                matchExpressions:\n                  - key: team\n                    operator: In\n                    values:\n                      - engineering-project1\n      containers:\n        - name: k8s-demo\n          image: <% image_name %>\n          port:\n            - containerPort: 3000\n`}</code></pre>\n    <p>{`When scheduling, Kubernetes will score every node by summarizing the weightings per node.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Eg two different rules with weights 1and 5.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`If both rules match, score 6.`}</li>\n          <li parentName=\"ul\">{`If only rule with weight 1 matches, score 1.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`The node that has the highest total score, that's where the pod will be scheduled on.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"313-interpod-affinityanti-affinity\"\n    }}>{`3.13 Interpod Affinity/Anti-Affinity`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`This allows you to influence scheduling based on the labels of other pods that are `}<strong parentName=\"li\">{`already running`}</strong>{` on the cluster.`}</li>\n      <li parentName=\"ul\">{`Pods belong to a namespace, so rules apply to namespace (default to pod name).`}</li>\n    </ul>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`requiredDuringSchedulingIgnoredDuringExecution`}</li>\n      <li parentName=\"ol\">{`preferredDuringSchedulingIgnoredDuringExecution`}</li>\n    </ol>\n    <p>{`The required type create rules that must be met for the pod to be scheduled, the preferred type is a \"soft\" type and the rules may be met.`}</p>\n    <p>{`A good use case for `}<strong parentName=\"p\">{`pod affinity is co-located pods`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Example, you have an app that uses redis as cache and you want to have the Redis pod on the same node as the app itself.`}</li>\n      <li parentName=\"ul\">{`Another use-case is to co-locate pods within the `}<strong parentName=\"li\">{`same availability zone`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`When writing your pod affinity and anti-affinity rules, you need to specify a `}<strong parentName=\"li\">{`topology domain`}</strong>{`, called `}<strong parentName=\"li\">{`topologyKey`}</strong>{` in the rules.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Key refers to a node label.`}</li>\n          <li parentName=\"ul\">{`If affinity rule matches, `}<strong parentName=\"li\">{`new pod`}</strong>{` will only be scheduled on `}<strong parentName=\"li\">{`nodes`}</strong>{` that have the `}<strong parentName=\"li\">{`same topologyKey`}</strong>{` value as the `}<strong parentName=\"li\">{`current running pod`}</strong>{`.`}</li>\n        </ul></li>\n    </ul>\n    <p><img alt=\"Interpod Affinity and anti-affinity\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540165720/Screen_Shot_2018-10-22_at_10.48.04_am.png\" /></p>\n    <p><img alt=\"Zone topology\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540165853/Screen_Shot_2018-10-22_at_10.50.27_am.png\" /></p>\n    <h3 {...{\n      \"id\": \"anti-affinity\"\n    }}>{`Anti-affinity`}</h3>\n    <p>{`You can use anti-affinity to make sure a `}<strong parentName=\"p\">{`pod is only scehduled once on a node`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Example 3 nodes and you want to schedule 2 pods but they shouldn't be on the same node.`}</li>\n      <li parentName=\"ul\">{`Pod anti-affinity allows you to create a rule that say to `}<strong parentName=\"li\">{`not schedule on the same host if a pod label matches`}</strong>{`.`}</li>\n    </ul>\n    <p><img alt=\"Anti-affinity\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540165853/Screen_Shot_2018-10-22_at_10.50.27_am.png\" /></p>\n    <h3 {...{\n      \"id\": \"topology-operators\"\n    }}>{`Topology operators`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`In`}</li>\n      <li parentName=\"ul\">{`NotIn`}</li>\n      <li parentName=\"ul\">{`Exists`}</li>\n      <li parentName=\"ul\">{`DoesNotExist`}</li>\n    </ul>\n    <p>{`Affinity requires a substantial amount of processor. Take this into account if you have a lot of rules.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# pod-affinity.yml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-1\n    spec:\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-2\n    spec:\n      affinity:\n        podAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: \"app\"\n                    operator: In\n                    values:\n                    - pod-affinity-1\n              topologyKey: \"kubernetes.io/hostname\" # this could be change for zoning\n      containers:\n      - name: redis\n        image: redis\n        ports:\n        - name: redis-port\n          containerPort: 6379\n`}</code></pre>\n    <p>{`We can then check this is fine by running `}<inlineCode parentName=\"p\">{`kubectl get pod -o wide`}</inlineCode>{` to see the Node the pods are running on.`}</p>\n    <p>{`As for anti-affinity:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-1\n    spec:\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-2\n    spec:\n      affinity:\n        podAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: \"app\"\n                    operator: In\n                    values:\n                    - pod-affinity-1\n              topologyKey: \"kubernetes.io/hostname\"\n      containers:\n      - name: redis\n        image: redis\n        ports:\n        - name: redis-port\n          containerPort: 6379\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-3\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-3\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: \"app\"\n                    operator: In\n                    values:\n                    - pod-affinity-1\n              topologyKey: \"kubernetes.io/hostname\"\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-affinity-4\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: pod-affinity-4\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n                matchExpressions:\n                  - key: \"app\"\n                    operator: In\n                    values:\n                    - pod-affinity-1\n                    - pod-affinity-3\n              topologyKey: \"kubernetes.io/hostname\"\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n---\n`}</code></pre>\n    <p><img alt=\"Resulting run with the affinity/anti-affinity\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540170357/Screen_Shot_2018-10-22_at_12.05.28_pm.png\" /></p>\n    <p>{`Note that there are differences between `}<strong parentName=\"p\">{`preferred`}</strong>{` and `}<strong parentName=\"p\">{`required`}</strong>{`. With preferred, you may still have the pod scheduled in events we don't necessarily want as a best case scenario.`}</p>\n    <h2 {...{\n      \"id\": \"314-taints-and-tolerations\"\n    }}>{`3.14 Taints and Tolerations`}</h2>\n    <p>{`Tolerations is the opposite of node affinity.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Allows a node to `}<strong parentName=\"li\">{`repels a set of pods`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Taints mark`}</strong>{` a node, tolerations are applied to pods to influence the scheduling of a pod.`}</li>\n      <li parentName=\"ul\">{`One use case for taints is to make sure that when you create a new pod, they're not scheduled on the master (`}<strong parentName=\"li\">{`node-role.kubernetes.io/master:NoSchedule`}</strong>{`). This is the default.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# To add a taint\n$ kubectl taint nodes node1 key=value:NoSchedule # This will make sure that no pods will be scheduled on node1 as long as they don't have a matching toleration\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# tolerations.yml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: tolerations-1\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: tolerations-1\n    spec:\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: tolerations-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: tolerations-2\n    spec:\n      tolerations:\n      - key: \"type\"\n        operator: \"Equal\"\n        value: \"specialnode\"\n        effect: \"NoSchedule\"\n      containers:\n      - name: k8s-demo\n        image: wardviaene/k8s-demo\n        ports:\n        - name: nodejs-port\n          containerPort: 3000\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tolerations-usage\"\n    }}>{`Tolerations usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Taint a node\n$ kubectl taint nodes NODE-NAME type=specialnode:NoSchedule\n\n# Taint with NoExecute\n$ kubectl taint nodes NODE-NAME testkey=testvalue:NoExecute\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"keys\"\n    }}>{`Keys`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Operators`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Equal`}</strong>{` (providing key + value)`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Exists`}</strong>{` (only providing a key, checking only whether a key exists)`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Effects`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`NoSchedule`}</strong>{` (hard requirement that apod will not be scheduled unless there is a matching toleration)`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`PreferNoSchedule`}</strong>{` (avoid placing a pod that doesn't have a matching tolerationg, but it's not a hard requirement)`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`NoExecute`}</strong>{` (evict pods with non-matching tolerations)`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`tolerationSeconds`}</strong>{` key can be applied with a time in seconds for how long a node can run before it is evicted.`}</li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Existing node taints for `}<strong parentName=\"li\">{`master nodes`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Taint nodes that are `}<strong parentName=\"li\">{`dedicated`}</strong>{` for a team or user.`}</li>\n      <li parentName=\"ul\">{`Node for `}<strong parentName=\"li\">{`specific hardware`}</strong>{` (ie GPUs) you can taint them to void running non-specific applications on those nodes.`}</li>\n      <li parentName=\"ul\">{`Alpha but soon-to-be beta feature is to `}<strong parentName=\"li\">{`taint nodes by condition`}</strong>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"useful-taints-and-tolerations\"\n    }}>{`Useful Taints and Tolerations`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/not-ready`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/unreachable`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/out-of-disk`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/memory-pressure`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/disk-pressure`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/network-unavailable`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`node.kubernetes.io/unschedulable`}</strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"315-customer-resource-definitions-crds\"\n    }}>{`3.15 Customer Resource Definitions (CRDs)`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Let's you extend Kubernetes API.`}</li>\n      <li parentName=\"ul\">{`Resources are the endpoints in the Kubernetes API that store collections of API Objects (ie Deployment, LoadBalancer).`}</li>\n      <li parentName=\"ul\">{`Operators use CRDs to extend the Kubernetes API with their own functionality.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"316-operators\"\n    }}>{`3.16 Operators`}</h2>\n    <p>{`An `}<strong parentName=\"p\">{`Operator`}</strong>{` is a method of `}<strong parentName=\"p\">{`packaging, deploying and managing`}</strong>{` a Kubernetes Application.`}</p>\n    <p>{`It puts `}<strong parentName=\"p\">{`operational knowledge`}</strong>{` in an application.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Brings the user `}<strong parentName=\"li\">{`closer to the experience of managed cloud services`}</strong>{`, rather than having to know all the specifics of an application deployed to Kubernetes.`}</li>\n      <li parentName=\"ul\">{`Once an Operator is deployed, it can be `}<strong parentName=\"li\">{`managed using Custom Resource Definitions`}</strong>{` (arbitraty types that extend the Kubernetes API).`}</li>\n      <li parentName=\"ul\">{`It also provides a great way to deploy Stateful applications to Kubernetes.`}</li>\n      <li parentName=\"ul\">{`There are operators for Prometheus, Valut, Rook (storage), MySQL, PostgresSQL and so on.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"postgresql-operator-demo\"\n    }}>{`PostgreSQL Operator Demo`}</h3>\n    <p>{`If you just deploy a PostgreSQL container, it'd only start the database. But if you're going to use this `}<strong parentName=\"p\">{`operator`}</strong>{`, it'll allow you to also `}<strong parentName=\"p\">{`create replicas, initiate a failover, create backups, scale`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An operator contains a lot of the `}<strong parentName=\"li\">{`management logic`}</strong>{` that you as an administrator or user might want, rather than having to implement it yourself.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"intro-to-kubeadm\"\n    }}>{`Intro to kubeadm`}</h2>\n    <p>{`This is an alternative to running Kubernetes that is not using `}<inlineCode parentName=\"p\">{`kops`}</inlineCode></p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}