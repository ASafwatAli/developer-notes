{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Timber/Timber-Cheat-Sheet.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Timber/Timber-Cheat-Sheet.md","mtime":1562563032098},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Timber/Timber-Cheat-Sheet.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"timber-help-sheet\"\n    }}>{`Timber Help Sheet`}</h1>\n    <p>{`Here are some helpful conversions for functions you're probably well familiar with in WordPress and their Timber equivalents. These assume a PHP file with the Timber::get_context(); function at the top. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$context = Timber::get_context();\n$context['post'] = new TimberPost();\nTimber::render('single.twig', $context);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"timber-example\"\n    }}>{`Timber Example`}</h2>\n    <p>{`RedBull home.php file`}</p>\n    <ul>\n      <li parentName=\"ul\">{`$data = Context::getDefaultContext();\t\t//standard include file at the top`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\n$data = Context::getDefaultContext();\n\nprint_r($data);\nexit();\n\n// Set page title and other custom data\n$data['title'] = $data['site']->title;\n$data['events'] = Timber::get_posts([\n    'post_type' => 'event',\n    'orderby' => 'meta_value_num',\n  'meta_key' => 'event_date',\n    'order' => 'asc',\n    'posts_per_page' => -1,\n]);\n\n// render the twig file\nTimber::render('home.twig', $data);\n\n?>\n\n// this is the function context found in Redbull under functions > context.php\n\n<?php\n\nclass Context {\n\n    // Set up all of the Timber context stuff we need on every page\n    public static function getDefaultContext() {\n    global $wp;\n\n    $data = Timber::get_context();\n\n    // adding some extra meta to the data context\n    $data['meta'] = [\n      \"title\" => $data['site']->title,\n      \"description\" => $data['site']->description,\n      \"image\" => $data['theme']->link . \"/img/opengraph.png\",\n      \"url\" => home_url(add_query_arg(array(),$wp->request)) . \"/\"\n    ];\n\n        return $data;\n    }\n}\n\n?> // not actually included in the file\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"timber-blog-info\"\n    }}>{`Timber Blog Info`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`blog_info('charset') => {{ site.charset }}\nblog_info('description') => {{ site.description }}\nblog_info('sitename') => {{ site.name }}\nblog_info('url') => {{ site.url }}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"timber-body-class\"\n    }}>{`Timber Body Class`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`implode(' ', get_body_class()) => <body class=\"{{ body_class }}\">\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"timber-post\"\n    }}>{`Timber Post`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`the_content() => {{ post.content }}\nthe_permalink() => {{ post.link }}\nthe_title() => {{ post.title }}\nget_the_tags() => {{ post.tags }}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"timber-theme\"\n    }}>{`Timber Theme`}</h2>\n    <p>{`In WordPress parlance, stylesheet_directory = child theme, template directory = parent theme. Both WP and Timber functions safely return the current theme info if there's no parent/child going on.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`get_template_directory_uri() => {{ theme.link }} (Parent Themes)\nget_template_directory_uri() => {{ theme.parent.link }} (Child Themes)\nget_stylesheet_directory_uri() => {{ theme.link }}\nget_template_directory() => {{ theme.parent.path }}\nget_stylesheet_directory() => {{ theme.path }}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"wp-functions\"\n    }}>{`WP Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`wp_footer() => {{ wp_footer }}\nwp_head() => {{ wp_head }}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"wp-integrations\"\n    }}>{`WP Integrations`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/timber/timber/wiki/WP-Integration\"\n      }}>{`https://github.com/timber/timber/wiki/WP-Integration`}</a></p>\n    <h2 {...{\n      \"id\": \"the_content\"\n    }}>{`the_content`}</h2>\n    <p>{`You're probably used to calling the_content() in your theme file. This is good. Before outputting, WordPress will run all the filters and actions that your plugins and themes are using. If you want to get this into your new Timber theme (and you probably do). Call it like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<div class=\"my-article\">\n   {{post.content}}\n</div>\n\n//This differs from {{post.post_content}} which is the raw text stored in your database\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hooks\"\n    }}>{`hooks`}</h2>\n    <p>{`Timber hooks to interact with WordPress use this/style/of_hooks instead of this_style_of_hooks. This matches the same methodology as Advanced Custom Fields.`}</p>\n    <p>{`Full documentation to come`}</p>\n    <h2 {...{\n      \"id\": \"scripts--stylesheets\"\n    }}>{`Scripts + Stylesheets`}</h2>\n    <p>{`What happened to wp_head() and wp_footer()? Don't worry, they haven't gone away. In fact, they have a home now in the Timber::get_context() object. When you setup your PHP file, you should do something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/* single.php */\n$data = Timber::get_context();\n$data['post'] = new TimberPost();\nTimber::render('single.twig', $data);\n`}</code></pre>\n    <p>{`Now in the corresponding Twig file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`{# single.twig #}\n<html>\n    <head>\n    <!-- Add whatever you need in the head, and then...-->\n    {{wp_head}}\n    </head>\n\n    <!-- etc... -->\n\n    <footer>\n        Copyright &copy; {{\"now\"|date('Y')}}\n    </footer>\n    {{wp_footer}}\n    </body>\n</html>\n`}</code></pre>\n    <p>{`WordPress will inject whatever output had been loaded into wp_head() and wp_footer() through these variables.`}</p>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`But my theme/plugin has some functions I need! Do I really have to re-write all of them?`}</p>\n    <p>{`No.`}</p>\n    <p>{`Let's say you modified twentyeleven and need some of the functions back. Here's the quick-and-dirty way:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<div class=\"posted-on\">{{function(\"twentyeleven_posted_on\")}}</div>\n`}</code></pre>\n    <p>{`Oh. That's not so bad. What if there are arguments? Easy:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{# single.twig #}\n<div class=\"admin-tools\">\n    {{function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>')}}\n</div>\n`}</code></pre>\n    <p>{`Nice! Any gotchas? Unfortunately yes. While the above example will totally work in a single.twig file it will not in a loop. Why? Single.twig/single.php retain the context of the current post. Thus for a function like edit_post_link (which will try to guess the ID# of the post you want to edit, based on the current post in the loop), the same function requires some modification in a file like archive.twig or index.twig. There, you will need to explicitly set the post ID:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{# index.twig #}\n<div class=\"admin-tools\">\n    {{function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>', post.ID)}}\n</div>\n\n// You can also use fn('my_function') as an alias.\n`}</code></pre>\n    <p>{`For a less quick-and-dirty way, you can use the TimberFunctionWrapper. This class sets up your PHP functions as functions you can use in your Twig templates. It will execute them only when you actually call them in your template. You can quickly set up a TimberFunctionWrapper using TimberHelper:`}</p>\n    <p>{`/**`}</p>\n    <ul>\n      <li parentName=\"ul\">{`@param string $function_name`}</li>\n      <li parentName=\"ul\">{`@param array (optional) $defaults`}</li>\n      <li parentName=\"ul\">{`@param bool (optional) $return_output_buffer Return function output instead of return value (default: false)`}</li>\n      <li parentName=\"ul\">{`@return \\\\TimberFunctionWrapper\n*/\nTimberHelper::function_wrapper( $function_name, $defaults = array(), $return_output_buffer = false );\nSo if you want to add edit_post_link to your context, you can do something like this:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`/* single.php */\n$data = Timber::get_context();\n$data['post'] = new TimberPost();\n$data['edit_post_link'] = TimberHelper::function_wrapper( 'edit_post_link', array( __( 'Edit' ), '<span class=\"edit-link\">', '</span>' ) );\nTimber::render('single.twig', $data);\n\n// Now you can use it like a 'normal' function:\n\n{# single.twig #}\n<div class=\"admin-tools\">\n    {{edit_post_link}}\n</div>\n{# Calls edit_post_link using default arguments #}\n\n{# single-my-post-type.twig #}\n<div class=\"admin-tools\">\n    {{edit_post_link(null, '<span class=\"edit-my-post-type-link\">')}}\n</div>\n{# Calls edit_post_link with all defaults, except for second argument #}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h2>\n    <p>{`Call them in your Twig template...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{% do action('my_action') %}\n{% do action('my_action_with_args', 'foo', 'bar') %}\n... in your functions.php file:\n\nadd_action('my_action', 'my_function');\n\nfunction my_function($context){\n    //$context stores the template context in case you need to reference it\n    echo $context['post']->post_title; //outputs title of yr post\n}\nadd_action('my_action_with_args', 'my_function_with_args', 10, 2);\n\nfunction my_function_with_args($foo, $bar){\n    echo 'I say '.$foo.' and '.$bar;\n}\nYou can still get the context object when passing args, it's always the last argument...\n\nadd_action('my_action_with_args', 'my_function_with_args', 10, 3);\n\nfunction my_function_with_args($foo, $bar, $context){\n    echo 'I say '.$foo.' and '.$bar;\n    echo 'For the post with title '.$context['post']->post_title;\n}\n`}</code></pre>\n    <p>{`Please note the argument count that WordPress requires for add_action`}</p>\n    <h2 {...{\n      \"id\": \"filters\"\n    }}>{`Filters`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`{{ post.content|apply_filters('my_filter') }}\n{{ \"my custom string\"|apply_filters('my_filter',param1,param2,...) }}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"widgets\"\n    }}>{`Widgets`}</h2>\n    <p>{`Everyone loves widgets! Of course they do...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$data['footer_widgets'] = Timber::get_widgets('footer_widgets');\n`}</code></pre>\n    <p>{`...where 'footer_widgets' is the registered name of the widgets you want to get(in twentythirteen these are called sidebar-1 and sidebar-2 )`}</p>\n    <p>{`Then use it in your template:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{# base.twig #}\n<footer>\n    {{footer_widgets}}\n</footer>\n`}</code></pre>\n    <p>{`Using Timber inside your own widgets`}</p>\n    <p>{`You can also use twig templates for your widgets! Let's imagine we want a widget that shows a random number each time it is rendered.`}</p>\n    <p>{`Inside the widget class, the widget function is used to show the widget:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`public function widget($args, $instance) {\n    $number = rand();\n    Timber::render('random-widget.twig', array('args' => $args, 'instance' => $instance, 'number' => $number));\n}\nThe corresponding template file random-widget.twig looks like this:\n\n{{ args.before_widget | raw }}\n{{ args.before_title | raw }}{{ instance.title | apply_filters('widget_title') }}{{ args.after_title | raw }}\n\n<p>Your magic number is: <strong>{{ number }}</strong></p>\n\n{{ args.after_widget | raw }}\nThe raw filter is needed here to embed the widget properly.\n\nYou may also want to check if the Timber plugin was loaded before using it:\n\npublic function widget($args, $instance) {\n    if (!class_exists('Timber')) {\n        // if you want to show some error message, this is the right place\n        return;\n    }\n    $number = rand();\n    Timber::render('random-widget.twig', array('args' => $args, 'instance' => $instance, 'number' => $number));\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shortcodes\"\n    }}>{`Shortcodes`}</h2>\n    <p>{`Well, if it works for widgets, why shouldn't it work for shortcodes ? Of course it does !`}</p>\n    <p>{`Let's implement a `}{`[youtube]`}{` shorttag which embeds a youtube video. For the desired usage of `}{`[youtube id=xxxx]`}{` we only need a few lines of code:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// should be called from within an init action hook\nadd_shortcode('youtube', 'youtube_shorttag');\n\nfunction youtube_shorttag($atts) {\n    if(isset($atts['id'])) {\n        $id = sanitize_text_field($atts['id']);\n    } else {\n        $id = false;\n    }\n    // this time we use Timber::compile since shorttags should return the code\n    return Timber::compile('youtube-short.twig', array('id' => $id));\n}\n`}</code></pre>\n    <p>{`In youtube-short.twig we have the following template:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{% if id %}\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/{{ id }}\" frameborder=\"0\" allowfullscreen></iframe>\n{% endif %}\n`}</code></pre>\n    <p>{`Now, when the YouTube embed code changes, we only need to edit the youtube-short.twig template. No need to search your PHP files for this one particular line.`}</p>\n    <h2 {...{\n      \"id\": \"layouts-with-shortcodes\"\n    }}>{`Layouts with Shortcodes`}</h2>\n    <p>{`Timber and Twig can process your shortcodes by using the {% filter shortcodes %} tag. Let's say you're using a `}{`[tab]`}{` shortcode, for example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{% filter shortcodes %}\n    [tabs tab1=\"Tab 1 title\" tab2=\"Tab 2 title\" layout=\"horizontal\" backgroundcolor=\"\" inactivecolor=\"\"]\n        [tab id=1]\n            Something something something\n        [/tab]\n\n        [tab id=2]\n            Tab 2 content here\n        [/tab]\n    [/tabs]\n{% endfilter %}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}