{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Language-Learning/Golang.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Language-Learning/Golang.md","mtime":1580692443828},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Language-Learning/Golang.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"golang\"\n    }}>{`Golang`}</h1>\n    <h2 {...{\n      \"id\": \"the-why-behind-the-language\"\n    }}>{`The \"why\" behind the language?`}</h2>\n    <h3 {...{\n      \"id\": \"quora-top-answer\"\n    }}>{`Quora Top Answer`}</h3>\n    <p>{`Google has two tremendous problems. One of them is compile time. Back in the 1980’s, reasonable sized projects took hours to do a clean build. There were whole server farms dedicated to recompiling. You got a new \"nightly build\" and made modifications to that.`}</p>\n    <p>{`Google builds things that are so ridiculously huge that it’s still like that in 2017. It takes 5 hours to rebuild chrome from scratch even on a big fat i7 system. The pain of compile time on these builds hurts so much that Google has invented build tools that separate the dependency analysis and compiling, just to gain a few per cent in build time using conventional languages. Go is designed for quick compilation without the need for dependency checking, so it addresses the build pain.`}</p>\n    <p>{`Google’s other problem is string processing. Google reads and analyzes a lot of web pages, which are text files. They do a lot of string manipulation, so it pays for this to be really efficient. Google built a rich library of string functions into Go, Garbage collecting makes strings in Go simple to think about, and efficient in ways some other string libraries are not (I’m talking to you, C++ committee).`}</p>\n    <p>{`Go has good concurrency support, which is essential for a language designed after 2002, and for companies who have a million servers waiting to be spun up. But it’s not breaking new ground in concurrency.`}</p>\n    <p>{`Go = C + strings + garbage collection + concurrency. If you want to build really big programs to analyze the whole freakin’ internet, Go would be a pretty good choice for you.`}</p>\n    <h3 {...{\n      \"id\": \"from-rob-pike-one-of-gos-creators\"\n    }}>{`From Rob Pike, one of Go's Creators`}</h3>\n    <p>{`The Go programming language was conceived in late 2007 as an answer to some of the problems we were seeing developing software infrastructure at Google.`}</p>\n    <p>{`The computing landscape today is almost unrelated to the environment in which the languages being used, mostly C++, Java, and Python, had been created. The problems introduced by multicore processors, networked systems, massive computation clusters, and the web programming model were being worked around rather than addressed head-on.`}</p>\n    <p>{`Moreover, the scale has changed: today's server programs comprise tens of millions of lines of code, are worked on by hundreds or even thousands of programmers, and are updated literally every day. To make matters worse, build times, even on large compilation clusters, have stretched to many minutes, even hours.`}</p>\n    <p>{`Go was designed and developed to make working in this environment more productive. Besides its better-known aspects such as built-in concurrency and garbage collection, Go's design considerations include rigorous dependency management, the adaptability of software architecture as systems grow, and robustness across the boundaries between components.`}</p>\n    <p>{`References:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.quora.com/Why-did-Google-develop-Go\"\n        }}>{`Quora - Why Go?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://talks.golang.org/2012/splash.article\"\n        }}>{`Go at Google`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pros-and-cons-of-the-language\"\n    }}>{`Pros and cons of the language?`}</h2>\n    <h3 {...{\n      \"id\": \"pros\"\n    }}>{`Pros`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Ease of use: clean and accessible syntax for newcomers and not a lot of complex functions to learn. Similarities to those proficient in C++/C#.`}</li>\n      <li parentName=\"ul\">{`Great standard library.`}</li>\n      <li parentName=\"ul\">{`Strong security built in: strongly typed, garbage collected. Lack of generics means you need to be more diligent.`}</li>\n      <li parentName=\"ul\">{`Likely to stay part of Google's architecture for a good, long time.`}</li>\n      <li parentName=\"ul\">{`Smart documentation.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"cons\"\n    }}>{`Cons`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Sometimes too simplistic: lack of versitility. Some of the hottest languages pride themselves on complexity.`}</li>\n      <li parentName=\"ul\">{`Still young: has a long was to go in terms of library support.`}</li>\n      <li parentName=\"ul\">{`No virtual machine: the reason so many popular languages are based of VMs is to offer more efficient code, meaning Go file size often dwarf those of competing programming languages. Can chew through RAM.`}</li>\n      <li parentName=\"ul\">{`Hasn't quite found the niche.`}</li>\n      <li parentName=\"ul\">{`No GUI library`}</li>\n    </ul>\n    <p>{`References:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://hackernoon.com/should-i-go-the-pros-and-cons-of-using-go-programming-language-8c1daf711e46\"\n        }}>{`Hackernoon Pros and Cons of Go`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"what-are-the-use-cases\"\n    }}>{`What are the use cases?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`DevOps: Go is being used within DevOps, for writing update scripts, server maintenance software, batch processing etc.`}</li>\n      <li parentName=\"ul\">{`WASM (WebAssembly) support is new and still experimental, but I see a bright future for Go in this category, due to Go’s excellent support for UTF-8, concurrency and ease of use.`}</li>\n      <li parentName=\"ul\">{`Cryptocurrency. Go has been used for the Bitcoin Lightning Network and Ethereum blockchain.`}</li>\n      <li parentName=\"ul\">{`Command Line Tools. Examples: Snappy the package manager for Linux that is taking over from APT in certain distros, is developed in Go.`}</li>\n      <li parentName=\"ul\">{`Any type of API using REST, GraphQL or gRPC. Examples are abundant, but both Dropbox, Uber and GitHub are known to have built API’s in Go.`}</li>\n      <li parentName=\"ul\">{`Any server-side service, including but not limited to, pub/sub servers and clients, caching mechanisms, integration layers, high-CPU utilisation jobs such as number crunching, statistics and cryptographic algorithms, jobs involving high levels of I/O and where there are extremely high requirements for simultaneous processing of thousands or millions of HTTP requests.`}</li>\n      <li parentName=\"ul\">{`High-performance scalable database implementations. Examples: CockroachDB, InfluxDB.`}</li>\n      <li parentName=\"ul\">{`Containerisation, ie. system-level software that interacts with the OS through its public API. Examples: Docker, Kubernetes.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"testing--benchmarking\"\n    }}>{`Testing / Benchmarking`}</h2>\n    <p>{`The built-in `}<inlineCode parentName=\"p\">{`testing`}</inlineCode>{` package can be used for both testing and benchmarking.`}</p>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`go test`}</inlineCode>{` to run tests and `}<inlineCode parentName=\"p\">{`go test -v --bench . --benchmem`}</inlineCode>{` for benchmarking.`}</p>\n    <p>{`See below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package greeting\n\nimport \"testing\"\n\n// Define a function named HelloWorld that takes no arguments,\n// and returns a string.\n// In other words, define a function with the following signature:\n// HelloWorld() string\n\nfunc TestHelloWorld(t *testing.T) {\n    expected := \"Hello, World!\"\n    if observed := HelloWorld(); observed != expected {\n        t.Fatalf(\"HelloWorld() = %v, want %v\", observed, expected)\n    }\n}\n\n// BenchmarkHelloWorld() is a benchmarking function. These functions follow the\n// form \\`func BenchmarkXxx(*testing.B)\\` and can be used to test the performance\n// of your implementation. They may not be present in every exercise, but when\n// they are you can run them by including the \\`-bench\\` flag with the \\`go test\\`\n// command, like so: \\`go test -v --bench . --benchmem\\`\n//\n// You will see output similar to the following:\n//\n// BenchmarkHelloWorld      2000000000           0.46 ns/op\n//\n// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.\n//\n// While benchmarking can be useful to compare different iterations of the same\n// exercise, keep in mind that others will run the same benchmarks on different\n// machines, with different specs, so the results from these benchmark tests may\n// vary.\nfunc BenchmarkHelloWorld(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        HelloWorld()\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"popular-web-servers-for-the-language\"\n    }}>{`Popular web servers for the language?`}</h2>\n    <p>{`Go comes with a powerful inbuilt web server.`}</p>\n    <p>{`References:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://getgophish.com/blog/post/2018-12-02-building-web-servers-in-go/\"\n        }}>{`https://getgophish.com/blog/post/2018-12-02-building-web-servers-in-go/`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"hello-world\"\n    }}>{`Hello, World!`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package greeting\n\n// HelloWorld adheres to the developer norm!\nfunc HelloWorld() string {\n    return \"Hello, World!\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`The commandline tool primnts plain test docs to standard output.`}</p>\n    <p><inlineCode parentName=\"p\">{`go doc fmt Println`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"what-are-the-nuances-of-the-language\"\n    }}>{`What are the nuances of the language?`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"how-does-package-management-work\"\n    }}>{`How does package management work?`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/golang/go/wiki/PackagePublishing\"\n      }}>{`Official Guide`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/17539407/golang-how-to-import-local-packages-without-gopath\"\n      }}>{`StackOverflow Response`}</a></p>\n    <p>{`First, host it online.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`import \"github.com/kylelemons/go-gypsy/yaml\"\n             ^         ^          ^     ^\n             |         |          |     \\`-- Package name\n             |         |          \\`-------- Project name\n             |         \\`------------------- Author's handle\n             \\`----------------------------- Hosting site\n`}</code></pre>\n    <p>{`Go >= version 1 supports subdirectories of package repositories.`}</p>\n    <p>{`The tl;dr:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export GO111MODULE=on\ngo mod init\ngo mod vendor # if you have vendor/ folder, will automatically integrate\ngo build\n`}</code></pre>\n    <p>{`Example generated `}<inlineCode parentName=\"p\">{`go.mod`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`module github.com/okeeffed/module-data-structures-go-hello-world\n\ngo 1.12\n`}</code></pre>\n    <p>{`Now you can run `}<inlineCode parentName=\"p\">{`go doc module-data-structures-go-hello-world HelloWorld`}</inlineCode>{` to check docs for that particular package.`}</p>\n    <h2 {...{\n      \"id\": \"how-does-importing-work\"\n    }}>{`How does importing work?`}</h2>\n    <p>{`References from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/golangspec/import-declarations-in-go-8de0fd3ae8ff\"\n      }}>{`Medium article`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    fmt.Println(math.Exp2(10))  // 1024\n}\n`}</code></pre>\n    <p>{`Other examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`import log \"github.com/sirupsen/logrus\"\n`}</code></pre>\n    <p>{`With custom package names:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`# github.com/mlowicki/main.go\npackage main\nimport (\n    \"fmt\"\n    \"github.com/mlowicki/b\"\n)\nfunc main() {\n    fmt.Println(c.B)\n}\n# github.com/mlowicki/b/b.go\npackage c\nvar B = \"b\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-does-logging-work\"\n    }}>{`How does logging work?`}</h2>\n    <p>{`Some examples `}<a parentName=\"p\" {...{\n        \"href\": \"http://xahlee.info/golang/golang_print.html\"\n      }}>{`on Golang printing`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package logexample\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hello, world!\")\n  fmt.Printf(\"there are %v apples\\\\n\", 3)\n  fmt.Printf(\"Name is %v, Age is %v \\\\n\", \"john\", 36)\n}\n`}</code></pre>\n    <p>{`Useful placeholders:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Placeholder`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`%v`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`any value printed in human readable form`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`%#v`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`print in Golang syntax`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`%+v`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`if value is struct, also show field names`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`%T`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type of the value`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`%%`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`a literaly percent sign`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Note: `}<inlineCode parentName=\"p\">{`%T`}</inlineCode>{` is useful when learning Golang.`}</p>\n    <h2 {...{\n      \"id\": \"useful-linksarticles\"\n    }}>{`Useful links/articles`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://xahlee.info/golang/golang_index.html\"\n        }}>{`Golang tutorial`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://hackernoon.com/the-beauty-of-go-98057e3f0a7d\"\n        }}>{`The Beauty of Go`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"useful-tips-and-tricks\"\n    }}>{`Useful tips and tricks`}</h2>\n    <p>{`Below are useful things to know when using the language.`}</p>\n    <h2 {...{\n      \"id\": \"read-file\"\n    }}>{`Read File`}</h2>\n    <p>{`Read whole file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\nimport \"io/ioutil\"\n\nfunc main() {\n\n    // read whole file\n    myText, myErr := ioutil.ReadFile(\"/Users/x/filepath\")\n\n    if myErr != nil {\n        panic(myErr)\n        // panic means abort\n    }\n\n    // print it. String converts it to string\n    fmt.Print(string(myText))\n\n}\n`}</code></pre>\n    <p>{`Read first X bytes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\nimport \"os\"\n\n// open file. read first 200 bytes. print it.\n\nvar filePath = \"/Users/xah/web/xahlee_info/golang/golang_read_file.html\"\n\nfunc getHeadBytes(path string, n int) []byte {\n\n    file, err := os.Open(path) // For read access.\n    if err != nil {\n        panic(err)\n    }\n\n    defer file.Close()\n\n    headBytes := make([]byte, n)\n    m, err := file.Read(headBytes)\n    if err != nil {\n        panic(err)\n    }\n\n    return headBytes[:m]\n}\n\nfunc main() {\n\n    fmt.Printf(\"%q\\\\n\", getHeadBytes(filePath, 200))\n\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"write-file\"\n    }}>{`Write File`}</h2>\n    <p>{`First way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"io/ioutil\"\n\nfunc main() {\n\n    mytext := []byte(\\`mountain and river\\`)\n\n    outpath := \"xx69447.txt\"\n\n    err := ioutil.WriteFile(outpath, mytext, 0644)\n\n    if err != nil {\n        panic(err)\n    }\n}\n`}</code></pre>\n    <p>{`Second way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\nimport \"os\"\n\nvar path = \"xxtest.txt\"\n\nvar contentX = \"something\"\n\nfunc main() {\n\n    var fll, err = os.Create(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fll.Close()\n\n    var bytesWritten, errW = fll.WriteString(contentX)\n    if errW != nil {\n        panic(errW)\n    }\n\n    fmt.Printf(\"bytes written: %v\\\\n\", bytesWritten)\n\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"walk-through-directory\"\n    }}>{`Walk through directory`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`filepath.Walk(dir_path, process_func)`}</inlineCode>{` from package `}<inlineCode parentName=\"p\">{`path/filepath`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"path/filepath\"\n)\n\nvar myDir = \"/Users/x/web/\"\n\n// go thru a dir and print all file name and extension\n\nfunc main() {\n    // the function that handles each file or dir\n    var ff = func(pathX string, infoX os.FileInfo, errX error) error {\n\n        // first thing to do, check error. and decide what to do about it\n        if errX != nil {\n            fmt.Printf(\"error 「%v」 at a path 「%q」\\\\n\", errX, pathX)\n            return errX\n        }\n\n        fmt.Printf(\"pathX: %v\\\\n\", pathX)\n\n        // find out if it's a dir or file, if file, print info\n        if infoX.IsDir() {\n            fmt.Printf(\"is dir.\\\\n\")\n        } else {\n            fmt.Printf(\"  dir: 「%v」\\\\n\", filepath.Dir(pathX))\n            fmt.Printf(\"  file name 「%v」\\\\n\", infoX.Name())\n            fmt.Printf(\"  extenion: 「%v」\\\\n\", filepath.Ext(pathX))\n        }\n\n        return nil\n    }\n\n    err := filepath.Walk(myDir, ff)\n\n    if err != nil {\n        fmt.Printf(\"error walking the path %q: %v\\\\n\", myDir, err)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"check-file-exists\"\n    }}>{`Check file exists`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\nimport \"os\"\n\n// fileExist. check if a file exist\nfunc fileExist(path string) bool {\n    _, err := os.Stat(path)\n    if err == nil {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    fmt.Printf(\"%v\\\\n\", fileExist(\"/Users/x/xyz.txt\"))\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"system-calls\"\n    }}>{`System calls`}</h2>\n    <p>{`To make a system call, use `}<inlineCode parentName=\"p\">{`import \"os/exec\"`}</inlineCode>{` and use `}<inlineCode parentName=\"p\">{`var cmd = exec.Command(cmdName, arg1, arg2)`}</inlineCode>{`.`}</p>\n    <p>{`You then have several choices how you want to run it. The main choices are:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`cmd.Output()`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`run it, wait, get output`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`cmd.Run()`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`run it, wait for it to finish`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`cmd.Start()`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`run it, don't wait `}<inlineCode parentName=\"td\">{`err = cmd.Wait()`}</inlineCode>{` to get result`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`If you need to change dir before running the command, use `}<inlineCode parentName=\"p\">{`os.Chdir(path)`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\n// example of calling shell command\n\n// cd to a given dir\n// call ls -al\n// print its output\n\nimport \"fmt\"\nimport \"os\"\nimport \"os/exec\"\n\nfunc main() {\n\n    var dirToRun = \"/Users/xah/web/\"\n    var err = os.Chdir(dirToRun)\n    if err != nil {\n        panic(err)\n    }\n\n    var cmdName = \"ls\"\n\n    var cmd = exec.Command(cmdName, \"-a\", \"-l\")\n\n    output, err := cmd.Output()\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf(\"%v\\\\n\", string(output))\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defer\"\n    }}>{`Defer`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://xahlee.info/golang/golang_defer.html\"\n      }}>{`Defer`}</a>{` statement is a new flow control, not in other popular languages. `}<inlineCode parentName=\"p\">{`defer function_name(args)`}</inlineCode>{`.`}</p>\n    <p>{`When this is run, the args are evaluated, but the function call is not. The function is called right before the outer function exits.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc ff(x int) int {\n    fmt.Printf(\"ff called. arg is %v\\\\n\", x)\n    return x\n}\n\nfunc main() {\n\n    var x = 3\n\n    fmt.Printf(\"main. x is %v\\\\n\", x)\n\n    defer ff(x)\n\n    x = 4\n\n    fmt.Printf(\"main. x is %v\\\\n\", x)\n\n}\n\n// main. x is 3\n// main. x is 4\n// ff called. arg is 3\n`}</code></pre>\n    <p>{`Defer is used similar to “finally” in other languages, to do some clean up.`}</p>\n    <p>{`Usually, it's used right after the file opening call, to close a file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc CopyFile(dstName, srcName string) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    defer src.Close()\n\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    defer dst.Close()\n\n    return io.Copy(dst, src)\n}\n\n// 2018-08-26 code from\n// https://blog.golang.org/defer-panic-and-recover\n\nfunc main() {}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"understanding-through-programs\"\n    }}>{`Understanding Through Programs`}</h2>\n    <p>{`[TODO]`}</p>\n    <p>{`Not all need to be done (pending what the language is useful for), but here are some useful ideas to get familiar with packages and testing for real world uses:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Webserver that takes and returns JSON`}</li>\n      <li parentName=\"ul\">{`CLI tool that parses the markdown for this file and can be used as a helper`}</li>\n      <li parentName=\"ul\">{`A file reader/writer that parses common file types`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}