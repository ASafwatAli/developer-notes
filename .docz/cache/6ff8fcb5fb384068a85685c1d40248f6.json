{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kafka/Hello-Kafka.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kafka/Hello-Kafka.md","mtime":1580211074122},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kafka/Hello-Kafka.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"hello-kafka\"\n    }}>{`Hello Kafka`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/big-data-engineering/hello-kafka-world-the-complete-guide-to-kafka-with-docker-and-python-f788e2588cfc\"\n        }}>{`Getting started with Kafka`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/SOHU-Co/kafka-node\"\n        }}>{`Kafka Node Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/wurstmeister/kafka-docker\"\n        }}>{`Original Kafka Docker Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started-with-nodejs\"\n    }}>{`Getting Started with Nodejs`}</h2>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`git clone https://github.com/wurstmeister/kafka-docker.git`}</inlineCode>{` to clone wurstmeister's repo.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Make sure you have both Docker and Docker Compose installed.`}</p>\n    <h2 {...{\n      \"id\": \"docker-composing\"\n    }}>{`Docker Composing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker-compose up -d\ndocker-compose scale kafka=3\n# to see processes\ndocker-compose ps\n# teardown\ndocker-compose stop\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"consumeproducing-from-within-docker-container\"\n    }}>{`Consume/Producing from within Docker Container`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# from your terminal run:\ndocker exec -i -t -u root $(docker ps | grep docker_kafka | cut -d' ' -f1) /bin/bash\n# $(docker ps | grep docker_kafka | cut -d' ' -f1) - Will return the docker process ID of the Kafka Docker running so you can access it\n\n# create topic1 and topic2 for our examples\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic1\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic2\n\n# optional: create a consumer\n$KAFKA_HOME/bin/kafka-console-consumer.sh --from-beginning --bootstrap-server localhost:9092 --topic=topic1\n\n# optional: create a producer\n$KAFKA_HOME/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic=topic1\n`}</code></pre>\n    <p>{`Note: We use `}<inlineCode parentName=\"p\">{`localhost:9092`}</inlineCode>{` here instead of `}<inlineCode parentName=\"p\">{`kafka:9092`}</inlineCode>{` for our Node Kafka scripts.`}</p>\n    <p>{`When sending messages as a producer, note that we are latching onto particular partitions in the Node app and so only messages that head to a particular partition will be consumed.`}</p>\n    <h2 {...{\n      \"id\": \"node-kafka\"\n    }}>{`Node Kafka`}</h2>\n    <p>{`Start a new project and install and prep the files we need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn init -y\nyarn add node-kafka\ntouch consumer.js producer.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"producer\"\n    }}>{`Producer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var kafka = require('kafka-node'),\n  Producer = kafka.Producer,\n  KeyedMessage = kafka.KeyedMessage,\n  client = new kafka.KafkaClient(),\n  producer = new Producer(client),\n  km = new KeyedMessage('key', 'message'),\n  payloads = [\n    { topic: 'topic1', messages: 'hi', partition: 0 },\n    { topic: 'topic2', messages: ['hello', 'world', km] },\n  ];\nproducer.on('ready', function() {\n  producer.send(payloads, function(err, data) {\n    console.log(data);\n  });\n});\n\nproducer.on('error', function(err) {});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"consumer\"\n    }}>{`Consumer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var kafka = require('kafka-node'),\n  Consumer = kafka.Consumer,\n  client = new kafka.KafkaClient(),\n  consumer = new Consumer(\n    client,\n    [{ topic: 'topic1', partition: 0 }, { topic: 'topic2', partition: 1 }],\n    {\n      autoCommit: false,\n    },\n  );\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-it-altogether\"\n    }}>{`Running it altogether`}</h2>\n    <p>{`Ensure that you've created `}<inlineCode parentName=\"p\">{`topic1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`topic2`}</inlineCode>{` from within the Docker container.`}</p>\n    <p>{`Once created, we can run `}<inlineCode parentName=\"p\">{`node consumer.js`}</inlineCode>{` in one terminal to listen for those topics on particular partitions and `}<inlineCode parentName=\"p\">{`node producer.js`}</inlineCode>{` to fire off some notifications.`}</p>\n    <p>{`All the received events on the consumer will then log to the terminal.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}