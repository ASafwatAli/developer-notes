{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Methods-And-Pointers.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Methods-And-Pointers.md","mtime":1569582624442},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJnby10b3VyLW1ldGhvZHMtLXBvaW50ZXItaW5kaXJlY3Rpb24ifSwiR28gVG91ciBNZXRob2RzICYgUG9pbnRlciBJbmRpcmVjdGlvbiIpLG1keCgicCIsbnVsbCwiVGFrZSB0aGUgZm9sbG93aW5nIGNvZGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvbGFuZyJ9KSwicGFja2FnZSBtYWluXG5cbmltcG9ydCBcImZtdFwiXG5cbnR5cGUgVmVydGV4IHN0cnVjdCB7XG4gICAgWCwgWSBmbG9hdDY0XG59XG5cbmZ1bmMgKHYgKlZlcnRleCkgU2NhbGUoZiBmbG9hdDY0KSB7XG4gICAgdi5YID0gdi5YICogZlxuICAgIHYuWSA9IHYuWSAqIGZcbn1cblxuZnVuYyBTY2FsZUZ1bmModiAqVmVydGV4LCBmIGZsb2F0NjQpIHtcbiAgICB2LlggPSB2LlggKiBmXG4gICAgdi5ZID0gdi5ZICogZlxufVxuXG5mdW5jIG1haW4oKSB7XG4gICAgdiA6PSBWZXJ0ZXh7MywgNH1cbiAgICB2LlNjYWxlKDIpXG4gICAgU2NhbGVGdW5jKCZ2LCAxMClcblxuICAgIHAgOj0gJlZlcnRleHs0LCAzfVxuICAgIHAuU2NhbGUoMylcbiAgICBTY2FsZUZ1bmMocCwgOClcblxuICAgIGZtdC5QcmludGxuKHYsIHApXG59XG4iKSksbWR4KCJwIixudWxsLCJDb21wYXJpbmcgdGhlIHByZXZpb3VzIHR3byBwcm9ncmFtcywgeW91IG1pZ2h0IG5vdGljZSB0aGF0IGZ1bmN0aW9ucyB3aXRoIGEgcG9pbnRlciBhcmd1bWVudCBtdXN0IHRha2UgYSBwb2ludGVyOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nb2xhbmcifSksInZhciB2IFZlcnRleFxuU2NhbGVGdW5jKHYsIDUpICAvLyBDb21waWxlIGVycm9yIVxuU2NhbGVGdW5jKCZ2LCA1KSAvLyBPS1xuIikpLG1keCgicCIsbnVsbCwiV2hpbGUgbWV0aG9kcyB3aXRoIHBvaW50ZXIgcmVjZWl2ZXJzIHRha2UgZWl0aGVyIGEgdmFsdWUgb3IgYSBwb2ludGVyIGFzIHRoZSByZWNlaXZlciB3aGVuIHRoZXkgYXJlIGNhbGxlZDoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZ29sYW5nIn0pLCJ2YXIgdiBWZXJ0ZXhcbnYuU2NhbGUoNSkgIC8vIE9LXG5wIDo9ICZ2XG5wLlNjYWxlKDEwKSAvLyBPS1xuIikpLG1keCgicCIsbnVsbCwiRm9yIHRoZSBzdGF0ZW1lbnQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInYuU2NhbGUoNSkiKSwiLCBldmVuIHRob3VnaCB2IGlzIGEgdmFsdWUgYW5kIG5vdCBhIHBvaW50ZXIsIHRoZSBtZXRob2Qgd2l0aCB0aGUgcG9pbnRlciByZWNlaXZlciBpcyBjYWxsZWQgYXV0b21hdGljYWxseS4gVGhhdCBpcywgYXMgYSBjb252ZW5pZW5jZSwgR28gaW50ZXJwcmV0cyB0aGUgc3RhdGVtZW50ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJ2LlNjYWxlKDUpIiksIiBhcyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiKCZ2KS5TY2FsZSg1KSIpLCIgc2luY2UgdGhlIFNjYWxlIG1ldGhvZCBoYXMgYSBwb2ludGVyIHJlY2VpdmVyLiIpLG1keCgiaDIiLHsiaWQiOiJyZXZlcnNlLWRpcmVjdGlvbiJ9LCJSZXZlcnNlIGRpcmVjdGlvbiIpLG1keCgicCIsbnVsbCwiVGhlIGVxdWl2YWxlbnQgdGhpbmcgaGFwcGVucyBpbiB0aGUgcmV2ZXJzZSBkaXJlY3Rpb24uIiksbWR4KCJwIixudWxsLCJUYWtlIHRoZSBmb2xsb3dpbmcgY29kZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZ29sYW5nIn0pLCJwYWNrYWdlIG1haW5cblxuaW1wb3J0IChcbiAgICBcImZtdFwiXG4gICAgXCJtYXRoXCJcbilcblxudHlwZSBWZXJ0ZXggc3RydWN0IHtcbiAgICBYLCBZIGZsb2F0NjRcbn1cblxuZnVuYyAodiBWZXJ0ZXgpIEFicygpIGZsb2F0NjQge1xuICAgIHJldHVybiBtYXRoLlNxcnQodi5YKnYuWCArIHYuWSp2LlkpXG59XG5cbmZ1bmMgQWJzRnVuYyh2IFZlcnRleCkgZmxvYXQ2NCB7XG4gICAgcmV0dXJuIG1hdGguU3FydCh2Llgqdi5YICsgdi5ZKnYuWSlcbn1cblxuZnVuYyBtYWluKCkge1xuICAgIHYgOj0gVmVydGV4ezMsIDR9XG4gICAgZm10LlByaW50bG4odi5BYnMoKSlcbiAgICBmbXQuUHJpbnRsbihBYnNGdW5jKHYpKVxuXG4gICAgcCA6PSAmVmVydGV4ezQsIDN9XG4gICAgZm10LlByaW50bG4ocC5BYnMoKSlcbiAgICBmbXQuUHJpbnRsbihBYnNGdW5jKCpwKSlcbn1cbiIpKSxtZHgoInAiLG51bGwsIkZ1bmN0aW9ucyB0aGF0IHRha2UgYSB2YWx1ZSBhcmd1bWVudCBtdXN0IHRha2UgYSB2YWx1ZSBvZiB0aGF0IHNwZWNpZmljIHR5cGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvbGFuZyJ9KSwidmFyIHYgVmVydGV4XG5mbXQuUHJpbnRsbihBYnNGdW5jKHYpKSAgLy8gT0tcbmZtdC5QcmludGxuKEFic0Z1bmMoJnYpKSAvLyBDb21waWxlIGVycm9yIVxuIikpLG1keCgicCIsbnVsbCwiV2hpbGUgbWV0aG9kcyB3aXRoIHZhbHVlIHJlY2VpdmVycyB0YWtlIGVpdGhlciBhIHZhbHVlIG9yIGEgcG9pbnRlciBhcyB0aGUgcmVjZWl2ZXIgd2hlbiB0aGV5IGFyZSBjYWxsZWQ6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvbGFuZyJ9KSwidmFyIHYgVmVydGV4XG5mbXQuUHJpbnRsbih2LkFicygpKSAvLyBPS1xucCA6PSAmdlxuZm10LlByaW50bG4ocC5BYnMoKSkgLy8gT0tcbiIpKSxtZHgoInAiLG51bGwsIkluIHRoaXMgY2FzZSwgdGhlIG1ldGhvZCBjYWxsICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJwLkFicygpIiksIiBpcyBpbnRlcnByZXRlZCBhcyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiKFxcKnApLkFicygpIiksIi4iKSxtZHgoImgxIix7ImlkIjoiY2hvb3NpbmctYS12YWx1ZS1vci1wb2ludGVyLXJlY2VpdmVyIn0sIkNob29zaW5nIGEgdmFsdWUgb3IgcG9pbnRlciByZWNlaXZlciIpLG1keCgicCIsbnVsbCwiVGhlcmUgYXJlIHR3byByZWFzb25zIHRvIHVzZSBhIHBvaW50ZXIgcmVjZWl2ZXIuIiksbWR4KCJwIixudWxsLCJUaGUgZmlyc3QgaXMgc28gdGhhdCAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJ0aGUgbWV0aG9kIGNhbiBtb2RpZnkgdGhlIHZhbHVlIHRoYXQgaXRzIHJlY2VpdmVyIHBvaW50cyB0byIpLCIuIiksbWR4KCJwIixudWxsLCJUaGUgc2Vjb25kIGlzICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sInRvIGF2b2lkIGNvcHlpbmcgdGhlIHZhbHVlIG9uIGVhY2ggbWV0aG9kIGNhbGwiKSwiLiBUaGlzIGNhbiBiZSBtb3JlIGVmZmljaWVudCBpZiB0aGUgcmVjZWl2ZXIgaXMgYSBsYXJnZSBzdHJ1Y3QsIGZvciBleGFtcGxlLiIpLG1keCgicCIsbnVsbCwiSW4gdGhpcyBleGFtcGxlLCBib3RoICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJTY2FsZSIpLCIgYW5kICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJBYnMiKSwiIGFyZSB3aXRoIHJlY2VpdmVyIHR5cGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIipWZXJ0ZXgiKSwiLCBldmVuIHRob3VnaCB0aGUgQWJzIG1ldGhvZCBuZWVkbid0IG1vZGlmeSBpdHMgcmVjZWl2ZXIuIiksbWR4KCJwIixudWxsLCJJbiBnZW5lcmFsLCBhbGwgbWV0aG9kcyBvbiBhIGdpdmVuIHR5cGUgc2hvdWxkIGhhdmUgZWl0aGVyIHZhbHVlIG9yIHBvaW50ZXIgcmVjZWl2ZXJzLCBidXQgbm90IGEgbWl4dHVyZSBvZiBib3RoLiAoV2UnbGwgc2VlIHdoeSBvdmVyIHRoZSBuZXh0IGZldyBwYWdlcy4pIikpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9Hby9Hby1NZXRob2RzLUFuZC1Qb2ludGVycy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Methods-And-Pointers.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,sCADA,CAAR,yCADK,CAIL,wCAJK,CAKL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,+ZAAL,CALK,CAqCL,iIArCK,CAsCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,+EAAL,CAtCK,CA4CL,2HA5CK,CA6CL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,kEAAL,CA7CK,CAoDL,kCAAyB,kBAAY,UAAU,CAAC,GAAvB,eAAzB,uKAAsP,kBAAY,UAAU,CAAC,GAAvB,eAAtP,QAAoT,kBAAY,UAAU,CAAC,GAAvB,kBAApT,mDApDK,CAqDL,SAAQ,CACN,KAAM,mBADA,CAAR,qBArDK,CAwDL,sEAxDK,CAyDL,wCAzDK,CA0DL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,6bAAL,CA1DK,CAyFL,6FAzFK,CA0FL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,+FAAL,CA1FK,CAgGL,yHAhGK,CAiGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,oFAAL,CAjGK,CAwGL,8CAAqC,kBAAY,UAAU,CAAC,GAAvB,YAArC,uBAA+G,kBAAY,UAAU,CAAC,GAAvB,iBAA/G,KAxGK,CAyGL,SAAQ,CACN,KAAM,sCADA,CAAR,wCAzGK,CA4GL,gEA5GK,CA6GL,qCAA4B,cAAQ,UAAU,CAAC,GAAnB,gEAA5B,KA7GK,CA8GL,8BAAqB,cAAQ,UAAU,CAAC,GAAnB,mDAArB,gFA9GK,CA+GL,sCAA6B,kBAAY,UAAU,CAAC,GAAvB,UAA7B,SAAuF,kBAAY,UAAU,CAAC,GAAvB,QAAvF,4BAAkK,kBAAY,UAAU,CAAC,GAAvB,YAAlK,6DA/GK,CAgHL,0KAhHK,CAAP,CAkHD,C,gRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"go-tour-methods--pointer-indirection\"\n    }}>{`Go Tour Methods & Pointer Indirection`}</h1>\n    <p>{`Take the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Scale(f float64) {\n    v.X = v.X * f\n    v.Y = v.Y * f\n}\n\nfunc ScaleFunc(v *Vertex, f float64) {\n    v.X = v.X * f\n    v.Y = v.Y * f\n}\n\nfunc main() {\n    v := Vertex{3, 4}\n    v.Scale(2)\n    ScaleFunc(&v, 10)\n\n    p := &Vertex{4, 3}\n    p.Scale(3)\n    ScaleFunc(p, 8)\n\n    fmt.Println(v, p)\n}\n`}</code></pre>\n    <p>{`Comparing the previous two programs, you might notice that functions with a pointer argument must take a pointer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`var v Vertex\nScaleFunc(v, 5)  // Compile error!\nScaleFunc(&v, 5) // OK\n`}</code></pre>\n    <p>{`While methods with pointer receivers take either a value or a pointer as the receiver when they are called:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`var v Vertex\nv.Scale(5)  // OK\np := &v\np.Scale(10) // OK\n`}</code></pre>\n    <p>{`For the statement `}<inlineCode parentName=\"p\">{`v.Scale(5)`}</inlineCode>{`, even though v is a value and not a pointer, the method with the pointer receiver is called automatically. That is, as a convenience, Go interprets the statement `}<inlineCode parentName=\"p\">{`v.Scale(5)`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`(&v).Scale(5)`}</inlineCode>{` since the Scale method has a pointer receiver.`}</p>\n    <h2 {...{\n      \"id\": \"reverse-direction\"\n    }}>{`Reverse direction`}</h2>\n    <p>{`The equivalent thing happens in the reverse direction.`}</p>\n    <p>{`Take the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc AbsFunc(v Vertex) float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n    v := Vertex{3, 4}\n    fmt.Println(v.Abs())\n    fmt.Println(AbsFunc(v))\n\n    p := &Vertex{4, 3}\n    fmt.Println(p.Abs())\n    fmt.Println(AbsFunc(*p))\n}\n`}</code></pre>\n    <p>{`Functions that take a value argument must take a value of that specific type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`var v Vertex\nfmt.Println(AbsFunc(v))  // OK\nfmt.Println(AbsFunc(&v)) // Compile error!\n`}</code></pre>\n    <p>{`While methods with value receivers take either a value or a pointer as the receiver when they are called:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`var v Vertex\nfmt.Println(v.Abs()) // OK\np := &v\nfmt.Println(p.Abs()) // OK\n`}</code></pre>\n    <p>{`In this case, the method call `}<inlineCode parentName=\"p\">{`p.Abs()`}</inlineCode>{` is interpreted as `}<inlineCode parentName=\"p\">{`(\\\\*p).Abs()`}</inlineCode>{`.`}</p>\n    <h1 {...{\n      \"id\": \"choosing-a-value-or-pointer-receiver\"\n    }}>{`Choosing a value or pointer receiver`}</h1>\n    <p>{`There are two reasons to use a pointer receiver.`}</p>\n    <p>{`The first is so that `}<strong parentName=\"p\">{`the method can modify the value that its receiver points to`}</strong>{`.`}</p>\n    <p>{`The second is `}<strong parentName=\"p\">{`to avoid copying the value on each method call`}</strong>{`. This can be more efficient if the receiver is a large struct, for example.`}</p>\n    <p>{`In this example, both `}<inlineCode parentName=\"p\">{`Scale`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Abs`}</inlineCode>{` are with receiver type `}<inlineCode parentName=\"p\">{`*Vertex`}</inlineCode>{`, even though the Abs method needn't modify its receiver.`}</p>\n    <p>{`In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both. (We'll see why over the next few pages.)`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}