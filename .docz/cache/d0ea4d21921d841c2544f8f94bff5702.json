{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/SQL/Indexing-Example.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/SQL/Indexing-Example.md","mtime":1580718689429},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJpbmRleGluZy1leGFtcGxlIn0sIkluZGV4aW5nIEV4YW1wbGUiKSxtZHgoInAiLG51bGwsIlRoZSBmb2xsb3dpbmcgaXMgZG9uZSBvbiBQb3N0Z3Jlc1NRTCAxMi4iKSxtZHgoImgyIix7ImlkIjoicmVzb3VyY2VzIn0sIlJlc291cmNlcyIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Imh0dHBzOi8vd3d3LmRiLWZpZGRsZS5jb20vIn0pLCJEQiBGaWRkbGUiKSkpLG1keCgiaDIiLHsiaWQiOiJ3aXRob3V0LWluZGV4aW5nIn0sIldpdGhvdXQgSW5kZXhpbmciKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc3FsIn0pLCJDUkVBVEUgVEFCTEUgdGVzdCAoXG4gIGlkIElOVCxcbiAgY291bnQgSU5UXG4pO1xuSU5TRVJUIElOVE8gdGVzdCAoaWQsIGNvdW50KSBWQUxVRVMgKDEsMSk7XG5JTlNFUlQgSU5UTyB0ZXN0IChpZCwgY291bnQpIFZBTFVFUyAoMiwyKTtcbklOU0VSVCBJTlRPIHRlc3QgKGlkLCBjb3VudCkgVkFMVUVTICgzLDMpO1xuXG5DUkVBVEUgVEFCTEUgdGVzdF90d28gKFxuICBpZCBJTlQsXG4gIGNvdW50IElOVFxuKTtcbklOU0VSVCBJTlRPIHRlc3RfdHdvIChpZCwgY291bnQpIFZBTFVFUyAoMSwxKTtcbklOU0VSVCBJTlRPIHRlc3RfdHdvIChpZCwgY291bnQpIFZBTFVFUyAoMiwyKTtcbklOU0VSVCBJTlRPIHRlc3RfdHdvIChpZCwgY291bnQpIFZBTFVFUyAoMywzKTtcbkNSRUFURSBJTkRFWCBPTiB0ZXN0X3R3byhjb3VudClcblxuRVhQTEFJTiBBTkFMWVpFXG5TRUxFQ1QgKiBGUk9NIHRlc3QgSk9JTiB0ZXN0X3R3byBPTiAodGVzdC5pZCA9IHRlc3RfdHdvLmlkKVxuIikpLG1keCgicCIsbnVsbCwiVGhlIFFVRVJZIFBMQU4gcmV0dXJuczoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc3FsIn0pLCJNZXJnZSBKb2luIChjb3N0PTMxNy4wMS4uNzExLjM4IHJvd3M9MjU1Mzggd2lkdGg9MTYpIChhY3R1YWwgdGltZT0wLjA1MC4uMC4wNTIgcm93cz0zIGxvb3BzPTEpXG5NZXJnZSBDb25kOiAodGVzdC5pZCA9IHRlc3RfdHdvLmlkKVxuLT4gU29ydCAoY29zdD0xNTguNTEuLjE2NC4xNiByb3dzPTIyNjAgd2lkdGg9OCkgKGFjdHVhbCB0aW1lPTAuMDI5Li4wLjAzMCByb3dzPTMgbG9vcHM9MSlcblNvcnQgS2V5OiB0ZXN0LmlkXG5Tb3J0IE1ldGhvZDogcXVpY2tzb3J0IE1lbW9yeTogMjVrQlxuLT4gU2VxIFNjYW4gb24gdGVzdCAoY29zdD0wLjAwLi4zMi42MCByb3dzPTIyNjAgd2lkdGg9OCkgKGFjdHVhbCB0aW1lPTAuMDA1Li4wLjAwNSByb3dzPTMgbG9vcHM9MSlcbi0+IFNvcnQgKGNvc3Q9MTU4LjUxLi4xNjQuMTYgcm93cz0yMjYwIHdpZHRoPTgpIChhY3R1YWwgdGltZT0wLjAxOC4uMC4wMTggcm93cz0zIGxvb3BzPTEpXG5Tb3J0IEtleTogdGVzdF90d28uaWRcblNvcnQgTWV0aG9kOiBxdWlja3NvcnQgTWVtb3J5OiAyNWtCXG4tPiBTZXEgU2NhbiBvbiB0ZXN0X3R3byAoY29zdD0wLjAwLi4zMi42MCByb3dzPTIyNjAgd2lkdGg9OCkgKGFjdHVhbCB0aW1lPTAuMDA2Li4wLjAwNiByb3dzPTMgbG9vcHM9MSlcblBsYW5uaW5nIFRpbWU6IDAuMzAxIG1zXG5FeGVjdXRpb24gVGltZTogMC4xMzIgbXNcbiIpKSxtZHgoImgyIix7ImlkIjoid2l0aC1pbmRleGluZyJ9LCJXaXRoIEluZGV4aW5nIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNxbCJ9KSwiQ1JFQVRFIFRBQkxFIHRlc3QgKFxuICBpZCBJTlQsXG4gIGNvdW50IElOVFxuKTtcbklOU0VSVCBJTlRPIHRlc3QgKGlkLCBjb3VudCkgVkFMVUVTICgxLDEpO1xuSU5TRVJUIElOVE8gdGVzdCAoaWQsIGNvdW50KSBWQUxVRVMgKDIsMik7XG5JTlNFUlQgSU5UTyB0ZXN0IChpZCwgY291bnQpIFZBTFVFUyAoMywzKTtcblxuQ1JFQVRFIFRBQkxFIHRlc3RfdHdvIChcbiAgaWQgSU5ULFxuICBjb3VudCBJTlRcbik7XG5JTlNFUlQgSU5UTyB0ZXN0X3R3byAoaWQsIGNvdW50KSBWQUxVRVMgKDEsMSk7XG5JTlNFUlQgSU5UTyB0ZXN0X3R3byAoaWQsIGNvdW50KSBWQUxVRVMgKDIsMik7XG5JTlNFUlQgSU5UTyB0ZXN0X3R3byAoaWQsIGNvdW50KSBWQUxVRVMgKDMsMyk7XG5DUkVBVEUgSU5ERVggT04gdGVzdF90d28oY291bnQpXG5cbkVYUExBSU4gQU5BTFlaRVxuU0VMRUNUICogRlJPTSB0ZXN0IEpPSU4gdGVzdF90d28gT04gKHRlc3QuaWQgPSB0ZXN0X3R3by5pZClcbiIpKSxtZHgoInAiLG51bGwsIlRoZSBRVUVSWSBQTEFOIHJldHVybnM6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNxbCJ9KSwiSGFzaCBKb2luIChjb3N0PTEuMDcuLjQyLjQ4IHJvd3M9MzQgd2lkdGg9MTYpIChhY3R1YWwgdGltZT0wLjA1OC4uMC4wNTkgcm93cz0zIGxvb3BzPTEpXG5IYXNoIENvbmQ6ICh0ZXN0LmlkID0gdGVzdF90d28uaWQpXG4tPiBTZXEgU2NhbiBvbiB0ZXN0IChjb3N0PTAuMDAuLjMyLjYwIHJvd3M9MjI2MCB3aWR0aD04KSAoYWN0dWFsIHRpbWU9MC4wMDMuLjAuMDA0IHJvd3M9MyBsb29wcz0xKVxuLT4gSGFzaCAoY29zdD0xLjAzLi4xLjAzIHJvd3M9MyB3aWR0aD04KSAoYWN0dWFsIHRpbWU9MC4wMTEuLjAuMDExIHJvd3M9MyBsb29wcz0xKVxuQnVja2V0czogMTAyNCBCYXRjaGVzOiAxIE1lbW9yeSBVc2FnZTogOWtCXG4tPiBTZXEgU2NhbiBvbiB0ZXN0X3R3byAoY29zdD0wLjAwLi4xLjAzIHJvd3M9MyB3aWR0aD04KSAoYWN0dWFsIHRpbWU9MC4wMDEuLjAuMDAyIHJvd3M9MyBsb29wcz0xKVxuUGxhbm5pbmcgVGltZTogMC40NDMgbXNcbkV4ZWN1dGlvbiBUaW1lOiAwLjEyMSBtc1xuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvU1FML0luZGV4aW5nLUV4YW1wbGUubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/SQL/Indexing-Example.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kBADA,CAAR,oBADK,CAIL,wDAJK,CAKL,SAAQ,CACN,KAAM,WADA,CAAR,aALK,CAQL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,4BAD+B,CAAvB,cAApB,CADF,CARK,CAaL,SAAQ,CACN,KAAM,kBADA,CAAR,oBAbK,CAgBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,kfAAL,CAhBK,CAsCL,uCAtCK,CAuCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,mrBAAL,CAvCK,CAsDL,SAAQ,CACN,KAAM,eADA,CAAR,iBAtDK,CAyDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,kfAAL,CAzDK,CA+EL,uCA/EK,CAgFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,6fAAL,CAhFK,CAAP,CA4FD,C,0QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"indexing-example\"\n    }}>{`Indexing Example`}</h1>\n    <p>{`The following is done on PostgresSQL 12.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.db-fiddle.com/\"\n        }}>{`DB Fiddle`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"without-indexing\"\n    }}>{`Without Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Merge Join (cost=317.01..711.38 rows=25538 width=16) (actual time=0.050..0.052 rows=3 loops=1)\nMerge Cond: (test.id = test_two.id)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.029..0.030 rows=3 loops=1)\nSort Key: test.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.005..0.005 rows=3 loops=1)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.018..0.018 rows=3 loops=1)\nSort Key: test_two.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test_two (cost=0.00..32.60 rows=2260 width=8) (actual time=0.006..0.006 rows=3 loops=1)\nPlanning Time: 0.301 ms\nExecution Time: 0.132 ms\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"with-indexing\"\n    }}>{`With Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Hash Join (cost=1.07..42.48 rows=34 width=16) (actual time=0.058..0.059 rows=3 loops=1)\nHash Cond: (test.id = test_two.id)\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.003..0.004 rows=3 loops=1)\n-> Hash (cost=1.03..1.03 rows=3 width=8) (actual time=0.011..0.011 rows=3 loops=1)\nBuckets: 1024 Batches: 1 Memory Usage: 9kB\n-> Seq Scan on test_two (cost=0.00..1.03 rows=3 width=8) (actual time=0.001..0.002 rows=3 loops=1)\nPlanning Time: 0.443 ms\nExecution Time: 0.121 ms\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}