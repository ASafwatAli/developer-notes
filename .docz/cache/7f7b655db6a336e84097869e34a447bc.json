{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md","mtime":1577954340432},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"typescript--github-example\"\n    }}>{`TypeScript + Github Example`}</h1>\n    <p>{`In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`Initialise a project in a folder `}<inlineCode parentName=\"p\">{`yarn init -y`}</inlineCode>{`.`}</p>\n    <p>{`Prerequisites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-setup\"\n    }}>{`API Setup`}</h2>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`api/example.ts`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tsconfig\"\n    }}>{`TSConfig`}</h2>\n    <p>{`Add this is tsconfig.json (taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json\"\n      }}>{`this Zeit Now example`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"git-ignore\"\n    }}>{`Git Ignore`}</h2>\n    <p>{`Ignore npm modules + .env where we will store the local key in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node_modules/\n.env\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dotenv\"\n    }}>{`Dotenv`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.`}</p>\n    <p>{`If you need to create one, `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`follow this article from the GitHub site`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_TOKEN=TOKEN_VALUE\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nowjson\"\n    }}>{`Now.json`}</h2>\n    <p>{`We will use `}<inlineCode parentName=\"p\">{`now.json`}</inlineCode>{` to help define some env variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-github\"\n      }}>{`{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-json\"\n    }}>{`Test JSON`}</h2>\n    <p>{`For what we will upload, add this to `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hello\": \"world\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h2>\n    <p>{`Now we can develop locally. Run `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{` to get localhost running on port 3000.`}</p>\n    <p>{`Once the port is running, we can ping `}<inlineCode parentName=\"p\">{`http://localhost:3000/api/example`}</inlineCode>{` and pass some params to generate a new repo and add some JSON.`}</p>\n    <p>{`In this example, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"https://httpie.org/doc#json\"\n      }}>{`HTTPie`}</a>{` and running `}<inlineCode parentName=\"p\">{`http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json`}</inlineCode>{` on the command line will lead to the creation of a new private repo `}<inlineCode parentName=\"p\">{`temp-zeit-a`}</inlineCode>{` with content from the `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{` local file saved into the `}<inlineCode parentName=\"p\">{`hello.json`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`Hooray!`}</p>\n    <h2 {...{\n      \"id\": \"production\"\n    }}>{`Production`}</h2>\n    <p>{`To deploy to production, we simply run `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}