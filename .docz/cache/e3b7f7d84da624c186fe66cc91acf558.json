{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md","mtime":1560738062487},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,iBADA,CAAR,mBADK,CAIL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,oBAAX,8FAJK,CAKL,+HALK,CAML,yDANK,CAOL,cACE,UAAI,UAAU,CAAC,IAAf,OAA0B,kBAAY,UAAU,CAAC,IAAvB,YAA1B,8FAA4K,kBAAY,UAAU,CAAC,IAAvB,UAA5K,mEAAiS,kBAAY,UAAU,CAAC,IAAvB,iBAAjS,KADF,CAEE,UAAI,UAAU,CAAC,IAAf,OAA0B,kBAAY,UAAU,CAAC,IAAvB,YAA1B,wDAAsI,kBAAY,UAAU,CAAC,IAAvB,YAAtI,4BAAsN,kBAAY,UAAU,CAAC,IAAvB,UAAtN,mDAA2T,kBAAY,UAAU,CAAC,IAAvB,iBAA3T,KAFF,CAGE,UAAI,UAAU,CAAC,IAAf,EAAoB,kBAAY,UAAU,CAAC,IAAvB,sBAApB,2MAA6R,kBAAY,UAAU,CAAC,IAAvB,qBAA7R,eAAyW,kBAAY,UAAU,CAAC,IAAvB,MAAzW,yKAAgkB,kBAAY,UAAU,CAAC,IAAvB,2BAAhkB,SAA4oB,kBAAY,UAAU,CAAC,IAAvB,8BAA5oB,qBAHF,CAIE,UAAI,UAAU,CAAC,IAAf,OAA0B,kBAAY,UAAU,CAAC,IAAvB,aAA1B,0CAAyH,kBAAY,UAAU,CAAC,IAAvB,YAAzH,+CAA4N,kBAAY,UAAU,CAAC,IAAvB,iBAA5N,iCAAsT,kBAAY,UAAU,CAAC,IAAvB,iBAAtT,4EAJF,CAPK,CAaL,SAAQ,CACN,KAAM,kCADA,CAAR,oCAbK,CAgBL,uCAA8B,kBAAY,UAAU,CAAC,GAAvB,iBAA9B,qIAA2N,kBAAY,UAAU,CAAC,GAAvB,iBAA3N,KAhBK,CAiBL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,iBAAX,qHAAwL,kBAAY,UAAU,CAAC,GAAvB,aAAxL,SAAqP,kBAAY,UAAU,CAAC,GAAvB,sBAArP,KAjBK,CAkBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,i9BAAL,CAlBK,CA4DL,SAAQ,CACN,KAAM,8BADA,CAAR,gCA5DK,CA+DL,4CAAmC,kBAAY,UAAU,CAAC,GAAvB,iBAAnC,yIA/DK,CAgEL,wLAhEK,CAiEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,iwBAAL,CAjEK,CA2FL,SAAQ,CACN,KAAM,+BADA,CAAR,iCA3FK,CA8FL,kFAAyE,kBAAY,UAAU,CAAC,GAAvB,sBAAzE,iCAAuK,kBAAY,UAAU,CAAC,GAAvB,qBAAvK,gDAAmR,kBAAY,UAAU,CAAC,GAAvB,iBAAnR,KA9FK,CA+FL,gLAAuK,kBAAY,UAAU,CAAC,GAAvB,iBAAvK,kDAAiR,kBAAY,UAAU,CAAC,GAAvB,WAAjR,+HAAkc,kBAAY,UAAU,CAAC,GAAvB,qBAAlc,cA/FK,CAgGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,iiBAAL,CAhGK,CA8HL,SAAQ,CACN,KAAM,sBADA,CAAR,wBA9HK,CAiIL,qJAA4I,kBAAY,UAAU,CAAC,GAAvB,iBAA5I,8CAjIK,CAkIL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,0kBAAL,CAlIK,CA2JL,SAAQ,CACN,KAAM,yBADA,CAAR,2BA3JK,CA8JL,qIAA4H,kBAAY,UAAU,CAAC,GAAvB,iBAA5H,2DA9JK,CA+JL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,uiBAAL,CA/JK,CAiLL,oEAjLK,CAkLL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,8HAAL,CAlLK,CAAP,CAwLD,C,qRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"builder-pattern\"\n    }}>{`Builder Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Builder Pattern`}</inlineCode>{` enables us to create different instance representations using the same construction code.`}</p>\n    <p>{`In this scenario, we will use the classic trope of building a pizza to illustate how to implement this pattern.`}</p>\n    <p>{`The pattern works by using the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` which represents the complex object under construction. In this case, the product is the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{` class which denotes our pizza instances. We wil name this our `}<inlineCode parentName=\"li\">{`PizzaProduct`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` that specifies the abstract class for creating the `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` parts (in our case the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{`). In this case, it will be our abstract class `}<inlineCode parentName=\"li\">{`PizzaBuilder`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Concrete Builders`}</inlineCode>{` where each builder is responsible to instantiate different representations of the product. In this case, the concrete builders will be our classes that construct different types of pizza denoted as `}<inlineCode parentName=\"li\">{`NConcreteBuilder`}</inlineCode>{` where the `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` represents the name of the kind of pizza. All we will do in this example is create a Hawaiin pizza and a Meat Lovers pizza, so the concrete builders will be called `}<inlineCode parentName=\"li\">{`HawaiinConcreteBuilder`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`MeatLoversConcreteBuilder`}</inlineCode>{` in this example.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Director`}</inlineCode>{` that constructs the object using the `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` interface. In this case, we will have the `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` class fulfil this role. The `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` will create a chef that is used to create the different types of pizza.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"builder-design-pattern-in-action\"\n    }}>{`Builder Design Pattern In Action`}</h2>\n    <p>{`First, let's build our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`. To do so, we will create an interface to ensure our product will include all the pizza essentials and then implement that to a `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{` itself will create the pizza instances, but will ultimately be abstracted away and flexibly built thanks to our `}<inlineCode parentName=\"p\">{`Director`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Concrete Builders`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// each pizza requires a base, sauce and topping property\n// also ensure a taste method is implemented\ninterface Pizza {\n    base: string;\n    sauce: string;\n    topping: string;\n    taste(): void;\n}\n\nclass PizzaProduct implements Pizza {\n    private _base: string;\n    private _topping: string;\n    private _sauce: string;\n\n    constructor() {\n        // initialise all values to empty strings\n        // our direct will use the concrete builders\n        // to set all these values durin\n        this._base = '';\n        this._topping = '';\n        this._sauce = '';\n    }\n\n    set base(baseValue: string) {\n        this._base = baseValue;\n    }\n\n    set topping(toppingValue: string) {\n        this._topping = toppingValue;\n    }\n\n    set sauce(sauceValue: string) {\n        this._sauce = sauceValue;\n    }\n\n    taste(): void {\n        console.log(\\`Base: \\${this._base}, Topping: \\${this._topping}, Sauce: \\${this._sauce}.\\`);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-abstract-builder\"\n    }}>{`Writing Our Abstract Builder`}</h2>\n    <p>{`Next, we need to define our `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{`. This builder will be an abstract class that defines the required methods and set the base for our concrete builders to extend from.`}</p>\n    <p>{`Note: an abstract class cannot have an instance created. This is incredibly important. The instances created in the program will be done by our concrete builders later.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`abstract class PizzaBuilder {\n    // this relation to the PizzaProduct is what abstracts the PizzaProduct\n    // from the code run from the program\n    protected _pizza: PizzaProduct;\n\n    // we set these functions to abstract because we want\n    // the concrete builders that extend the PizzaBuilder\n    // to implement these functions\n    abstract buildBase(): void;\n    abstract buildSauce(): void;\n    abstract buildTopping(): void;\n\n    constructor() {\n        // added for the sake of simplicty instead of a makePizza function\n        // we will just instantiate an \"empty\" pizza when a builder\n        // instance is initialised\n        this._pizza = new PizzaProduct();\n    }\n\n    get pizza() {\n        return this._pizza;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-concrete-builders\"\n    }}>{`Writing Our Concrete Builders`}</h2>\n    <p>{`Now that the abstract builder has been created, we now create the `}<inlineCode parentName=\"p\">{`concrete builders`}</inlineCode>{`. Remember, the role of each `}<inlineCode parentName=\"p\">{`concrete builder`}</inlineCode>{` is the build out different versions of our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`Note: since we are extended from the abstract class, we do not need to override the constructor method. The base constructor method provided in the super class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` will handle our instantiation of the private `}<inlineCode parentName=\"p\">{`_pizza`}</inlineCode>{` property as well as the getter, so the code for these concrete builders should be straight forward implementations of the `}<inlineCode parentName=\"p\">{`abstract classes`}</inlineCode>{` required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class HawaiinConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thick crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'ham and pineapple';\n  }\n}\n\nclass MeatLoversConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thin crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'a lot of meat';\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-director\"\n    }}>{`Writing Our Director`}</h2>\n    <p>{`Finally, we can build our Chef Director. The role of the director is to take any builder that conforms to our abstract builder class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` and make the pizzas and taste the pizzas.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class ChefDirector {\n    private pizzaBuilder?: PizzaBuilder;\n\n    makePizza(pizzaBuilder: PizzaBuilder): void {\n        this.pizzaBuilder = pizzaBuilder;\n        this.pizzaBuilder.buildBase();\n        this.pizzaBuilder.buildSauce();\n        this.pizzaBuilder.buildTopping();\n    }\n\n    tastePizza(): void {\n        try {\n            if (!this.pizzaBuilder) {\n                throw new Error('No pizza builder property defined');\n            }\n\n            this.pizzaBuilder.pizza.taste();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"putting-it-all-together\"\n    }}>{`Putting It All Together`}</h2>\n    <p>{`Now that all our required code has been written, we can happily write a quite script to test that an instance of our `}<inlineCode parentName=\"p\">{`ChefDirector`}</inlineCode>{` can make both a \"Hawaiin\" and \"Meat Lovers\" pizza!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the director will be used to create and taste pizzas\nconst chefDirector = new ChefDirector();\n\n// the concrete builders will now be used to define\n// what type of pizza the chef will make and taste\nconst hawaiinBuilder = new HawaiinConcreteBuilder();\nconst meatLoversBuilder = new MeatLoversConcreteBuilder();\n\n// First, let's test our Hawaiin Pizza\nchefDirector.makePizza(hawaiinBuilder);\nchefDirector.tastePizza();\n\n// Secondly, let's test our Meat Lovers\nchefDirector.makePizza(meatLoversBuilder);\nchefDirector.tastePizza();\n`}</code></pre>\n    <p>{`If we now check our console, we can see our results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`Base: thick crust, Topping: ham and pineapple, Sauce: tomato.\nBase: thin crust, Topping: a lot of meat, Sauce: tomato.\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}