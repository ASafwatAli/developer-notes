{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md","mtime":1551658050552},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiYmFzaWMtamF2YS1pbXBvcnRpbmcifSwiQmFzaWMgSmF2YSBJbXBvcnRpbmciKSxtZHgoInAiLG51bGwsIlRoaXMgaXMgYSBiYXNpYyByZW1pbmRlciBvbiBob3cgdG8gZGVjbGFyZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicGFja2FnZXMiKSwiIGFuZCBpbXBvcnQgdGhvc2UgcGFja2FnZXMgd2hlbiBydW5uaW5nIEdyYWRsZSB0ZXN0cy4iKSxtZHgoImgyIix7ImlkIjoibGF5b3V0In0sIkxheW91dCIpLG1keCgicCIsbnVsbCwiR2l2ZW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIHRvIHRlc3QgYSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiTGlua2VkIExpc3QiKSwiIEphdmEgY2xhc3MsIHdlIGhhdmUgdGhlIGZvbGxvd2luZyBsYXlvdXQgZm9yIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiLmphdmEiKSwiIGFuZCB0ZXN0IGZpbGVzOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1zaGVsbCJ9KSwiXHUyNTE0XHUyNTAwXHUyNTAwIHNyY1xuICAgIFx1MjUxQ1x1MjUwMFx1MjUwMCBtYWluXG4gICAgXHUyNTAyXHhBMFx4QTAgXHUyNTE0XHUyNTAwXHUyNTAwIGphdmFcbiAgICBcdTI1MDJceEEwXHhBMCAgICAgXHUyNTFDXHUyNTAwXHUyNTAwIExpbmtlZExpc3QuamF2YVxuICAgIFx1MjUwMlx4QTBceEEwICAgICBcdTI1MTRcdTI1MDBcdTI1MDAgTm9kZS5qYXZhXG4gICAgXHUyNTE0XHUyNTAwXHUyNTAwIHRlc3RcbiAgICAgICAgXHUyNTE0XHUyNTAwXHUyNTAwIGphdmFcbiAgICAgICAgICAgIFx1MjUxNFx1MjUwMFx1MjUwMCBMaW5rZWRMaXN0VGVzdC5qYXZhXG4iKSksbWR4KCJoMiIseyJpZCI6ImZpbGUtMS1zcmNtYWluamF2YWxpbmtlZGxpc3RqYXZhIn0sIkZpbGUgMTogc3JjL21haW4vamF2YS9MaW5rZWRMaXN0LmphdmEiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9KSwiaW1wb3J0IG1haW4uamF2YS5Ob2RlO1xuXG5jbGFzcyBMaW5rZWRMaXN0IHtcbiAgICBJbnRlZ2VyIHNpemU7XG4gICAgTm9kZSBoZWFkO1xuXG4gICAgcHVibGljIExpbmtlZExpc3QoKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIExpbmtlZExpc3QoTm9kZSBoZWFkKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDE7XG4gICAgICAgIHRoaXMuaGVhZCA9IGhlYWQ7XG4gICAgfVxuXG4gICAgcHVibGljIEludGVnZXIgZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgTm9kZSBnZXRGaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZDtcbiAgICB9XG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImZpbGUtMi1zcmNtYWluamF2YW5vZGVqYXZhIn0sIkZpbGUgMjogc3JjL21haW4vamF2YS9Ob2RlLmphdmEiKSxtZHgoInAiLG51bGwsIk5vdGljZSBoZXJlIHRoYXQgdGhlIHBhY2thZ2UgaXRzZWxmIGlzIGhhcyB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInB1YmxpYyIpLCIgbW9kaWZpZXIgYW5kIGhhcyB0aGUgcGFja2FnZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwibWFpbi5qYXZhIiksIiBpdHNlbGYgZGVjbGFyZWQuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSksInBhY2thZ2UgbWFpbi5qYXZhO1xuXG5wdWJsaWMgY2xhc3MgTm9kZSB7XG4gICAgcHJpdmF0ZSBJbnRlZ2VyIGRhdGE7XG4gICAgcHJpdmF0ZSBOb2RlIG5leHQ7XG5cbiAgICBwdWJsaWMgTm9kZShJbnRlZ2VyIGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgTm9kZShJbnRlZ2VyIGRhdGEsIE5vZGUgbmV4dCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cblxuICAgIHB1YmxpYyB2b2lkIHNldE5leHQoTm9kZSBuZXh0KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgcHVibGljIE5vZGUgZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgdm9pZCBzZXREYXRhKEludGVnZXIgZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBJbnRlZ2VyIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfVxufVxuIikpLG1keCgiaDIiLHsiaWQiOiJmaWxlLTMtc3JjdGVzdGphdmFsaW5rZWRsaXN0dGVzdGphdmEifSwiRmlsZSAzOiBzcmMvdGVzdC9qYXZhL0xpbmtlZExpc3RUZXN0LmphdmEiKSxtZHgoInAiLG51bGwsIkZvciB0aGlzIHBhcnRpY3VsYXIgdGVzdCwgd2UgYWxzbyBuZWVkIHRvIGltcG9ydCB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIk5vZGUiKSwiIHBhY2thZ2UgdG8gZW5zdXJlIHdlIGNhbiBjcmVhdGUgbm9kZXMgZm9yIHRoZSBMaW5rZWRMaXN0LiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCJpbXBvcnQgb3JnLmp1bml0Lklnbm9yZTtcbmltcG9ydCBvcmcuanVuaXQuVGVzdDtcblxuaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEVxdWFscztcbmltcG9ydCBtYWluLmphdmEuTm9kZTtcblxucHVibGljIGNsYXNzIExpbmtlZExpc3RUZXN0IHtcbiAgICBAVGVzdFxuICAgIHB1YmxpYyB2b2lkIHRlc3RHZXRGaXJzdCgpIHtcbiAgICAgICAgTm9kZSBuMSA9IG5ldyBOb2RlKDIpO1xuICAgICAgICBMaW5rZWRMaXN0IGxsID0gbmV3IExpbmtlZExpc3QobjEpO1xuICAgICAgICBhc3NlcnRFcXVhbHMobGwuZ2V0Rmlyc3QoKSwgbjEpO1xuICAgIH1cbn1cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0phdmEvQmFzaWMtSW1wb3J0cy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,sBADA,CAAR,wBADK,CAIL,2DAAkD,kBAAY,UAAU,CAAC,GAAvB,aAAlD,yDAJK,CAKL,SAAQ,CACN,KAAM,QADA,CAAR,UALK,CAQL,sDAA6C,kBAAY,UAAU,CAAC,GAAvB,gBAA7C,sDAA0J,kBAAY,UAAU,CAAC,GAAvB,UAA1J,oBARK,CASL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,wUAAL,CATK,CAoBL,SAAQ,CACN,KAAM,kCADA,CAAR,yCApBK,CAuBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,sZAAL,CAvBK,CAkDL,SAAQ,CACN,KAAM,4BADA,CAAR,mCAlDK,CAqDL,+DAAsD,kBAAY,UAAU,CAAC,GAAvB,WAAtD,kCAA0I,kBAAY,UAAU,CAAC,GAAvB,cAA1I,qBArDK,CAsDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,6kBAAL,CAtDK,CAyFL,SAAQ,CACN,KAAM,sCADA,CAAR,6CAzFK,CA4FL,qEAA4D,kBAAY,UAAU,CAAC,GAAvB,SAA5D,8DA5FK,CA6FL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,8UAAL,CA7FK,CAAP,CA+GD,C,wQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-java-importing\"\n    }}>{`Basic Java Importing`}</h1>\n    <p>{`This is a basic reminder on how to declare `}<inlineCode parentName=\"p\">{`packages`}</inlineCode>{` and import those packages when running Gradle tests.`}</p>\n    <h2 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h2>\n    <p>{`Given the following example to test a `}<inlineCode parentName=\"p\">{`Linked List`}</inlineCode>{` Java class, we have the following layout for the `}<inlineCode parentName=\"p\">{`.java`}</inlineCode>{` and test files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`└── src\n    ├── main\n    │   └── java\n    │       ├── LinkedList.java\n    │       └── Node.java\n    └── test\n        └── java\n            └── LinkedListTest.java\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-1-srcmainjavalinkedlistjava\"\n    }}>{`File 1: src/main/java/LinkedList.java`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import main.java.Node;\n\nclass LinkedList {\n    Integer size;\n    Node head;\n\n    public LinkedList() {\n        this.size = 0;\n        this.head = null;\n    }\n\n    public LinkedList(Node head) {\n        this.size = 1;\n        this.head = head;\n    }\n\n    public Integer getSize() {\n        return this.size;\n    }\n\n    public Node getFirst() {\n        return this.head;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-2-srcmainjavanodejava\"\n    }}>{`File 2: src/main/java/Node.java`}</h2>\n    <p>{`Notice here that the package itself is has the `}<inlineCode parentName=\"p\">{`public`}</inlineCode>{` modifier and has the package `}<inlineCode parentName=\"p\">{`main.java`}</inlineCode>{` itself declared.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package main.java;\n\npublic class Node {\n    private Integer data;\n    private Node next;\n\n    public Node(Integer data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    public Node(Integer data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    public Node getNext() {\n        return this.next;\n    }\n\n    public void setData(Integer data) {\n        this.data = data;\n    }\n\n    public Integer getData() {\n        return this.data;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-3-srctestjavalinkedlisttestjava\"\n    }}>{`File 3: src/test/java/LinkedListTest.java`}</h2>\n    <p>{`For this particular test, we also need to import the `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` package to ensure we can create nodes for the LinkedList.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class LinkedListTest {\n    @Test\n    public void testGetFirst() {\n        Node n1 = new Node(2);\n        LinkedList ll = new LinkedList(n1);\n        assertEquals(ll.getFirst(), n1);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}