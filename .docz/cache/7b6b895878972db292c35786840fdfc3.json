{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md","mtime":1566512524883},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1J1c3QvQnVpbGRpbmctUnVzdC1DTElzLm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsWyJkZWZhdWx0Il0uc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImJ1aWxkaW5nLXJ1c3QtY29tbWFuZC1saW5lLXRvb2xzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJCdWlsZGluZyBSdXN0IENvbW1hbmQgTGluZSBUb29scyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJJbml0aWFsIGZpbmRpbmdzIGJhc2VkIG9mZiBhIHVzZWZ1bCBhcnRpY2xlICIsIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInAiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly9tYXR0Z2F0aHUuZ2l0aHViLmlvL3dyaXRpbmctY2xpLWFwcC1ydXN0LyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiZm91bmQgaGVyZSIpLCAiLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJXZSdyZSB1c2luZyB0aGUgIiwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicCIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2dpdGh1Yi5jb20vY2xhcC1ycy9jbGFwIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJDbGFwIiksICIgY3JhdGUgdG8gaGVscCBib290c3RyYXAgQ0xJcy4iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInVzZWZ1bC10b29scy10by1jb25zaWRlciIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVXNlZnVsIHRvb2xzIHRvIGNvbnNpZGVyIiksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImEiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJsaSIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2dpdGh1Yi5jb20vcnVzdC1jbGkvaHVtYW4tcGFuaWMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImh0dHBzOi8vZ2l0aHViLmNvbS9ydXN0LWNsaS9odW1hbi1wYW5pYyIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZ2l0aHViLmNvbS9obmlrc2ljL3J1c3Qtc3VicHJvY2VzcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiaHR0cHM6Ly9naXRodWIuY29tL2huaWtzaWMvcnVzdC1zdWJwcm9jZXNzIikpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAibGkiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly9naXRodWIuY29tL29jb25ub3I2NjMvZHVjdC5ycyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiaHR0cHM6Ly9naXRodWIuY29tL29jb25ub3I2NjMvZHVjdC5ycyIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZ2l0aHViLmNvbS9ra2F3YWthbS9ydXN0eWxpbmUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImh0dHBzOi8vZ2l0aHViLmNvbS9ra2F3YWthbS9ydXN0eWxpbmUiKSksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImEiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJsaSIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2dpdGh1Yi5jb20vbWl0c3VoaWtvL2luZGljYXRpZiIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiaHR0cHM6Ly9naXRodWIuY29tL21pdHN1aGlrby9pbmRpY2F0aWYiKSksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0bGRyIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJ0bDtkciIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJJbml0aWFsaXNlIGFuIGFwcCB1c2luZyAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJjYXJnbyBuZXcgYXBwX25hbWVfeW91X3dhbnQgLS1iaW4iKSwgIi4iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhpcyBleGFtcGxlIGRpdmVyZ2VzIGZyb20gdGhlIGFib3ZlIGFydGljbGUgYnkgdXNpbmcgdGhlIFwiQ2xhcFwiIGNyYXRlIHdpdGggdGhlIFlBTUwgZmlsZSBjb25maWcuIiksIG1keCgiaDMiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJzcmNtYWlucnMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgInNyYy9tYWluLnJzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlVwZGF0ZSB0aGUgZmlsZSB0byByZWZsZWN0IHRoZSBmb2xsb3dpbmc6IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1ydXN0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIjW21hY3JvX3VzZV1cbmV4dGVybiBjcmF0ZSBjbGFwO1xudXNlIGNsYXA6OkFwcDtcblxuZm4gbWFpbigpIHtcbiAgICBsZXQgeWFtbCA9IGxvYWRfeWFtbCEoXCJjbGkueW1sXCIpO1xuICAgIGxldCBtYXRjaGVzID0gQXBwOjpmcm9tX3lhbWwoeWFtbCkuZ2V0X21hdGNoZXMoKTtcblxuICAgIC8vIEdldHMgYSB2YWx1ZSBmb3IgY29uZmlnIGlmIHN1cHBsaWVkIGJ5IHVzZXIsIG9yIGRlZmF1bHRzIHRvIFwiZGVmYXVsdC5jb25mXCJcbiAgICBsZXQgY29uZmlnID0gbWF0Y2hlcy52YWx1ZV9vZihcImNvbmZpZ1wiKS51bndyYXBfb3IoXCJkZWZhdWx0LmNvbmZcIik7XG4gICAgcHJpbnRsbiEoXCJWYWx1ZSBmb3IgY29uZmlnOiB7fVwiLCBjb25maWcpO1xuXG4gICAgLy8gQ2FsbGluZyAudW53cmFwKCkgaXMgc2FmZSBoZXJlIGJlY2F1c2UgXCJJTlBVVFwiIGlzIHJlcXVpcmVkIChpZiBcIklOUFVUXCIgd2Fzbid0XG4gICAgLy8gcmVxdWlyZWQgd2UgY291bGQgaGF2ZSB1c2VkIGFuICdpZiBsZXQnIHRvIGNvbmRpdGlvbmFsbHkgZ2V0IHRoZSB2YWx1ZSlcbiAgICBwcmludGxuIShcIlVzaW5nIGlucHV0IGZpbGU6IHt9XCIsIG1hdGNoZXMudmFsdWVfb2YoXCJJTlBVVFwiKS51bndyYXAoKSk7XG5cbiAgICAvLyBWYXJ5IHRoZSBvdXRwdXQgYmFzZWQgb24gaG93IG1hbnkgdGltZXMgdGhlIHVzZXIgdXNlZCB0aGUgXCJ2ZXJib3NlXCIgZmxhZ1xuICAgIC8vIChpLmUuICdteXByb2cgLXYgLXYgLXYnIG9yICdteXByb2cgLXZ2dicgdnMgJ215cHJvZyAtdidcbiAgICBtYXRjaCBtYXRjaGVzLm9jY3VycmVuY2VzX29mKFwidmVyYm9zZVwiKSB7XG4gICAgICAgIDAgPT4gcHJpbnRsbiEoXCJObyB2ZXJib3NlIGluZm9cIiksXG4gICAgICAgIDEgPT4gcHJpbnRsbiEoXCJTb21lIHZlcmJvc2UgaW5mb1wiKSxcbiAgICAgICAgMiA9PiBwcmludGxuIShcIlRvbnMgb2YgdmVyYm9zZSBpbmZvXCIpLFxuICAgICAgICAzIHwgXyA9PiBwcmludGxuIShcIkRvbid0IGJlIGNyYXp5XCIpLFxuICAgIH1cblxuICAgIC8vIFlvdSBjYW4gaGFuZGxlIGluZm9ybWF0aW9uIGFib3V0IHN1YmNvbW1hbmRzIGJ5IHJlcXVlc3RpbmcgdGhlaXIgbWF0Y2hlcyBieSBuYW1lXG4gICAgLy8gKGFzIGJlbG93KSwgcmVxdWVzdGluZyBqdXN0IHRoZSBuYW1lIHVzZWQsIG9yIGJvdGggYXQgdGhlIHNhbWUgdGltZVxuICAgIGlmIGxldCBTb21lKG1hdGNoZXMpID0gbWF0Y2hlcy5zdWJjb21tYW5kX21hdGNoZXMoXCJ0ZXN0XCIpIHtcbiAgICAgICAgaWYgbWF0Y2hlcy5pc19wcmVzZW50KFwiZGVidWdcIikge1xuICAgICAgICAgICAgcHJpbnRsbiEoXCJQcmludGluZyBkZWJ1ZyBpbmZvLi4uXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbnRsbiEoXCJQcmludGluZyBub3JtYWxseS4uLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInNyY2NsaXltbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAic3JjL2NsaS55bWwiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTAxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkZvciB0aGUgQ0xJIGFyZ3MsIHNldCB0aGUgZm9sbG93aW5nOiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwMgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLXltbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMDIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIm5hbWU6IGphbWFpY2FcbnZlcnNpb246IFwiMS4wXCJcbmF1dGhvcjogRGVubmlzIE8nS2VlZmZlIDxoZWxsb0BkZW5uaXNva2VlZmZlLmNvbT5cbmFib3V0OiBCdWlsZCBhZ25vc3RpYyBhcHAgY29uZmlnc1xuYXJnczpcbiAgICAtIGNvbmZpZzpcbiAgICAgICAgc2hvcnQ6IGNcbiAgICAgICAgbG9uZzogY29uZmlnXG4gICAgICAgIHZhbHVlX25hbWU6IEZJTEVcbiAgICAgICAgaGVscDogU2V0cyBhIGN1c3RvbSBjb25maWcgZmlsZVxuICAgICAgICB0YWtlc192YWx1ZTogdHJ1ZVxuICAgIC0gSU5QVVQ6XG4gICAgICAgIGhlbHA6IFNldHMgdGhlIGlucHV0IGZpbGUgdG8gdXNlXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgIGluZGV4OiAxXG4gICAgLSB2ZXJib3NlOlxuICAgICAgICBzaG9ydDogdlxuICAgICAgICBtdWx0aXBsZTogdHJ1ZVxuICAgICAgICBoZWxwOiBTZXRzIHRoZSBsZXZlbCBvZiB2ZXJib3NpdHlcbnN1YmNvbW1hbmRzOlxuICAgIC0gdGVzdDpcbiAgICAgICAgYWJvdXQ6IGNvbnRyb2xzIHRlc3RpbmcgZmVhdHVyZXNcbiAgICAgICAgdmVyc2lvbjogXCIxLjNcIlxuICAgICAgICBhdXRob3I6IFNvbWVvbmUgRS4gPHNvbWVvbmVfZWxzZUBvdGhlci5jb20+XG4gICAgICAgIGFyZ3M6XG4gICAgICAgICAgICAtIGRlYnVnOlxuICAgICAgICAgICAgICAgIHNob3J0OiBkXG4gICAgICAgICAgICAgICAgaGVscDogcHJpbnQgZGVidWcgaW5mb3JtYXRpb25cbiIpKSwgbWR4KCJoMyIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInJ1bm5pbmctdGhlLWFib3ZlLWNvbmZpZyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlJ1bm5pbmcgdGhlIGFib3ZlIGNvbmZpZyIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEzNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLXNoZWxsIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEzNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiY2FyZ28gcnVuIC0tIHNyYy9tYWluLnJzIC0tY29uZmlnPW1hZGUvdXAvXG4jIC4uLiBvbWl0dGVkIFJ1c3QgYnVpbGQgb3V0cHV0XG5WYWx1ZSBmb3IgY29uZmlnOiBtYWRlL3VwL2ZpbGVcblVzaW5nIGlucHV0IGZpbGU6IHNyYy9tYWluLnJzXG5ObyB2ZXJib3NlIGluZm9cblxuY2FyZ28gcnVuIC0tIC0taGVscFxuIyBzaG93cyBoZWxwIG91dHB1dDogb21pdHRlZCBmb3Igbm93XG4iKSkpOwp9CgppZiAodHlwZW9mIE1EWENvbnRlbnQgIT09ICd1bmRlZmluZWQnICYmIE1EWENvbnRlbnQgJiYgTURYQ29udGVudCA9PT0gT2JqZWN0KE1EWENvbnRlbnQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIk1EWENvbnRlbnQiLAogICAgICBmaWxlbmFtZTogIm1hbnVhbC9SdXN0L0J1aWxkaW5nLVJ1c3QtQ0xJcy5tZCIKICAgIH0KICB9KTsKfQoKTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7CjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobWFrZVNob3J0Y29kZSwgIm1ha2VTaG9ydGNvZGUiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9SdXN0L0J1aWxkaW5nLVJ1c3QtQ0xJcy5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGxheW91dFByb3BzLCAibGF5b3V0UHJvcHMiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9SdXN0L0J1aWxkaW5nLVJ1c3QtQ0xJcy5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWExheW91dCwgIk1EWExheW91dCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1J1c3QvQnVpbGRpbmctUnVzdC1DTElzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYQ29udGVudCwgIk1EWENvbnRlbnQiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9SdXN0L0J1aWxkaW5nLVJ1c3QtQ0xJcy5tZCIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5sZWF2ZU1vZHVsZTsKICBsZWF2ZU1vZHVsZSAmJiBsZWF2ZU1vZHVsZShtb2R1bGUpOwp9KSgpOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"building-rust-command-line-tools\"\n    }}>{`Building Rust Command Line Tools`}</h1>\n    <p>{`Initial findings based off a useful article `}<a parentName=\"p\" {...{\n        \"href\": \"https://mattgathu.github.io/writing-cli-app-rust/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`We're using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clap-rs/clap\"\n      }}>{`Clap`}</a>{` crate to help bootstrap CLIs.`}</p>\n    <h2 {...{\n      \"id\": \"useful-tools-to-consider\"\n    }}>{`Useful tools to consider`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rust-cli/human-panic\"\n        }}>{`https://github.com/rust-cli/human-panic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hniksic/rust-subprocess\"\n        }}>{`https://github.com/hniksic/rust-subprocess`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/oconnor663/duct.rs\"\n        }}>{`https://github.com/oconnor663/duct.rs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kkawakam/rustyline\"\n        }}>{`https://github.com/kkawakam/rustyline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mitsuhiko/indicatif\"\n        }}>{`https://github.com/mitsuhiko/indicatif`}</a></li>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Initialise an app using `}<inlineCode parentName=\"p\">{`cargo new app_name_you_want --bin`}</inlineCode>{`.`}</p>\n    <p>{`This example diverges from the above article by using the \"Clap\" crate with the YAML file config.`}</p>\n    <h3 {...{\n      \"id\": \"srcmainrs\"\n    }}>{`src/main.rs`}</h3>\n    <p>{`Update the file to reflect the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"srccliyml\"\n    }}>{`src/cli.yml`}</h3>\n    <p>{`For the CLI args, set the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-above-config\"\n    }}>{`Running the above config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}