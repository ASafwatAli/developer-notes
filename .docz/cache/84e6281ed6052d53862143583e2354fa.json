{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md","mtime":1562563032042},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJqYXZhLS0tYmFzaWMtdHJlZS1kYXRhLXN0cnVjdHVyZSJ9LCJKYXZhIC0gQmFzaWMgVHJlZSBEYXRhIFN0cnVjdHVyZSIpLG1keCgicCIsbnVsbCwiVGhpcyBpcyBhIGJhc2ljIGltcGxlbWVudGF0aW9uLiBUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImJmcyIpLCIgYW5kICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkZnMiKSwiIG1ldGhvZHMgZWFjaCByZXR1cm4gYSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiTGlzdDxJbnRlZ2VyPiIpLCIgb2YgdGhlIGRhdGEgc3RvcmVkIGluIGVhY2ggIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIk5vZGUiKSwiIHRvIG1ha2UgYSBjb21wYXJpc29uIGluIHRoZSB0ZXN0LiIpLG1keCgiaDIiLHsiaWQiOiJhbnN3ZXIifSwiQW5zd2VyIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSksIi8vIHNyYy9tYWluL2phdmEvVHJlZS5qYXZhXG5pbXBvcnQgbWFpbi5qYXZhLk5vZGU7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxuY2xhc3MgVHJlZSB7XG4gICAgcHVibGljIE5vZGUgcm9vdDtcblxuICAgIHB1YmxpYyBUcmVlKCkge1xuICAgICAgICB0aGlzLnJvb3QgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBUcmVlKE5vZGUgcm9vdCkge1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIH1cblxuICAgIHB1YmxpYyBMaXN0PEludGVnZXI+IGJmcygpIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTnVsbFBvaW50ZXJFeGNlcHRpb24oXCJ0aGlzLnJvb3QgaXMgbnVsbFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIExpc3Q8Tm9kZT4gbiA9IG5ldyBBcnJheUxpc3Q8PigpO1xuICAgICAgICBuLmFkZCh0aGlzLnJvb3QpO1xuXG4gICAgICAgIExpc3Q8SW50ZWdlcj4gcmVzID0gbmV3IEFycmF5TGlzdDw+KCk7XG5cbiAgICAgICAgd2hpbGUgKG4uc2l6ZSgpID4gMCkge1xuICAgICAgICAgICAgTm9kZSBjaGlsZCA9IG4ucmVtb3ZlKDApO1xuICAgICAgICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuLmFkZEFsbChjaGlsZC5jaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuYWRkKGNoaWxkLmRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgTGlzdDxJbnRlZ2VyPiBkZnMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvb3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE51bGxQb2ludGVyRXhjZXB0aW9uKFwiTm8gcm9vdFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIExpc3Q8Tm9kZT4gbiA9IG5ldyBBcnJheUxpc3Q8Tm9kZT4oKTtcbiAgICAgICAgbi5hZGQodGhpcy5yb290KTtcblxuICAgICAgICBMaXN0PEludGVnZXI+IHJlcyA9IG5ldyBBcnJheUxpc3Q8SW50ZWdlcj4oKTtcblxuICAgICAgICB3aGlsZSAobi5zaXplKCkgPiAwKSB7XG4gICAgICAgICAgICBOb2RlIGNoaWxkID0gbi5yZW1vdmUoMCk7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbi5hZGRBbGwoMCwgY2hpbGQuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmFkZChjaGlsZC5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCIvLyBzcmMvbWFpbi9qYXZhL05vZGUuamF2YVxucGFja2FnZSBtYWluLmphdmE7XG5cbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgY2xhc3MgTm9kZSB7XG4gICAgcHVibGljIEludGVnZXIgZGF0YTtcbiAgICBwdWJsaWMgTGlzdDxOb2RlPiBjaGlsZHJlbjtcblxuICAgIHB1YmxpYyBOb2RlKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IEFycmF5TGlzdDw+KCk7XG4gICAgfVxuXG4gICAgcHVibGljIE5vZGUoSW50ZWdlciBkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgTm9kZShJbnRlZ2VyIGRhdGEsIExpc3Q8Tm9kZT4gY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBBcnJheUxpc3Q8PigpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZEFsbChjaGlsZHJlbik7XG4gICAgfVxufVxuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCIvLyB0ZXN0L2phdmEvVHJlZVRlc3QuamF2YVxuaW1wb3J0IG9yZy5qdW5pdC5JZ25vcmU7XG5pbXBvcnQgb3JnLmp1bml0LlRlc3Q7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxuaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEVxdWFscztcbmltcG9ydCBtYWluLmphdmEuTm9kZTtcblxucHVibGljIGNsYXNzIFRyZWVUZXN0IHtcbiAgICBAVGVzdFxuICAgIHB1YmxpYyB2b2lkIHRlc3RCRlMoKSB7XG4gICAgICAgIE5vZGUgbjEgPSBuZXcgTm9kZSgxKTtcbiAgICAgICAgTm9kZSBuMiA9IG5ldyBOb2RlKDIpO1xuICAgICAgICBOb2RlIG4zID0gbmV3IE5vZGUoMyk7XG4gICAgICAgIE5vZGUgbjQgPSBuZXcgTm9kZSg0KTtcbiAgICAgICAgTm9kZSBuNSA9IG5ldyBOb2RlKDUpO1xuXG4gICAgICAgIExpc3Q8SW50ZWdlcj4gZXhwZWN0ZWQgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgIGV4cGVjdGVkLmFkZChpICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBUcmVlIHQgPSBuZXcgVHJlZShuMSk7XG4gICAgICAgIG4xLmNoaWxkcmVuLmFkZChuMik7XG4gICAgICAgIG4xLmNoaWxkcmVuLmFkZChuMyk7XG4gICAgICAgIG4yLmNoaWxkcmVuLmFkZChuNCk7XG4gICAgICAgIG4zLmNoaWxkcmVuLmFkZChuNSk7XG5cbiAgICAgICAgTGlzdDxJbnRlZ2VyPiByZXMgPSB0LmJmcygpO1xuXG4gICAgICAgIGFzc2VydEVxdWFscyhleHBlY3RlZCwgcmVzKTtcbiAgICB9XG5cbiAgICBAVGVzdFxuICAgIHB1YmxpYyB2b2lkIHRlc3RERlMoKSB7XG4gICAgICAgIE5vZGUgbjEgPSBuZXcgTm9kZSgxKTtcbiAgICAgICAgTm9kZSBuMiA9IG5ldyBOb2RlKDIpO1xuICAgICAgICBOb2RlIG4zID0gbmV3IE5vZGUoMyk7XG4gICAgICAgIE5vZGUgbjQgPSBuZXcgTm9kZSg0KTtcbiAgICAgICAgTm9kZSBuNSA9IG5ldyBOb2RlKDUpO1xuXG4gICAgICAgIExpc3Q8SW50ZWdlcj4gZXhwZWN0ZWQgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiAgICAgICAgZXhwZWN0ZWQuYWRkKDEpO1xuICAgICAgICBleHBlY3RlZC5hZGQoMik7XG4gICAgICAgIGV4cGVjdGVkLmFkZCg0KTtcbiAgICAgICAgZXhwZWN0ZWQuYWRkKDMpO1xuICAgICAgICBleHBlY3RlZC5hZGQoNSk7XG5cbiAgICAgICAgVHJlZSB0ID0gbmV3IFRyZWUobjEpO1xuICAgICAgICBuMS5jaGlsZHJlbi5hZGQobjIpO1xuICAgICAgICBuMS5jaGlsZHJlbi5hZGQobjMpO1xuICAgICAgICBuMi5jaGlsZHJlbi5hZGQobjQpO1xuICAgICAgICBuMy5jaGlsZHJlbi5hZGQobjUpO1xuXG4gICAgICAgIExpc3Q8SW50ZWdlcj4gcmVzID0gdC5kZnMoKTtcblxuICAgICAgICBhc3NlcnRFcXVhbHMoZXhwZWN0ZWQsIHJlcyk7XG4gICAgfVxufVxuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvSmF2YS9KYXZhLUJhc2ljLVRyZWUubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Basic-Tree.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kCADA,CAAR,oCADK,CAIL,oDAA2C,kBAAY,UAAU,CAAC,GAAvB,QAA3C,SAAmG,kBAAY,UAAU,CAAC,GAAvB,QAAnG,2BAA6K,kBAAY,UAAU,CAAC,GAAvB,kBAA7K,gCAAsQ,kBAAY,UAAU,CAAC,GAAvB,SAAtQ,sCAJK,CAKL,SAAQ,CACN,KAAM,QADA,CAAR,UALK,CAQL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,yyCAAL,CARK,CAsEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,skBAAL,CAtEK,CAmGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,s6CAAL,CAnGK,CAAP,CAmKD,C,0QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java---basic-tree-data-structure\"\n    }}>{`Java - Basic Tree Data Structure`}</h1>\n    <p>{`This is a basic implementation. The `}<inlineCode parentName=\"p\">{`bfs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dfs`}</inlineCode>{` methods each return a `}<inlineCode parentName=\"p\">{`List<Integer>`}</inlineCode>{` of the data stored in each `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` to make a comparison in the test.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Tree.java\nimport main.java.Node;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Tree {\n    public Node root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Tree(Node root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"this.root is null\");\n        }\n\n        List<Node> n = new ArrayList<>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n            if (child.children != null) {\n                n.addAll(child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n\n    public List<Integer> dfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"No root\");\n        }\n\n        List<Node> n = new ArrayList<Node>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<Integer>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n\n            if (child.children != null) {\n                n.addAll(0, child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Node.java\npackage main.java;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Node {\n    public Integer data;\n    public List<Node> children;\n\n    public Node() {\n        this.data = null;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data) {\n        this.data = data;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data, List<Node> children) {\n        this.data = data;\n        this.children = new ArrayList<>();\n        this.children.addAll(children);\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// test/java/TreeTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class TreeTest {\n    @Test\n    public void testBFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            expected.add(i + 1);\n        }\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.bfs();\n\n        assertEquals(expected, res);\n    }\n\n    @Test\n    public void testDFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(4);\n        expected.add(3);\n        expected.add(5);\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.dfs();\n\n        assertEquals(expected, res);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}