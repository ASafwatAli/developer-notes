{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md","mtime":1563949828549},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA+C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/C,aAJK,EAKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,m3BAAL,CARK,EAwEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxEK,EA2EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FAAL,CA3EK,EAmFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnFK,EAsFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAtFK,EAuFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0aAAL,CAvFK,EAwHL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAxHK,EA2HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sjBAAL,CA3HK,EAyJL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAzJK,EA4JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+xDAAL,CA5JK,CAAP;AAmQD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAlRMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-contructors\"\n    }}>{`Ruby Contructors`}</h1>\n    <p>{`The important constructor method is the `}<inlineCode parentName=\"p\">{`initialize`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  # change scope to public\n  public\n\n  # static class variable\n  @@count = 0\n\n  # constructor\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  # class method\n  def self.count\n    @@count\n  end\n\n  # getters/setters for name, designation, and salary\n  def name\n    @name\n  end\n\n  def name=(name)\n    @name = name\n  end\n\n  def designation\n    @designation\n  end\n\n  def designation=(designation)\n    @designation = designation\n  end\n\n  def salary\n    @salary\n  end\n\n  def salary=(salary)\n    @salary = salary\n  end\n\n  # change scope to private\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  # change scope to protected\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class SoftwareEngineer < Employee\n\n  # code for SoftwareEngineer class\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"attribute-accessors\"\n    }}>{`Attribute accessors`}</h3>\n    <p>{`For what is readable/writable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  attr_accessor :name, :designation, :salary\n\n  @@count = 0\n\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  def self.count\n    @@count\n  end\n\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple-example\"\n    }}>{`Simple Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# Ruby program to initialize instance\n# variable using constructor\n\n#!/usr/bin/ruby\n\n# class name\nclass Geeks\n    # constructor\n    def initialize\n\n        # instance variable intialzation\n        @inst_1 = \"GeeksforGeeks\"\n        @inst_2 = \"Sudo Placement\"\n    end\n\n    # display method\n    def display\n        puts \"Value of First instance variable is: #{@inst_1}\"\n        puts \"Value of Second instance variable is: #{@inst_2}\"\n    end\nend\n\n# creating object\nobj1 = Geeks.new()\n\n# calling display method\nobj1.display()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"linked-list-example\"\n    }}>{`Linked List Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`\"\"\"\nBasic implementation without all methods\n\"\"\"\n\nclass LinkedList\n    def initialize(head=nil)\n        if head.nil?\n            @size = 0\n        else\n            @size = 1\n        end\n        @head = head\n    end\n\n    def getSize\n        @size\n    end\n\n    def insertFirst(n)\n        if @head.nil?\n            @head = n\n        else\n            tmp = @head\n            @head = n\n            n.setNext(tmp)\n        end\n        @size += 1\n    end\n\n    def clear\n        @head = nil\n        @size = 0\n    end\n\n    def getFirst\n        @head\n    end\nend\n\nclass Node\n    def initialize(data = nil)\n        @data = data\n        @next = nil\n    end\n\n    def getNext\n        @next\n    end\n\n    def setNext(n)\n        @next = n\n    end\nend\n\n# test Ruby file\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'linked_list'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass LinkedListTest < Minitest::Test\n  def test_get_size\n    # skip\n    n1 = Node.new(1)\n    ll = LinkedList.new(n1)\n    assert_equal 1, ll.getSize()\n  end\n\n  def test_insert_first\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    assert_equal 2, ll.getSize()\n  end\n\n  def test_clear\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    ll.clear()\n    assert_equal 0, ll.getSize()\n    assert_nil nil, ll.getFirst()\n  end\nend\n\n__END__\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}