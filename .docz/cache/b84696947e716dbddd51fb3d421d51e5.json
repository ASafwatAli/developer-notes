{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Chef/chef-cheat-sheet.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Chef/chef-cheat-sheet.md","mtime":1548209344293},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"chef-cheat-sheet\"}},\"Chef Cheat Sheet\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"chef-terms\"}},\"Chef Terms\"),React.createElement(MDXTag,{name:\"p\",components:components},\"action :periodic\\naction :delete\\naction :create \\t\\t// default\\naction :install\\t\\t// also default\\naction \",\"[:enable, :start]\",\"\\naction \",\"[:stop, :disable]\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Verify apache is running:\\ncurl -I localhost\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"online-learnchefio\"}},\"Online learn.chef.io\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Chef helps you express your infrastructure policy \\u2013 how your software is delivered and maintained on your servers \\u2013 as code. When infrastructure is code, it becomes more maintainable, versionable, testable, and collaborative.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A great way to get started with Chef is to log in to a server, or node, and configure it directly.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"What the following should provide us:\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"describe what happens when Chef runs.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"write Chef code that defines a basic policy.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"apply that policy to a server.\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In the next step, you'll install the Chef tools and a text editor on your own machine, or use a virtual machine in the cloud that we provide that already has everything set up. You'll use that machine in the lessons that follow.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The normal Chef workflow involves managing servers remotely from your workstation. But in this tutorial, you'll log in to a server and manage it directly to get a feel for how Chef works.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The easiest way to get started is to use a free trial Ubuntu 14.04 virtual machine that we provide. The virtual machine runs in your browser and has the set of Chef tools, called the Chef DK, and several popular text editors pre-installed. You can also set up your own server to use with this tutorial.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://learn.chef.io/learn-the-basics/ubuntu/set-up-your-own-server/\"}},\"link\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Set up a work directory after this is set up\")),React.createElement(MDXTag,{name:\"p\",components:components},\"mkdir ~/chef-repo\\ncd ~/chef-repo\"),React.createElement(MDXTag,{name:\"ol\",components:components,props:{\"start\":2}},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Create the MOTD file\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In this step, you'll first create the file and set the initial MOTD. To keep things basic, you'll configure the file in the /tmp directory.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Next, you'll write what's called a recipe to describe the desired state of the MOTD file. Then you'll run chef-client, the program that applies your Chef code to place your system in the desired state. Typically, chef-client downloads and runs the latest Chef code from the Chef server, but in this lesson, you'll run chef-client in what's called local mode to apply Chef code that exists locally on your virtual machine.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"From your ~/chef-repo directory, create a file named hello.rb, add these contents, and then save the file.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"// in hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"file '/tmp/motd' do\\ncontent 'hello world'\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"// from the terminal window, run the chef-client command to apply what you have written\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef-client --local-mode hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The output will tell us that a new file /tmp/motd was created\\n(The warnings will relate to concepts we haven't covered just yet)\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now verify that the file was written. Run the more command, which prints a file to the console.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"more /tmp/motd\"),React.createElement(MDXTag,{name:\"p\",components:components},\"What happens if you run the command a second time?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef-client --local-mode hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"It gives a different response, letting us know that the file is already up to date.\\nThis is beause Chef applies the configuration only when it needs to.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify /tmp/motd because it already exists and its contents didn't change.\\nWe call this approach \\\"test and repair\\\".\"),React.createElement(MDXTag,{name:\"ol\",components:components,props:{\"start\":3}},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"MODIFY THE MOTD FILE'S CONTENTS\")),React.createElement(MDXTag,{name:\"p\",components:components},\"// in hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"file '/tmp/motd' do\\ncontent 'hello chef'\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef-client --local-mode hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This time Chef applies the action and shows the difference because you've changed the desired state of the file\"),React.createElement(MDXTag,{name:\"ol\",components:components,props:{\"start\":4}},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Ensure the MOTD file's contents are not changed by anyone else\")),React.createElement(MDXTag,{name:\"p\",components:components},\"echo 'hello robots' > /tmp/motd\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef-client --local-mode hello.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"// the chef client ensures that the changes aren't kept and the original configuration is restored\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In practice, it's common to configure chef-client to act as a service that runs periodically or in response to an event, such as a commit to source control. Running Chef through automation helps to ensure that your servers remain configured as you expect and also enables them to be reconfigured when you need them to be.\"),React.createElement(MDXTag,{name:\"ol\",components:components,props:{\"start\":5}},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Delete the MOTD file\")),React.createElement(MDXTag,{name:\"p\",components:components},\"in the ~/chef-repo directory, create a new file named goodbye.rb and save the following...\"),React.createElement(MDXTag,{name:\"p\",components:components},\"// goodbye.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"file 'tmp/motd' do\\naction :delete\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef-client --local-mode goodbye.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"more /tmp/motd // gives No such file or directory\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Summary\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a file, which is one kind of resource.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"** Resources describe the what, not the how\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A recipe is a file that holds one or more resources. Each resource declares what state a part of the system should be in, but not how to get there. Chef handles these complexities for you.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this lesson, you declared that the file /tmp/motd must exist and what its contents are, but you didn't specify how to create or write to the file. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"** Resources have actions\"),React.createElement(MDXTag,{name:\"p\",components:components},\"When you deleted the file, you saw the :delete action.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one \\u2013 for example, create a file, install a package, and start a service.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"When we created the file we didn't specify the :create action because :create is the default. But of course you can specify it if you want.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The documentation for each resource type, file for example, explains the type's default action.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"** Recipes organize resources\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In Chef, hello.rb is an example of a recipe, or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Our recipe states everything we need to manage the MOTD file. You used chef-client in local mode to apply that recipe from the command line.\"),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"configure-a-package-or-service\"}},\"Configure a package or service\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Let's extend what you learned about file management in the previous lesson to manage the Apache HTTP Server package and its service.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"1-ensure-the-apt-cache-is-up-to-date\"}},\"1. Ensure the apt cache is up to date\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this part you'll configure Apache. Because we want to install the latest version of Apache, it's important to ensure that your system's package index contains the latest list of what packages are available.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You could run the apt-get update command manually when you bring up your instance. But over time, you would need to remember to periodically update the apt cache to get the latest updates. Chef provides the apt_update resource to automate the process.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"From your ~/chef-repo directory, add this code to a file named webserver.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" webserver.rb \")),React.createElement(MDXTag,{name:\"p\",components:components},\"apt_update 'Update the apt cache daily' do\\nfrequency 86_400\\naction :periodic\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In a production environment, you might run Chef periodically to ensure your systems are kept up to date. As an example, you might run Chef multiple times in a day. However, you likely don't need to update the apt cache every time you run Chef. The frequency property specifies how often to update the apt cache (in seconds.) Here, we specify 86,400 seconds to update the cache once every 24 hours. (The _ notation is a Ruby convention that helps make numeric values more readable.)\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The :periodic action means that the update occurs periodically. Another option would be to use the :update action to update the apt cache each time Chef runs.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"2-install-the-apache-package\"}},\"2. Install the Apache package\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now let's install the Apache package, apache2. Modify webserver.rb to look like this.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" webserver.rb \")),React.createElement(MDXTag,{name:\"p\",components:components},\"apt_update 'Update the apt cache daily' do\\nfrequency 86_400\\naction :periodic\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"package 'apache2'\"),React.createElement(MDXTag,{name:\"p\",components:components},\"To apply the recipe...\"),React.createElement(MDXTag,{name:\"p\",components:components},\"sudo chef-client --local-mode webserver.rb\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"if you run it a second time it will know it is not time to update etc\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"3-start-and-enable-the-apache-service\"}},\"3. Start and enable the Apache service\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now let's first enable the Apache service when the server boots and then start the service. Modify webserver.rb to look like this.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" webserver.rb \")),React.createElement(MDXTag,{name:\"p\",components:components},\"apt_update 'Update the apt cache daily' do\\nfrequency 86_400\\naction :periodic\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"package 'apache2'\"),React.createElement(MDXTag,{name:\"p\",components:components},\"service 'apache2' do\\nsupports :status => true\\naction \",\"[:enable, :start]\",\"\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Ubuntu 14.04 provides two init systems. The supports :status => true part tells Chef that the apache2 init script supports the status message. This information helps Chef use the appropriate strategy to determine if the apache2 service is running. If you're interested, read \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://blog.chef.io/2014/09/18/chef-where-is-my-ubuntu-14-04-service-support/\"}},\"this blog post\"),\" for more information.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Apply it with main command.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The package will already be installed, so there will be nothing to do.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"4-add-a-home-page\"}},\"4. Add a home page\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" webserver.rb \")),React.createElement(MDXTag,{name:\"p\",components:components},\"apt_update 'Update the apt cache daily' do\\nfrequency 86_400\\naction :periodic\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"package 'apache2'\"),React.createElement(MDXTag,{name:\"p\",components:components},\"service 'apache2' do\\nsupports :status => true\\naction \",\"[:enable, :start]\",\"\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"file '/var/www/html/index.html' do\\ncontent '<html\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"<body>\\n    <h1>hello world</h1>\\n</body>\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"end\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"from here, the website should be running\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"5-confirm-your-web-site-is-running\"}},\"5. Confirm your web site is running\"),React.createElement(MDXTag,{name:\"p\",components:components},\"curl localhost\\n// shows the data back\"),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"summary\"}},\"Summary\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You saw how to work with the package and service resources. You now know how to work with four types of resources: file, apt_update, package, and service.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You also saw how to apply multiple actions. But how does Chef know what order to apply resources and actions?\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" Chef works in the order you specify\")),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"make-your-recipe-more-manageable\"}},\"Make your recipe more manageable\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A cookbook provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Let's create a cookbook to make our web server recipe easier to manage.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"1-create-a-cookbook\"}},\"1. Create a cookbook\"),React.createElement(MDXTag,{name:\"p\",components:components},\"First, from ~/chef-repo\"),React.createElement(MDXTag,{name:\"p\",components:components},\"mkdir cookbooks\\ncd cookbooks\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef generate cookbook learn_chef_apache2\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Note the default recipe, named default.rb. This is where we'll move our Apache recipe in a moment.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"2-create-a-template\"}},\"2. Create a template\"),React.createElement(MDXTag,{name:\"p\",components:components},\"chef generate template learn_chef_apache2 index.html\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The file index.html.erb get created under learn_chef_apache2/templates/default\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can now move our html files to here\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"strong\"},\" NOTE \")),\" Here, you're adding the web site content directly to your cookbook for learning purposes. In practice, your web site content would more likely be some build artifact, for example a .zip file on your build server. With Chef, you could pull updated web content from your build server and deploy it to your web server.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" Write our default.rb \")),React.createElement(MDXTag,{name:\"p\",components:components},\"apt_update 'Update the apt cache daily' do\\nfrequency 86_400\\naction :periodic\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"package 'apache2'\"),React.createElement(MDXTag,{name:\"p\",components:components},\"service 'apache2' do\\nsupports :status => true\\naction \",\"[:enable, :start]\",\"\\nend\"),React.createElement(MDXTag,{name:\"p\",components:components},\"template '/var/www/html/index.html' do\\nsource 'index.html.erb'\\nend\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"4-run-the-cookbook\"}},\"4. Run the cookbook\"),React.createElement(MDXTag,{name:\"p\",components:components},\"sudo chef-client --local-mode --runlist 'recipe\",\"[learn_chef_apache2]\",\"'\"),React.createElement(MDXTag,{name:\"p\",components:components},\"in this example, recipe\",\"[learn_chef_apache2]\",\" is the same as specifying recipe\",\"[learn_chef_apache2::default]\",\", meaning we want to run the learn_chef_apache2 cookbook's default recipe, default.rb\"),React.createElement(MDXTag,{name:\"p\",components:components},\"curl localhost\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"again this will confirm our website\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" Summary \")),React.createElement(MDXTag,{name:\"p\",components:components},\"Your web server is shaping up! With a cookbook you're now better organized. A cookbook adds structure to your work. You can now author your HTML code in its own file and use a template resource to reference it from your recipe.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You also saw the run-list. The run-list lets you specify which recipes to run, and the order in which to run them. This is handy once you have lots of cookbooks, and the order in which they run is important.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Keep in mind that the web server cookbook you wrote in this lesson likely won't be the one you'd use in production. Only you know the specific needs for your infrastructure. You bring your requirements and Chef provides the tools that help you meet them.\"),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"managing-a-node\"}},\"Managing a node\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"manage-a-ubuntu-node\"}},\"Manage a Ubuntu node\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Chef is comprised of 3 elements:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Your Workstation\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"A Chef server\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Nodes\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Chef server acts as a central repository for your cookbooks as well as for information about every node it manages. For example, the Chef server knows a node's fully qualified domain name (FQDN) and its platform.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A node is any computer that is managed by a Chef server. Every node has the Chef client installed on it. The Chef client talks to the Chef server. A node can be any physical or virtual machine in your network\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"set-up-your-chef-server\"}},\"Set up your Chef Server\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Chef server acts as a central repository for your cookbooks as well as for information about every node it manages.\\nThe knife command enables you to communicate with the Chef server from your workstation.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"There are two ways to work with a Chef server.\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Install an instance on your own infrastructure.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Sign up for hosted Chef and let us host it for you\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In production, the decision to use hosted Chef or manage your own Chef server depends on your organization's requirements and preferences. If you're interested in setting up your own Chef server, we recommend that you first complete this tutorial using hosted Chef. Then you can follow the \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://learn.chef.io/install-and-manage-your-own-chef-server/linux/\"}},\"Install and manage your own Chef server\"),\" tutorial to set up a Chef server in your environment..\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"configure-your-workstation-to-communicate-with-the-chef-server\"}},\"Configure your workstation to communicate with the Chef server\"),React.createElement(MDXTag,{name:\"p\",components:components},\"knife is the command-line tool that provides an interface between your workstation and the Chef server. knife enables you to upload your cookbooks to the Chef server and work with nodes, the servers that you manage.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"knife requires two files to communicate with the Chef server \\u2013 an RSA private key and a configuration file.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The configuration file is typically named knife.rb. It contains information such as the Chef server's URL, the location of your RSA private key, and the default location of your cookbooks.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Both of these files are typically located in a directory named .chef. Every time knife runs, it looks in the current working directory for the .chef directory. If the .chef directory does not exist, knife searches up the directory tree for a .chef directory. This process is similar to how tools such as Git work.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The next step is to create the ~/learn-chef/.chef directory and add your RSA private key and knife configuration files.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\" Generate your knife configuration file \")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Sign in to \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"https://manage.chef.io/\"}},\"https://manage.chef.io/\"),\".\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"From the Administration tab, select your organization.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"From the menu on the left, select Generate Knife Config and save the file.\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"future-wrapper-cookbooks\"}},\"(Future) Wrapper Cookbooks\"),React.createElement(MDXTag,{name:\"p\",components:components},\"That is essentially \\\"forking\\\" an upstream cookbook eg one from the supermarket. If we add the upstream recipe to the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"metadata.rb\"),\" we can add \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"depends 'haproxy'\"),\" to install the latest version of that dependency eg the supermarket here. We can all define the versions.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"What we can now do is add an attribute to our cookbook.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can then override the recipe in \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"default.rb\"),\" using the following:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-ruby\"}},\"node.default['haproxy']['member'] = [{\\n    \\\"this_is_a_var_from_the_video\\\"\\n}]\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Chef/chef-cheat-sheet.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"chef-cheat-sheet\"}}>{`Chef Cheat Sheet`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"chef-terms\"}}>{`Chef Terms`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`action :periodic\naction :delete\naction :create \t\t// default\naction :install\t\t// also default\naction `}{`[:enable, :start]`}{`\naction `}{`[:stop, :disable]`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Verify apache is running:\ncurl -I localhost`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"online-learnchefio\"}}>{`Online learn.chef.io`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Chef helps you express your infrastructure policy – how your software is delivered and maintained on your servers – as code. When infrastructure is code, it becomes more maintainable, versionable, testable, and collaborative.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A great way to get started with Chef is to log in to a server, or node, and configure it directly.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What the following should provide us:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`describe what happens when Chef runs.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`write Chef code that defines a basic policy.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`apply that policy to a server.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the next step, you'll install the Chef tools and a text editor on your own machine, or use a virtual machine in the cloud that we provide that already has everything set up. You'll use that machine in the lessons that follow.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The normal Chef workflow involves managing servers remotely from your workstation. But in this tutorial, you'll log in to a server and manage it directly to get a feel for how Chef works.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The easiest way to get started is to use a free trial Ubuntu 14.04 virtual machine that we provide. The virtual machine runs in your browser and has the set of Chef tools, called the Chef DK, and several popular text editors pre-installed. You can also set up your own server to use with this tutorial.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://learn.chef.io/learn-the-basics/ubuntu/set-up-your-own-server/\"}}>{`link`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Set up a work directory after this is set up`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`mkdir ~/chef-repo\ncd ~/chef-repo`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":2}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Create the MOTD file`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this step, you'll first create the file and set the initial MOTD. To keep things basic, you'll configure the file in the /tmp directory.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Next, you'll write what's called a recipe to describe the desired state of the MOTD file. Then you'll run chef-client, the program that applies your Chef code to place your system in the desired state. Typically, chef-client downloads and runs the latest Chef code from the Chef server, but in this lesson, you'll run chef-client in what's called local mode to apply Chef code that exists locally on your virtual machine.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`From your ~/chef-repo directory, create a file named hello.rb, add these contents, and then save the file.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// in hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`file '/tmp/motd' do\ncontent 'hello world'\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// from the terminal window, run the chef-client command to apply what you have written`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef-client --local-mode hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The output will tell us that a new file /tmp/motd was created\n(The warnings will relate to concepts we haven't covered just yet)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now verify that the file was written. Run the more command, which prints a file to the console.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`more /tmp/motd`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What happens if you run the command a second time?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef-client --local-mode hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It gives a different response, letting us know that the file is already up to date.\nThis is beause Chef applies the configuration only when it needs to.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify /tmp/motd because it already exists and its contents didn't change.\nWe call this approach \"test and repair\".`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":3}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`MODIFY THE MOTD FILE'S CONTENTS`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// in hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`file '/tmp/motd' do\ncontent 'hello chef'\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef-client --local-mode hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This time Chef applies the action and shows the difference because you've changed the desired state of the file`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":4}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Ensure the MOTD file's contents are not changed by anyone else`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`echo 'hello robots' > /tmp/motd`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef-client --local-mode hello.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// the chef client ensures that the changes aren't kept and the original configuration is restored`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In practice, it's common to configure chef-client to act as a service that runs periodically or in response to an event, such as a commit to source control. Running Chef through automation helps to ensure that your servers remain configured as you expect and also enables them to be reconfigured when you need them to be.`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":5}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Delete the MOTD file`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`in the ~/chef-repo directory, create a new file named goodbye.rb and save the following...`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// goodbye.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`file 'tmp/motd' do\naction :delete\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef-client --local-mode goodbye.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`more /tmp/motd // gives No such file or directory`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a file, which is one kind of resource.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`** Resources describe the what, not the how`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A recipe is a file that holds one or more resources. Each resource declares what state a part of the system should be in, but not how to get there. Chef handles these complexities for you.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this lesson, you declared that the file /tmp/motd must exist and what its contents are, but you didn't specify how to create or write to the file. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`** Resources have actions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When you deleted the file, you saw the :delete action.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one – for example, create a file, install a package, and start a service.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When we created the file we didn't specify the :create action because :create is the default. But of course you can specify it if you want.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The documentation for each resource type, file for example, explains the type's default action.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`** Recipes organize resources`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In Chef, hello.rb is an example of a recipe, or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Our recipe states everything we need to manage the MOTD file. You used chef-client in local mode to apply that recipe from the command line.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"configure-a-package-or-service\"}}>{`Configure a package or service`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's extend what you learned about file management in the previous lesson to manage the Apache HTTP Server package and its service.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"1-ensure-the-apt-cache-is-up-to-date\"}}>{`1. Ensure the apt cache is up to date`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this part you'll configure Apache. Because we want to install the latest version of Apache, it's important to ensure that your system's package index contains the latest list of what packages are available.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You could run the apt-get update command manually when you bring up your instance. But over time, you would need to remember to periodically update the apt cache to get the latest updates. Chef provides the apt_update resource to automate the process.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`From your ~/chef-repo directory, add this code to a file named webserver.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` webserver.rb `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`apt_update 'Update the apt cache daily' do\nfrequency 86_400\naction :periodic\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In a production environment, you might run Chef periodically to ensure your systems are kept up to date. As an example, you might run Chef multiple times in a day. However, you likely don't need to update the apt cache every time you run Chef. The frequency property specifies how often to update the apt cache (in seconds.) Here, we specify 86,400 seconds to update the cache once every 24 hours. (The _ notation is a Ruby convention that helps make numeric values more readable.)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The :periodic action means that the update occurs periodically. Another option would be to use the :update action to update the apt cache each time Chef runs.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"2-install-the-apache-package\"}}>{`2. Install the Apache package`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now let's install the Apache package, apache2. Modify webserver.rb to look like this.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` webserver.rb `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`apt_update 'Update the apt cache daily' do\nfrequency 86_400\naction :periodic\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`package 'apache2'`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To apply the recipe...`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`sudo chef-client --local-mode webserver.rb`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`if you run it a second time it will know it is not time to update etc`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"3-start-and-enable-the-apache-service\"}}>{`3. Start and enable the Apache service`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now let's first enable the Apache service when the server boots and then start the service. Modify webserver.rb to look like this.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` webserver.rb `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`apt_update 'Update the apt cache daily' do\nfrequency 86_400\naction :periodic\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`package 'apache2'`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`service 'apache2' do\nsupports :status => true\naction `}{`[:enable, :start]`}{`\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ubuntu 14.04 provides two init systems. The supports :status => true part tells Chef that the apache2 init script supports the status message. This information helps Chef use the appropriate strategy to determine if the apache2 service is running. If you're interested, read `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://blog.chef.io/2014/09/18/chef-where-is-my-ubuntu-14-04-service-support/\"}}>{`this blog post`}</MDXTag>{` for more information.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Apply it with main command.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The package will already be installed, so there will be nothing to do.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"4-add-a-home-page\"}}>{`4. Add a home page`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` webserver.rb `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`apt_update 'Update the apt cache daily' do\nfrequency 86_400\naction :periodic\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`package 'apache2'`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`service 'apache2' do\nsupports :status => true\naction `}{`[:enable, :start]`}{`\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`file '/var/www/html/index.html' do\ncontent '<html`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<body>\n    <h1>hello world</h1>\n</body>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`end`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`from here, the website should be running`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"5-confirm-your-web-site-is-running\"}}>{`5. Confirm your web site is running`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`curl localhost\n// shows the data back`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"summary\"}}>{`Summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You saw how to work with the package and service resources. You now know how to work with four types of resources: file, apt_update, package, and service.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You also saw how to apply multiple actions. But how does Chef know what order to apply resources and actions?`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` Chef works in the order you specify`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"make-your-recipe-more-manageable\"}}>{`Make your recipe more manageable`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A cookbook provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's create a cookbook to make our web server recipe easier to manage.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"1-create-a-cookbook\"}}>{`1. Create a cookbook`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First, from ~/chef-repo`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`mkdir cookbooks\ncd cookbooks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef generate cookbook learn_chef_apache2`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note the default recipe, named default.rb. This is where we'll move our Apache recipe in a moment.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"2-create-a-template\"}}>{`2. Create a template`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`chef generate template learn_chef_apache2 index.html`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The file index.html.erb get created under learn_chef_apache2/templates/default`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can now move our html files to here`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\"><MDXTag name=\"em\" components={components} parentName=\"strong\">{` NOTE `}</MDXTag></MDXTag>{` Here, you're adding the web site content directly to your cookbook for learning purposes. In practice, your web site content would more likely be some build artifact, for example a .zip file on your build server. With Chef, you could pull updated web content from your build server and deploy it to your web server.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` Write our default.rb `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`apt_update 'Update the apt cache daily' do\nfrequency 86_400\naction :periodic\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`package 'apache2'`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`service 'apache2' do\nsupports :status => true\naction `}{`[:enable, :start]`}{`\nend`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`template '/var/www/html/index.html' do\nsource 'index.html.erb'\nend`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"4-run-the-cookbook\"}}>{`4. Run the cookbook`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`sudo chef-client --local-mode --runlist 'recipe`}{`[learn_chef_apache2]`}{`'`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`in this example, recipe`}{`[learn_chef_apache2]`}{` is the same as specifying recipe`}{`[learn_chef_apache2::default]`}{`, meaning we want to run the learn_chef_apache2 cookbook's default recipe, default.rb`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`curl localhost`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`again this will confirm our website`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` Summary `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Your web server is shaping up! With a cookbook you're now better organized. A cookbook adds structure to your work. You can now author your HTML code in its own file and use a template resource to reference it from your recipe.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You also saw the run-list. The run-list lets you specify which recipes to run, and the order in which to run them. This is handy once you have lots of cookbooks, and the order in which they run is important.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Keep in mind that the web server cookbook you wrote in this lesson likely won't be the one you'd use in production. Only you know the specific needs for your infrastructure. You bring your requirements and Chef provides the tools that help you meet them.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"managing-a-node\"}}>{`Managing a node`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"manage-a-ubuntu-node\"}}>{`Manage a Ubuntu node`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Chef is comprised of 3 elements:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Your Workstation`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`A Chef server`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Nodes`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Chef server acts as a central repository for your cookbooks as well as for information about every node it manages. For example, the Chef server knows a node's fully qualified domain name (FQDN) and its platform.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A node is any computer that is managed by a Chef server. Every node has the Chef client installed on it. The Chef client talks to the Chef server. A node can be any physical or virtual machine in your network`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"set-up-your-chef-server\"}}>{`Set up your Chef Server`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Chef server acts as a central repository for your cookbooks as well as for information about every node it manages.\nThe knife command enables you to communicate with the Chef server from your workstation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are two ways to work with a Chef server.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Install an instance on your own infrastructure.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Sign up for hosted Chef and let us host it for you`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In production, the decision to use hosted Chef or manage your own Chef server depends on your organization's requirements and preferences. If you're interested in setting up your own Chef server, we recommend that you first complete this tutorial using hosted Chef. Then you can follow the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://learn.chef.io/install-and-manage-your-own-chef-server/linux/\"}}>{`Install and manage your own Chef server`}</MDXTag>{` tutorial to set up a Chef server in your environment..`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"configure-your-workstation-to-communicate-with-the-chef-server\"}}>{`Configure your workstation to communicate with the Chef server`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`knife is the command-line tool that provides an interface between your workstation and the Chef server. knife enables you to upload your cookbooks to the Chef server and work with nodes, the servers that you manage.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`knife requires two files to communicate with the Chef server – an RSA private key and a configuration file.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The configuration file is typically named knife.rb. It contains information such as the Chef server's URL, the location of your RSA private key, and the default location of your cookbooks.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Both of these files are typically located in a directory named .chef. Every time knife runs, it looks in the current working directory for the .chef directory. If the .chef directory does not exist, knife searches up the directory tree for a .chef directory. This process is similar to how tools such as Git work.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The next step is to create the ~/learn-chef/.chef directory and add your RSA private key and knife configuration files.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` Generate your knife configuration file `}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Sign in to `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://manage.chef.io/\"}}>{`https://manage.chef.io/`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`From the Administration tab, select your organization.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`From the menu on the left, select Generate Knife Config and save the file.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"future-wrapper-cookbooks\"}}>{`(Future) Wrapper Cookbooks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That is essentially \"forking\" an upstream cookbook eg one from the supermarket. If we add the upstream recipe to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`metadata.rb`}</MDXTag>{` we can add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`depends 'haproxy'`}</MDXTag>{` to install the latest version of that dependency eg the supermarket here. We can all define the versions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What we can now do is add an attribute to our cookbook.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can then override the recipe in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`default.rb`}</MDXTag>{` using the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ruby\"}}>{`node.default['haproxy']['member'] = [{\n    \"this_is_a_var_from_the_video\"\n}]\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}