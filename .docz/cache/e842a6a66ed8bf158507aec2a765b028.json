{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Enzyme-Testing.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Enzyme-Testing.md","mtime":1548209344327},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"testing-with-enzyme\"}},\"Testing with Enzyme\"),React.createElement(MDXTag,{name:\"p\",components:components},\"React components allow unit tests in JS to be much easier.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"These exampes require \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"sinonjs\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"jsdom\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"enzyme\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"mocha\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"chai\")),React.createElement(MDXTag,{name:\"p\",components:components},\"These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"shallow\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Testing lifecycle events, use \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"mount\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If you need to test a component that gets rendered or returns just HTML, you can use \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"render\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"File structure\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"test\\n- repository_test.spec.js\\n- github_widget.spec.js\\n- user_image.spec.js\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"scripts\\n- mocha_runner.js\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"package.json\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"src\\n- components\\n- repositories.js\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"enz-1-testing-with-shallow\"}},\"ENZ-1: Testing with \\\"Shallow\\\"\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// package.json\\n...\\n\\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\\n\\nNote: There is also a `node-intercept` that allows you to tap into Chrome Dev tools\\n\\n\\\"scripts\\\": {\\n    ...\\n    \\\"test\\\": \\\"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\\\",\\n    ...\\n}\\n...\\n\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// reposity_test.js\\nimport React from 'react-native';\\nimport { shallow } from 'enzyme';\\nimport { expect } from 'chai';\\n\\n// import a component\\nimport Repositories from '../src/components/repositories';\\n\\ndescribe('<Repositories />', () => {\\n    it('should render one number of repos specified by top prop', () => {\\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\\n        expect(wrapper.find(Repository)).to.have.length(2);\\n    });\\n\\n    it('should display repos ordered by stargazers' () => {\\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\\n\\n        // find each child <Repository /> with <Repositories />\\n        const topRepos = wrapper.find(Repository);\\n\\n        // for each <Repository /> found, test out correct values\\n        topRepos.forEach((repo, index) => {\\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\\n        });\\n    });\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"enz-2-testing-with-mount\"}},\"ENZ-2: Testing with \\\"Mount\\\"\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This requires use of \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"js-dom\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// mocha_runner.js\\n\\nvar jsdom = require('jsdom').jsdom;\\n\\nvar exposedProperties = ['window', 'navigator', 'document'];\\n\\nglobal.document = jsdom('');\\nglobal.window = document.defaultView;\\nObject.keys(document.defaultView).forEach((property) => {\\n    if (typeof global[property] === 'undefined') {\\n        exposedProperties.push(property);\\n        global[property] = document.defaultView[property];\\n    }\\n});\\n\\nglobal.navigator = {\\n    userAgent: 'node.js'\\n};\\n\\ndocumentRef = document;\\n\\nrequire('babel-core/register');\\n\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// github_widget.spec.js\\nimport React from 'react-native';\\nimport { mount } from 'enzyme';\\nimport { expect } from 'chai';\\nimport sinon from 'sinon';\\n\\n// js dom has also been used as an example for these headless browser testing\\n\\n// import a component\\nimport GithubWidget from '../src/components/GithubWidget';\\nimport UserDetails from ...\\n// import all the other components\\n// found in the expect below\\n...\\n\\ndescribe('<GithubWidget />', () => {\\n    it('should render all sub-components', () => {\\n        const wrapper = mount(<GithubWidget username=\\\"test\\\" />);\\n        \\n        expect(wrapper.containsAllMatchingElements([\\n            <UserDetails />,\\n            <UserStats />,\\n            <hr />,\\n            <Repositories />,\\n            <Footer />\\n        ])).to.equal(true);\\n    });\\n\\n    it('should display repos ordered by stargazers' () => {\\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\\n\\n        // find each child <Repository /> with <Repositories />\\n        const topRepos = wrapper.find(Repository);\\n\\n        // for each <Repository /> found, test out correct values\\n        topRepos.forEach((repo, index) => {\\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\\n        });\\n    });\\n\\n    it('should call componentDidMount once' () => {\\n        // create a spy\\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\\n        mount(<GithubWidget username =\\\"test />\\\");\\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\\n    });\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"enz-3-testing-with-render\"}},\"ENZ-3: Testing with \\\"Render\\\"\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// user_image.spec.js\\nimport React from 'react-native';\\nimport { render } from 'enzyme';\\nimport { expect } from 'chai';\\n\\n// Component\\nimport UserImage from './UserImage';\\n\\ndescribe('<UserImage />', () => {\\n    it('should have a <div /> element with .gh-widget-photo class', () => {\\n        const wrapper = render(<UserImage />);\\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\\n    });\\n});\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Enzyme-Testing.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"testing-with-enzyme\"}}>{`Testing with Enzyme`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`React components allow unit tests in JS to be much easier.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`These exampes require `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sinonjs`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jsdom`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`enzyme`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mocha`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`chai`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`shallow`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Testing lifecycle events, use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mount`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`File structure`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`scripts\n- mocha_runner.js`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`package.json`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`src\n- components\n- repositories.js`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"enz-1-testing-with-shallow\"}}>{`ENZ-1: Testing with \"Shallow\"`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"enz-2-testing-with-mount\"}}>{`ENZ-2: Testing with \"Mount\"`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This requires use of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`js-dom`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"enz-3-testing-with-render\"}}>{`ENZ-3: Testing with \"Render\"`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}