{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md","mtime":1562563032056},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Microservices.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"7-microservices\"\n    }}>{`7. Microservices`}</h1>\n    <p>{`If we have multiple apps that require information from between each other, we need to start talking about the  `}<strong parentName=\"p\">{`service mesh`}</strong>{`. Normally between applications,  we run into the following problems:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There is no encryption`}</li>\n      <li parentName=\"ul\">{`No retries.`}</li>\n      <li parentName=\"ul\">{`No fallover.`}</li>\n      <li parentName=\"ul\">{`No intelligent load balancer.`}</li>\n      <li parentName=\"ul\">{`No routing decisions.`}</li>\n      <li parentName=\"ul\">{`No metrics/logs/traces.`}</li>\n      <li parentName=\"ul\">{`No access control.`}</li>\n    </ul>\n    <p>{`One solution is to implement `}<strong parentName=\"p\">{`sidecars`}</strong>{` which is a proxy to every single microservice. This can resolve issues such as encryption, retries when a connection fails, intelligent load balancing.`}</p>\n    <p>{`You could also add a `}<strong parentName=\"p\">{`management interface`}</strong>{` which resolves routing decisions, metrics/logs/traces and access control (ie valid certificate etc).`}</p>\n    <p>{`This brings us to `}<strong parentName=\"p\">{`Istio`}</strong>{`.`}</p>\n    <p><img alt=\"Istio diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540090167/istio-diagram.png\" /></p>\n    <h2 {...{\n      \"id\": \"71-istio-installation\"\n    }}>{`7.1 Istio Installation`}</h2>\n    <p>{`If you want to use Istio, it's worth now using a node with enough memory ie t2.medium.`}</p>\n    <h3 {...{\n      \"id\": \"kops-configuration\"\n    }}>{`Kops configuration`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kops edit cluster kubernetes.newtech.academy\n`}</code></pre>\n    <p>{`Add:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`spec:\n  kubeAPIServer:\n    admissionControl:\n    - NamespaceLifecycle\n    - LimitRanger\n    - ServiceAccount\n    - PersistentVolumeLabel\n    - DefaultStorageClass\n    - DefaultTolerationSeconds\n    - MutatingAdmissionWebhook\n    - ValidatingAdmissionWebhook\n    - ResourceQuota\n    - NodeRestriction\n    - Priority\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-102\"\n    }}>{`Download (1.0.2):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ wget https://github.com/istio/istio/releases/download/1.0.2/istio-1.0.2-linux.tar.gz\ntar -xzvf istio-1.0.2-linux.tar.gz\n$ cd istio-1.0.2\n# Alternatively just export the PATH so you don't have to logout\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile\n$ istioctl # check everything is running correctly\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-latest\"\n    }}>{`Download (latest):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ curl -L https://git.io/getLatestIstio | sh -\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile # change 1.0.2 in your version -- alternative just export the PATH so you don't have to logout\n$ cd istio-1.0.2 # change 1.0.2 in your version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"istio-install\"\n    }}>{`Istio install`}</h3>\n    <p>{`Apply CRDs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/helm/istio/templates/crds.yaml\n`}</code></pre>\n    <p>{`Wait a few seconds.`}</p>\n    <p>{`Option 1: with no mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo.yaml\n`}</code></pre>\n    <p>{`Option 2: or with mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo-auth.yaml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"72-example-app\"\n    }}>{`7.2 Example app`}</h2>\n    <p><img alt=\"Example app diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540091246/Screen_Shot_2018-10-21_at_2.07.07_pm.png\" /></p>\n    <h3 {...{\n      \"id\": \"example-app-from-istio\"\n    }}>{`Example app (from istio)`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hello-world-app\"\n    }}>{`Hello world app`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f helloworld.yaml)\nkubectl apply -f helloworld-gw.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld.yaml\n# Spinning up the container for a simple hello world app\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing a service for \"hello\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# Spinning up container for world\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing world container\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# World 2 deployment\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\" \n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing service for world 2 deployment\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n`}</code></pre>\n    <p>{`After deploying and applying the Istio injection from following the above istio commands, we will see that each deploying will have an app running with it along with the sidebar.`}</p>\n    <p>{`For the Istio gateway, we launch the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  # if we match uri /hello, then follow routing\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"73-advanced-istio-routing\"\n    }}>{`7.3 Advanced Istio Routing`}</h2>\n    <p><img alt=\"Advanced Routing Setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540109060/Screen_Shot_2018-10-21_at_7.04.07_pm.png\" /></p>\n    <p>{`Thanks to Istio, we can do advanced routing based around the above diagram thanks to the Deployments having different metadata:`}</p>\n    <p>{`The deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v2\nspec:\n  replicas: 3\n  template:\n    # we use this metadata for Istio to distinguish on routes\n    metadata:\n      labels:\n        app: hello\n        version: v2\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello, this is v2\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n`}</code></pre>\n    <p>{`The routing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v2-routing\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # ! Subsets is where the magic happens!\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: john\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2 # ! match v2 only\n        port:\n          number: 8080\n  - route: # default route for hello.example.com\n    - destination:\n        host: ! hello.default.svc.cluster.local\n        subset: v1 # match v1 only\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`Now, if we apply this virtual service to the service mesh, then based on whether we pass the \"end-user\" header or not, we will hit either v1 or v2!`}</p>\n    <p>{`We can test by running `}<inlineCode parentName=\"p\">{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\"`}</inlineCode>{`.`}</p>\n    <p>{`For v2 we can run `}<inlineCode parentName=\"p\">{``}</inlineCode>{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\" -H \"end-user: John\"\\`. `}</p>\n    <h2 {...{\n      \"id\": \"74-canary-deployments\"\n    }}>{`7.4 Canary deployments`}</h2>\n    <p>{`Canary deployments basically want routing mainly to the first version, but we also want some A/B testing to have version 2 having a 10% weight.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n      weight: 90\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2\n        port:\n          number: 8080\n      weight: 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"75-running-retries\"\n    }}>{`7.5 Running retries`}</h2>\n    <p>{`If one of the pods stop working, we can retry to another pod without the client seeing any of the issues. The example app has one of three pods running with a 5s latency but a 2s timeout to demonstrate this. It looks like the following:`}</p>\n    <p><img alt=\"Retry diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540110459/Screen_Shot_2018-10-21_at_7.26.50_pm.png\" /></p>\n    <p>{`We can see this being done with `}<inlineCode parentName=\"p\">{`Hello World v3`}</inlineCode>{` so we can see this in action with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v3.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3-latency\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        - name: LATENCY\n          value: \"5\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-v3\nspec:\n  hosts:\n  - \"hello-v3.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route: # default route for hello.example.com\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v3 # match v3 only\n        port:\n          number: 8080\n    timeout: 10s\n    retries:\n      attempts: 2\n      perTryTimeout: 2s\n`}</code></pre>\n    <p>{`We can also call `}<inlineCode parentName=\"p\">{`kubectl get destinationrule`}</inlineCode>{` etc to get and describe particular rules.`}</p>\n    <h2 {...{\n      \"id\": \"76-mutual-tls-example\"\n    }}>{`7.6 Mutual TLS example`}</h2>\n    <p>{`Create pods, services, destinationrules, virtualservices`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-tls.yaml)\nkubectl create -f helloworld-legacy.yaml\n`}</code></pre>\n    <p>{`The goals of Istio security are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Security by default:`}</strong>{` no changes needed for application code and infrastructure.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Defense in depth:`}</strong>{` integrate with existing security systems to provide multiple layers of defense.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Zero-trust network:`}</strong>{` build security solutions on untrusted networks.`}</li>\n    </ul>\n    <p>{`Two types of auth:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Transport authentication (service to service authentication) using Mutual TLS.`}</li>\n      <li parentName=\"ol\">{`Origin authentication (end-user authentication). Verifying the end user using JWTs.`}</li>\n    </ol>\n    <p>{`Mutual TLS can be turned on `}<strong parentName=\"p\">{`without having to change the code of applications`}</strong>{` (because of the sidecar deployment).`}</p>\n    <p>{`It provides each service with a `}<strong parentName=\"p\">{`strong identity`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Attacks like impersonation be rerouting DNS records will fail, because a fake application can't prove its identity using the certificate mechanism.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Secures (encrypts)`}</strong>{` service-to-service and end-user-to-service communication.`}</li>\n      <li parentName=\"ul\">{`Provides key and certificate management to `}<strong parentName=\"li\">{`manage generation, distribution and rotation`}</strong>{`.`}</li>\n    </ul>\n    <p><img alt=\"TLS Example App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540153502/Screen_Shot_2018-10-22_at_7.24.10_am.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">{`Legacy applications with not have a sidecar. `}</li>\n      <li parentName=\"ul\">{`One service will go LTR, and the other RTL.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns2\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end.legacy:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-reverse-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end-reverse.ns1:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-reverse-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: ns1\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  namespace: ns2\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-reverse\n  namespace: ns2\n  labels:\n    app: world-reverse\nspec:\n  selector:\n    app: world-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end-reverse\n  namespace: ns1\n  labels:\n    app: end-reverse\nspec:\n  selector:\n    app: end-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.ns1.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello-reverse\nspec:\n  host: hello-reverse.legacy.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls\nspec:\n  hosts:\n  - \"hello-tls.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.ns1.svc.cluster.local\n        subset: v1-tls # match v3 only\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls-reverse\nspec:\n  hosts:\n  - \"hello-tls-reverse.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello-reverse.legacy.svc.cluster.local\n        subset: v1-tls\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`As for the missing legacy services, they can be found in the `}<inlineCode parentName=\"p\">{`helloworld-legacy`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: legacy\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-reverse-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world-reverse.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end\n  namespace: legacy\n  labels:\n    app: end\nspec:\n  selector:\n    app: end\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-reverse\n  namespace: legacy\n  labels:\n    app: hello-reverse\nspec:\n  selector:\n    app: hello-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n`}</code></pre>\n    <p>{`Both these files can applied by running the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)\n$ kubectl apply -f helloworld-legacy.yaml\n$ kubetl get svc -o wide -n istio-system # get services from istio-system services\n# After getting the load balancer, you can then curl the ELB passing the Host header\n`}</code></pre>\n    <p>{`Now we need to `}<strong parentName=\"p\">{`enable TLS authetication.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p>{`Apply this file to enable mutual TLS that works one way but not the other (as like in the diagram). However, in the above yaml files we did now enable the traffic policy, so you need to update that and apply the updated files for all of this to work.`}</p>\n    <h2 {...{\n      \"id\": \"77-end-user-authentication\"\n    }}>{`7.7 End-user authentication`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-jwt.yaml)\nkubectl create -f helloworld-jwt-enable.yaml\n`}</code></pre>\n    <p>{`If we want to access a Pod, we need to use a gateway. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-gw.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`If you want a service within Istio, you will always need to define the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{`. We don't need the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{` for services that are accessed by the client.`}</p>\n    <h2 {...{\n      \"id\": \"78-rbac-with-istio-and-mtls\"\n    }}>{`7.8 RBAC with Istio and MTLS`}</h2>\n    <p>{`Now that we have MTLS, we have strong identites.`}</p>\n    <p>{`Based on those identities, we can start doing `}<strong parentName=\"p\">{`Role Based Access Control (RBAC)`}</strong>{`.`}</p>\n    <p>{`RBAC allows us to limit access `}<strong parentName=\"p\">{`between our services`}</strong>{` and from `}<strong parentName=\"p\">{`end-user to services`}</strong>{`.`}</p>\n    <p>{`Istio is able to verify the identity of a service by `}<strong parentName=\"p\">{`checking the identity of the x.509 certificate (which comes with enabled mutual TLS)`}</strong>{`. Example: with RBAC, service A might be able to be contacted by B, but not by C.`}</p>\n    <p>{`Istio is using SPIFFE standard (another CNFC project).`}</p>\n    <p>{`RBAC in istio:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Can provide `}<strong parentName=\"li\">{`service-to-service`}</strong>{` and `}<strong parentName=\"li\">{`end-user-to-service`}</strong>{` auth.`}</li>\n      <li parentName=\"ul\">{`Supports `}<strong parentName=\"li\">{`conditions`}</strong>{` and `}<strong parentName=\"li\">{`role-binding`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can bind to `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` (which can be linked to pods).`}</li>\n          <li parentName=\"ul\">{`End-user-to-service can for example let you create `}<strong parentName=\"li\">{`condition on being authenticated using JWT`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`It has high performance.`}</li>\n          <li parentName=\"ul\">{`Not enabled by default.`}</li>\n          <li parentName=\"ul\">{`We can enable it globally or on a namespace.`}</li>\n        </ul></li>\n    </ul>\n    <p>{`Example for including it on the \"default\" namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: \"rbac.istio.io/v1alpha1\"\nkind: RbacConfig\nmetadata:\n  name: default\nspec:\n  mode: 'ON_WITH_INCLUSION'\n  inclusion:\n    namespaces: [\"default\"]\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`We can then create a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` specifying the rules and a `}<strong parentName=\"p\">{`ServiceRoleBinding`}</strong>{` to link a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` to a subject (example Kubernetes `}<strong parentName=\"p\">{`ServiceAccount`}</strong>{`).`}</p>\n    <p>{`Example of how we want the demo to look when it comes to what it can contact:`}</p>\n    <p><img alt=\"Contact rules\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540155683/Screen_Shot_2018-10-22_at_8.00.47_am.png\" /></p>\n    <p>{`The order for the following is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` that only enable certain methods and services with specific access.`}</li>\n      <li parentName=\"ol\">{`Enable `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{` to bind that the `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` to a `}<strong parentName=\"li\">{`subject`}</strong>{` (or `}<strong parentName=\"li\">{`ingress controller name`}</strong>{` in the first case).`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` that have the correct metadata required for the `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Deployments`}</strong>{` that have the affiliated `}<strong parentName=\"li\">{`ServiceAccount`}</strong>{` required.`}</li>\n      <li parentName=\"ol\">{`Create a `}<strong parentName=\"li\">{`Service`}</strong>{` for that `}<strong parentName=\"li\">{`Deployment`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Gateway`}</strong>{` that uses the default `}<strong parentName=\"li\">{`Istio Gateway`}</strong>{` to access the `}<strong parentName=\"li\">{`Services`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` that gives us access to the hello world app through the `}<strong parentName=\"li\">{`Gateway`}</strong>{` connected to the `}<strong parentName=\"li\">{`Service`}</strong>{` which sits within the `}<strong parentName=\"li\">{`ServiceMesh`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`DestinationRule`}</strong>{` that allows allows access to the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` using `}<strong parentName=\"li\">{`MTLS`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{` which is a `}<strong parentName=\"li\">{`Reverse Proxy internal load balancer`}</strong>{` accessed from the external `}<strong parentName=\"li\">{`AWS LoadBalancer`}</strong>{` tied to the accessible `}<strong parentName=\"li\">{`DNS Records`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`You can now access the microservice from the `}<strong parentName=\"li\">{`AWS LoadBalancer Route53 alias`}</strong>{` passing the `}<strong parentName=\"li\">{`internal namespace domain`}</strong>{` as the `}<strong parentName=\"li\">{`host header`}</strong>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ! helloworld-rbac.yaml file\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: hello-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"hello.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-2-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world-2.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: istio-ingress-binding\n  namespace: default\nspec:\n  subjects:\n  - properties:\n      source.namespace: \"istio-system\"\n  roleRef:\n    kind: ServiceRole\n    name: \"hello-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: hello-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/hello\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: world-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/world\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-2-viewer\"\n---\n###\n### Kubernetes Service accounts\n###\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: world\n---\n###\n### helloworld.yaml deployments, including a serviceaccount\n### for the hello deployment and the world deployment\n###\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      serviceAccountName: hello  # service account\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      serviceAccountName: world  # service account\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello-rbac.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # uncomment to enable mutual TLS\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n`}</code></pre>\n    <p>{`This again requires the rbac prequisite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p><img alt=\"After applying the files to Istio\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540159695/Screen_Shot_2018-10-22_at_9.07.45_am.png\" /></p>\n    <p>{`Evidently enough, it is incredibly important to ensure the routing is set up correctly so there is no large scale failure.`}</p>\n    <h2 {...{\n      \"id\": \"79-end-user-authentication\"\n    }}>{`7.9 End-user Authentication`}</h2>\n    <p>{`Istio currently supports JWT tokens to authenticate users.`}</p>\n    <p>{`In the implementation, the user will receive a JWT token from an authenticated server after logging in.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This app will provide us with a token that is `}<strong parentName=\"li\">{`signed with a key`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`The data is not encrypted, but the `}<strong parentName=\"li\">{`token contains a signature`}</strong>{`, which can be `}<strong parentName=\"li\">{`verified`}</strong>{` to see `}<strong parentName=\"li\">{`whether it was really created by the server`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Only the server has the `}<strong parentName=\"li\">{`private key`}</strong>{`, so we can't recreate or tamper with the token.`}</li>\n      <li parentName=\"ul\">{`Using microservices, every app would need to be `}<strong parentName=\"li\">{`seperately configured`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Every service would need to `}<strong parentName=\"li\">{`validate the token`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Once validated the service would need to check whether the user has access to this service.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`With Istio, `}<strong parentName=\"li\">{`this can be taken away from the app code and managed centrally.`}</strong></li>\n      <li parentName=\"ul\">{`You can configure the `}<strong parentName=\"li\">{`jwt token signature/properties`}</strong>{` you expect in into and have `}<strong parentName=\"li\">{`policies to allow/disallow access to a service.`}</strong><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Example \"hello\" app might only be accessible if user is authenticated.`}</li>\n          <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`sidecar`}</strong>{` will verify the `}<strong parentName=\"li\">{`validity`}</strong>{` of the signature, to make sure the token is valid.`}</li>\n        </ul></li>\n    </ul>\n    <p><img alt=\"JWT Token setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540160832/Screen_Shot_2018-10-22_at_9.26.42_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# Istio with JWT Auth\n# helloworld-jwt.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-auth\nspec:\n  # this is a change to previous\n  hosts:\n  - \"auth.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: auth.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-hello\nspec:\n  hosts:\n  - \"hello.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: auth\n        version: v1\n    spec:\n      containers:\n      - name: auth\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: this is the authentication service\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: Hello, you can only reach this service when authenticated\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n###\n### Enable TLS\n###\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`To get to auth, we need to create an alias for `}<inlineCode parentName=\"p\">{`auth.domain.name`}</inlineCode>{` in Route 53 to expose the load balancer.`}</p>\n    <p>{`To enable the policy for the JWT token auth to take effect, we need to apply the following to the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-jwt-enable.yaml\napiVersion: \"authentication.istio.io/v1alpha1\"\nkind: \"Policy\"\nmetadata:\n  name: \"jwt-example\"\nspec:\n  targets:\n  - name: hello\n  peers:\n  - mtls: {}\n  origins:\n  - jwt:\n      # jwksUri is from auth uri we setup in Route53\n      issuer: \"http-echo@http-echo.kubernetes.newtech.academy\"\n      jwksUri: \"http://auth.kubernetes.newtech.academy/.well-known/jwks.json\"\n  principalBinding: USE_ORIGIN\n---\n`}</code></pre>\n    <p>{`After fetching the token, we can now access authenticated routes by passing the header `}<inlineCode parentName=\"p\">{`\"Authorization\": \"Bearer $TOKEN\"`}</inlineCode>{`.`}</p>\n    <p>{`The example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wardviaene/http-echo/blob/master/main.go\"\n      }}>{`this Github repo`}</a>{` with the /login route to do auth and another route to check the auth from other services.`}</p>\n    <p>{`Something useful is that you can also check the logs of the Istio proxy. This can be done with `}<inlineCode parentName=\"p\">{`kubectl logs <% pod_name %> -c istio-proxy`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"710-istio-ingress-traffic\"\n    }}>{`7.10 Istio Ingress Traffic`}</h2>\n    <p>{`To enable ingress traffic to allow to access outside services, we can apply an external service file. The following example will allow the `}<inlineCode parentName=\"p\">{`ifconfig.co`}</inlineCode>{` hostname to be accessible from the pods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# external-service.yaml\n#\n# http\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-http\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\n#\n# https\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-https\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ifconfig-co\nspec:\n  hosts:\n  - ifconfig.co\n  tls:\n  - match:\n    - port: 443\n      sni_hosts:\n      - ifconfig.co\n    route:\n    - destination:\n        host: ifconfig.co\n        port:\n          number: 443\n      weight: 100\n`}</code></pre>\n    <p>{`You should now be able to log into the pod to try out contacting other services.`}</p>\n    <h2 {...{\n      \"id\": \"710-distributed-tracing-with-jaegar\"\n    }}>{`7.10 Distributed Tracing with Jaegar`}</h2>\n    <p>{`Jaegar is automatically stored in the `}<inlineCode parentName=\"p\">{`isto-system`}</inlineCode>{`. You can confirm this with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get pod -n istio-system # istio-tracing pod\n$ kubectl get svc -n istio-system # jaegar-[agent/collector/query]\n# You could export the port for jaegar-query by updating the service\n$ kubectl edit svc jaegar-query -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    <p>{`To find the traces, you need to find the svc `}<strong parentName=\"p\">{`LoadBalancer`}</strong>{` port for Jaegar Query and then you can access the web url using the port.`}</p>\n    <p>{`This ports are only internal, so you would either need to expose the IP address or use `}<inlineCode parentName=\"p\">{`kubectl port-forward`}</inlineCode>{` to forward all the ports on.`}</p>\n    <p>{`To results, you'll need to use the `}<inlineCode parentName=\"p\">{`open-tracing`}</inlineCode>{` headers.`}</p>\n    <h2 {...{\n      \"id\": \"711-istio-metrics-with-grafana\"\n    }}>{`7.11 Istio Metrics with Grafana`}</h2>\n    <p>{`Similar to Jaegar, you can find the Grafana service by getting the services for the Istio System.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get svc -n istio-system # grafana\n# You could export the port for grafana by updating the service\n$ kubectl edit svc grafana -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}