{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/iOS/iOS-Delegation.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/iOS/iOS-Delegation.md","mtime":1548209344497},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"delegation-in-ios\"}},\"Delegation in iOS\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#delegation-in-ios\"}},\"Delegation in iOS\"),React.createElement(MDXTag,{name:\"ul\",components:components,parentName:\"li\"},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#iosd-1-intro-to-design-patterns\"}},\"IOSD-1: Intro to Design Patterns\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#iosd-2-learning-by-example---racing-horses\"}},\"IOSD-2: Learning by example - Racing Horses\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#iosd-3-acting-as-a-delegate\"}},\"IOSD-3: Acting as a Delegate\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#iosd-4-examples---cllocation-manager\"}},\"IOSD-4: Examples - CLLocation Manager\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#iosd-5-examples---uitextfielddelegate\"}},\"IOSD-5: Examples - UITextFieldDelegate\"))))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"iosd-1-intro-to-design-patterns\"}},\"IOSD-1: Intro to Design Patterns\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Three common issues developers have come across:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Avoiding inflexible objects\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Maintaining loose relationships\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Avoid tight coupling\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"An example - \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"The Delegate Pattern\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"The Delegate Pattern\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"It is concerned with adding responsibilities to objects dynamically.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"iosd-2-learning-by-example---racing-horses\"}},\"IOSD-2: Learning by example - Racing Horses\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"The Horse Class and Race Class\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"import Foundation\\nimport PlaygroundSupport\\n\\nPlaygroundPage.current.needsIndefiniteExecution = true\\n\\nclass Horse {\\n    let name: String\\n    let maxSpeed: Double\\n    var distanceTraveled = 0.0\\n    var currentLap = 1\\n\\n    init(name: String, maxSpeed: Double) {\\n        self.maxSpeed = maxSpeed\\n        self.name = name\\n    }\\n\\n    var currentSpeed: Double {\\n        let random = Double(arc4random())\\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\\n    }\\n}\\n\\nclass Race {\\n    let laps: Int\\n    let lapLength: Double = 300\\n    let participants: [Horse]\\n\\n    weak var delegate: HorseRaceDelegate?\\n\\n    // since we want to use a delegate, we do not create instances\\n    // let tracker = Tracker()\\n    // let broadcaster = RaceBroadcaster()\\n\\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\\n        self.updateProgress()\\n    }\\n\\n    init(laps: Int, participants: [Horse]) {\\n        self.laps = laps\\n        self.participants = participants\\n    }\\n\\n    func start() {\\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\\n        // tracker.updateRaceStart(with: Date())\\n        delegate?.race(self, didStartAt: Date())\\n        print(\\\"Race in progress...\\\")\\n    }\\n\\n    func updateProgress() {\\n        print(\\\"....\\\")\\n        for horse in participants {\\n            horse.distanceTraveled += horse.currentSpeed\\n\\n            if horse.distanceTraveled >= lapLength {\\n                horse.distanceTraveled = 0\\n\\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\\n\\n                // let lapKey = \\\"(Tracker.Keys.lapLeader) (horse.currentLap)\\\"\\n                // if !tracker.stats.keys.contains(lapKey) {\\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\\n                // }\\n\\n                horse.currentLap += 1\\n\\n                if horse.currentLap >= laps + 1 {\\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\\n                    stop()\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    func stop() {\\n        print(\\\"Race complete!\\\")\\n        // timer.invalidate()\\n        // tracker.printRaceSummary()\\n    }\\n}\\n\\nlet jubilee = Horse(name: \\\"Jubilee\\\", maxSpeed: 16)\\nlet sonora = Horse(name: \\\"Sonora\\\", maxSpeed: 17)\\nlet jasper = Horse(name: \\\"Jasper\\\", maxSpeed: 17)\\n\\nlet participants = [jubilee, sonora, jasper]\\n\\nlet race = Race(laps: 1, participants: participants)\\nrace.start()\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"The Tracker Class\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"class Tracker: HorseRaceDelegate {\\n\\n    struct Keys {\\n        static let raceStartTime = \\\"raceStartTime\\\"\\n        static let lapLeader = \\\"leaderForLap\\\"\\n        static let raceEndTime = \\\"raceEndTime\\\"\\n        static let winner = \\\"winner\\\"\\n    }\\n\\n    var stats = [String: Any]()\\n\\n    // func updateRaceStart(with time: Date) {\\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\\n    // }\\n\\n    func race(_ race: Race, didStartAt time: Date) {\\n        stats.updateValue(time, forKey: Keys.raceStartTime)\\n    }\\n\\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\\n        let lapLead = \\\"Horse: (horse.name), time: (time)\\\"\\n        let lapLeadKey = \\\"(Keys.lapLeader) (number)\\\"\\n\\n        stats.updateValue(lapLead, forKey: lapLeadKey)\\n    }\\n\\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\\n        stats.updateValue(winner.name, forKey: Keys.winner)\\n        stats.updateValue(time, forKey: Keys.raceEndTime)\\n    }\\n\\n    // get rid of the below method\\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\\n        let lapLead = \\\"Horse: (horse.name), time: (time)\\\"\\n        let lapLeadKey = \\\"(Keys.lapLeader) (number)\\\"\\n\\n        stats.updateValue(lapLead, forKey: lapLeadKey)\\n    }\\n\\n    // get rid of the below method\\n    func updateRaceEndWith(winner: Horse, time: Date) {\\n        stats.updateValue(winner.name, forKey: Keys.winner)\\n        stats.updateValue(time, forKey: Keys.raceEndTime)\\n    }\\n\\n    func printRaceSummary() {\\n        print(\\\"***********\\\")\\n\\n        let raceStartTime = stats[Keys.raceStartTime]!\\n        print(\\\"Race start time: (raceStartTime)\\\")\\n\\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\\n            print(\\\"(key): (value)\\\")\\n        }\\n\\n        let raceEndTime = stats[Keys.raceEndTime]!\\n        print(\\\"Race end time: (raceEndTime)\\\")\\n\\n        let winner = stats[Keys.winner]!\\n        print(\\\"Winner: (winner)\\\")\\n\\n        print(\\\"***********\\\")\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In this example, we use the Tracker methods and Keys to help monitor the results of the race.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now so far so good, but what if we want a live broadcast?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"However, trackers should do more than one job.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also \\\"knows\\\" about the Tracker and Broadcast class. This coupling is too tight.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"class RaceBroadcaster {\\n    // methods to try to help broadcast information on the Race object\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How do we do this? By implementing a delegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We will make a \\\"contract\\\" that uses a protocol.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This will implement the rules that anything that wants to interact with the Race class must adhere to.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"HorseRaceDelegate Protocol\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"protocol HorseRaceDelegate: class {\\n    // this will require any adhering class to use the didStartAt method\\n    func race(_ race: Race, didStartAt time: Date)\\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn't \\\"need\\\" to have to have a tracker, we will make it optional and also give it the \\\"weak\\\" var to prevent a reference cycle.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Once we have a class that implements a delegate, how do we then have a another class act as a delegate?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"That means that for the class (eg Tracker), it needs to conform to the delegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"let tracker = Tracker();\\nrace.delegate = tracker;\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"iosd-3-acting-as-a-delegate\"}},\"IOSD-3: Acting as a Delegate\"),React.createElement(MDXTag,{name:\"p\",components:components},\"So why do we need to decouple in the first place?\"),React.createElement(MDXTag,{name:\"p\",components:components},\"It will become far more manageable once you start creating Objects that focus on just one job.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Analogy:\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Instead of doing it all yourself, you delegate it out to an assistant.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Beforehand, you need to define what they do. Think of the requirements as the protocol.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If they have all these abilities, they conform to the protocol.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Now you hire and give the tasks to the employee - they are now your delegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"However, if they quit - that's cool. You can look for another delegate that conforms.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Example, if you have a class \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"RaceManager\"),\" that conforms, they can also have race of type Race as a property, we've created a strong relationship by default.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"class RaceManager: HorseRaceDelegate {\\n\\n    let race: Race\\n\\n    init(race: Race) {\\n        self.race = race\\n        race.delegate = self\\n        race.start()\\n    }\\n\\n    func race(_ race: Race, didStartAt time: Date) {\\n        // some implementation\\n    }\\n\\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\\n        // some implementation\\n    }\\n\\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\\n        // some implementation\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"iosd-4-examples---cllocation-manager\"}},\"IOSD-4: Examples - CLLocation Manager\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Using the CoreLocation Framework, we can create a LocationManager class.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Once we create the class, we can request for authorization.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"To use it, we can conform to the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"NSObject\"),\" class and override the init() method since there already is one for \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"NSObject\"),\". This will allow us to give conformance for the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"CLLocationManagerDelegate\"),\". Swift does not have the option of optional protocols.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Then we can set the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"manager.delegate = self\")),React.createElement(MDXTag,{name:\"p\",components:components},\"This is an example of a circular dependence.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-swift\"}},\"import Foundation\\nimport CoreLocation\\n\\nclass LocationManager: NSObject, CLLocationManagerDelegate {\\n    let manager = CLLocationManager()\\n\\n    override init() {\\n        super.init()\\n\\n        manager.delegate = self\\n        manager.requestWhenInUseAuthorization\\n    }\\n\\n    // this is an example of a protocol method!\\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\\n        if status == .authorizedWhenInUse {\\n            manager.requestLocation()\\n        }\\n    }\\n\\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\\n        print(Error)\\n    }\\n\\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\\n        print(locations.first!)\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"iosd-5-examples---uitextfielddelegate\"}},\"IOSD-5: Examples - UITextFieldDelegate\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In case of the UITextField, we can assign the ViewController that is \\\"listening\\\" as the delegate to recieve the broadcasts.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Then we can implement the methods from the protocol to the class to give us the results.\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/iOS/iOS-Delegation.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"delegation-in-ios\"}}>{`Delegation in iOS`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#delegation-in-ios\"}}>{`Delegation in iOS`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#iosd-1-intro-to-design-patterns\"}}>{`IOSD-1: Intro to Design Patterns`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#iosd-2-learning-by-example---racing-horses\"}}>{`IOSD-2: Learning by example - Racing Horses`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#iosd-3-acting-as-a-delegate\"}}>{`IOSD-3: Acting as a Delegate`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#iosd-4-examples---cllocation-manager\"}}>{`IOSD-4: Examples - CLLocation Manager`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#iosd-5-examples---uitextfielddelegate\"}}>{`IOSD-5: Examples - UITextFieldDelegate`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"iosd-1-intro-to-design-patterns\"}}>{`IOSD-1: Intro to Design Patterns`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Three common issues developers have come across:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Avoiding inflexible objects`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Maintaining loose relationships`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Avoid tight coupling`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An example - `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`The Delegate Pattern`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`The Delegate Pattern`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It is concerned with adding responsibilities to objects dynamically.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"iosd-2-learning-by-example---racing-horses\"}}>{`IOSD-2: Learning by example - Racing Horses`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`The Horse Class and Race Class`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`import Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass Horse {\n    let name: String\n    let maxSpeed: Double\n    var distanceTraveled = 0.0\n    var currentLap = 1\n\n    init(name: String, maxSpeed: Double) {\n        self.maxSpeed = maxSpeed\n        self.name = name\n    }\n\n    var currentSpeed: Double {\n        let random = Double(arc4random())\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\n    }\n}\n\nclass Race {\n    let laps: Int\n    let lapLength: Double = 300\n    let participants: [Horse]\n\n    weak var delegate: HorseRaceDelegate?\n\n    // since we want to use a delegate, we do not create instances\n    // let tracker = Tracker()\n    // let broadcaster = RaceBroadcaster()\n\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\n        self.updateProgress()\n    }\n\n    init(laps: Int, participants: [Horse]) {\n        self.laps = laps\n        self.participants = participants\n    }\n\n    func start() {\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\n        // tracker.updateRaceStart(with: Date())\n        delegate?.race(self, didStartAt: Date())\n        print(\"Race in progress...\")\n    }\n\n    func updateProgress() {\n        print(\"....\")\n        for horse in participants {\n            horse.distanceTraveled += horse.currentSpeed\n\n            if horse.distanceTraveled >= lapLength {\n                horse.distanceTraveled = 0\n\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\n\n                // let lapKey = \"\\(Tracker.Keys.lapLeader) \\(horse.currentLap)\"\n                // if !tracker.stats.keys.contains(lapKey) {\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\n                // }\n\n                horse.currentLap += 1\n\n                if horse.currentLap >= laps + 1 {\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\n                    stop()\n                    break\n                }\n            }\n        }\n    }\n\n    func stop() {\n        print(\"Race complete!\")\n        // timer.invalidate()\n        // tracker.printRaceSummary()\n    }\n}\n\nlet jubilee = Horse(name: \"Jubilee\", maxSpeed: 16)\nlet sonora = Horse(name: \"Sonora\", maxSpeed: 17)\nlet jasper = Horse(name: \"Jasper\", maxSpeed: 17)\n\nlet participants = [jubilee, sonora, jasper]\n\nlet race = Race(laps: 1, participants: participants)\nrace.start()\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`The Tracker Class`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`class Tracker: HorseRaceDelegate {\n\n    struct Keys {\n        static let raceStartTime = \"raceStartTime\"\n        static let lapLeader = \"leaderForLap\"\n        static let raceEndTime = \"raceEndTime\"\n        static let winner = \"winner\"\n    }\n\n    var stats = [String: Any]()\n\n    // func updateRaceStart(with time: Date) {\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\n    // }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        stats.updateValue(time, forKey: Keys.raceStartTime)\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        let lapLead = \"Horse: \\(horse.name), time: \\(time)\"\n        let lapLeadKey = \"\\(Keys.lapLeader) \\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    // get rid of the below method\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\n        let lapLead = \"Horse: \\(horse.name), time: \\(time)\"\n        let lapLeadKey = \"\\(Keys.lapLeader) \\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    // get rid of the below method\n    func updateRaceEndWith(winner: Horse, time: Date) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    func printRaceSummary() {\n        print(\"***********\")\n\n        let raceStartTime = stats[Keys.raceStartTime]!\n        print(\"Race start time: \\(raceStartTime)\")\n\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\n            print(\"\\(key): \\(value)\")\n        }\n\n        let raceEndTime = stats[Keys.raceEndTime]!\n        print(\"Race end time: \\(raceEndTime)\")\n\n        let winner = stats[Keys.winner]!\n        print(\"Winner: \\(winner)\")\n\n        print(\"***********\")\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this example, we use the Tracker methods and Keys to help monitor the results of the race.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now so far so good, but what if we want a live broadcast?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, trackers should do more than one job.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also \"knows\" about the Tracker and Broadcast class. This coupling is too tight.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`class RaceBroadcaster {\n    // methods to try to help broadcast information on the Race object\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do we do this? By implementing a delegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We will make a \"contract\" that uses a protocol.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will implement the rules that anything that wants to interact with the Race class must adhere to.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`HorseRaceDelegate Protocol`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`protocol HorseRaceDelegate: class {\n    // this will require any adhering class to use the didStartAt method\n    func race(_ race: Race, didStartAt time: Date)\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn't \"need\" to have to have a tracker, we will make it optional and also give it the \"weak\" var to prevent a reference cycle.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we have a class that implements a delegate, how do we then have a another class act as a delegate?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That means that for the class (eg Tracker), it needs to conform to the delegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`let tracker = Tracker();\nrace.delegate = tracker;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"iosd-3-acting-as-a-delegate\"}}>{`IOSD-3: Acting as a Delegate`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So why do we need to decouple in the first place?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It will become far more manageable once you start creating Objects that focus on just one job.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Analogy:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Instead of doing it all yourself, you delegate it out to an assistant.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Beforehand, you need to define what they do. Think of the requirements as the protocol.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If they have all these abilities, they conform to the protocol.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now you hire and give the tasks to the employee - they are now your delegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, if they quit - that's cool. You can look for another delegate that conforms.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example, if you have a class `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`RaceManager`}</MDXTag>{` that conforms, they can also have race of type Race as a property, we've created a strong relationship by default.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`class RaceManager: HorseRaceDelegate {\n\n    let race: Race\n\n    init(race: Race) {\n        self.race = race\n        race.delegate = self\n        race.start()\n    }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        // some implementation\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        // some implementation\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        // some implementation\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"iosd-4-examples---cllocation-manager\"}}>{`IOSD-4: Examples - CLLocation Manager`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using the CoreLocation Framework, we can create a LocationManager class.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we create the class, we can request for authorization.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To use it, we can conform to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NSObject`}</MDXTag>{` class and override the init() method since there already is one for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NSObject`}</MDXTag>{`. This will allow us to give conformance for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CLLocationManagerDelegate`}</MDXTag>{`. Swift does not have the option of optional protocols.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then we can set the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`manager.delegate = self`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is an example of a circular dependence.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\"}}>{`import Foundation\nimport CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let manager = CLLocationManager()\n\n    override init() {\n        super.init()\n\n        manager.delegate = self\n        manager.requestWhenInUseAuthorization\n    }\n\n    // this is an example of a protocol method!\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            manager.requestLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(Error)\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        print(locations.first!)\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"iosd-5-examples---uitextfielddelegate\"}}>{`IOSD-5: Examples - UITextFieldDelegate`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In case of the UITextField, we can assign the ViewController that is \"listening\" as the delegate to recieve the broadcasts.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then we can implement the methods from the protocol to the class to give us the results.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}