{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Regression-Model-Performance.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Regression-Model-Performance.md","mtime":1562563032061},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Regression-Model-Performance.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"regression-model-performance\"\n    }}>{`Regression Model Performance`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#regression-model-performance\"\n        }}>{`Regression Model Performance`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#r-squared-intuition\"\n            }}>{`R-Squared Intuition`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#adjusted-r-squared-intuition\"\n            }}>{`Adjusted R-Squared Intuition`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#evaluating-regression-models-performance\"\n            }}>{`Evaluating Regression Models Performance`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#interpretting-linear-regressions-coefficients\"\n            }}>{`Interpretting Linear Regressions Coefficients`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"r-squared-intuition\"\n    }}>{`R-Squared Intuition`}</h2>\n    <p>{`Interesting parameter and most people use it without understanding the underlying principles.`}</p>\n    <p>{`We spoke about the `}<inlineCode parentName=\"p\">{`simple linear regression`}</inlineCode>{` model being the result of the `}<inlineCode parentName=\"p\">{`ordinary least squares`}</inlineCode>{` method. This is also known as `}<inlineCode parentName=\"p\">{`sum of squares residuals`}</inlineCode>{` and is given as `}<inlineCode parentName=\"p\">{`SS[res]`}</inlineCode>{`.`}</p>\n    <p>{`If we instead took `}<inlineCode parentName=\"p\">{`SUM(y[i] - y[avg])^2`}</inlineCode>{`, we get the `}<inlineCode parentName=\"p\">{`total sum of squares SS[tot]`}</inlineCode>{`. To get our regression, we get `}<inlineCode parentName=\"p\">{`R^2 = 1 - (SS[res]/SS[tot])`}</inlineCode>{`.`}</p>\n    <p>{`As you minimize the SS`}{`[res]`}{`, it becomes smaller, and as we get `}<inlineCode parentName=\"p\">{`1 - (SS[res]/SS[tot])`}</inlineCode>{` we actually start to get closer to 1. The closer we get to 1, the better. Can R^2 be negative? Yes. It can if the SS`}{`[res]`}{` fits the line worse. In that case it would be better to use the average than the model - although it would be hard to do!`}</p>\n    <h2 {...{\n      \"id\": \"adjusted-r-squared-intuition\"\n    }}>{`Adjusted R-Squared Intuition`}</h2>\n    <p>{`This is the fun part!`}</p>\n    <p>{`Here we have our `}<inlineCode parentName=\"p\">{`simple linear regression`}</inlineCode>{` regression from before. We, the same concepts apply for multiple linear regression.`}</p>\n    <p>{`R^2 - goodness of fit. The closer the one, the better - BUT the problem is when we start adding more IVs into the model. What we can look at is whether the R^2 getting better or worse, but because of SS`}{`[res]`}{` the minimum will never decrease. `}<strong parentName=\"p\">{`THIS IS IMPORTANT`}</strong>{`.`}</p>\n    <p>{`Once you add a new variable, it will affect what the variable looks like. Either the new variable will help minimize the SS`}{`[res]`}{`. If you cannot decress SS`}{`[res]`}{`, the new variable would be zero (unlikely).`}</p>\n    <p>{`Therefore, `}<inlineCode parentName=\"p\">{`R^2`}</inlineCode>{` will never decrease when you add in more variables. That being said, if the IV has zero correlation or causation with the DV, there randomly will be a slight correlation - therefore R^2 might slightly increase even though the variable is not helping the model.`}</p>\n    <p>{`This is where `}<inlineCode parentName=\"p\">{`adjusted R^2`}</inlineCode>{` comes in.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Adj R^2 = 1 - (1-R^2)*((n - 1)/(n - p - 1))\np - number of regressors\nn - sample size\n`}</code></pre>\n    <p>{`This formula will penalise you for adding in IVs that have no correlation.`}</p>\n    <h2 {...{\n      \"id\": \"evaluating-regression-models-performance\"\n    }}>{`Evaluating Regression Models Performance`}</h2>\n    <p>{`Reflecting back on the `}<inlineCode parentName=\"p\">{`Backward Elimination`}</inlineCode>{` process that we used, we actually came to a feeling that we shouldn't have excluded the last value of `}<inlineCode parentName=\"p\">{`Marketing Spend`}</inlineCode>{`.`}</p>\n    <p>{`The problem with the algorithms that we chose and the p value threshhold we chose is that the threshhold is arbitrary.`}</p>\n    <p>{`What we can actually find at the bottom of those same reports that we used is that it also gives us the values of `}<inlineCode parentName=\"p\">{`R-squared`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Adjusted R-squared`}</inlineCode>{`.`}</p>\n    <p>{`If we observe this as we build our model in code, then we can use the report to help check the goodness of fit.`}</p>\n    <h2 {...{\n      \"id\": \"interpretting-linear-regressions-coefficients\"\n    }}>{`Interpretting Linear Regressions Coefficients`}</h2>\n    <p>{`If we look at the third model and look at the IVs. If we change the IV value, we should be able to tell that DV should correlate in a certain direction.`}</p>\n    <p>{`The coefficients come under their own heading.`}</p>\n    <p>{`We should be able to ue logistics just for this. Magnitude can also trip you up. The `}<inlineCode parentName=\"p\">{`Estimate`}</inlineCode>{` value doesn't really give you more indication. We could alter the value of input and it would change values for `}<inlineCode parentName=\"p\">{`Estimate`}</inlineCode>{` etc. Think of magnitude in term of units of the IV.`}</p>\n    <p>{`What the estimate shows that for every unit you increase, the IV would increase by a certain amount.`}</p>\n    <p><strong parentName=\"p\">{`THE IMPORTANT PART: THING IN TERMS OF PER UNIT`}</strong></p>\n    <p>{`You'll also know that as you take out certain IVs, the actual effect that it brings into the model will also change.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}