{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Docker/Docker-Quick-Start.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Docker/Docker-Quick-Start.md","mtime":1548209344309},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"docker-quickstart\"}},\"Docker Quickstart\"),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#docker-quickstart\"}},\"Docker Quickstart\"),React.createElement(MDXTag,{name:\"ul\",components:components,parentName:\"li\"},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#basic-commands\"}},\"Basic commands\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#running-the-whalesay-container\"}},\"Running the whalesay container\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#inspecting-docker-images\"}},\"Inspecting Docker images\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#container-lifecycle\"}},\"Container Lifecycle\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#image-and-container-management\"}},\"Image and Container Management\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#redirection---ports-and-volumes\"}},\"Redirection - Ports and Volumes\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#the-dockerfile\"}},\"The Dockerfile\"))))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"basic-commands\"}},\"Basic commands\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"Usage: docker [OPTIONS] COMMAND [arg...]\\n       docker [ --help | -v | --version ]\\n\\nA self-sufficient runtime for containers.\\n\\nOptions:\\n\\n  --config=~/.docker              Location of client config files\\n  -D, --debug                     Enable debug mode\\n  -H, --host=[]                   Daemon socket(s) to connect to\\n  -h, --help                      Print usage\\n  -l, --log-level=info            Set the logging level\\n  --tls                           Use TLS; implied by --tlsverify\\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\\n  --tlskey=~/.docker/key.pem      Path to TLS key file\\n  --tlsverify                     Use TLS and verify the remote\\n  -v, --version                   Print version information and quit\\n\\nCommands:\\n    attach    Attach to a running container\\n    build     Build an image from a Dockerfile\\n    commit    Create a new image from a container's changes\\n    cp        Copy files/folders between a container and the local filesystem\\n    create    Create a new container\\n    diff      Inspect changes on a container's filesystem\\n    events    Get real time events from the server\\n    exec      Run a command in a running container\\n    export    Export a container's filesystem as a tar archive\\n    history   Show the history of an image\\n    images    List images\\n    import    Import the contents from a tarball to create a filesystem image\\n    info      Display system-wide information\\n    inspect   Return low-level information on a container, image or task\\n    kill      Kill one or more running containers\\n    load      Load an image from a tar archive or STDIN\\n    login     Log in to a Docker registry.\\n    logout    Log out from a Docker registry.\\n    logs      Fetch the logs of a container\\n    network   Manage Docker networks\\n    node      Manage Docker Swarm nodes\\n    pause     Pause all processes within one or more containers\\n    port      List port mappings or a specific mapping for the container\\n    ps        List containers\\n    pull      Pull an image or a repository from a registry\\n    push      Push an image or a repository to a registry\\n    rename    Rename a container\\n    restart   Restart a container\\n    rm        Remove one or more containers\\n    rmi       Remove one or more images\\n    run       Run a command in a new container\\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\\n    search    Search the Docker Hub for images\\n    service   Manage Docker services\\n    start     Start one or more stopped containers\\n    stats     Display a live stream of container(s) resource usage statistics\\n    stop      Stop one or more running containers\\n    swarm     Manage Docker Swarm\\n    tag       Tag an image into a repository\\n    top       Display the running processes of a container\\n    unpause   Unpause all processes within one or more containers\\n    update    Update configuration of one or more containers\\n    version   Show the Docker version information\\n    volume    Manage Docker volumes\\n    wait      Block until a container stops, then print its exit code\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"running-the-whalesay-container\"}},\"Running the whalesay container\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Pull the image, run the image!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker pull docker/whalesay:latest\\ndocker images\\n\\n### lists the images\\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\\n\\ndocker run docker/whalesay cowsay ayyyyyy mate\\n ___________\\n< ayyy mate >\\n -----------\\n                                   ##        .\\n              ## ## ##       ==\\n           ## ## ## ##      ===\\n       /\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"___/ ===\\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\\n       ______ o          __/\\n                    __/\\n          __________/\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"inspecting-docker-images\"}},\"Inspecting Docker images\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker inspect whalesay\\n[\\n    {\\n        \\\"Id\\\": \\\"sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4\\\",\\n        \\\"RepoTags\\\": [\\n            \\\"docker/whalesay:latest\\\"\\n        ],\\n        \\\"RepoDigests\\\": [\\n            \\\"docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\\\"\\n        ],\\n        \\\"Parent\\\": \\\"\\\",\\n        \\\"Comment\\\": \\\"\\\",\\n        \\\"Created\\\": \\\"2015-05-25T22:04:23.303454458Z\\\",\\n        \\\"Container\\\": \\\"5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f\\\",\\n        \\\"ContainerConfig\\\": {\\n            \\\"Hostname\\\": \\\"9ec8c01a6a48\\\",\\n            \\\"Domainname\\\": \\\"\\\",\\n            \\\"User\\\": \\\"\\\",\\n            \\\"AttachStdin\\\": false,\\n            \\\"AttachStdout\\\": false,\\n            \\\"AttachStderr\\\": false,\\n            \\\"Tty\\\": false,\\n            \\\"OpenStdin\\\": false,\\n            \\\"StdinOnce\\\": false,\\n            \\\"Env\\\": [\\n                \\\"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"\\n            ],\\n            \\\"Cmd\\\": [\\n                \\\"/bin/sh\\\",\\n                \\\"-c\\\",\\n                \\\"#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"\\n            ],\\n            \\\"Image\\\": \\\"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\\\",\\n            \\\"Volumes\\\": null,\\n            \\\"WorkingDir\\\": \\\"/cowsay\\\",\\n            \\\"Entrypoint\\\": null,\\n            \\\"OnBuild\\\": [],\\n            \\\"Labels\\\": {}\\n        },\\n        \\\"DockerVersion\\\": \\\"1.6.0\\\",\\n        \\\"Author\\\": \\\"\\\",\\n        \\\"Config\\\": {\\n            \\\"Hostname\\\": \\\"9ec8c01a6a48\\\",\\n            \\\"Domainname\\\": \\\"\\\",\\n            \\\"User\\\": \\\"\\\",\\n            \\\"AttachStdin\\\": false,\\n            \\\"AttachStdout\\\": false,\\n            \\\"AttachStderr\\\": false,\\n            \\\"Tty\\\": false,\\n            \\\"OpenStdin\\\": false,\\n            \\\"StdinOnce\\\": false,\\n            \\\"Env\\\": [\\n                \\\"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"\\n            ],\\n            \\\"Cmd\\\": [\\n                \\\"/bin/bash\\\"\\n            ],\\n            \\\"Image\\\": \\\"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\\\",\\n            \\\"Volumes\\\": null,\\n            \\\"WorkingDir\\\": \\\"/cowsay\\\",\\n            \\\"Entrypoint\\\": null,\\n            \\\"OnBuild\\\": [],\\n            \\\"Labels\\\": {}\\n        },\\n        \\\"Architecture\\\": \\\"amd64\\\",\\n        \\\"Os\\\": \\\"linux\\\",\\n        \\\"Size\\\": 247049019,\\n        \\\"VirtualSize\\\": 247049019,\\n        \\\"GraphDriver\\\": {\\n            \\\"Name\\\": \\\"aufs\\\",\\n            \\\"Data\\\": null\\n        },\\n        \\\"RootFS\\\": {\\n            \\\"Type\\\": \\\"layers\\\",\\n            \\\"Layers\\\": [\\n                \\\"sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a\\\",\\n                \\\"sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd\\\",\\n                \\\"sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31\\\",\\n                \\\"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\\\",\\n                \\\"sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d\\\",\\n                \\\"sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca\\\",\\n                \\\"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\\\",\\n                \\\"sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d\\\",\\n                \\\"sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f\\\",\\n                \\\"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\\\"\\n            ]\\n        }\\n    }\\n]\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"container-lifecycle\"}},\"Container Lifecycle\"),React.createElement(MDXTag,{name:\"p\",components:components},\"There is a lifecycle associated with starting, stopping, restarting etc.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker run -d --name LifeCycle1 nginx:latest\\ndocker attach LifeCycle1\\n\\n// exec if the container started indirectly\\ndocker exec -it LifeCycle1 /bin/bash\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We don't have to attach to the container with the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"exec\"),\" command. We can just connect to is just to execute a command - like a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"ssh\"),\" prompt!\"),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"image-and-container-management\"}},\"Image and Container Management\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"# remove the image\\ndocker rmi image-name\\n\\n# remove all containers\\ndocker rm `docker ps -a -q`\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"redirection---ports-and-volumes\"}},\"Redirection - Ports and Volumes\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Ports\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Ports are exposed in a container so that you can connect via the container IP but must be exposed via the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"dockerfile\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can direct the port for a http container to a port on the underlying host.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"docker run -d -P --name:webserver nginx:latest\")),React.createElement(MDXTag,{name:\"p\",components:components},\"To find all the address redirection, we can write \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"docker port WebServer1 $CONTAINERPORT\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"okeeffe_d@dok ~$ docker port WebServer1 $CONTAINERPORT\\n\\n443/tcp -> 0.0.0.0:32768\\n80/tcp -> 0.0.0.0:32769\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"docker run -d -p 8080:80 --name=webserver nginx:latest\"),\" is also useful for a variety of reasons.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"No we can pass stuff to the host without having to copy it.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This means we can mount underlying directories.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"// 15 min mark\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If we create a basic file and create a HTML page, we could then run\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\\n\\n// this will mount the file and mount it to that directory. We can push multiple mounts!\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"the-dockerfile\"}},\"The Dockerfile\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Very few times will you start with a generic list of packages for a base image and creating it from nothing.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You'll base on it on things like \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"debian, ubuntu\"),\" etc.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The Dockerfile is an easy to read, easy to write script to build an image following instructions.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You can name it whatever, but will probably just be stored in \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"Dockerfile\"),\" anyway.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Note, things will cache if they've already been done!\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Example Dockerfile:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"# most have FROM which image\\nFROM debian:stable\\nMAINTAINER dockerhubid <email>\\n\\n# best practise is to combined commands\\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\\nENV MYVALUE my-value\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Then docker run!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"docker run -it dockerhubid/myapache:latest /bin/bash\\n\\n> echo MYVALUE\\nmy-value\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Exposing or preventing exposing ports\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"# most have FROM which image\\nFROM debian:stable\\nMAINTAINER dockerhubid <email>\\n\\n# best practise is to combined commands\\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\\nENV MYVALUE my-value\\n\\nEXPOSE 80\\nEXPOSE 22\\n\\nCMD [\\\"/usr/sbin/apache2tl\\\",\\\"-D\\\",\\\"FOREGROUND\\\"]\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Docker/Docker-Quick-Start.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"docker-quickstart\"}}>{`Docker Quickstart`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#docker-quickstart\"}}>{`Docker Quickstart`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#basic-commands\"}}>{`Basic commands`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#running-the-whalesay-container\"}}>{`Running the whalesay container`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#inspecting-docker-images\"}}>{`Inspecting Docker images`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#container-lifecycle\"}}>{`Container Lifecycle`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#image-and-container-management\"}}>{`Image and Container Management`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#redirection---ports-and-volumes\"}}>{`Redirection - Ports and Volumes`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#the-dockerfile\"}}>{`The Dockerfile`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-commands\"}}>{`Basic commands`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container, image or task\n    kill      Kill one or more running containers\n    load      Load an image from a tar archive or STDIN\n    login     Log in to a Docker registry.\n    logout    Log out from a Docker registry.\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    node      Manage Docker Swarm nodes\n    pause     Pause all processes within one or more containers\n    port      List port mappings or a specific mapping for the container\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\n    search    Search the Docker Hub for images\n    service   Manage Docker services\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop one or more running containers\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within one or more containers\n    update    Update configuration of one or more containers\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"running-the-whalesay-container\"}}>{`Running the whalesay container`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pull the image, run the image!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker pull docker/whalesay:latest\ndocker images\n\n### lists the images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\n\ndocker run docker/whalesay cowsay ayyyyyy mate\n ___________\n< ayyy mate >\n -----------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"inspecting-docker-images\"}}>{`Inspecting Docker images`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker inspect whalesay\n[\n    {\n        \"Id\": \"sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4\",\n        \"RepoTags\": [\n            \"docker/whalesay:latest\"\n        ],\n        \"RepoDigests\": [\n            \"docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2015-05-25T22:04:23.303454458Z\",\n        \"Container\": \"5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"DockerVersion\": \"1.6.0\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 247049019,\n        \"VirtualSize\": 247049019,\n        \"GraphDriver\": {\n            \"Name\": \"aufs\",\n            \"Data\": null\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a\",\n                \"sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd\",\n                \"sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d\",\n                \"sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d\",\n                \"sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n            ]\n        }\n    }\n]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"container-lifecycle\"}}>{`Container Lifecycle`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There is a lifecycle associated with starting, stopping, restarting etc.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker run -d --name LifeCycle1 nginx:latest\ndocker attach LifeCycle1\n\n// exec if the container started indirectly\ndocker exec -it LifeCycle1 /bin/bash\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We don't have to attach to the container with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`exec`}</MDXTag>{` command. We can just connect to is just to execute a command - like a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ssh`}</MDXTag>{` prompt!`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"image-and-container-management\"}}>{`Image and Container Management`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`# remove the image\ndocker rmi image-name\n\n# remove all containers\ndocker rm \\`docker ps -a -q\\`\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"redirection---ports-and-volumes\"}}>{`Redirection - Ports and Volumes`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Ports`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ports are exposed in a container so that you can connect via the container IP but must be exposed via the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dockerfile`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can direct the port for a http container to a port on the underlying host.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`docker run -d -P --name:webserver nginx:latest`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`To find all the address redirection, we can write `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`docker port WebServer1 \\$CONTAINERPORT`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`okeeffe_d@dok ~\\$ docker port WebServer1 \\$CONTAINERPORT\n\n443/tcp -> 0.0.0.0:32768\n80/tcp -> 0.0.0.0:32769\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`docker run -d -p 8080:80 --name=webserver nginx:latest`}</MDXTag>{` is also useful for a variety of reasons.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`No we can pass stuff to the host without having to copy it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This means we can mount underlying directories.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`// 15 min mark`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we create a basic file and create a HTML page, we could then run`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\n\n// this will mount the file and mount it to that directory. We can push multiple mounts!\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-dockerfile\"}}>{`The Dockerfile`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Very few times will you start with a generic list of packages for a base image and creating it from nothing.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You'll base on it on things like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`debian, ubuntu`}</MDXTag>{` etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The Dockerfile is an easy to read, easy to write script to build an image following instructions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can name it whatever, but will probably just be stored in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Dockerfile`}</MDXTag>{` anyway.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note, things will cache if they've already been done!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example Dockerfile:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then docker run!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`docker run -it dockerhubid/myapache:latest /bin/bash\n\n> echo MYVALUE\nmy-value\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Exposing or preventing exposing ports`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n\nEXPOSE 80\nEXPOSE 22\n\nCMD [\"/usr/sbin/apache2tl\",\"-D\",\"FOREGROUND\"]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}