{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md","mtime":1580977427652},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJwb2x5bm9taWFsLWV4cHJlc3Npb24ifSwiUG9seW5vbWlhbCBFeHByZXNzaW9uIiksbWR4KCJoMiIseyJpZCI6ImFuc3dlciJ9LCJBbnN3ZXIiKSxtZHgoInAiLG51bGwsIk5vdCB0aGUgYW5zd2VyOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhc2NyaXB0In0pLCJmdW5jdGlvbiBQb2x5bm9taWFsRXhwYW5zaW9uKHN0cikge1xuICAvLyBtdWx0aXBseSB0byBwb2x5bm9taWFsIGV4cHJlc3Npb25zXG4gIGNvbnN0IG11bHRpcGx5ID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCB2YXJpYWJsZUEgPSBhLm1hdGNoKC9bYS16QS1aXVxcXi9pKTtcbiAgICBjb25zdCBbY29lZmZpY2llbnRBLCBleHBvbmVudEFdID0gYS5zcGxpdCgvW2EtekEtWl1cXF4vaSk7XG4gICAgY29uc3QgW2NvZWZmaWNpZW50QiwgZXhwb25lbnRCXSA9IGIuc3BsaXQoL1thLXpBLVpdXFxeL2kpO1xuXG4gICAgbGV0IG5ld0NvZWZmaWNpZW50O1xuICAgIGlmIChjb2VmZmljaWVudEEgIT09ICcnICYmIGNvZWZmaWNpZW50QiAhPT0gJycpIHtcbiAgICAgIG5ld0NvZWZmaWNpZW50ID0gcGFyc2VJbnQoY29lZmZpY2llbnRBKSAqIHBhcnNlSW50KGNvZWZmaWNpZW50Qik7XG4gICAgfSBlbHNlIGlmIChjb2VmZmljaWVudEEgIT09ICcnKSB7XG4gICAgICBuZXdDb2VmZmljaWVudCA9IHBhcnNlSW50KGNvZWZmaWNpZW50QSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NvZWZmaWNpZW50ID0gcGFyc2VJbnQoY29lZmZpY2llbnRCKTtcbiAgICB9XG5cbiAgICBsZXQgbmV3RXhwb25lbnQ7XG4gICAgaWYgKGV4cG9uZW50QSAhPT0gJycgJiYgZXhwb25lbnRCICE9PSAnJykge1xuICAgICAgbmV3RXhwb25lbnQgPSBwYXJzZUludChleHBvbmVudEEpICsgcGFyc2VJbnQoZXhwb25lbnRCKTtcbiAgICB9IGVsc2UgaWYgKGV4cG9uZW50QSAhPT0gJycpIHtcbiAgICAgIG5ld0V4cG9uZW50ID0gcGFyc2VJbnQoZXhwb25lbnRBKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RXhwb25lbnQgPSBwYXJzZUludChleHBvbmVudEIpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtuZXdDb2VmZmljaWVudH0ke3ZhcmlhYmxlQSA/IHZhcmlhYmxlQVswXSA6ICcnfSR7bmV3RXhwb25lbnR9YDtcbiAgfTtcblxuICBjb25zdCBtYXRjaGVzID0gc3RyLm1hdGNoKC9cXCguKj9cXCkvZ2kpO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBbYSwgYl0gPSBtYXRjaGVzLm1hcChlbCA9PiBlbC5yZXBsYWNlKCcoJywgJycpLnJlcGxhY2UoJyknLCAnJykpO1xuICBsZXQgZmlyc3RFbCA9IGEuc3BsaXQoL1srLV0vZ2kpO1xuICBsZXQgc2Vjb25kRWwgPSBiLnNwbGl0KC9bKy1dL2dpKTtcblxuICBsZXQgcmVzQXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RFbC5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2Vjb25kRWwubGVuZ3RoOyBqKyspIHtcbiAgICAgIHJlc0Fyci5wdXNoKG11bHRpcGx5KGZpcnN0RWxbaV0sIHNlY29uZEVsW2pdKSk7XG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5sb2cocmVzQXJyKTtcbiAgLy8gY29kZSBnb2VzIGhlcmVcbiAgcmV0dXJuIHN0cjtcbn1cblxuLy8ga2VlcCB0aGlzIGZ1bmN0aW9uIGNhbGwgaGVyZSBkXG5jb25zb2xlLmxvZyhQb2x5bm9taWFsRXhwYW5zaW9uKHJlYWRsaW5lKCkpKTtcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0FsZ29yaXRobXMvUG9seW5vbWlhbC1FeHByZXNzaW9uLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,uBADA,CAAR,yBADK,CAIL,SAAQ,CACN,KAAM,QADA,CAAR,UAJK,CAOL,+BAPK,CAQL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,8/CAAL,CARK,CAAP,CA+DD,C,sRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"polynomial-expression\"\n    }}>{`Polynomial Expression`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`Not the answer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return \\`\\${newCoefficient}\\${variableA ? variableA[0] : ''}\\${newExponent}\\`;\n  };\n\n  const matches = str.match(/\\\\(.*?\\\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}