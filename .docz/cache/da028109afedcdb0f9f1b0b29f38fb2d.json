{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md","mtime":1562563032058},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJsaW5rZWRpbi1hcGktY2hlYXQtc2hlZXQifSwiTGlua2VkSW4gQVBJIENoZWF0IFNoZWV0IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXBocCJ9KSwiPD9waHBcbiAgICAvLyBDaGFuZ2UgdGhlc2UgYmFjayB0byB5b3VyIHRoaW5nc1xuICAgIGRlZmluZSgnQVBJX0tFWScsICAgICAgJ1lPVVIgQVBJIEtFWScpO1xuICAgIGRlZmluZSgnQVBJX1NFQ1JFVCcsICAgJ1lPVVIgQVBJIFNFQ1JFVCcpO1xuICAgIGRlZmluZSgnUkVESVJFQ1RfVVJJJywgICdodHRwOi8vbG9jYWxob3N0LycpO1xuXG4gICAgLy8gSSd2ZSBjaGFuZ2VkIHRoZSBzY29wZSB0byB3b3JrIGZvciB3aGF0IHdlIGdlbmVyYWxseSBoYXZlIGFjY2VzcyB0b1xuICAgIGRlZmluZSgnU0NPUEUnLCAncl9iYXNpY3Byb2ZpbGUgcl9lbWFpbGFkZHJlc3MnKTtcblxuICAgIC8vIFRoaXMgc3R1ZmYgSSBiZWxpZXZlIGl0IHVzZWQgaWYgeW91IGhhdmUgYSBkYXRhYmFzZVxuICAgIHNlc3Npb25fbmFtZSgnbGlua2VkaW4nKTtcbiAgICBzZXNzaW9uX3N0YXJ0KCk7XG5cbiAgICAvLyBPQXV0aCAyIENvbnRyb2wgRmxvd1xuICAgIGlmIChpc3NldCgkX0dFVFsnZXJyb3InXSkpIHtcbiAgICAgICAgLy8gTGlua2VkSW4gcmV0dXJuZWQgYW4gZXJyb3JcbiAgICAgICAgcHJpbnQgJF9HRVRbJ2Vycm9yJ10gLiAnOiAnIC4gJF9HRVRbJ2Vycm9yX2Rlc2NyaXB0aW9uJ107XG4gICAgICAgIGV4aXQ7XG4gICAgfSBlbHNlaWYgKGlzc2V0KCRfR0VUWydjb2RlJ10pKSB7XG4gICAgICAgIC8vIFVzZXIgYXV0aG9yaXplZCB5b3VyIGFwcGxpY2F0aW9uXG4gICAgICAgIGlmICgkX1NFU1NJT05bJ3N0YXRlJ10gPT0gJF9HRVRbJ3N0YXRlJ10pIHtcbiAgICAgICAgICAgIC8vIEdldCB0b2tlbiBzbyB5b3UgY2FuIG1ha2UgQVBJIGNhbGxzXG4gICAgICAgICAgICBnZXRBY2Nlc3NUb2tlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ1NSRiBhdHRhY2s/IE9yIGRpZCB5b3UgbWl4IHVwIHlvdXIgc3RhdGVzP1xuICAgICAgICAgICAgZXhpdDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoZW1wdHkoJF9TRVNTSU9OWydleHBpcmVzX2F0J10pKSB8fCAodGltZSgpID4gJF9TRVNTSU9OWydleHBpcmVzX2F0J10pKSB7XG4gICAgICAgICAgICAvLyBUb2tlbiBoYXMgZXhwaXJlZCwgY2xlYXIgdGhlIHN0YXRlXG4gICAgICAgICAgICAkX1NFU1NJT04gPSBhcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbXB0eSgkX1NFU1NJT05bJ2FjY2Vzc190b2tlbiddKSkge1xuICAgICAgICAgICAgLy8gU3RhcnQgYXV0aG9yaXphdGlvbiBwcm9jZXNzXG4gICAgICAgICAgICBnZXRBdXRob3JpemF0aW9uQ29kZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gWW91IGhhdmUgYSB2YWxpZCB0b2tlbi4gTm93IGZldGNoIHlvdXIgcHJvZmlsZS5cbiAgICAvLyBJJ3ZlIGp1c3QgcHV0IGluIHNvbWUgZHVtbXkgZmllbGRzIGZvciBub3csIGJ1dCBob3BlZnVsbHkgdGhlc2Ugc2hvdWxkIGRvIGl0LlxuICAgICR1c2VyID0gZmV0Y2goJ0dFVCcsICcvdjEvcGVvcGxlL346KGZpcnN0LW5hbWUsbGFzdC1uYW1lLGVtYWlsLWFkZHJlc3MscGhvbmUtbnVtYmVycyxudW0tY29ubmVjdGlvbnMscGljdHVyZS11cmwsbG9jYXRpb24scG9zaXRpb25zLHN1bW1hcnksc3BlY2lhbHRpZXMsaW5kdXN0cnkpJyk7XG5cbiAgICAvLyBJJ3ZlIGp1c3Qgc2hvdmVkIHRoZSByZXNwb25zZXMgaW50byBzb21lIHZhcmlhYmxlcyBmcm9tIHRoZSAkdXNlciBkaWN0IHJlc3BvbnNlXG5cbiAgICAvLyBTVE9SRSBUSEUgUkVTVUxUUyBJTiBBTiBBUlJBWVxuXG4gICAgJHJlcyA9IGFycmF5KCk7XG5cbiAgICAkcmVzW10gPSAkdXNlci0+Zmlyc3ROYW1lO1xuICAgICRyZXNbXSA9ICR1c2VyLT5sYXN0TmFtZTtcbiAgICAkcmVzW10gPSAkdXNlci0+ZW1haWxBZGRyZXNzO1xuICAgICRyZXNbXSA9ICR1c2VyLT5waG9uZU51bWJlcnM7XG4gICAgJHJlc1tdID0gJHVzZXItPm51bUNvbm5lY3Rpb25zO1xuICAgICRyZXNbXSA9ICR1c2VyLT5waWN0dXJlVXJsO1xuICAgICRyZXNbXSA9ICR1c2VyLT5sb2NhdGlvbi0+Y291bnRyeS0+Y29kZTtcbiAgICAkcmVzW10gPSAkdXNlci0+bG9jYXRpb24tPm5hbWU7XG4gICAgJHJlc1tdID0gJHVzZXItPnN1bW1hcnk7XG4gICAgJHJlc1tdID0gJHVzZXItPnNwZWNpYWx0aWVzO1xuICAgICRyZXNbXSA9ICR1c2VyLT5pbmR1c3RyeTtcbiAgICAkcmVzW10gPSAkdXNlci0+cG9zaXRpb25zO1xuXG4gICAgZWNobyAgbmwyYnIoXCJGaXJzdCBuYW1lOiBcIi4gJHJlc1swXSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiTGFzdCBuYW1lOiBcIi4gJHJlc1sxXSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiRW1haWwgQWRkcmVzczogXCIgLiAkcmVzWzJdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJQaG9uZSBOdW1iZXJzOiBcIi4gJHJlc1szXSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiTnVtIENvbm5lY3Rpb25zOiBcIi4gJHJlc1s0XSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiUGljdHVyZSBVcmw6IFwiIC4gJHJlc1s1XSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiTG9jYXRpb24gQ291bnRyeSBDb2RlOiBcIiAuICRyZXNbNl0uIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiTG9jYXRpb24gTmFtZTogXCIuICRyZXNbN10gLiBcIlxcblwiKTtcbiAgICBlY2hvICBubDJicihcIlN1bW1hcnk6IFwiIC4gJHJlc1s4XSAuIFwiXFxuXCIpO1xuICAgIGVjaG8gIG5sMmJyKFwiU3BlY2lhbHRpZXM6IFwiLiAkcmVzWzldIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJJbmR1c3RyeTogXCIuICRyZXNbMTBdIC4gXCJcXG5cIik7XG4gICAgZWNobyAgbmwyYnIoXCJQb3NpdGlvbnM6IFwiIC4gJHJlc1sxMV0gLiBcIlxcblwiKTtcblxuICAgIGV4aXQ7XG5cbiAgICBmdW5jdGlvbiBnZXRBdXRob3JpemF0aW9uQ29kZSgpIHtcbiAgICAgICAgJHBhcmFtcyA9IGFycmF5KCdyZXNwb25zZV90eXBlJyA9PiAnY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpZW50X2lkJyA9PiBBUElfS0VZLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Njb3BlJyA9PiBTQ09QRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0ZScgPT4gdW5pcWlkKCcnLCB0cnVlKSwgLy8gdW5pcXVlIGxvbmcgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVkaXJlY3RfdXJpJyA9PiBSRURJUkVDVF9VUkksXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAvLyBBdXRoZW50aWNhdGlvbiByZXF1ZXN0XG4gICAgICAgICR1cmwgPSAnaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL3Vhcy9vYXV0aDIvYXV0aG9yaXphdGlvbj8nIC4gaHR0cF9idWlsZF9xdWVyeSgkcGFyYW1zKTtcblxuICAgICAgICAvLyBOZWVkZWQgdG8gaWRlbnRpZnkgcmVxdWVzdCB3aGVuIGl0IHJldHVybnMgdG8gdXNcbiAgICAgICAgJF9TRVNTSU9OWydzdGF0ZSddID0gJHBhcmFtc1snc3RhdGUnXTtcbiAgICAgICAgLy8gUmVkaXJlY3QgdXNlciB0byBhdXRoZW50aWNhdGVcbiAgICAgICAgaGVhZGVyKFwiTG9jYXRpb246ICR1cmxcIik7XG4gICAgICAgIGV4aXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgICAgICRwYXJhbXMgPSBhcnJheSgnZ3JhbnRfdHlwZScgPT4gJ2F1dGhvcml6YXRpb25fY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpZW50X2lkJyA9PiBBUElfS0VZLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWVudF9zZWNyZXQnID0+IEFQSV9TRUNSRVQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29kZScgPT4gJF9HRVRbJ2NvZGUnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZWRpcmVjdF91cmknID0+IFJFRElSRUNUX1VSSSxcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgLy8gQWNjZXNzIFRva2VuIHJlcXVlc3RcbiAgICAgICAgJHVybCA9ICdodHRwczovL3d3dy5saW5rZWRpbi5jb20vdWFzL29hdXRoMi9hY2Nlc3NUb2tlbj8nIC4gaHR0cF9idWlsZF9xdWVyeSgkcGFyYW1zKTtcblxuICAgICAgICAvLyBUZWxsIHN0cmVhbXMgdG8gbWFrZSBhIFBPU1QgcmVxdWVzdFxuICAgICAgICAkY29udGV4dCA9IHN0cmVhbV9jb250ZXh0X2NyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5KCdodHRwJyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5KCdtZXRob2QnID0+ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgIC8vIFJldHJpZXZlIGFjY2VzcyB0b2tlbiBpbmZvcm1hdGlvblxuICAgICAgICAkcmVzcG9uc2UgPSBmaWxlX2dldF9jb250ZW50cygkdXJsLCBmYWxzZSwgJGNvbnRleHQpO1xuICAgICAgICAvLyBOYXRpdmUgUEhQIG9iamVjdCwgcGxlYXNlXG4gICAgICAgICR0b2tlbiA9IGpzb25fZGVjb2RlKCRyZXNwb25zZSk7XG4gICAgICAgIC8vIFN0b3JlIGFjY2VzcyB0b2tlbiBhbmQgZXhwaXJhdGlvbiB0aW1lXG4gICAgICAgICRfU0VTU0lPTlsnYWNjZXNzX3Rva2VuJ10gPSAkdG9rZW4tPmFjY2Vzc190b2tlbjsgLy8gZ3VhcmQgdGhpcyFcbiAgICAgICAgJF9TRVNTSU9OWydleHBpcmVzX2luJ10gICA9ICR0b2tlbi0+ZXhwaXJlc19pbjsgLy8gcmVsYXRpdmUgdGltZSAoaW4gc2Vjb25kcylcbiAgICAgICAgJF9TRVNTSU9OWydleHBpcmVzX2F0J10gICA9IHRpbWUoKSArICRfU0VTU0lPTlsnZXhwaXJlc19pbiddOyAvLyBhYnNvbHV0ZSB0aW1lXG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBmZXRjaCBzaG91bGQgYmUgdGhlIG1haW4gdGhpbmcgdGhhdCB5b3UgcmVhbGx5IG5lZWQgdG8gYWRkIHRvIHdoYXQgeW91IGFscmVhZHkgaGF2ZSFcblxuICAgIGZ1bmN0aW9uIGZldGNoKCRtZXRob2QsICRyZXNvdXJjZSwgJGJvZHkgPSAnJykge1xuICAgICAgICAkcGFyYW1zID0gYXJyYXkoJ29hdXRoMl9hY2Nlc3NfdG9rZW4nID0+ICRfU0VTU0lPTlsnYWNjZXNzX3Rva2VuJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9ybWF0JyA9PiAnanNvbicsXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgIC8vIE5lZWQgdG8gdXNlIEhUVFBTXG4gICAgICAgICR1cmwgPSAnaHR0cHM6Ly9hcGkubGlua2VkaW4uY29tJyAuICRyZXNvdXJjZSAuICc/JyAuIGh0dHBfYnVpbGRfcXVlcnkoJHBhcmFtcyk7XG4gICAgICAgIC8vIFRlbGwgc3RyZWFtcyB0byBtYWtlIGEgKEdFVCwgUE9TVCwgUFVULCBvciBERUxFVEUpIHJlcXVlc3RcbiAgICAgICAgJGNvbnRleHQgPSBzdHJlYW1fY29udGV4dF9jcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheSgnaHR0cCcgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSgnbWV0aG9kJyA9PiAkbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAvLyBIb2N1cyBQb2N1c1xuICAgICAgICAkcmVzcG9uc2UgPSBmaWxlX2dldF9jb250ZW50cygkdXJsLCBmYWxzZSwgJGNvbnRleHQpO1xuICAgICAgICAvLyBOYXRpdmUgUEhQIG9iamVjdCwgcGxlYXNlXG4gICAgICAgIHJldHVybiBqc29uX2RlY29kZSgkcmVzcG9uc2UpO1xuICAgIH1cblxuPz5cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0xpbmtlZEluL2xpbmtlZGluLWFwaS1jaGVhdC1zaGVldC5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,0BADA,CAAR,4BADK,CAIL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,ylLAAL,CAJK,CAAP,CA2JD,C,uRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"linkedin-api-cheat-sheet\"\n    }}>{`LinkedIn API Cheat Sheet`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n    // Change these back to your things\n    define('API_KEY',      'YOUR API KEY');\n    define('API_SECRET',   'YOUR API SECRET');\n    define('REDIRECT_URI',  'http://localhost/');\n\n    // I've changed the scope to work for what we generally have access to\n    define('SCOPE', 'r_basicprofile r_emailaddress');\n\n    // This stuff I believe it used if you have a database\n    session_name('linkedin');\n    session_start();\n\n    // OAuth 2 Control Flow\n    if (isset($_GET['error'])) {\n        // LinkedIn returned an error\n        print $_GET['error'] . ': ' . $_GET['error_description'];\n        exit;\n    } elseif (isset($_GET['code'])) {\n        // User authorized your application\n        if ($_SESSION['state'] == $_GET['state']) {\n            // Get token so you can make API calls\n            getAccessToken();\n        } else {\n            // CSRF attack? Or did you mix up your states?\n            exit;\n        }\n    } else {\n        if ((empty($_SESSION['expires_at'])) || (time() > $_SESSION['expires_at'])) {\n            // Token has expired, clear the state\n            $_SESSION = array();\n        }\n        if (empty($_SESSION['access_token'])) {\n            // Start authorization process\n            getAuthorizationCode();\n        }\n    }\n\n    // You have a valid token. Now fetch your profile.\n    // I've just put in some dummy fields for now, but hopefully these should do it.\n    $user = fetch('GET', '/v1/people/~:(first-name,last-name,email-address,phone-numbers,num-connections,picture-url,location,positions,summary,specialties,industry)');\n\n    // I've just shoved the responses into some variables from the $user dict response\n\n    // STORE THE RESULTS IN AN ARRAY\n\n    $res = array();\n\n    $res[] = $user->firstName;\n    $res[] = $user->lastName;\n    $res[] = $user->emailAddress;\n    $res[] = $user->phoneNumbers;\n    $res[] = $user->numConnections;\n    $res[] = $user->pictureUrl;\n    $res[] = $user->location->country->code;\n    $res[] = $user->location->name;\n    $res[] = $user->summary;\n    $res[] = $user->specialties;\n    $res[] = $user->industry;\n    $res[] = $user->positions;\n\n    echo  nl2br(\"First name: \". $res[0] . \"\\\\n\");\n    echo  nl2br(\"Last name: \". $res[1] . \"\\\\n\");\n    echo  nl2br(\"Email Address: \" . $res[2] . \"\\\\n\");\n    echo  nl2br(\"Phone Numbers: \". $res[3] . \"\\\\n\");\n    echo  nl2br(\"Num Connections: \". $res[4] . \"\\\\n\");\n    echo  nl2br(\"Picture Url: \" . $res[5] . \"\\\\n\");\n    echo  nl2br(\"Location Country Code: \" . $res[6]. \"\\\\n\");\n    echo  nl2br(\"Location Name: \". $res[7] . \"\\\\n\");\n    echo  nl2br(\"Summary: \" . $res[8] . \"\\\\n\");\n    echo  nl2br(\"Specialties: \". $res[9] . \"\\\\n\");\n    echo  nl2br(\"Industry: \". $res[10] . \"\\\\n\");\n    echo  nl2br(\"Positions: \" . $res[11] . \"\\\\n\");\n\n    exit;\n\n    function getAuthorizationCode() {\n        $params = array('response_type' => 'code',\n                        'client_id' => API_KEY,\n                        'scope' => SCOPE,\n                        'state' => uniqid('', true), // unique long string\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n        // Authentication request\n        $url = 'https://www.linkedin.com/uas/oauth2/authorization?' . http_build_query($params);\n\n        // Needed to identify request when it returns to us\n        $_SESSION['state'] = $params['state'];\n        // Redirect user to authenticate\n        header(\"Location: $url\");\n        exit;\n    }\n\n    function getAccessToken() {\n        $params = array('grant_type' => 'authorization_code',\n                        'client_id' => API_KEY,\n                        'client_secret' => API_SECRET,\n                        'code' => $_GET['code'],\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n\n        // Access Token request\n        $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);\n\n        // Tell streams to make a POST request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => 'POST',\n                            )\n                        )\n                    );\n        // Retrieve access token information\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        $token = json_decode($response);\n        // Store access token and expiration time\n        $_SESSION['access_token'] = $token->access_token; // guard this!\n        $_SESSION['expires_in']   = $token->expires_in; // relative time (in seconds)\n        $_SESSION['expires_at']   = time() + $_SESSION['expires_in']; // absolute time\n\n        return true;\n    }\n\n    // this fetch should be the main thing that you really need to add to what you already have!\n\n    function fetch($method, $resource, $body = '') {\n        $params = array('oauth2_access_token' => $_SESSION['access_token'],\n                        'format' => 'json',\n                  );\n\n        // Need to use HTTPS\n        $url = 'https://api.linkedin.com' . $resource . '?' . http_build_query($params);\n        // Tell streams to make a (GET, POST, PUT, or DELETE) request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => $method,\n                            )\n                        )\n                    );\n\n        // Hocus Pocus\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        return json_decode($response);\n    }\n\n?>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}