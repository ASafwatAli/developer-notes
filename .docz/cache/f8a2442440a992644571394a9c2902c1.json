{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md","mtime":1568159731568},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"enhancing-nodejs-performance\"\n    }}>{`Enhancing Nodejs Performance`}</h1>\n    <p>{`We're going to look at two ways to improve performance:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Using Node in 'Cluster' Mode`}</li>\n      <li parentName=\"ol\">{`Using Worker Threads`}</li>\n    </ol>\n    <p>{`The recommended approach would be using `}<inlineCode parentName=\"p\">{`cluster`}</inlineCode>{` mode, whereas worker threads are way more experimental.`}</p>\n    <h2 {...{\n      \"id\": \"test-app\"\n    }}>{`Test App`}</h2>\n    <p>{`We'll use a tiny express server for playing around.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst express = require('express');\nconst app = express();\n\nfunction doWork(duration) {\n  const start = new Date.now();\n  while (Date.now() - start < duration) {\n    // do nothing else\n  }\n}\n\napp.get('/', (req, res) => {\n  doWork(5000);\n  res.send('Hello');\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`This app will be continually updated to show the performance updates.`}</p>\n    <h2 {...{\n      \"id\": \"blocking-the-event-loop\"\n    }}>{`Blocking the Event Loop`}</h2>\n    <p>{`Keep in mind:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[Single Thread]\nRequest => Node Server => Response\n`}</code></pre>\n    <p>{`We start to run into issues here when our request requires a lot of processing power (in the example app, this will be the function `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{`).`}</p>\n    <p>{`Note that with the `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{` function call, we are blocking the entire event loop. `}<strong parentName=\"p\">{`This blocks the entire server from handling other requests.`}</strong></p>\n    <h2 {...{\n      \"id\": \"clustering-in-theory\"\n    }}>{`Clustering in Theory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Cluster Manager\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster manager`}</inlineCode>{` is only responsible for monitoring the health of individual `}<inlineCode parentName=\"p\">{`node server`}</inlineCode>{` instances. It will still be up to the instances to handle the request handling and processing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# RUN node app.js\n└── app.js  ===================> Worker Instance\n    └──  Cluster Manager\n        └── cluster.fork() # forks app.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forking-children-with-cluster\"\n    }}>{`Forking Children With Cluster`}</h2>\n    <p>{`When running the manager, note that Node will first run all the JavaScript code in the file and then startup the `}<inlineCode parentName=\"p\">{`Cluster Manager`}</inlineCode>{`. We want to ensure there is at least one scenario with the forked app running as expected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const express = require('express');\n  const app = express();\n\n  function doWork(duration) {\n    const start = new Date.now();\n    while (Date.now() - start < duration) {\n      // do nothing else\n    }\n  }\n\n  app.get('/', (req, res) => {\n    doWork(5000);\n    res.send('Hello');\n  });\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we add multiple `}<inlineCode parentName=\"p\">{`cluster.fork()`}</inlineCode>{` calls, we can have multiple instances of the server ready to run.`}</p>\n    <h2 {...{\n      \"id\": \"benchmarking-server-performance\"\n    }}>{`Benchmarking Server Performance`}</h2>\n    <p>{`For benchmarking, we will use a program called `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. (Available for MacOS)`}</p>\n    <p>{`Usage: `}<inlineCode parentName=\"p\">{`ab -c 50 -n 500 localhost:3000/fast`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`-c`}</inlineCode>{` is 50 concurrent requests and `}<inlineCode parentName=\"p\">{`-n`}</inlineCode>{` indicates 500 requests.`}</p>\n    <p>{`In the bottom code, we're going show how you can get diminishing returns by adding more children. It is important that we keep a threadpool size of `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` for this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nprocess.env.UV_THREADPOOL_SIZE = 1; // just for benchmarking purposes\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const crypto = require('crypto');\n  const express = require('express');\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n      res.send('Hello');\n    })\n});\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` we will see that we get a `}<inlineCode parentName=\"p\">{`Time taken for tests`}</inlineCode>{` to be ~1000ms.`}</p>\n    <p>{`We can see the timing of this is similar to the example for `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` we had in `}<inlineCode parentName=\"p\">{`Nodejs/Node Interals`}</inlineCode>{` when demoing the `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` module.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{`, we see that one requests took 1s, while the other took 2s. This is similar to what we saw in `}<inlineCode parentName=\"p\">{`Node Internals`}</inlineCode>{`. Given the one thread, we see that the second request needs to wait for the first request to be released from the threadpool.`}</p>\n    <p>{`If we update our code to add another child process using `}<inlineCode parentName=\"p\">{`cluster.fork();`}</inlineCode>{`, we will notice that both the requests now get processed in the two child processes (STILL USING ONE THREAD) and have come back with the expected time ~1000ms.`}</p>\n    <h3 {...{\n      \"id\": \"what-happens-with-too-many-children\"\n    }}>{`What happens with too many children?`}</h3>\n    <p>{`If we forked six processes and ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{` we will see that for some reason, we are now taking 3.5 seconds for each of the 6 requests across the board.`}</p>\n    <p>{`Why is this? It depends on the kind of computer that you have. Note that for the example above, it was run on a dual-core CPU. That's because the CPU is now trying to do a little bit of work on all 6 threads. So although we could now process the children in parallel, we have overallocated our resources.`}</p>\n    <p>{`If we now reduced the forked processes to 2 and still ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{`, we will notice that the slowest request is still around 3.4s, while our fastest request is now ~1s. This is because at a cluster with two children, we know that we can at most handle two requests at the same time. `}</p>\n    <p>{`Essentially, the first two requests are processed in the first second, the next two in the second, the last two in the third - this makes perfect sense. This means that we have ended with a far better performance profile.`}</p>\n    <h2 {...{\n      \"id\": \"pm2-configuration\"\n    }}>{`PM2 Configuration`}</h2>\n    <p>{`PM2 can supercharge our clustering setup. PM2 makes cluster management super easy for Nodejs. It can be installed through `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` globally using `}<inlineCode parentName=\"p\">{`npm i -g pm2`}</inlineCode>{`.`}</p>\n    <p>{`To run the script in `}<inlineCode parentName=\"p\">{`pm2`}</inlineCode>{`, we need to update our app once again.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\n\n// Child - operate as normal server\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n   res.send('Hello');\n })\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`pm2 start index.js -i 0`}</inlineCode>{` will tell pm2 to auto-configure how many instances to setup based on the amount of logical cores (physical * virtual cores) are available.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Call`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 monit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Show pm2 monitor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List all pm2 processes`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 start index.js -i 0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Start index.js with auto-configured instances`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 delete index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Delete all index children`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`pm2`}</inlineCode>{` is generally used in production environments only.`}</p>\n    <h2 {...{\n      \"id\": \"web-worker-threads\"\n    }}>{`Web Worker Threads`}</h2>\n    <p>{`At the time of writing - these were in experimental phase.`}</p>\n    <p>{`In this example, we are using the module `}<inlineCode parentName=\"p\">{`webworker-threads`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Our App\n└── Worker Interface (communicates with Worker)\n    └── postMessage <===> onmessage (Worker)\n    └── onmessage <===> postMessage (Worker)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Worker`}</inlineCode>{` itself is working on its own thread. Remember: a lot of the Nodejs standard lib functions ALREADY work on their own thread. You only really want to use it for your own heavy-duty business logic.`}</p>\n    <p>{`Note: any function passed to the worker cannot access the parent scoped variables. It is also important to use the function keyword on purpose.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst Worker = require('webworker-threads').Worker;\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const worker = new Worker(function() {\n    this.onmessage = function() {\n      // emulate heavy work\n      let counter = 0;\n      whilte (counter < 1e9) {\n        counter++;\n      }\n\n      postMessage(counter);\n    }\n  });\n\n  worker.onmessage = function(counter) {\n    console.log(counter);\n    res.send('' + message.data); // casting as send requires string\n  }\n\n  worker.postMessage();\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`For benchmarking these workers, we can again use `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{` should run with similar results on a dual-core Mac. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}