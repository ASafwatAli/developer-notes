{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Rust-Useful-Tidbits.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Rust-Useful-Tidbits.md","mtime":1566512524883},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJ1c2VmdWwtdGlkYml0cyJ9LCJVc2VmdWwgVGlkYml0cyIpLG1keCgiaDIiLHsiaWQiOiJpbXBvcnRpbmctY3JhdGVzLXZzLXN0ZC1saWIifSwiSW1wb3J0aW5nIGNyYXRlcyB2cyBzdGQgbGliIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1c3QifSksIi8vIGZvciBleHRlbmFsIGRlcGVuZGVuY2llc1xuZXh0ZXJuIGNyYXRlIGNsYXA7XG51c2UgY2xhcDo6QXBwO1xuLy8gZm9yIHN0YW5kYXJkIFJ1c3QgbGlicmFyaWVzXG51c2Ugc3RkOjpmcztcbiIpKSxtZHgoImgyIix7ImlkIjoicmVhZGluZy15YW1sIn0sIlJlYWRpbmcgWUFNTCIpLG1keCgicCIsbnVsbCwiTm90ZSB0aGF0IHRoaXMgaXMgYmVpbmcgZG9uZSBieSB1c2luZyB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNsYXAiKSwiIGNyYXRlIHRoYXQgaXMgdXNlZCBmb3IgQ0xJIHRvb2xzIC0gbWF5IG5lZWQgdG8gdXBkYXRlIGZvciBhcHByb3ByYWl0ZSB1c2Ugd2l0aCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicnVzdC15YW1sIiksIjoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSwiI1ttYWNyb191c2VdXG5leHRlcm4gY3JhdGUgY2xhcDtcbnVzZSBjbGFwOjpBcHA7XG5cbmZuIG1haW4oKSB7XG4gIGxldCB5YW1sID0gbG9hZF95YW1sIShcImNsaS55bWxcIik7XG4gIHByaW50bG4hKFwiezojP31cIiwgeWFtbCk7XG59XG4iKSksbWR4KCJoMiIseyJpZCI6InJlYWRpbmctanNvbiJ9LCJSZWFkaW5nIEpTT04iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSwiI1ttYWNyb191c2VdXG5leHRlcm4gY3JhdGUgc2VyZGVfanNvbjtcblxudXNlIHN0ZDo6cGF0aDo6UGF0aDtcbnVzZSBzdGQ6OmZzOjpGaWxlO1xuXG5mbiBtYWluKCkge1xuICAgIGxldCBqc29uX2ZpbGVfcGF0aCA9IFBhdGg6Om5ldyhcInNyYy90ZXN0Lmpzb25cIik7XG4gICAgbGV0IGpzb25fZmlsZSA9IEZpbGU6Om9wZW4oanNvbl9maWxlX3BhdGgpLmV4cGVjdChcImZpbGUgbm90IGZvdW5kXCIpO1xuICAgIGxldCBqc29uOiBzZXJkZV9qc29uOjpWYWx1ZSA9IHNlcmRlX2pzb246OmZyb21fcmVhZGVyKGpzb25fZmlsZSkuZXhwZWN0KFwiSlNPTiB3YXMgbm90IHdlbGwtZm9ybWF0dGVkXCIpO1xuICAgIHByaW50bG4hKFwiezojP31cIiwganNvbik7XG59XG4iKSksbWR4KCJwIixudWxsLCJPdXRwdXQ6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCJPYmplY3QoXG4gICAge1xuICAgICAgICBcImlkXCI6IFN0cmluZyhcbiAgICAgICAgICAgIFwiMTIzNFwiXG4gICAgICAgICksXG4gICAgICAgIFwib2JqZWN0XCI6IE9iamVjdChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImFycmF5XCI6IEFycmF5KFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cbilcbiIpKSxtZHgoImgyIix7ImlkIjoibG9nZ2luZyJ9LCJMb2dnaW5nIiksbWR4KCJwIixudWxsLCJZb3Ugd2FudCB0byBpbXBsZW1lbnQgdGhlIERlYnVnIHRyYWl0IG9uIHlvdXIgc3RydWN0LiBVc2luZyAjIiwiW2Rlcml2ZShEZWJ1ZyldIiwiIGlzIHRoZSBlYXNpZXN0IHNvbHV0aW9uLiBUaGVuIHlvdSBjYW4gcHJpbnQgaXQgd2l0aCB7Oj99OiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1ydXN0In0pLCIjW2Rlcml2ZShEZWJ1ZyldXG5zdHJ1Y3QgTXlTdHJ1Y3R7XG4gICAgYTogaTMyLFxuICAgIGI6IGkzMlxufVxuXG5mbiBtYWluKCkge1xuICAgIGxldCB4ID0gTXlTdHJ1Y3R7IGE6IDEwLCBiOiAyMCB9O1xuICAgIHByaW50bG4hKFwiezo/fVwiLCB4KTtcbn1cbiIpKSxtZHgoInAiLG51bGwsIkluIHVzZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSwiLy8gYXNzdW1pbmcgbWF0Y2hlcyBpcyBhIHN0cnVjdCBvciBhcnJheVxucHJpbnRsbiEoXCJ7Oj99XCIsIG1hdGNoZXMpOyAvLyBsb2dnaW5nIG91dCBzdHJ1Y3RzIG9yIGFycmF5c1xucHJpbnRsbiEoXCJ7OiM/fVwiLCBtYXRjaGVzKTsgLy8gcHJldHR5IHByaW50XG5wcmludGxuIShcInt9XCIsIG1hdGNoZXMub2NjdXJyZW5jZXNfb2YoXCJ2ZXJib3NlXCIpKTtcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL1J1c3QvUnVzdC1Vc2VmdWwtVGlkYml0cy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Rust-Useful-Tidbits.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,gBADA,CAAR,kBADK,CAIL,SAAQ,CACN,KAAM,6BADA,CAAR,+BAJK,CAOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,oHAAL,CAPK,CAeL,SAAQ,CACN,KAAM,cADA,CAAR,gBAfK,CAkBL,0DAAiD,kBAAY,UAAU,CAAC,GAAvB,SAAjD,oFAAqL,kBAAY,UAAU,CAAC,GAAvB,cAArL,KAlBK,CAmBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,8IAAL,CAnBK,CA8BL,SAAQ,CACN,KAAM,cADA,CAAR,gBA9BK,CAiCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,8XAAL,CAjCK,CAgDL,uBAhDK,CAiDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,uhBAAL,CAjDK,CA4EL,SAAQ,CACN,KAAM,SADA,CAAR,WA5EK,CA+EL,4JA/EK,CAgFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,0JAAL,CAhFK,CA6FL,uBA7FK,CA8FL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,qNAAL,CA9FK,CAAP,CAsGD,C,8QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useful-tidbits\"\n    }}>{`Useful Tidbits`}</h1>\n    <h2 {...{\n      \"id\": \"importing-crates-vs-std-lib\"\n    }}>{`Importing crates vs std lib`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// for extenal dependencies\nextern crate clap;\nuse clap::App;\n// for standard Rust libraries\nuse std::fs;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-yaml\"\n    }}>{`Reading YAML`}</h2>\n    <p>{`Note that this is being done by using the `}<inlineCode parentName=\"p\">{`clap`}</inlineCode>{` crate that is used for CLI tools - may need to update for appropraite use with `}<inlineCode parentName=\"p\">{`rust-yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n  let yaml = load_yaml!(\"cli.yml\");\n  println!(\"{:#?}\", yaml);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-json\"\n    }}>{`Reading JSON`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate serde_json;\n\nuse std::path::Path;\nuse std::fs::File;\n\nfn main() {\n    let json_file_path = Path::new(\"src/test.json\");\n    let json_file = File::open(json_file_path).expect(\"file not found\");\n    let json: serde_json::Value = serde_json::from_reader(json_file).expect(\"JSON was not well-formatted\");\n    println!(\"{:#?}\", json);\n}\n`}</code></pre>\n    <p>{`Output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Object(\n    {\n        \"id\": String(\n            \"1234\"\n        ),\n        \"object\": Object(\n            {\n                \"array\": Array(\n                    [\n                        Number(\n                            1\n                        ),\n                        Number(\n                            2\n                        ),\n                        Number(\n                            3\n                        )\n                    ]\n                )\n            }\n        )\n    }\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"logging\"\n    }}>{`Logging`}</h2>\n    <p>{`You want to implement the Debug trait on your struct. Using #`}{`[derive(Debug)]`}{` is the easiest solution. Then you can print it with {:?}:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Debug)]\nstruct MyStruct{\n    a: i32,\n    b: i32\n}\n\nfn main() {\n    let x = MyStruct{ a: 10, b: 20 };\n    println!(\"{:?}\", x);\n}\n`}</code></pre>\n    <p>{`In use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// assuming matches is a struct or array\nprintln!(\"{:?}\", matches); // logging out structs or arrays\nprintln!(\"{:#?}\", matches); // pretty print\nprintln!(\"{}\", matches.occurrences_of(\"verbose\"));\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}