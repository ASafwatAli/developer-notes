{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","mtime":1562563032086},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,01CAAL,CAPK,EAmEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAnEK,EAsEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+9BAAL,CAtEK,CAAP;AA2HD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA1IMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-arrays\"\n    }}>{`Ruby Arrays`}</h1>\n    <h2 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# map.rb\nclass Map\n    def self.updatesVar(arr)\n        arr.map! {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.doesNotUpdateVar(arr)\n        b = arr.map {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.returnsNewArr(arr)\n        b = arr.map {|x| x + \"!\"}\n        return b\n    end\nend\n\n# map_test.rb\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'arrays'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass MapTest < Minitest::Test\n  def test_map_updates_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.updatesVar(arr)\n  end\n\n  def test_map_does_not_update_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a\",\"b\",\"c\",\"d\"]\n    assert_equal expected, Map.doesNotUpdateVar(arr)\n  end\n\n  def test_map_returns_new_arr\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.returnsNewArr(arr)\n  end\nend\n\n__END__\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-important-functions\"\n    }}>{`Other important functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`a = [\"a\",\"b\",\"c\"]\n# => [\"a\", \"b\", \"c\"]\na.map! {|x| x + \"!\"}\n# => [\"a!\", \"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x + 2 } # mapping as lambda\n# => [3, 4, 5, 6]\na = a.join(', ')\n# => \"a!, b!, c!\"\na = a.split(', ')\n# => [\"a!\", \"b!\", \"c!\"]\na = a.reverse()\n# => [\"c!\", \"b!\", \"a!\"]\nb = a.first() # a[0]\n# => [\"a!\"]\na += b\n# => [\"a!\", \"b!\", \"c!\", \"a!\"]\nfirst, *rest = a\n# first = [\"a!\"], rest = [\"b!\", \"c!\", \"a!\"]\na.take(1)\n# => [\"a!\"]\na.drop(1)\n# => [\"b!\", \"c!\", \"a!\"]\na.select{|x| x != \"a!\"}\n# => [\"b!\", \"c!\"]\na.select{|x| !x.include? \"a\"}\n# => [\"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x > 3 }\n# => [4]\nc = num.reduce(0) {|x,y| x + y}\n# => 10\nnum = [4, 3, 2, 1]\nnum.sort!\n# => [1, 2, 3, 4]\nnum.size()\n# => 4\nnum.push(5)\n# => [1, 2, 3, 4, 5]\nnum.pop()\n# => 5\nnum.unshift(5)\n# => [5, 1, 2, 3, 4]\nnum.shift()\n# => 5\nnum.min()\n# => 1\nnum.max()\n# => 4\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}