{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","mtime":1562563032043},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJ0ZXN0aW5nLXdpdGgtZW56eW1lIn0sIlRlc3Rpbmcgd2l0aCBFbnp5bWUiKSxtZHgoInAiLG51bGwsIlJlYWN0IGNvbXBvbmVudHMgYWxsb3cgdW5pdCB0ZXN0cyBpbiBKUyB0byBiZSBtdWNoIGVhc2llci4iKSxtZHgoInAiLG51bGwsIlRoZXNlIGV4YW1wZXMgcmVxdWlyZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwic2lub25qcyIpLCIsICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJqc2RvbSIpLCIsICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJlbnp5bWUiKSwiLCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwibW9jaGEiKSwiLCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY2hhaSIpKSxtZHgoInAiLG51bGwsIlRoZXNlIGFyZSBleGFtcGxlcyBvZiB0aGUgdGhyZWUgQVBJcyB0aGF0IHlvdSBnZXQgd2l0aCBFbnp5bWUuIFJlbWVtYmVyLCB0aGF0IGEgbWFqb3JpdHkgb2YgdGhlIHRlc3QgY2FzZXMgd2lsbCBuZWVkICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJzaGFsbG93IiksIi4iKSxtZHgoInAiLG51bGwsIlRlc3RpbmcgbGlmZWN5Y2xlIGV2ZW50cywgdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJtb3VudCIpLCIuIiksbWR4KCJwIixudWxsLCJJZiB5b3UgbmVlZCB0byB0ZXN0IGEgY29tcG9uZW50IHRoYXQgZ2V0cyByZW5kZXJlZCBvciByZXR1cm5zIGp1c3QgSFRNTCwgeW91IGNhbiB1c2UgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInJlbmRlciIpLCIuIiksbWR4KCJwIixudWxsLG1keCgiZW0iLHtwYXJlbnROYW1lOiJwIn0sIkZpbGUgc3RydWN0dXJlIikpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sInRlc3Rcbi0gcmVwb3NpdG9yeV90ZXN0LnNwZWMuanNcbi0gZ2l0aHViX3dpZGdldC5zcGVjLmpzXG4tIHVzZXJfaW1hZ2Uuc3BlYy5qcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJzY3JpcHRzXG4tIG1vY2hhX3J1bm5lci5qcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJwYWNrYWdlLmpzb24iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwic3JjXG4tIGNvbXBvbmVudHNcbi0gcmVwb3NpdG9yaWVzLmpzIikpLG1keCgiaDIiLHsiaWQiOiJlbnotMS10ZXN0aW5nLXdpdGgtc2hhbGxvdyJ9LCJFTlotMTogVGVzdGluZyB3aXRoIFwiU2hhbGxvd1wiIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi8vIHBhY2thZ2UuanNvblxuLi4uXG5cbk5vdGU6IHRoZSAtLWRlYnVnIGZsYWcgYWxsb3dzIHVzIHRvIHVzZSB0aGUgZGVidWdnZXIgc3RhdGVtZW50cyBhbmQgaW50ZXJhY3Qgd2l0aCB0aGUgZGVidWdnZXIgdGhyb3VnaCB0aGUgY29tbWFuZCBsaW5lXG5cbk5vdGU6IFRoZXJlIGlzIGFsc28gYSBgbm9kZS1pbnRlcmNlcHRgIHRoYXQgYWxsb3dzIHlvdSB0byB0YXAgaW50byBDaHJvbWUgRGV2IHRvb2xzXG5cblwic2NyaXB0c1wiOiB7XG4gICAgLi4uXG4gICAgXCJ0ZXN0XCI6IFwibW9jaGEgLS1kZWJ1ZyAtLXJlcXVpcmUgc2NyaXB0cy9tb2NoYV9ydW5uZXIuanMgLi90ZXN0LyoqLyouc3BlYy5qc1wiLFxuICAgIC4uLlxufVxuLi4uXG4iKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi8vIHJlcG9zaXR5X3Rlc3QuanNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcblxuLy8gaW1wb3J0IGEgY29tcG9uZW50XG5pbXBvcnQgUmVwb3NpdG9yaWVzIGZyb20gJy4uL3NyYy9jb21wb25lbnRzL3JlcG9zaXRvcmllcyc7XG5cbmRlc2NyaWJlKCc8UmVwb3NpdG9yaWVzIC8+JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIG9uZSBudW1iZXIgb2YgcmVwb3Mgc3BlY2lmaWVkIGJ5IHRvcCBwcm9wJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8UmVwb3NpdG9yaWVzIHJlcG9zaXRvcmllcz17cmVwb3N9IHRvcD17Mn0gLz4pO1xuICAgICAgICBleHBlY3Qod3JhcHBlci5maW5kKFJlcG9zaXRvcnkpKS50by5oYXZlLmxlbmd0aCgyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzcGxheSByZXBvcyBvcmRlcmVkIGJ5IHN0YXJnYXplcnMnICgpID0+IHtcbiAgICAgICAgY29uc3Qgc29ydGVkVGVzdERhdGEgPSByZXBvcy5zb3J0KChhLCBiKSA9PiBiLnN0YXJnYXplcnNfY291bnQgLSBhLnN0YXJnYXplcnNfY291bnQpO1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8UmVwb3NpdG9yaWVzIHJlcG9zaXRvcmllcz17cmVwb3N9IHRvcD17Mn0gLz4pO1xuXG4gICAgICAgIC8vIGZpbmQgZWFjaCBjaGlsZCA8UmVwb3NpdG9yeSAvPiB3aXRoIDxSZXBvc2l0b3JpZXMgLz5cbiAgICAgICAgY29uc3QgdG9wUmVwb3MgPSB3cmFwcGVyLmZpbmQoUmVwb3NpdG9yeSk7XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggPFJlcG9zaXRvcnkgLz4gZm91bmQsIHRlc3Qgb3V0IGNvcnJlY3QgdmFsdWVzXG4gICAgICAgIHRvcFJlcG9zLmZvckVhY2goKHJlcG8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBleHBlY3QocmVwby5wcm9wKCd1cmwnKSkudG8uZXF1YWwoc29ydGVkVGVzdERhdGFbaW5kZXgudXJsXSk7XG4gICAgICAgICAgICBleHBlY3QocmVwby5wcm9wKCduYW1lJykpLnRvLmVxdWFsKHNvcnRlZFRlc3REYXRhW2luZGV4XS5uYW1lKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXBvLnByb3AoJ2xhbmd1YWdlJykpLnRvLmVxdWFsKHNvcnRlZFRlc3REYXRhW2luZGV4XS5sYW5ndWFnZSk7XG4gICAgICAgICAgICBleHBlY3QocmVwby5wcm9wKCdzdGFycycpKS50by5lcXVhbChzb3J0ZWRUZXN0RGF0YVtpbmRleF0uc3RhcnMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIikpLG1keCgiaDIiLHsiaWQiOiJlbnotMi10ZXN0aW5nLXdpdGgtbW91bnQifSwiRU5aLTI6IFRlc3Rpbmcgd2l0aCBcIk1vdW50XCIiKSxtZHgoInAiLG51bGwsIlRoaXMgcmVxdWlyZXMgdXNlIG9mICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJqcy1kb20iKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi8vIG1vY2hhX3J1bm5lci5qc1xuXG52YXIganNkb20gPSByZXF1aXJlKCdqc2RvbScpLmpzZG9tO1xuXG52YXIgZXhwb3NlZFByb3BlcnRpZXMgPSBbJ3dpbmRvdycsICduYXZpZ2F0b3InLCAnZG9jdW1lbnQnXTtcblxuZ2xvYmFsLmRvY3VtZW50ID0ganNkb20oJycpO1xuZ2xvYmFsLndpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuT2JqZWN0LmtleXMoZG9jdW1lbnQuZGVmYXVsdFZpZXcpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxbcHJvcGVydHldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBleHBvc2VkUHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcbiAgICAgICAgZ2xvYmFsW3Byb3BlcnR5XSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3W3Byb3BlcnR5XTtcbiAgICB9XG59KTtcblxuZ2xvYmFsLm5hdmlnYXRvciA9IHtcbiAgICB1c2VyQWdlbnQ6ICdub2RlLmpzJ1xufTtcblxuZG9jdW1lbnRSZWYgPSBkb2N1bWVudDtcblxucmVxdWlyZSgnYmFiZWwtY29yZS9yZWdpc3RlcicpO1xuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCIvLyBnaXRodWJfd2lkZ2V0LnNwZWMuanNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG4vLyBqcyBkb20gaGFzIGFsc28gYmVlbiB1c2VkIGFzIGFuIGV4YW1wbGUgZm9yIHRoZXNlIGhlYWRsZXNzIGJyb3dzZXIgdGVzdGluZ1xuXG4vLyBpbXBvcnQgYSBjb21wb25lbnRcbmltcG9ydCBHaXRodWJXaWRnZXQgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvR2l0aHViV2lkZ2V0JztcbmltcG9ydCBVc2VyRGV0YWlscyBmcm9tIC4uLlxuLy8gaW1wb3J0IGFsbCB0aGUgb3RoZXIgY29tcG9uZW50c1xuLy8gZm91bmQgaW4gdGhlIGV4cGVjdCBiZWxvd1xuLi4uXG5cbmRlc2NyaWJlKCc8R2l0aHViV2lkZ2V0IC8+JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBzdWItY29tcG9uZW50cycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxHaXRodWJXaWRnZXQgdXNlcm5hbWU9XCJ0ZXN0XCIgLz4pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuY29udGFpbnNBbGxNYXRjaGluZ0VsZW1lbnRzKFtcbiAgICAgICAgICAgIDxVc2VyRGV0YWlscyAvPixcbiAgICAgICAgICAgIDxVc2VyU3RhdHMgLz4sXG4gICAgICAgICAgICA8aHIgLz4sXG4gICAgICAgICAgICA8UmVwb3NpdG9yaWVzIC8+LFxuICAgICAgICAgICAgPEZvb3RlciAvPlxuICAgICAgICBdKSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRpc3BsYXkgcmVwb3Mgb3JkZXJlZCBieSBzdGFyZ2F6ZXJzJyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNvcnRlZFRlc3REYXRhID0gcmVwb3Muc29ydCgoYSwgYikgPT4gYi5zdGFyZ2F6ZXJzX2NvdW50IC0gYS5zdGFyZ2F6ZXJzX2NvdW50KTtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPFJlcG9zaXRvcmllcyByZXBvc2l0b3JpZXM9e3JlcG9zfSB0b3A9ezJ9IC8+KTtcblxuICAgICAgICAvLyBmaW5kIGVhY2ggY2hpbGQgPFJlcG9zaXRvcnkgLz4gd2l0aCA8UmVwb3NpdG9yaWVzIC8+XG4gICAgICAgIGNvbnN0IHRvcFJlcG9zID0gd3JhcHBlci5maW5kKFJlcG9zaXRvcnkpO1xuXG4gICAgICAgIC8vIGZvciBlYWNoIDxSZXBvc2l0b3J5IC8+IGZvdW5kLCB0ZXN0IG91dCBjb3JyZWN0IHZhbHVlc1xuICAgICAgICB0b3BSZXBvcy5mb3JFYWNoKChyZXBvLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHJlcG8ucHJvcCgndXJsJykpLnRvLmVxdWFsKHNvcnRlZFRlc3REYXRhW2luZGV4LnVybF0pO1xuICAgICAgICAgICAgZXhwZWN0KHJlcG8ucHJvcCgnbmFtZScpKS50by5lcXVhbChzb3J0ZWRUZXN0RGF0YVtpbmRleF0ubmFtZSk7XG4gICAgICAgICAgICBleHBlY3QocmVwby5wcm9wKCdsYW5ndWFnZScpKS50by5lcXVhbChzb3J0ZWRUZXN0RGF0YVtpbmRleF0ubGFuZ3VhZ2UpO1xuICAgICAgICAgICAgZXhwZWN0KHJlcG8ucHJvcCgnc3RhcnMnKSkudG8uZXF1YWwoc29ydGVkVGVzdERhdGFbaW5kZXhdLnN0YXJzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGwgY29tcG9uZW50RGlkTW91bnQgb25jZScgKCkgPT4ge1xuICAgICAgICAvLyBjcmVhdGUgYSBzcHlcbiAgICAgICAgc2lub24uc3B5KEdpdGh1YldpZGdldC5wcm90b3R5cGUsICdjb21wb25lbnREaWRNb3VudCcpO1xuICAgICAgICBtb3VudCg8R2l0aHViV2lkZ2V0IHVzZXJuYW1lID1cInRlc3QgLz5cIik7XG4gICAgICAgIGV4cGVjdChHaXRodWJXaWRnZXQucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50LmNhbGxlZE9uY2UpLnRvLmVxdWFsKHRydWUpO1xuICAgIH0pO1xufSk7XG4iKSksbWR4KCJoMiIseyJpZCI6ImVuei0zLXRlc3Rpbmctd2l0aC1yZW5kZXIifSwiRU5aLTM6IFRlc3Rpbmcgd2l0aCBcIlJlbmRlclwiIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi8vIHVzZXJfaW1hZ2Uuc3BlYy5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5cbi8vIENvbXBvbmVudFxuaW1wb3J0IFVzZXJJbWFnZSBmcm9tICcuL1VzZXJJbWFnZSc7XG5cbmRlc2NyaWJlKCc8VXNlckltYWdlIC8+JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGF2ZSBhIDxkaXYgLz4gZWxlbWVudCB3aXRoIC5naC13aWRnZXQtcGhvdG8gY2xhc3MnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSByZW5kZXIoPFVzZXJJbWFnZSAvPik7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2RpdicpLmF0dHIoJ2NsYXNzJykpLnRvLmVxdWFsKCdnaC13aWRnZXQtcGhvdG8nKTtcbiAgICB9KTtcbn0pO1xuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvSmF2YVNjcmlwdC9Fbnp5bWUtVGVzdGluZy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,qBADA,CAAR,uBADK,CAIL,0EAJK,CAKL,sCAA6B,kBAAY,UAAU,CAAC,GAAvB,YAA7B,MAAsF,kBAAY,UAAU,CAAC,GAAvB,UAAtF,MAA6I,kBAAY,UAAU,CAAC,GAAvB,WAA7I,MAAqM,kBAAY,UAAU,CAAC,GAAvB,UAArM,MAA4P,kBAAY,UAAU,CAAC,GAAvB,SAA5P,CALK,CAML,qIAA4H,kBAAY,UAAU,CAAC,GAAvB,YAA5H,KANK,CAOL,8CAAqC,kBAAY,UAAU,CAAC,GAAvB,UAArC,KAPK,CAQL,qGAA4F,kBAAY,UAAU,CAAC,GAAvB,WAA5F,KARK,CASL,aAAG,UAAI,UAAU,CAAC,GAAf,mBAAH,CATK,CAUL,cACE,UAAI,UAAU,CAAC,IAAf,mFADF,CAKE,UAAI,UAAU,CAAC,IAAf,+BALF,CAOE,UAAI,UAAU,CAAC,IAAf,iBAPF,CAQE,UAAI,UAAU,CAAC,IAAf,yCARF,CAVK,CAsBL,SAAQ,CACN,KAAM,4BADA,CAAR,mCAtBK,CAyBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,iXAAL,CAzBK,CAuCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,8wCAAL,CAvCK,CAsEL,SAAQ,CACN,KAAM,0BADA,CAAR,iCAtEK,CAyEL,qCAA4B,kBAAY,UAAU,CAAC,GAAvB,WAA5B,CAzEK,CA0EL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,6hBAAL,CA1EK,CAiGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,w4DAAL,CAjGK,CAqJL,SAAQ,CACN,KAAM,2BADA,CAAR,kCArJK,CAwJL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,ubAAL,CAxJK,CAAP,CAwKD,C,+QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"testing-with-enzyme\"\n    }}>{`Testing with Enzyme`}</h1>\n    <p>{`React components allow unit tests in JS to be much easier.`}</p>\n    <p>{`These exampes require `}<inlineCode parentName=\"p\">{`sinonjs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`enzyme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mocha`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chai`}</inlineCode></p>\n    <p>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<inlineCode parentName=\"p\">{`shallow`}</inlineCode>{`.`}</p>\n    <p>{`Testing lifecycle events, use `}<inlineCode parentName=\"p\">{`mount`}</inlineCode>{`.`}</p>\n    <p>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`File structure`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</li>\n      <li parentName=\"ul\">{`scripts\n- mocha_runner.js`}</li>\n      <li parentName=\"ul\">{`package.json`}</li>\n      <li parentName=\"ul\">{`src\n- components\n- repositories.js`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"enz-1-testing-with-shallow\"\n    }}>{`ENZ-1: Testing with \"Shallow\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-2-testing-with-mount\"\n    }}>{`ENZ-2: Testing with \"Mount\"`}</h2>\n    <p>{`This requires use of `}<inlineCode parentName=\"p\">{`js-dom`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-3-testing-with-render\"\n    }}>{`ENZ-3: Testing with \"Render\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}