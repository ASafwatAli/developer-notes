{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/okeeffe_d/Business/Documentation/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/okeeffe_d/Business/Documentation/manual/Amplify/Graphql-Setup.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Amplify/Graphql-Setup.md","mtime":1548209344241},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/okeeffe_d/Business/Documentation/manual/Amplify/Graphql-Setup.md\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"graphql-setup\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"GraphQL Setup\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"links\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"Links\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2\"), React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"to-get-it-running\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"To get it running\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"amplify init\\namplify add api\\n# > GraphQL\\n# > name\\n# > API Key\\n# > No\\n# > Yes\\n# Select single or one-to-many\\n# y\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Not that you can preset a schema to have used for Amplify.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Example, create a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"schema.graphql\"), \" file with following and pass the path during setup:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"type Pet @model {\\n  id: ID!\\n  name: String!\\n  description: String\\n  hello: String\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"example-schema\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Example schema\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"type Pet @model {\\n  id: ID!\\n  name: String!\\n  description: String\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"example-mutation\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Example mutation\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"import API, { graphqlOperation } from '@aws-amplify/api';\\n\\n// define mutation\\nconst createPet = `\\n  mutation($name: String!, $description: String) {\\n    createPet(input: {\\n      name: $name\\n      description: $description\\n  }) {\\n    id\\n    name\\n    description\\n  }\\n}`;\\n// execute a mutation\\nstate = { name: '' };\\nonChangeText = (value) => {\\n  this.setState({ name: value });\\n};\\ncreatePet = async () => {\\n  const pet = this.state;\\n  await API.graphql(graphqlOperation(createPet, pet));\\n};\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"example-query\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Example query\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"// define query\\nconst listPets = `\\n  query {\\n    listPets {\\n      items {\\n        id\\n        name\\n        description\\n      }\\n    }\\n }\\n`\\n// execute query\\ngetPets = () => {\\n  const data = await API.graphql(graphqlOperation(listPets))\\n  // do something with data\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"autogenerating-code-for-the-schema\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Autogenerating code for the schema\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"amplify codegen add\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"1-many-many-to-many-relationship-schemas\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"1-many, many-to-many relationship schemas\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"type Post @model {\\n  id: ID!\\n  title: String!\\n  editors: [PostEditor] @connection(name: \\\"PostEditors\\\")\\n}\\n# Create a join model and disable queries as you don't need them\\n# and can query through Post.editors and User.posts\\ntype PostEditor @model(queries: null) {\\n  id: ID!\\n  post: Post! @connection(name: \\\"PostEditors\\\")\\n  editor: User! @connection(name: \\\"UserEditors\\\")\\n}\\ntype User @model {\\n  id: ID!\\n  username: String!\\n  posts: [PostEditor] @connection(name: \\\"UserEditors\\\")\\n}\\n\")));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/okeeffe_d/Business/Documentation/manual/Amplify/Graphql-Setup.md\");\n  leaveModule(module);\n})();\n\n;\nMDXContent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MDXContent\"\n};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Amplify/Graphql-Setup.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"graphql-setup\"}}>{`GraphQL Setup`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"links\"}}>{`Links`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2\"}}>{`https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2`}</MDXTag>\n<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\"}}>{`https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"to-get-it-running\"}}>{`To get it running`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-bash\"}}>{`amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Not that you can preset a schema to have used for Amplify.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example, create a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema.graphql`}</MDXTag>{` file with following and pass the path during setup:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"example-schema\"}}>{`Example schema`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"example-mutation\"}}>{`Example mutation`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = \\`\n  mutation(\\$name: String!, \\$description: String) {\n    createPet(input: {\n      name: \\$name\n      description: \\$description\n  }) {\n    id\n    name\n    description\n  }\n}\\`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"example-query\"}}>{`Example query`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// define query\nconst listPets = \\`\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n\\`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"autogenerating-code-for-the-schema\"}}>{`Autogenerating code for the schema`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-bash\"}}>{`amplify codegen add\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"1-many-many-to-many-relationship-schemas\"}}>{`1-many, many-to-many relationship schemas`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: \"PostEditors\")\n}\n# Create a join model and disable queries as you don't need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: \"PostEditors\")\n  editor: User! @connection(name: \"UserEditors\")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: \"UserEditors\")\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}