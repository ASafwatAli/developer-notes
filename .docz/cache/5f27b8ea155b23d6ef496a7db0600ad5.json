{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","mtime":1551345969376},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoicnVieS1hcnJheXMifSwiUnVieSBBcnJheXMiKSxtZHgoImgyIix7ImlkIjoibWFwIn0sIk1hcCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1ydWJ5In0pLCIjIG1hcC5yYlxuY2xhc3MgTWFwXG4gICAgZGVmIHNlbGYudXBkYXRlc1ZhcihhcnIpXG4gICAgICAgIGFyci5tYXAhIHt8eHwgeCArIFwiIVwifVxuICAgICAgICByZXR1cm4gYXJyXG4gICAgZW5kXG5cbiAgICBkZWYgc2VsZi5kb2VzTm90VXBkYXRlVmFyKGFycilcbiAgICAgICAgYiA9IGFyci5tYXAge3x4fCB4ICsgXCIhXCJ9XG4gICAgICAgIHJldHVybiBhcnJcbiAgICBlbmRcblxuICAgIGRlZiBzZWxmLnJldHVybnNOZXdBcnIoYXJyKVxuICAgICAgICBiID0gYXJyLm1hcCB7fHh8IHggKyBcIiFcIn1cbiAgICAgICAgcmV0dXJuIGJcbiAgICBlbmRcbmVuZFxuXG4jIG1hcF90ZXN0LnJiXG5iZWdpblxuICBnZW0gJ21pbml0ZXN0JywgJz49IDUuMC4wJ1xuICByZXF1aXJlICdtaW5pdGVzdC9hdXRvcnVuJ1xuICByZXF1aXJlX3JlbGF0aXZlICdhcnJheXMnXG5yZXNjdWUgR2VtOjpMb2FkRXJyb3IgPT4gZVxuICBwdXRzIFwiXFxuTWlzc2luZyBEZXBlbmRlbmN5OlxcbiN7ZS5iYWNrdHJhY2UuZmlyc3R9ICN7ZS5tZXNzYWdlfVwiXG4gIHB1dHMgJ01pbml0ZXN0IDUuMCBnZW0gbXVzdCBiZSBpbnN0YWxsZWQgZm9yIHRoZSBSdWJ5IHRyYWNrLidcbnJlc2N1ZSBMb2FkRXJyb3IgPT4gZVxuICBwdXRzIFwiXFxuRXJyb3I6XFxuI3tlLmJhY2t0cmFjZS5maXJzdH0gI3tlLm1lc3NhZ2V9XCJcbiAgcHV0cyBEQVRBLnJlYWRcbiAgZXhpdCAxXG5lbmRcblxuIyBDb21tb24gdGVzdCBkYXRhIHZlcnNpb246IDEuMS4wIGJlM2FlNjZcbmNsYXNzIE1hcFRlc3QgPCBNaW5pdGVzdDo6VGVzdFxuICBkZWYgdGVzdF9tYXBfdXBkYXRlc192YXJcbiAgICAjIHNraXBcbiAgICBhcnIgPSBbXCJhXCIsXCJiXCIsXCJjXCIsXCJkXCJdXG4gICAgZXhwZWN0ZWQgPSBbXCJhIVwiLFwiYiFcIixcImMhXCIsXCJkIVwiXVxuICAgIGFzc2VydF9lcXVhbCBleHBlY3RlZCwgTWFwLnVwZGF0ZXNWYXIoYXJyKVxuICBlbmRcblxuICBkZWYgdGVzdF9tYXBfZG9lc19ub3RfdXBkYXRlX3ZhclxuICAgICMgc2tpcFxuICAgIGFyciA9IFtcImFcIixcImJcIixcImNcIixcImRcIl1cbiAgICBleHBlY3RlZCA9IFtcImFcIixcImJcIixcImNcIixcImRcIl1cbiAgICBhc3NlcnRfZXF1YWwgZXhwZWN0ZWQsIE1hcC5kb2VzTm90VXBkYXRlVmFyKGFycilcbiAgZW5kXG5cbiAgZGVmIHRlc3RfbWFwX3JldHVybnNfbmV3X2FyclxuICAgICMgc2tpcFxuICAgIGFyciA9IFtcImFcIixcImJcIixcImNcIixcImRcIl1cbiAgICBleHBlY3RlZCA9IFtcImEhXCIsXCJiIVwiLFwiYyFcIixcImQhXCJdXG4gICAgYXNzZXJ0X2VxdWFsIGV4cGVjdGVkLCBNYXAucmV0dXJuc05ld0FycihhcnIpXG4gIGVuZFxuZW5kXG5cbl9fRU5EX19cbiIpKSxtZHgoImgyIix7ImlkIjoib3RoZXItaW1wb3J0YW50LWZ1bmN0aW9ucyJ9LCJPdGhlciBpbXBvcnRhbnQgZnVuY3Rpb25zIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksImEgPSBbXCJhXCIsXCJiXCIsXCJjXCJdXG4jID0+IFtcImFcIiwgXCJiXCIsIFwiY1wiXVxuYS5tYXAhIHt8eHwgeCArIFwiIVwifVxuIyA9PiBbXCJhIVwiLCBcImIhXCIsIFwiYyFcIl1cbm51bSA9IFsxLCAyLCAzLCA0XVxubnVtLm1hcCEgJi0+ICh4KSB7IHggKyAyIH0gIyBtYXBwaW5nIGFzIGxhbWJkYVxuIyA9PiBbMywgNCwgNSwgNl1cbmEgPSBhLmpvaW4oJywgJylcbiMgPT4gXCJhISwgYiEsIGMhXCJcbmEgPSBhLnNwbGl0KCcsICcpXG4jID0+IFtcImEhXCIsIFwiYiFcIiwgXCJjIVwiXVxuYSA9IGEucmV2ZXJzZSgpXG4jID0+IFtcImMhXCIsIFwiYiFcIiwgXCJhIVwiXVxuYiA9IGEuZmlyc3QoKSAjIGFbMF1cbiMgPT4gW1wiYSFcIl1cbmEgKz0gYlxuIyA9PiBbXCJhIVwiLCBcImIhXCIsIFwiYyFcIiwgXCJhIVwiXVxuZmlyc3QsICpyZXN0ID0gYVxuIyBmaXJzdCA9IFtcImEhXCJdLCByZXN0ID0gW1wiYiFcIiwgXCJjIVwiLCBcImEhXCJdXG5hLnRha2UoMSlcbiMgPT4gW1wiYSFcIl1cbmEuZHJvcCgxKVxuIyA9PiBbXCJiIVwiLCBcImMhXCIsIFwiYSFcIl1cbmEuc2VsZWN0e3x4fCB4ICE9IFwiYSFcIn1cbiMgPT4gW1wiYiFcIiwgXCJjIVwiXVxuYS5zZWxlY3R7fHh8ICF4LmluY2x1ZGU/IFwiYVwifVxuIyA9PiBbXCJiIVwiLCBcImMhXCJdXG5udW0gPSBbMSwgMiwgMywgNF1cbm51bS5tYXAhICYtPiAoeCkgeyB4ID4gMyB9XG4jID0+IFs0XVxuYyA9IG51bS5yZWR1Y2UoMCkge3x4LHl8IHggKyB5fVxuIyA9PiAxMFxubnVtID0gWzQsIDMsIDIsIDFdXG5udW0uc29ydCFcbiMgPT4gWzEsIDIsIDMsIDRdXG5udW0uc2l6ZSgpXG4jID0+IDRcbm51bS5wdXNoKDUpXG4jID0+IFsxLCAyLCAzLCA0LCA1XVxubnVtLnBvcCgpXG4jID0+IDVcbm51bS51bnNoaWZ0KDUpXG4jID0+IFs1LCAxLCAyLCAzLCA0XVxubnVtLnNoaWZ0KClcbiMgPT4gNVxubnVtLm1pbigpXG4jID0+IDFcbm51bS5tYXgoKVxuIyA9PiA0XG4iKSkpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9SdWJ5L1J1YnktQXJyYXlzLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,aADA,CAAR,eADK,CAIL,SAAQ,CACN,KAAM,KADA,CAAR,OAJK,CAOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,s1CAAL,CAPK,CAmEL,SAAQ,CACN,KAAM,2BADA,CAAR,6BAnEK,CAsEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,29BAAL,CAtEK,CAAP,CA2HD,C,sQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-arrays\"\n    }}>{`Ruby Arrays`}</h1>\n    <h2 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# map.rb\nclass Map\n    def self.updatesVar(arr)\n        arr.map! {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.doesNotUpdateVar(arr)\n        b = arr.map {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.returnsNewArr(arr)\n        b = arr.map {|x| x + \"!\"}\n        return b\n    end\nend\n\n# map_test.rb\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'arrays'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass MapTest < Minitest::Test\n  def test_map_updates_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.updatesVar(arr)\n  end\n\n  def test_map_does_not_update_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a\",\"b\",\"c\",\"d\"]\n    assert_equal expected, Map.doesNotUpdateVar(arr)\n  end\n\n  def test_map_returns_new_arr\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.returnsNewArr(arr)\n  end\nend\n\n__END__\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-important-functions\"\n    }}>{`Other important functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`a = [\"a\",\"b\",\"c\"]\n# => [\"a\", \"b\", \"c\"]\na.map! {|x| x + \"!\"}\n# => [\"a!\", \"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x + 2 } # mapping as lambda\n# => [3, 4, 5, 6]\na = a.join(', ')\n# => \"a!, b!, c!\"\na = a.split(', ')\n# => [\"a!\", \"b!\", \"c!\"]\na = a.reverse()\n# => [\"c!\", \"b!\", \"a!\"]\nb = a.first() # a[0]\n# => [\"a!\"]\na += b\n# => [\"a!\", \"b!\", \"c!\", \"a!\"]\nfirst, *rest = a\n# first = [\"a!\"], rest = [\"b!\", \"c!\", \"a!\"]\na.take(1)\n# => [\"a!\"]\na.drop(1)\n# => [\"b!\", \"c!\", \"a!\"]\na.select{|x| x != \"a!\"}\n# => [\"b!\", \"c!\"]\na.select{|x| !x.include? \"a\"}\n# => [\"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x > 3 }\n# => [4]\nc = num.reduce(0) {|x,y| x + y}\n# => 10\nnum = [4, 3, 2, 1]\nnum.sort!\n# => [1, 2, 3, 4]\nnum.size()\n# => 4\nnum.push(5)\n# => [1, 2, 3, 4, 5]\nnum.pop()\n# => 5\nnum.unshift(5)\n# => [5, 1, 2, 3, 4]\nnum.shift()\n# => 5\nnum.min()\n# => 1\nnum.max()\n# => 4\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}