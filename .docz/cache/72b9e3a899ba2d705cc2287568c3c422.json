{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/COMP3520-OS/Pthread.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/COMP3520-OS/Pthread.md","mtime":1548209344282},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"pthreads\"}},\"Pthreads\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"pthreads-api\"}},\"Pthreads API\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Defined in the ANSI/IEEE Posix 1003.1 - 1995 standard\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Subroutines comprise the Pthreads API can be informally grouped into three major classes:\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Thread management\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Mutexes \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Condition variables\")),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"1-thread-management\"}},\"1: Thread Management\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"first class of functions work directly on threads - creating, detatching, joining etc \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"also include funcs to set/query thread attributes (joinable, scheduling etc)\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Create Threads\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"initially, single default thread - others must be explicitly created\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"pthread_create(thread, attr, startRoutine, arg)\\n// thread - unique identifier for the new thread (pthread_t)\\n// attr - attr object used to set thread attributes (pthread_attr) - you can specify a thread attributes object, or NULL for the default values\\n// startRoutine - C routine that the thread will execute \\n// arg - single arg that may be passed to startRoutine - it must be passed by reference (pointer to struct) and NULL may be used if no arg is to be passed\\n\\n/*\\n    If successful, the pthread_create() function shall return zero; otherwise, an error number shall be returned to indicate the error\\n */\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Thread Attributes\")),React.createElement(MDXTag,{name:\"p\",components:components},\"By default, a thread is created with certain attributes.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"pthread_attr_init(attr) and pthread_attr_destroy(attr) are used to initialize/destroy the thread attribute object.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Other routines are then used to query/set specific attributes in the thread attribute object.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Terminating Thread\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Thread makes call to the pthread_exit() subroutine \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Thread is cancelled by another thread via pthread_cancel() routine \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Entire process is terminated due to call to exit subroutine \")),React.createElement(MDXTag,{name:\"p\",components:components},\"Routine: \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_exit(status)\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"used to explicitly exit the thread\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"programmer may optionalyl specify a termination status, which is stored as a void pointer for any thread that may join the calling thread\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Cleanup: \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_exit()\"),\" does not close files; any files opened inside the thread will remain open after the thread is terminated.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Example\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"#include <pthread.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#define NUM_THREADS 5\\n\\nvoid *PrintHello(void *threadid) {\\n    int *tid;\\n    tid = (int *)threadid;\\n    printf(\\\"Hello World! It's me, thread #%d!\\n\\\", *tid);\\n    pthread_exit(NULL);\\n}\\n\\nint main(int argc, char *argv[]) {\\n    pthread_t threads[NUM_THREADS];\\n    int rc, t, tids[NUM_THREADS];\\n    for (t=0; t< NUM_THREADS; t++) {\\n        printf(\\\"In main: creating thread %d\\n\\\", t);\\n        tids[t] = t;\\n        rc = pthread_create(&threads[t], NULL, PrintHello, (void *)&tids[t]);\\n\\n        if (rc) {\\n            printf(\\\"ERROR; return code from pthread_create() is %d\\n\\\", rc);\\n            exit(-1);\\n        }\\n    }\\n    pthread_exit(NULL); \\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"passing-arguments-to-threads\"}},\"Passing Arguments to Threads\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_create()\"),\" routine permits the programmer to pass one argument to the thread start routine.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For cases where multiple args must be passed, we can create a struct and use the reference pointer as an arg.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"All args passed by reference must be cast to (void *)\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"struct two_args {\\n    int arg1;\\n    int arg2;   \\n};\\n\\nvoid *needs_2_args(void *ap) {\\n    struct two_args *argp;\\n    int a1, a2;\\n\\n    argp = (struct two_args *) ap;\\n\\n    // do stuff here\\n    \\n    a1 = argp->arg1;\\n    a2 = argp->arg2;\\n    \\n    // do stuff here \\n\\n    free(argp);\\n    pthread_exit(NULL);\\n}\\n\\nint main(int argc, char *argv[]) {\\n    pthread_t t;\\n    struct two_args *ap;\\n    int rc;\\n\\n    // do stuff here \\n\\n    ap = (struct two_args *)malloc(sizeof(struct two_args));\\n    ap->arg1 = 1;\\n    ap->arg2 = 2;\\n    rc = pthread_create(&t, NULL, needs_2_args, (void *) ap);\\n\\n    // do stuff here \\n\\n    pthread_exit(NULL);\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"joining-and-detatching-threads\"}},\"Joining and Detatching Threads\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Routines\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"pthread_join(threadid, status)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"pthread_detach(threadit, status)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"pthread_attr_setdatachstate(attr, detachstate)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"pthread_attr_getdetachstate(attr, detachstate)\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"\\\"joining\\\" is one way to accomplish synchronization between threads\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_join()\"),\" subroutine blocks the calling thread until the specified threadid thread terminates\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The programmer is able to obtain the target thread's termination return status if it was specified in the target thread's call to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_exit()\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"When a thread if created, one of its attributes defines whether it is joinable or detached.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Only threads that are create as joinable can be joined.\")),React.createElement(MDXTag,{name:\"p\",components:components},\"To explicitly create a thread as joinable or detached, the attr argument in the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_create()\"),\" routine is used:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Declare a pthread attribute ariable of the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_attr_t data\"),\" type \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Initialize the attribute ariable with \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_attr_init()\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Set the attribute detached status with \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_attr_setdetachedstate()\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"When done, ree library resources used by the attribute with \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_attr_destroy()\"))),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Example\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"void *BusyWork(void *null) {\\n    // do stuff \\n    pthread_exit((void *) 0);\\n}\\n\\nint main(int argc, char *argv[]) {\\n    pthread_attr_t attr;\\n    int rc, t;\\n    void *status;\\n\\n    /* init and set thread detached attribute */\\n    pthread_attr_init(&attr);\\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\\n\\n    /* free attribute and wait for the other threads */\\n    pthread_attr_destory(&attr);\\n    for (t=0; t< NUM_THREADS; t++) {\\n        rc = pthread_join(thread[t], &status);\\n        // do stuff \\n        printf(\\\"Completed join with thred %d status = %ld\\n\\\", t, (long)status);\\n    }\\n    pthread_exit(NULL);\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"syncronisation-issues\"}},\"Syncronisation Issues\"),React.createElement(MDXTag,{name:\"p\",components:components},\"When multiple threads attempt to manipulate the same data item, the results can often be incoherent if proper care is not take ie. race conditions.\"),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"2-mutexes\"}},\"2: Mutexes\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The second class of functions deal with synchronization - called a \\\"mutex\\\", which is an abbreviation for mutual exclusion.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"creating-and-destroying-mutexes\"}},\"Creating and Destroying Mutexes\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"routines\"}},\"Routines\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_init(mutex, attr)\"),React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_destroy(mutex)\"),React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutexattr_init(attr)\"),React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutexattr_destroy(attr)\")),React.createElement(MDXTag,{name:\"p\",components:components},\"A mutex must be declared with type \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_t\"),\", and must be initialized before they can be used.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"There are two ways to init a mutex variable:\\n1. Statically, when declared eg \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER\"),\"\\n2. Dynamically, with the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_init()\"),\" routine. This method permits setting mutex object attributes, \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"attr\"),\" (which my be specified as NULL to accept defaults).\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The mutex is initially unlocked.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"locking--unlocking-mutexes\"}},\"Locking & Unlocking Mutexes\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"routines-1\"}},\"Routines\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_lock(mutex)\"),React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_unlock(mutex)\"),React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_mutex_trylock(mutex)\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_mutex_lock(mutex)\"),\" will lock the specified mutex\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_mutex_unlock(mutex)\"),\" will unlock a mutex if called by the owning thread\\n- throws an error if already unlocked or owned by another thread\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_mutex_trylock(mutex)\"),\" will attempt to lock a mutex, however if the mutex is already locked it will return a \\\"EBUSY\\\" error code.\\n- May be useful to prevent deadlocks!\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Example 1\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We can now write our previously incorrect code segment as...\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"pthread_mutex_t min_value_lock;\\n\\nmain() {\\n    ...\\n    pthread_mutex_init(&min_value_lock, NULL);\\n    ...\\n}\\n\\nvoid *find_min(void *list_ptr) {\\n    ...\\n    pthread_mutex_lock(&min_value_lock);\\n    if (my_cost < best_cost) {\\n        best_cost = my_cost;\\n    }   \\n    pthread_mutex_unlock(&min_value_lock);\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Example 2\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"producer-consumer\"),\" scenario imposes the following constraints:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"The producer thread must not overwrite the shared buffer when the previous task has no been picked up by a consumer thread.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"The consumer threads must not pick up tasks until there is something present in the shared data structure.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Individual consumer threads should pick up tasks one at a time.\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"pthread_mutex_t task_queue_lock;\\nint task_available;\\n\\nmain() {\\n    task_available = 0;\\n    pthread_mutex_init(&task_queue_lock, NULL);\\n}\\n\\nvoid *producer(void *producer_thread_data) {\\n    ...\\n    while (!done()) {\\n        inserted = 0;\\n        create_task(&my_task);\\n        while (inserted == 0) {\\n            pthread_mutex_lock(&task_queue_lock);\\n            if (task_available == 0) {\\n                insert_into_queue(my_task);\\n                task_available = 1;\\n                inserted = 1;\\n            }\\n            pthread_mutex_unlock(&task_queue_lock);\\n        }\\n    }\\n}\\n\\nvoid *consumer(void *consumer_thread_data) {\\n    ...\\n    while (!done()) {\\n        extracted = 0;\\n        while (extracted == 0) {\\n            pthread_mutex_lock(&task_queue_lock);\\n            if (task_available == 1) {\\n                extract_from_queue(&my_task);\\n                task_available = 0;\\n                extracted = 1;\\n            }\\n            pthread_mutex_unlock(&task_queue_lock);\\n        }\\n        process_task(my_task);\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"overheads-of-locking\"}},\"Overheads of Locking\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Locks represent serialization points since critical sections must be executed by threads one after another.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Encapsulating large segments of the program within locks can lead to significant performance degradation.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"It is often possible to reduce the idling overhead associated with locks using \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_mutex_trylock\"),\".\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Alleviating Locking Overhead\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"pthread_mutex_t tryLock_lock = PTHREAD_MUTEX_INITIALIZER;\\n\\nlock_status = pthread_mutex_trylock(&tryLock_lock)\\nif (lock_status == EBUSY) {\\n    /* do something else */\\n    ...\\n} else {\\n    /* do one thing */\\n    ...\\n    pthread_mutex_unlock(&tryLock_lock);\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"monitors\"}},\"Monitors\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Mutexes provide powerful sync tools, but...\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"lock() and unlock() are scatteed among several threads, therefore it is difficult to understand their effects\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"usage must be correct in all the threads \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"one bad thread (or one programming error) can kill the whole system\")),React.createElement(MDXTag,{name:\"p\",components:components},\"A \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"monitor\"),\" is a high-level abstraction that may provide a convenient and effective mechanism for thread synchronization.\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"local data variables are accessible only by the monitor \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"thread enters monitor by invoking one of its procedures \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"only one thread may be executing in a the monitor at a time\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Monitor and Condition Variables\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Monitor does not need to code certain sync constraints explicitly.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"However, it is not sufficiently powerful for modeling some other synchronization schemes.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"An additional sync mechanism ie \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"condition variable\"),\" is required.\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Condition Variables\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The third class of functions address communications between threads that share a mutex\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"A condition variable allows a thread to block itself until specified data reaches a predefined state.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"A condition variable indicates an event and has no value\\n- One cannot store a value into nor retrieve a value from a condition variable.\\n- If a thread must wait for an event to occur, that tread waits on the corresponding condition variable.\\n- A condition variable has a queue for those threads that are waiting the corresponding event to occur to wait on.\\n- If another thread causes the event to occur, that thread simply signal the corresponding condition variable.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"This class includes funcs to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"create\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"destroy\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"wait\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"signal\"),\" based on specified variable values.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Funcs to set/quey cond variable attrs are also included.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Cond variable is always used in conjunction with a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"mutex lock\"))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"create--destroying-cond-variables\"}},\"Create & Destroying Cond Variables\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"routines-2\"}},\"Routines\"),React.createElement(MDXTag,{name:\"p\",components:components},\"pthread_cond_init(condition, attr)\\npthread_cond_destroy(condition)\\npthread_condattr_init(attr)\\npthread_condattr_destroy(attr)\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Condition variables must be declared with type \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_cont_t\"),\", and must be initialized before they can be used.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"2 Ways to declare:\\n1. Statically\\n2. Dynamically \"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"waiting-and-signaling-on-condition-variable\"}},\"Waiting and Signaling on Condition Variable\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_cond_signal()\"),\" is used to signal (or wake up) another thread which is waiting on the condition variable and should be called after the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"mutex\"),\" is locked.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"It must unlock \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"mutex\"),\" in order for \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_cond_wait()\"),\" routine to complete.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pthread_cond_broadcast()\"),\" routine unlocks all of the threads blocked on the condition variable.\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Proper locking and unlocked of mutex is essential for these routines\\n- Failing to lock may cause it NOT to block\\n- Failing to unlock the mutex may not allow a matching \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"pthread_cond_wait()\"),\" routine to complete (it will remain blocked)\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"producer-consumer-using-condition-variables\"}},\"Producer-Consumer Using Condition Variables\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-c\"}},\"pthread_cond_t cond_queue_empty, cond_queue_full;\\npthread_mutex_t task_queue_cond_lock;\\nint task_available;\\n// other data structures here \\n\\nmain() {\\n    // declarations and initializations \\n    task_available = 0;\\n    pthread_cond_init(&cond_queue_empty, NULL);\\n    pthread_cond_init(&cond_queue_full, NULL);\\n    pthread_mutex_init(&task_queue_cond_lock, NULL);\\n    // create and join producer and consumer threads\\n}\\n\\nvoid *producer(void *producer_thread_data) {\\n    while(!done()) {\\n        create_task();\\n        pthread_mutex_lock(&task_queue_cond_lock);\\n        \\n        while (task_available == 1) {\\n            pthread_cond_wait(&cond_queue_empty,\\n                &task_queue_cond_lock);\\n        }\\n\\n        insert_into_queue();\\n        task_available = 1;\\n        pthread_cond_signal(&cond_queue_full);\\n        pthread_mutex_unlock(&task_queue_cond_lock);\\n    }\\n}\\n\\nvoid *consumer(void *consumer_thread_data) {\\n    while(!done()) {\\n        pthread_mutex_lock(&task_queue_cond_lock);\\n        while (task_available == 0) {\\n            pthread_cond_wait(&cond_queue_full,\\n                &task_queue_cond_lock);\\n        }\\n\\n        my_task = extract_from_queue();\\n        task_available = 0;\\n        pthread_cond_signal(&cond_queue_empty);\\n        pthread_mutex_unlock(&task_queue_cond_lock);\\n        process_task(my_task);\\n    }\\n}\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/COMP3520-OS/Pthread.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"pthreads\"}}>{`Pthreads`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"pthreads-api\"}}>{`Pthreads API`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Defined in the ANSI/IEEE Posix 1003.1 - 1995 standard`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Subroutines comprise the Pthreads API can be informally grouped into three major classes:`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread management`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Mutexes `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Condition variables`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"1-thread-management\"}}>{`1: Thread Management`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`first class of functions work directly on threads - creating, detatching, joining etc `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`also include funcs to set/query thread attributes (joinable, scheduling etc)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Create Threads`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`initially, single default thread - others must be explicitly created`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`pthread_create(thread, attr, startRoutine, arg)\n// thread - unique identifier for the new thread (pthread_t)\n// attr - attr object used to set thread attributes (pthread_attr) - you can specify a thread attributes object, or NULL for the default values\n// startRoutine - C routine that the thread will execute \n// arg - single arg that may be passed to startRoutine - it must be passed by reference (pointer to struct) and NULL may be used if no arg is to be passed\n\n/*\n    If successful, the pthread_create() function shall return zero; otherwise, an error number shall be returned to indicate the error\n */\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Thread Attributes`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`By default, a thread is created with certain attributes.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`pthread_attr_init(attr) and pthread_attr_destroy(attr) are used to initialize/destroy the thread attribute object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Other routines are then used to query/set specific attributes in the thread attribute object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Terminating Thread`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread makes call to the pthread_exit() subroutine `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread is cancelled by another thread via pthread_cancel() routine `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Entire process is terminated due to call to exit subroutine `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Routine: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_exit(status)`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`used to explicitly exit the thread`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`programmer may optionalyl specify a termination status, which is stored as a void pointer for any thread that may join the calling thread`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Cleanup: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_exit()`}</MDXTag>{` does not close files; any files opened inside the thread will remain open after the thread is terminated.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n    int *tid;\n    tid = (int *)threadid;\n    printf(\"Hello World! It's me, thread #%d!\\n\", *tid);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t threads[NUM_THREADS];\n    int rc, t, tids[NUM_THREADS];\n    for (t=0; t< NUM_THREADS; t++) {\n        printf(\"In main: creating thread %d\\n\", t);\n        tids[t] = t;\n        rc = pthread_create(&threads[t], NULL, PrintHello, (void *)&tids[t]);\n\n        if (rc) {\n            printf(\"ERROR; return code from pthread_create() is %d\\n\", rc);\n            exit(-1);\n        }\n    }\n    pthread_exit(NULL); \n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"passing-arguments-to-threads\"}}>{`Passing Arguments to Threads`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_create()`}</MDXTag>{` routine permits the programmer to pass one argument to the thread start routine.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For cases where multiple args must be passed, we can create a struct and use the reference pointer as an arg.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`All args passed by reference must be cast to (void *)`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`struct two_args {\n    int arg1;\n    int arg2;   \n};\n\nvoid *needs_2_args(void *ap) {\n    struct two_args *argp;\n    int a1, a2;\n\n    argp = (struct two_args *) ap;\n\n    // do stuff here\n    \n    a1 = argp->arg1;\n    a2 = argp->arg2;\n    \n    // do stuff here \n\n    free(argp);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t t;\n    struct two_args *ap;\n    int rc;\n\n    // do stuff here \n\n    ap = (struct two_args *)malloc(sizeof(struct two_args));\n    ap->arg1 = 1;\n    ap->arg2 = 2;\n    rc = pthread_create(&t, NULL, needs_2_args, (void *) ap);\n\n    // do stuff here \n\n    pthread_exit(NULL);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"joining-and-detatching-threads\"}}>{`Joining and Detatching Threads`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Routines`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_join(threadid, status)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_detach(threadit, status)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_attr_setdatachstate(attr, detachstate)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_attr_getdetachstate(attr, detachstate)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`\"joining\" is one way to accomplish synchronization between threads`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_join()`}</MDXTag>{` subroutine blocks the calling thread until the specified threadid thread terminates`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The programmer is able to obtain the target thread's termination return status if it was specified in the target thread's call to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_exit()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`When a thread if created, one of its attributes defines whether it is joinable or detached.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Only threads that are create as joinable can be joined.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To explicitly create a thread as joinable or detached, the attr argument in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_create()`}</MDXTag>{` routine is used:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Declare a pthread attribute ariable of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_t data`}</MDXTag>{` type `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Initialize the attribute ariable with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_init()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Set the attribute detached status with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_setdetachedstate()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`When done, ree library resources used by the attribute with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_destroy()`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`void *BusyWork(void *null) {\n    // do stuff \n    pthread_exit((void *) 0);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_attr_t attr;\n    int rc, t;\n    void *status;\n\n    /* init and set thread detached attribute */\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n    /* free attribute and wait for the other threads */\n    pthread_attr_destory(&attr);\n    for (t=0; t< NUM_THREADS; t++) {\n        rc = pthread_join(thread[t], &status);\n        // do stuff \n        printf(\"Completed join with thred %d status = %ld\\n\", t, (long)status);\n    }\n    pthread_exit(NULL);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"syncronisation-issues\"}}>{`Syncronisation Issues`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When multiple threads attempt to manipulate the same data item, the results can often be incoherent if proper care is not take ie. race conditions.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"2-mutexes\"}}>{`2: Mutexes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The second class of functions deal with synchronization - called a \"mutex\", which is an abbreviation for mutual exclusion.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-and-destroying-mutexes\"}}>{`Creating and Destroying Mutexes`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_init(mutex, attr)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_destroy(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutexattr_init(attr)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutexattr_destroy(attr)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A mutex must be declared with type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_t`}</MDXTag>{`, and must be initialized before they can be used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are two ways to init a mutex variable:\n1. Statically, when declared eg `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER`}</MDXTag>{`\n2. Dynamically, with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_init()`}</MDXTag>{` routine. This method permits setting mutex object attributes, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`attr`}</MDXTag>{` (which my be specified as NULL to accept defaults).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The mutex is initially unlocked.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"locking--unlocking-mutexes\"}}>{`Locking & Unlocking Mutexes`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines-1\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_lock(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_unlock(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_trylock(mutex)`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_lock(mutex)`}</MDXTag>{` will lock the specified mutex`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_unlock(mutex)`}</MDXTag>{` will unlock a mutex if called by the owning thread\n- throws an error if already unlocked or owned by another thread`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_trylock(mutex)`}</MDXTag>{` will attempt to lock a mutex, however if the mutex is already locked it will return a \"EBUSY\" error code.\n- May be useful to prevent deadlocks!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example 1`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can now write our previously incorrect code segment as...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t min_value_lock;\n\nmain() {\n    ...\n    pthread_mutex_init(&min_value_lock, NULL);\n    ...\n}\n\nvoid *find_min(void *list_ptr) {\n    ...\n    pthread_mutex_lock(&min_value_lock);\n    if (my_cost < best_cost) {\n        best_cost = my_cost;\n    }   \n    pthread_mutex_unlock(&min_value_lock);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example 2`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`producer-consumer`}</MDXTag>{` scenario imposes the following constraints:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The producer thread must not overwrite the shared buffer when the previous task has no been picked up by a consumer thread.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The consumer threads must not pick up tasks until there is something present in the shared data structure.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Individual consumer threads should pick up tasks one at a time.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t task_queue_lock;\nint task_available;\n\nmain() {\n    task_available = 0;\n    pthread_mutex_init(&task_queue_lock, NULL);\n}\n\nvoid *producer(void *producer_thread_data) {\n    ...\n    while (!done()) {\n        inserted = 0;\n        create_task(&my_task);\n        while (inserted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 0) {\n                insert_into_queue(my_task);\n                task_available = 1;\n                inserted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    ...\n    while (!done()) {\n        extracted = 0;\n        while (extracted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 1) {\n                extract_from_queue(&my_task);\n                task_available = 0;\n                extracted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n        process_task(my_task);\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"overheads-of-locking\"}}>{`Overheads of Locking`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Locks represent serialization points since critical sections must be executed by threads one after another.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Encapsulating large segments of the program within locks can lead to significant performance degradation.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`It is often possible to reduce the idling overhead associated with locks using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_trylock`}</MDXTag>{`.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Alleviating Locking Overhead`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t tryLock_lock = PTHREAD_MUTEX_INITIALIZER;\n\nlock_status = pthread_mutex_trylock(&tryLock_lock)\nif (lock_status == EBUSY) {\n    /* do something else */\n    ...\n} else {\n    /* do one thing */\n    ...\n    pthread_mutex_unlock(&tryLock_lock);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"monitors\"}}>{`Monitors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Mutexes provide powerful sync tools, but...`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`lock() and unlock() are scatteed among several threads, therefore it is difficult to understand their effects`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`usage must be correct in all the threads `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`one bad thread (or one programming error) can kill the whole system`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`monitor`}</MDXTag>{` is a high-level abstraction that may provide a convenient and effective mechanism for thread synchronization.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`local data variables are accessible only by the monitor `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`thread enters monitor by invoking one of its procedures `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`only one thread may be executing in a the monitor at a time`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Monitor and Condition Variables`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Monitor does not need to code certain sync constraints explicitly.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`However, it is not sufficiently powerful for modeling some other synchronization schemes.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`An additional sync mechanism ie `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`condition variable`}</MDXTag>{` is required.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Condition Variables`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The third class of functions address communications between threads that share a mutex`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A condition variable allows a thread to block itself until specified data reaches a predefined state.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A condition variable indicates an event and has no value\n- One cannot store a value into nor retrieve a value from a condition variable.\n- If a thread must wait for an event to occur, that tread waits on the corresponding condition variable.\n- A condition variable has a queue for those threads that are waiting the corresponding event to occur to wait on.\n- If another thread causes the event to occur, that thread simply signal the corresponding condition variable.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`This class includes funcs to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`create`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`destroy`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`wait`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`signal`}</MDXTag>{` based on specified variable values.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Funcs to set/quey cond variable attrs are also included.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Cond variable is always used in conjunction with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`mutex lock`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"create--destroying-cond-variables\"}}>{`Create & Destroying Cond Variables`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines-2\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`pthread_cond_init(condition, attr)\npthread_cond_destroy(condition)\npthread_condattr_init(attr)\npthread_condattr_destroy(attr)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Condition variables must be declared with type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cont_t`}</MDXTag>{`, and must be initialized before they can be used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`2 Ways to declare:\n1. Statically\n2. Dynamically `}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"waiting-and-signaling-on-condition-variable\"}}>{`Waiting and Signaling on Condition Variable`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_signal()`}</MDXTag>{` is used to signal (or wake up) another thread which is waiting on the condition variable and should be called after the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutex`}</MDXTag>{` is locked.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It must unlock `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutex`}</MDXTag>{` in order for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_wait()`}</MDXTag>{` routine to complete.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_broadcast()`}</MDXTag>{` routine unlocks all of the threads blocked on the condition variable.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Proper locking and unlocked of mutex is essential for these routines\n- Failing to lock may cause it NOT to block\n- Failing to unlock the mutex may not allow a matching `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_cond_wait()`}</MDXTag>{` routine to complete (it will remain blocked)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"producer-consumer-using-condition-variables\"}}>{`Producer-Consumer Using Condition Variables`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_cond_t cond_queue_empty, cond_queue_full;\npthread_mutex_t task_queue_cond_lock;\nint task_available;\n// other data structures here \n\nmain() {\n    // declarations and initializations \n    task_available = 0;\n    pthread_cond_init(&cond_queue_empty, NULL);\n    pthread_cond_init(&cond_queue_full, NULL);\n    pthread_mutex_init(&task_queue_cond_lock, NULL);\n    // create and join producer and consumer threads\n}\n\nvoid *producer(void *producer_thread_data) {\n    while(!done()) {\n        create_task();\n        pthread_mutex_lock(&task_queue_cond_lock);\n        \n        while (task_available == 1) {\n            pthread_cond_wait(&cond_queue_empty,\n                &task_queue_cond_lock);\n        }\n\n        insert_into_queue();\n        task_available = 1;\n        pthread_cond_signal(&cond_queue_full);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    while(!done()) {\n        pthread_mutex_lock(&task_queue_cond_lock);\n        while (task_available == 0) {\n            pthread_cond_wait(&cond_queue_full,\n                &task_queue_cond_lock);\n        }\n\n        my_task = extract_from_queue();\n        task_available = 0;\n        pthread_cond_signal(&cond_queue_empty);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n        process_task(my_task);\n    }\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}