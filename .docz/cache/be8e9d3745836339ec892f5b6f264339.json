{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md","mtime":1562563032037},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-string-functions\"\n    }}>{`Basic String Functions`}</h1>\n    <p>{`This is a simple example of the implementation of some basic functions using the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` package. The `}<inlineCode parentName=\"p\">{`unicode`}</inlineCode>{` package is used for the example using runes.`}</p>\n    <p>{`If building a file, ensure to have the correct imports and package name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"strings\"\n    \"unicode\"\n)\n`}</code></pre>\n    <p>{`...and for testing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"testing\"\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compare\"\n    }}>{`Compare`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestStringsCompare(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World!\"\n    if CompareStrings(a, b) != 0 {\n        t.Fatalf(\"Expected 0\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, Worl!\"\n    if CompareStrings(a, b) != 1 {\n        t.Fatalf(\"Expected 1\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, World!!\"\n    if CompareStrings(a, b) != -1 {\n        t.Fatalf(\"Expected -1\")\n    }\n}\n\n// CompareStrings compares two string values and returns an int\nfunc CompareStrings(a string, b string) int {\n    return strings.Compare(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"contains\"\n    }}>{`Contains`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestContainsString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World\"\n    if ContainsString(a, b) != true {\n        t.Fatalf(\"Expected true\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hway\"\n    if ContainsString(a, b) != false {\n        t.Fatalf(\"Expected false\")\n    }\n}\n\n// ContainsString checks if string contains substr\nfunc ContainsString(s string, substr string) bool {\n    return strings.Contains(s, substr)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"join\"\n    }}>{`Join`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestJoinString(t *testing.T) {\n    a := []string{\"Hello\", \"World!\"}\n    b := \"Hello, World!\"\n\n    res := JoinString(a, \", \")\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// JoinString turns a string slice into a string\nfunc JoinString(str []string, de string) string {\n    return strings.Join(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split\"\n    }}>{`Split`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestSplitString(t *testing.T) {\n    a := \"Hello World!\"\n    b := []string{\"Hello\", \"World!\"}\n\n    res := SplitString(a, \" \")\n\n    for i, v := range res {\n        if v != b[i] {\n            t.Fatalf(\"Expected string %s but got %s\", v, b[i])\n        }\n    }\n}\n\n// SplitString turns a string in a []string with delimiter\nfunc SplitString(str string, de string) []string {\n    return strings.Split(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lower-case-a-string-using-map\"\n    }}>{`Lower case a string using Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestMapToLowerString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"hello, world!\"\n\n    res := MapOverStringToLower(a)\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// MapOverStringToLower uses map to lower case a string\nfunc MapOverStringToLower(str string) string {\n    toLower := func(r rune) rune {\n        return unicode.ToLower(r)\n    }\n\n    return strings.Map(toLower, str)\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}