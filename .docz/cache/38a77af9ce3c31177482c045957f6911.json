{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md","mtime":1562563032037},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJiYXNpYy1zdHJpbmctZnVuY3Rpb25zIn0sIkJhc2ljIFN0cmluZyBGdW5jdGlvbnMiKSxtZHgoInAiLG51bGwsIlRoaXMgaXMgYSBzaW1wbGUgZXhhbXBsZSBvZiB0aGUgaW1wbGVtZW50YXRpb24gb2Ygc29tZSBiYXNpYyBmdW5jdGlvbnMgdXNpbmcgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJzdHJpbmdzIiksIiBwYWNrYWdlLiBUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInVuaWNvZGUiKSwiIHBhY2thZ2UgaXMgdXNlZCBmb3IgdGhlIGV4YW1wbGUgdXNpbmcgcnVuZXMuIiksbWR4KCJwIixudWxsLCJJZiBidWlsZGluZyBhIGZpbGUsIGVuc3VyZSB0byBoYXZlIHRoZSBjb3JyZWN0IGltcG9ydHMgYW5kIHBhY2thZ2UgbmFtZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZ28ifSksInBhY2thZ2Ugc3RyaW5nZXhhbXBsZXNcblxuaW1wb3J0IChcbiAgICBcInN0cmluZ3NcIlxuICAgIFwidW5pY29kZVwiXG4pXG4iKSksbWR4KCJwIixudWxsLCIuLi5hbmQgZm9yIHRlc3Rpbmc6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvIn0pLCJwYWNrYWdlIHN0cmluZ2V4YW1wbGVzXG5cbmltcG9ydCAoXG4gICAgXCJ0ZXN0aW5nXCJcbilcbiIpKSxtZHgoImgyIix7ImlkIjoiY29tcGFyZSJ9LCJDb21wYXJlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvIn0pLCIvLyBUZXN0IG1vZHVsZVxuZnVuYyBUZXN0U3RyaW5nc0NvbXBhcmUodCAqdGVzdGluZy5UKSB7XG4gICAgYSA6PSBcIkhlbGxvLCBXb3JsZCFcIlxuICAgIGIgOj0gXCJIZWxsbywgV29ybGQhXCJcbiAgICBpZiBDb21wYXJlU3RyaW5ncyhhLCBiKSAhPSAwIHtcbiAgICAgICAgdC5GYXRhbGYoXCJFeHBlY3RlZCAwXCIpXG4gICAgfVxuXG4gICAgYSA9IFwiSGVsbG8sIFdvcmxkIVwiXG4gICAgYiA9IFwiSGVsbG8sIFdvcmwhXCJcbiAgICBpZiBDb21wYXJlU3RyaW5ncyhhLCBiKSAhPSAxIHtcbiAgICAgICAgdC5GYXRhbGYoXCJFeHBlY3RlZCAxXCIpXG4gICAgfVxuXG4gICAgYSA9IFwiSGVsbG8sIFdvcmxkIVwiXG4gICAgYiA9IFwiSGVsbG8sIFdvcmxkISFcIlxuICAgIGlmIENvbXBhcmVTdHJpbmdzKGEsIGIpICE9IC0xIHtcbiAgICAgICAgdC5GYXRhbGYoXCJFeHBlY3RlZCAtMVwiKVxuICAgIH1cbn1cblxuLy8gQ29tcGFyZVN0cmluZ3MgY29tcGFyZXMgdHdvIHN0cmluZyB2YWx1ZXMgYW5kIHJldHVybnMgYW4gaW50XG5mdW5jIENvbXBhcmVTdHJpbmdzKGEgc3RyaW5nLCBiIHN0cmluZykgaW50IHtcbiAgICByZXR1cm4gc3RyaW5ncy5Db21wYXJlKGEsIGIpXG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImNvbnRhaW5zIn0sIkNvbnRhaW5zIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWdvIn0pLCIvLyBUZXN0IG1vZHVsZVxuZnVuYyBUZXN0Q29udGFpbnNTdHJpbmcodCAqdGVzdGluZy5UKSB7XG4gICAgYSA6PSBcIkhlbGxvLCBXb3JsZCFcIlxuICAgIGIgOj0gXCJIZWxsbywgV29ybGRcIlxuICAgIGlmIENvbnRhaW5zU3RyaW5nKGEsIGIpICE9IHRydWUge1xuICAgICAgICB0LkZhdGFsZihcIkV4cGVjdGVkIHRydWVcIilcbiAgICB9XG5cbiAgICBhID0gXCJIZWxsbywgV29ybGQhXCJcbiAgICBiID0gXCJId2F5XCJcbiAgICBpZiBDb250YWluc1N0cmluZyhhLCBiKSAhPSBmYWxzZSB7XG4gICAgICAgIHQuRmF0YWxmKFwiRXhwZWN0ZWQgZmFsc2VcIilcbiAgICB9XG59XG5cbi8vIENvbnRhaW5zU3RyaW5nIGNoZWNrcyBpZiBzdHJpbmcgY29udGFpbnMgc3Vic3RyXG5mdW5jIENvbnRhaW5zU3RyaW5nKHMgc3RyaW5nLCBzdWJzdHIgc3RyaW5nKSBib29sIHtcbiAgICByZXR1cm4gc3RyaW5ncy5Db250YWlucyhzLCBzdWJzdHIpXG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImpvaW4ifSwiSm9pbiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwiLy8gVGVzdCBtb2R1bGVcbmZ1bmMgVGVzdEpvaW5TdHJpbmcodCAqdGVzdGluZy5UKSB7XG4gICAgYSA6PSBbXXN0cmluZ3tcIkhlbGxvXCIsIFwiV29ybGQhXCJ9XG4gICAgYiA6PSBcIkhlbGxvLCBXb3JsZCFcIlxuXG4gICAgcmVzIDo9IEpvaW5TdHJpbmcoYSwgXCIsIFwiKVxuXG4gICAgaWYgcmVzICE9IGIge1xuICAgICAgICB0LkZhdGFsZihcIkV4cGVjdGVkICVzIGJ1dCBnb3QgJXNcIiwgYiwgcmVzKVxuICAgIH1cbn1cblxuLy8gSm9pblN0cmluZyB0dXJucyBhIHN0cmluZyBzbGljZSBpbnRvIGEgc3RyaW5nXG5mdW5jIEpvaW5TdHJpbmcoc3RyIFtdc3RyaW5nLCBkZSBzdHJpbmcpIHN0cmluZyB7XG4gICAgcmV0dXJuIHN0cmluZ3MuSm9pbihzdHIsIGRlKVxufVxuIikpLG1keCgiaDIiLHsiaWQiOiJzcGxpdCJ9LCJTcGxpdCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwiLy8gVGVzdCBtb2R1bGVcbmZ1bmMgVGVzdFNwbGl0U3RyaW5nKHQgKnRlc3RpbmcuVCkge1xuICAgIGEgOj0gXCJIZWxsbyBXb3JsZCFcIlxuICAgIGIgOj0gW11zdHJpbmd7XCJIZWxsb1wiLCBcIldvcmxkIVwifVxuXG4gICAgcmVzIDo9IFNwbGl0U3RyaW5nKGEsIFwiIFwiKVxuXG4gICAgZm9yIGksIHYgOj0gcmFuZ2UgcmVzIHtcbiAgICAgICAgaWYgdiAhPSBiW2ldIHtcbiAgICAgICAgICAgIHQuRmF0YWxmKFwiRXhwZWN0ZWQgc3RyaW5nICVzIGJ1dCBnb3QgJXNcIiwgdiwgYltpXSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gU3BsaXRTdHJpbmcgdHVybnMgYSBzdHJpbmcgaW4gYSBbXXN0cmluZyB3aXRoIGRlbGltaXRlclxuZnVuYyBTcGxpdFN0cmluZyhzdHIgc3RyaW5nLCBkZSBzdHJpbmcpIFtdc3RyaW5nIHtcbiAgICByZXR1cm4gc3RyaW5ncy5TcGxpdChzdHIsIGRlKVxufVxuIikpLG1keCgiaDIiLHsiaWQiOiJsb3dlci1jYXNlLWEtc3RyaW5nLXVzaW5nLW1hcCJ9LCJMb3dlciBjYXNlIGEgc3RyaW5nIHVzaW5nIE1hcCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwiLy8gVGVzdCBtb2R1bGVcbmZ1bmMgVGVzdE1hcFRvTG93ZXJTdHJpbmcodCAqdGVzdGluZy5UKSB7XG4gICAgYSA6PSBcIkhlbGxvLCBXb3JsZCFcIlxuICAgIGIgOj0gXCJoZWxsbywgd29ybGQhXCJcblxuICAgIHJlcyA6PSBNYXBPdmVyU3RyaW5nVG9Mb3dlcihhKVxuXG4gICAgaWYgcmVzICE9IGIge1xuICAgICAgICB0LkZhdGFsZihcIkV4cGVjdGVkICVzIGJ1dCBnb3QgJXNcIiwgYiwgcmVzKVxuICAgIH1cbn1cblxuLy8gTWFwT3ZlclN0cmluZ1RvTG93ZXIgdXNlcyBtYXAgdG8gbG93ZXIgY2FzZSBhIHN0cmluZ1xuZnVuYyBNYXBPdmVyU3RyaW5nVG9Mb3dlcihzdHIgc3RyaW5nKSBzdHJpbmcge1xuICAgIHRvTG93ZXIgOj0gZnVuYyhyIHJ1bmUpIHJ1bmUge1xuICAgICAgICByZXR1cm4gdW5pY29kZS5Ub0xvd2VyKHIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ3MuTWFwKHRvTG93ZXIsIHN0cilcbn1cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0dvL0dvLUJhc2ljLVN0cmluZ3MubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,wBADA,CAAR,0BADK,CAIL,iGAAwF,kBAAY,UAAU,CAAC,GAAvB,YAAxF,kBAA6J,kBAAY,UAAU,CAAC,GAAvB,YAA7J,iDAJK,CAKL,wFALK,CAML,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,8EAAL,CANK,CAeL,mCAfK,CAgBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,6DAAL,CAhBK,CAwBL,SAAQ,CACN,KAAM,SADA,CAAR,WAxBK,CA2BL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,ymBAAL,CA3BK,CAuDL,SAAQ,CACN,KAAM,UADA,CAAR,YAvDK,CA0DL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,qeAAL,CA1DK,CAgFL,SAAQ,CACN,KAAM,MADA,CAAR,QAhFK,CAmFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,qYAAL,CAnFK,CAsGL,SAAQ,CACN,KAAM,OADA,CAAR,SAtGK,CAyGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,0cAAL,CAzGK,CA8HL,SAAQ,CACN,KAAM,+BADA,CAAR,iCA9HK,CAiIL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,udAAL,CAjIK,CAAP,CAyJD,C,yQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-string-functions\"\n    }}>{`Basic String Functions`}</h1>\n    <p>{`This is a simple example of the implementation of some basic functions using the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` package. The `}<inlineCode parentName=\"p\">{`unicode`}</inlineCode>{` package is used for the example using runes.`}</p>\n    <p>{`If building a file, ensure to have the correct imports and package name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"strings\"\n    \"unicode\"\n)\n`}</code></pre>\n    <p>{`...and for testing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"testing\"\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compare\"\n    }}>{`Compare`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestStringsCompare(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World!\"\n    if CompareStrings(a, b) != 0 {\n        t.Fatalf(\"Expected 0\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, Worl!\"\n    if CompareStrings(a, b) != 1 {\n        t.Fatalf(\"Expected 1\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, World!!\"\n    if CompareStrings(a, b) != -1 {\n        t.Fatalf(\"Expected -1\")\n    }\n}\n\n// CompareStrings compares two string values and returns an int\nfunc CompareStrings(a string, b string) int {\n    return strings.Compare(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"contains\"\n    }}>{`Contains`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestContainsString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World\"\n    if ContainsString(a, b) != true {\n        t.Fatalf(\"Expected true\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hway\"\n    if ContainsString(a, b) != false {\n        t.Fatalf(\"Expected false\")\n    }\n}\n\n// ContainsString checks if string contains substr\nfunc ContainsString(s string, substr string) bool {\n    return strings.Contains(s, substr)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"join\"\n    }}>{`Join`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestJoinString(t *testing.T) {\n    a := []string{\"Hello\", \"World!\"}\n    b := \"Hello, World!\"\n\n    res := JoinString(a, \", \")\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// JoinString turns a string slice into a string\nfunc JoinString(str []string, de string) string {\n    return strings.Join(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split\"\n    }}>{`Split`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestSplitString(t *testing.T) {\n    a := \"Hello World!\"\n    b := []string{\"Hello\", \"World!\"}\n\n    res := SplitString(a, \" \")\n\n    for i, v := range res {\n        if v != b[i] {\n            t.Fatalf(\"Expected string %s but got %s\", v, b[i])\n        }\n    }\n}\n\n// SplitString turns a string in a []string with delimiter\nfunc SplitString(str string, de string) []string {\n    return strings.Split(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lower-case-a-string-using-map\"\n    }}>{`Lower case a string using Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestMapToLowerString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"hello, world!\"\n\n    res := MapOverStringToLower(a)\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// MapOverStringToLower uses map to lower case a string\nfunc MapOverStringToLower(str string) string {\n    toLower := func(r rune) rune {\n        return unicode.ToLower(r)\n    }\n\n    return strings.Map(toLower, str)\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}