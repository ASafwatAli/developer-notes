{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","mtime":1548282825057},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoicmFuZG9tLWZvcmVzdC1yZWdyZXNzaW9uIn0sIlJhbmRvbSBGb3Jlc3QgUmVncmVzc2lvbiIpLG1keCgiaDIiLHsiaWQiOiJpbnR1aXRpb24ifSwiSW50dWl0aW9uIiksbWR4KCJwIixudWxsLCJSYW5kb20gZm9yZXN0IGlzIGEgdmVyc2lvbiBvZiBlbnNlbWJsZSBsZWFybmluZy4iKSxtZHgoInAiLG51bGwsIkl0J3Mgd2hlbiB5b3UgdGFrZSB0aGUgc2FtZSBhbGdvcml0aG0gbXVsdGlwbGUgdGltZXMgYW5kIGNyZWF0ZSBzb21ldGhpbmcgbW9yZSBwb3dlcmZ1bC4iKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlN0ZXBzIikpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlBpY2sgYXQgcmFuZG9tIEsgZGF0YSBwb2ludHMgZnJvbSB0aGUgVHJhaW5pbmcgU2V0LiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJCdWlsZCB0aGUgRGVjaXNpb24gVHJlZSBhc3NvY2lhdGVkIHRvIHRoZXNlIEsgZGF0YSBwb2ludHMuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkNob29zZSB0aGUgbnVtYmVyIE50cmVlIG9mIHRyZWVzIHlvdSB3YW50IHRvIGJ1aWxkIGFuZCByZXBlYXQgc3RlcHMgMSBhbmQgMi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiRm9yIGEgbmV3IGRhdGEgcG9pbnQsIG1ha2UgZWFjaCBvbmUgb2YgeW91ciBOdHJlZSB0cmVlcyBwcmVkaWN0IHRoZSB2YWx1ZSBvZiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIlkiKSwiIGZvciB0aGUgZGF0YSBwb2ludCBpbiBxdWVzdGlvbiwgYW5kIGFzc2lnbiB0aGUgbmV3IGRhdGEgcG9pbnQgdGhlIGF2ZXJhZ2UgYWNyb3NzIGFsbCB0aGUgcHJlZGljdGVkICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiWSIpLCIgdmFsdWVzLiIpKSxtZHgoInAiLG51bGwsIkRvaW5nIHRoaXMgYWxsb3dzIHlvdSB0byBpbXByb3ZlIHRoZSBhY2N1cmFjeSBvZiB5b3VyIHByZWRpY3Rpb24uIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJFeGFtcGxlIikpLG1keCgicCIsbnVsbCwiSG93IG1hbnkgbG9sbGllcyBpbiBhIGphcj8gSW1hZ2luZSB0YWtpbmcgbm90ZXMgb2YgZXZlcnkgZ3Vlc3MgLSBnZXR0aW5nIGFyb3VuZCAxMDAwIGFuZCB0aGVuIGJlZ2lubmluZyB0byBhdmVyYWdlIHRoZW0gb3V0IG9yIHRha2UgdGhlIG1lZGlhbi4gU3RhdGlzdGljYWxseSBzcGVha2luZywgeW91IGhhdmUgYSBoaWdobHkgbGlrZWxpaG9vZCBvZiBiZWluZyBjbG9zZXIgdG8gdGhlIHRydXRoLiIpLG1keCgicCIsbnVsbCwiT25jZSB5b3UgaGl0IHRoZSBtaWRkbGUgb2YgdGhlIG5vcm1hbCBkaXN0cmlidXRpb24sIHlvdSBhcmUgbW9yZSBsaWtlbHkgdG8gYmUgb24gdGhlIG1vbmV5IGZvciB0aGUgZ3Vlc3MuIiksbWR4KCJoMiIseyJpZCI6InB5dGhvbiJ9LCJQWVRIT04iKSxtZHgoInAiLG51bGwsIlRoaXMgaXMgdGhlIGxhc3QgcmVncmVzc2lvbiBtb2RlbC4gSWYgeW91IHVuZGVyc3RhbmQgZGVjaXNpb24gdHJlZSByZWdyZXNzaW9uLCB5b3UnbGwgdW5kZXJzdGFuZCByYW5kb20gZm9yZXN0LiIpLG1keCgicCIsbnVsbCwiRnJvbSBkZWNpc2lvbiB0cmVlLCB3ZSBrbm93IHRoYXQgd2Ugd2lsbCBuZWVkIHRoZSB2aXN1YWxpc2F0aW9uIHVzaW5nIHRoZSBub24tY29udGludW91cyByZXN1bHQuIiksbWR4KCJwIixudWxsLCJGb3IgdGhlIHJlZ3Jlc3Nvciwgd2UgdXNlIFJhbmRvbUZvcmVzdFJlZ3Jlc3NvciBsaWJyYXJ5LiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weXRob24ifSksIiMgUHJlZGljaXRpbmcgdGhlIFJhbmRvbSBGb3Jlc3QgcmVzdWx0c1xuIyBDcmVhdGUgdGhlIFJlZ3Jlc3NvclxuZnJvbSBza2xlYXJuLmVuc2VtYmxlIGltcG9ydCBSYW5kb21Gb3Jlc3RSZWdyZXNzb3JcbnJlZ3Jlc3NvciA9IFJhbmRvbUZvcmVzdFJlZ3Jlc3NvcihyYW5kb21fc3RhdGU9MClcbnJlZ3Jlc3Nvci5maXQoWCwgeSlcbiIpKSxtZHgoInAiLG51bGwsIlNpbXBseSwgd2l0aCB0aGVzZSBsaW5lcywgd2UgY2FuIGFscmVhZHkgZGV0ZXJtaW5lIHRoYXQgdGhlIGdyYXBoIGlzIG5vIGxvbmdlciBjb250aW51b3VzLiIpLG1keCgicCIsbnVsbCwiQnkgaGF2aW5nIHNldmVyYWwgZGVjaXNpb24gdHJlZXMsIHdlIGVuZCB1cCB3aXRoIGEgbG90IG1vcmUgXCJzdGVwc1wiIHRoYW4gd2UgaGFkIHdpdGgganVzdCBvbmUgZGVjaXNpb24gdHJlZS4iKSxtZHgoInAiLG51bGwsIk1vcmUgdHJlZSAhPT0gbW9yZSBzdGVwcy4gVGhlIG1vcmUgdHJlZXMgeW91IGhhdmUsIHRoZSBtb3JlIHRoZSBhdmVyYWdlIHdpbGwgY29udmVyZ2UgdG93YXJkcyB0aGUgc2FtZSBhdmVyYWdlLiIpLG1keCgicCIsbnVsbCwiR2VuZXJhbGx5IHRoZSBzdGVwcyB3aWxsIGJlY29tZSBiZXR0ZXIgcGxhY2VkIGRlcGVuZGluZyBvbiB0aGUgYXZlcmFnZS4iKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL01hY2hpbmUtTGVhcm5pbmcvTUwtUmFuZG9tLUZvcmVzdC1SZWdyZXNzaW9uLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,0BADA,CAAR,4BADK,CAIL,SAAQ,CACN,KAAM,WADA,CAAR,aAJK,CAOL,gEAPK,CAQL,wGARK,CASL,aAAG,cAAQ,UAAU,CAAC,GAAnB,UAAH,CATK,CAUL,cACE,UAAI,UAAU,CAAC,IAAf,wDADF,CAEE,UAAI,UAAU,CAAC,IAAf,+DAFF,CAGE,UAAI,UAAU,CAAC,IAAf,iFAHF,CAIE,UAAI,UAAU,CAAC,IAAf,kFAAqG,kBAAY,UAAU,CAAC,IAAvB,MAArG,wGAA2P,kBAAY,UAAU,CAAC,IAAvB,MAA3P,YAJF,CAVK,CAgBL,iFAhBK,CAiBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,YAAH,CAjBK,CAkBL,kPAlBK,CAmBL,yHAnBK,CAoBL,SAAQ,CACN,KAAM,QADA,CAAR,UApBK,CAuBL,+HAvBK,CAwBL,gHAxBK,CAyBL,wEAzBK,CA0BL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,kMAAL,CA1BK,CAkCL,0GAlCK,CAmCL,8HAnCK,CAoCL,+HApCK,CAqCL,uFArCK,CAAP,CAuCD,C,kSAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"random-forest-regression\"\n    }}>{`Random Forest Regression`}</h1>\n    <h2 {...{\n      \"id\": \"intuition\"\n    }}>{`Intuition`}</h2>\n    <p>{`Random forest is a version of ensemble learning.`}</p>\n    <p>{`It's when you take the same algorithm multiple times and create something more powerful.`}</p>\n    <p><strong parentName=\"p\">{`Steps`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Pick at random K data points from the Training Set.`}</li>\n      <li parentName=\"ol\">{`Build the Decision Tree associated to these K data points.`}</li>\n      <li parentName=\"ol\">{`Choose the number Ntree of trees you want to build and repeat steps 1 and 2.`}</li>\n      <li parentName=\"ol\">{`For a new data point, make each one of your Ntree trees predict the value of `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` for the data point in question, and assign the new data point the average across all the predicted `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` values.`}</li>\n    </ol>\n    <p>{`Doing this allows you to improve the accuracy of your prediction.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <p>{`How many lollies in a jar? Imagine taking notes of every guess - getting around 1000 and then beginning to average them out or take the median. Statistically speaking, you have a highly likelihood of being closer to the truth.`}</p>\n    <p>{`Once you hit the middle of the normal distribution, you are more likely to be on the money for the guess.`}</p>\n    <h2 {...{\n      \"id\": \"python\"\n    }}>{`PYTHON`}</h2>\n    <p>{`This is the last regression model. If you understand decision tree regression, you'll understand random forest.`}</p>\n    <p>{`From decision tree, we know that we will need the visualisation using the non-continuous result.`}</p>\n    <p>{`For the regressor, we use RandomForestRegressor library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Prediciting the Random Forest results\n# Create the Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(random_state=0)\nregressor.fit(X, y)\n`}</code></pre>\n    <p>{`Simply, with these lines, we can already determine that the graph is no longer continuous.`}</p>\n    <p>{`By having several decision trees, we end up with a lot more \"steps\" than we had with just one decision tree.`}</p>\n    <p>{`More tree !== more steps. The more trees you have, the more the average will converge towards the same average.`}</p>\n    <p>{`Generally the steps will become better placed depending on the average.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}