{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md","mtime":1548282824972},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoic3dpZnQtMy1vb3AifSwiU3dpZnQgMyBPT1AiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjc3dpZnQtMy1vb3AifSksIlN3aWZ0IDMgT09QIiksbWR4KCJ1bCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6IiNzdHJ1Y3RzIn0pLCJTdHJ1Y3RzIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjaW5zdGFuY2VzLW9mLW9iamVjdHMifSksIkluc3RhbmNlcyBvZiBPYmplY3RzIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjbWV0aG9kcyJ9KSwiTWV0aG9kcyIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiI2luaXRpYWxpc2Vycy1hbmQtc2VsZiJ9KSwiSW5pdGlhbGlzZXJzIGFuZCBTZWxmIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjY2xhc3MifSksIkNsYXNzIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjaW5oZXJpdGFuY2UifSksIkluaGVyaXRhbmNlIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIjc3RydWN0cy12cy1jbGFzc2VzIn0pLCJTdHJ1Y3RzIHZzIENsYXNzZXMiKSxtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiIy0tLS0tdmFsdWUtdHlwZS12cy1yZWZlcmVuY2UtdHlwZSJ9KSwiLS0tLSBWYWx1ZSB0eXBlIHZzIFJlZmVyZW5jZSB0eXBlIikpKSkpKSksbWR4KCJociIsbnVsbCksbWR4KCJoMiIseyJpZCI6InN0cnVjdHMifSwiU3RydWN0cyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJsZXQgY29vcmRpbmF0ZTE6ICh4OiBJbnQsIHk6IEludCkgPSAoMSwwKSAvL3R1cGxlXG5jb29yZGluYXRlMS54XG5cbi8vIHN0cnVjdHMgYXJlIHRoZSBibHVlcHJpbnRzXG5zdHJ1Y3QgUG9pbnQge1xuICBsZXQgeDogSW50XG4gIGxldCB5OiBJbnRcbn1cblxuLy8gd2hlbiBkZWZpbmluZyBzdHJ1Y3RzLCBkZWZpbmUgdGhlIHBhcmFtc1xubGV0IHAxID0gUG9pbnQoeDogMSwgeTogMClcbnAxXG4iKSksbWR4KCJociIsbnVsbCksbWR4KCJoMiIseyJpZCI6Imluc3RhbmNlcy1vZi1vYmplY3RzIn0sIkluc3RhbmNlcyBvZiBPYmplY3RzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi8vIHdoZW4gZGVmaW5pbmcgc3RydWN0cywgZGVmaW5lIHRoZSBwYXJhbXNcbmxldCBwMSA9IFBvaW50KHg6IDEsIHk6IDApXG5wMVxucDEueFxucDEueVxuXG5zdHJ1Y3QgVXNlciB7XG4gIGxldCB1c2VybmFtZTogU3RyaW5nXG4gIGxldCBwYXNzd29yZDogU3RyaW5nXG59XG5cbmxldCBMb2dpbiA9IFVzZXIodXNlcm5hbWU6IFwiZXhhbXBsZUBtYWlsLmNvbVwiLCBwYXNzd29yZDogXCIxMjNwYXNzXCIpXG5Mb2dpbi51c2VybmFtZVxuTG9naW4ucGFzc3dvcmRcbiIpKSxtZHgoImRpdiIse2lkOiJuZXdTZWN0aW9uIn0pLG1keCgiaHIiLG51bGwpLG1keCgiaDIiLHsiaWQiOiJtZXRob2RzIn0sIk1ldGhvZHMiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJEZWNsYXJpbmcgZW1wdHkgYXJyYXlzIHRoYXQgaW5mZXIgYSB0eXBlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwidmFyIHJlc3VsdHM6IFtQb2ludF0gPSBbXSIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiRGVjbGFyaW5nIGl0IHRoZSBwcmVmZXJyZWQgd2F5ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwidmFyIHJlc3VsdHMgPSBbUG9pbnRdKCkiKSkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJzdHJ1Y3QgUG9pbnRUd28ge1xuICBsZXQgeDogSW50XG4gIGxldCB5OiBJbnRcblxuICAvLyB0aHJlZSBzbGFzaGVzIGhlbHBzIHdpdGggZGVmaW5pdGlvbnNcblxuICAvLy8gUmV0dXJucyB0aGUgc3Vycm91bmRpbmcgcG9pbnRzIGluIHJhbmdlIG9mXG4gIC8vLyB0aGUgY3VycmVudCBvbmVcbiAgZnVuYyBwb2ludHMoaW5SYW5nZSByYW5nZTogSW50ID0gMSkgLT4gW1BvaW50VHdvXSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbUG9pbnRUd29dKClcblxuICAgIGxldCBsb3dlckJvdW5kT2ZYUmFuZ2UgPSB4IC0gcmFuZ2VcbiAgICBsZXQgdXBwZXJCb3VuZE9mWFJhbmdlID0geCArIHJhbmdlXG5cbiAgICBsZXQgbG93ZXJCb3VuZE9mWVJhbmdlID0geSAtIHJhbmdlXG4gICAgbGV0IHVwcGVyQm91bmRPZllSYW5nZSA9IHkgKyByYW5nZVxuXG4gICAgZm9yIHhDb29yZGluYXRlIGluIGxvd2VyQm91bmRPZlhSYW5nZS4uLnVwcGVyQm91bmRPZlhSYW5nZSB7XG4gICAgICBmb3IgeUNvb3JkaW5hdGUgaW4gbG93ZXJCb3VuZE9mWVJhbmdlLi4udXBwZXJCb3VuZE9mWVJhbmdlIHtcbiAgICAgICAgbGV0IGNvb3JkaW5hdGVQb2ludCA9IFBvaW50VHdvKHg6IHhDb29yZGluYXRlLCB5OiB5Q29vcmRpbmF0ZSlcbiAgICAgICAgcmVzdWx0cy5hcHBlbmQoY29vcmRpbmF0ZVBvaW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzXG4gIH1cbn1cblxubGV0IHAyID0gUG9pbnRUd28oeDogMSwgeTogMClcbnAyLnhcbnAyLnlcblxubGV0IHJhbmdlUmV0dXJuID0gcDIucG9pbnRzKGluUmFuZ2U6IDMpXG5yYW5nZVJldHVyblswXS54XG5yYW5nZVJldHVyblszXS55XG5cbnN0cnVjdCBQZXJzb24ge1xuICAgIGxldCBmaXJzdE5hbWU6IFN0cmluZ1xuICAgIGxldCBsYXN0TmFtZTogU3RyaW5nXG5cbiAgICBmdW5jIGZ1bGxOYW1lKCkgLT4gU3RyaW5nIHtcbiAgICAgIHJldHVybiBmaXJzdE5hbWUgKyBcIiBcIiArIGxhc3ROYW1lXG4gICAgfVxufVxuXG5sZXQgYVBlcnNvbiA9IFBlcnNvbihmaXJzdE5hbWU6IFwiQmlsbHlcIiwgbGFzdE5hbWU6IFwiQm9iXCIpXG5sZXQgbXlGdWxsTmFtZSA9IGFQZXJzb24uZnVsbE5hbWUoKVxuIikpLG1keCgiaHIiLG51bGwpLG1keCgiaDIiLHsiaWQiOiJpbml0aWFsaXNlcnMtYW5kLXNlbGYifSwiSW5pdGlhbGlzZXJzIGFuZCBTZWxmIiksbWR4KCJwIixudWxsLCJTZWxmIGlzIGdlbmVyYWxseSBvbmx5IHVzZWQgaW4gU3dpZnQgaW4gdGhlIGluaXQgbWV0aG9kIG9yIHdoZW4gZGlmZmVyZW50aWF0aW5nIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksInN0cnVjdCBQb2ludCB7XG4gIGxldCB4OiBJbnRcbiAgbGV0IHk6IEludFxuXG4gIGluaXQoeDogSW50LCB5OiBJbnQpIHtcbiAgICBzZWxmLnggPSB4O1xuICAgIHNlbGYueSA9IHg7XG4gIH1cbn1cblxuc3RydWN0IFJHQkNvbG9yIHtcbiAgbGV0IHJlZDogRG91YmxlXG4gIGxldCBncmVlbjogRG91YmxlXG4gIGxldCBibHVlOiBEb3VibGVcbiAgbGV0IGFscGhhOiBEb3VibGVcblxuICBsZXQgZGVzY3JpcHRpb246IFN0cmluZ1xuXG4gIC8vIEFkZCB5b3VyIGNvZGUgYmVsb3dcbiAgaW5pdChyZWQ6IERvdWJsZSwgZ3JlZW46IERvdWJsZSwgYmx1ZTogRG91YmxlLCBhbHBoYTogRG91YmxlKSB7XG4gICAgc2VsZi5yZWQgPSByZWRcbiAgICBzZWxmLmdyZWVuID0gZ3JlZW5cbiAgICBzZWxmLmJsdWUgPSBibHVlXG4gICAgc2VsZi5hbHBoYSA9IGFscGhhXG5cbiAgICBzZWxmLmRlc2NyaXB0aW9uID0gXCJyZWQ6IFxcKHNlbGYucmVkKSwgZ3JlZW46IFxcKHNlbGYuZ3JlZW4pLCBibHVlOiBcXChzZWxmLmJsdWUpLCBhbHBoYTogXFwoc2VsZi5hbHBoYSlcIlxuICB9XG59XG5cbmxldCB0ZXN0ID0gUkdCQ29sb3IocmVkOiAxNi4wLCBncmVlbjogNS4wLCBibHVlOiA0LjMsIGFscGhhOiAzLjApXG50ZXN0LmRlc2NyaXB0aW9uXG4iKSksbWR4KCJkaXYiLHtpZDoiY2xhc3NlcyJ9KSxtZHgoImhyIixudWxsKSxtZHgoImgyIix7ImlkIjoiY2xhc3MifSwiQ2xhc3MiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc3dpZnQifSksImNsYXNzIEVuZW15IHtcbiAgdmFyIGxpZmU6IEludCA9IDJcbiAgbGV0IHBvc2l0aW9uOiBQb2ludFxuXG4gIGluaXQoeDogSW50LCB5OiBJbnQpIHtcbiAgICBzZWxmLnBvc2l0aW9uID0gUG9pbnQoeDogeCwgeTogeSlcbiAgfVxuXG4gIGZ1bmMgZGVjcmVhc2VMaWZlKGJ5IGZhY3RvcjogSW50KSB7XG4gICAgbGlmZSAtPSBmYWN0b3JcbiAgfVxuXG59XG5cbnN0cnVjdCBMb2NhdGlvbiB7XG4gIGxldCBsYXRpdHVkZTogRG91YmxlXG4gIGxldCBsb25naXR1ZGU6IERvdWJsZVxufVxuXG5jbGFzcyBCdXNpbmVzcyB7XG4gIHZhciBuYW1lOiBTdHJpbmdcbiAgdmFyIGxvY2F0aW9uOiBMb2NhdGlvblxuXG4gIGluaXQobmFtZTogU3RyaW5nLCBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgICBzZWxmLm5hbWUgPSBuYW1lXG4gICAgc2VsZi5sb2NhdGlvbiA9IGxvY2F0aW9uXG4gIH1cbn1cblxubGV0IHNvbWVCdXNpbmVzcyA9IEJ1c2luZXNzKG5hbWU6IFwiUXVpcnlcIiwgbG9jYXRpb246IExvY2F0aW9uKGxhdGl0dWRlOiAzNDEsIGxvbmdpdHVkZTogODIpKVxuIikpLG1keCgiZGl2Iix7aWQ6ImluaGVyaXRhbmNlIn0pLG1keCgiaHIiLG51bGwpLG1keCgiaDIiLHsiaWQiOiJpbmhlcml0YW5jZSJ9LCJJbmhlcml0YW5jZSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJjbGFzcyBTdXBlckVuZW15OiBFbmVteSB7XG4gIGxldCBpc1N1cGVyOiBCb29sID0gdHJ1ZVxuXG4gIG92ZXJyaWRlIGluaXQoeDogSW50LCB5OiBJbnQpIHtcbiAgICBzdXBlci5pbml0KHg6IHgsIHk6IHkpXG4gICAgc2VsZi5saWZlID0gNTBcbiAgfVxufVxuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJjbGFzcyBWZWhpY2xlIHtcbiAgdmFyIG51bWJlck9mRG9vcnM6IEludFxuICB2YXIgbnVtYmVyT2ZXaGVlbHM6IEludFxuXG4gIGluaXQod2l0aERvb3JzIGRvb3JzOiBJbnQsIGFuZFdoZWVscyB3aGVlbHM6IEludCkge1xuICAgICAgc2VsZi5udW1iZXJPZkRvb3JzID0gZG9vcnNcbiAgICAgIHNlbGYubnVtYmVyT2ZXaGVlbHMgPSB3aGVlbHNcbiAgfVxufVxuXG5jbGFzcyBDYXI6IFZlaGljbGUge1xuICB2YXIgbnVtYmVyT2ZTZWF0czogSW50ID0gNFxuXG4gIG92ZXJyaWRlIGluaXQod2l0aERvb3JzIGRvb3JzOiBJbnQsIGFuZFdoZWVscyB3aGVlbHM6IEludCkge1xuICAgIHN1cGVyLmluaXQod2l0aERvb3JzOiBkb29ycywgYW5kV2hlZWxzOiB3aGVlbHMpXG4gIH1cblxufVxuXG5sZXQgc29tZUNhciA9IENhcih3aXRoRG9vcnM6IDQsIGFuZFdoZWVsczogNClcbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiY2xhc3MgUGVyc29uIHtcbiAgbGV0IGZpcnN0TmFtZTogU3RyaW5nXG4gIGxldCBsYXN0TmFtZTogU3RyaW5nXG5cbiAgaW5pdChmaXJzdE5hbWU6IFN0cmluZywgbGFzdE5hbWU6IFN0cmluZykge1xuICAgIHNlbGYuZmlyc3ROYW1lID0gZmlyc3ROYW1lXG4gICAgc2VsZi5sYXN0TmFtZSA9IGxhc3ROYW1lXG4gIH1cblxuICBmdW5jIGZ1bGxOYW1lKCkgLT4gU3RyaW5nIHtcbiAgICByZXR1cm4gXCJcXChmaXJzdE5hbWUpIFxcKGxhc3ROYW1lKVwiXG4gIH1cbn1cblxuLy8gRW50ZXIgeW91ciBjb2RlIGJlbG93XG5jbGFzcyBEb2N0b3I6IFBlcnNvbiB7XG5cbiAgb3ZlcnJpZGUgaW5pdChmaXJzdE5hbWU6IFN0cmluZywgbGFzdE5hbWU6IFN0cmluZykge1xuICAgIHN1cGVyLmluaXQoZmlyc3ROYW1lOiBmaXJzdE5hbWUsIGxhc3ROYW1lOiBsYXN0TmFtZSlcbiAgfVxuXG4gIG92ZXJyaWRlIGZ1bmMgZnVsbE5hbWUoKSAtPiBTdHJpbmcge1xuICAgIHJldHVybiBcIkRyLiBcXChsYXN0TmFtZSlcIlxuICB9XG59XG5cbmxldCBzb21lRG9jdG9yID0gRG9jdG9yKGZpcnN0TmFtZTogXCJTYW1cIiwgbGFzdE5hbWU6IFwiU21pdGhcIilcbiIpKSxtZHgoImRpdiIse2lkOiJmaW5hbCJ9KSxtZHgoImhyIixudWxsKSxtZHgoImgyIix7ImlkIjoic3RydWN0cy12cy1jbGFzc2VzIn0sIlN0cnVjdHMgdnMgQ2xhc3NlcyIpLG1keCgicCIsbnVsbCwiRGlzdGluY3QgbGluZSBpbiB0aGUgc2FuZC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc3dpZnQifSksImltcG9ydCBVSUtpdFxuXG52YXIgc3RyID0gXCJIZWxsbywgcGxheWdyb3VuZFwiXG5cblxuc3RydWN0IFVzZXIge1xuICB2YXIgZnVsbE5hbWU6IFN0cmluZ1xuICB2YXIgZW1haWw6IFN0cmluZ1xuICB2YXIgYWdlOiBJbnRcbn1cblxudmFyIHNvbWVVc2VyID0gVXNlcihmdWxsTmFtZTogXCJEZW5pcyBPJ0tlZWZmZVwiLCBlbWFpbDogXCJ0ZXN0QHRlc3RcIiwgYWdlOiAyNClcblxudmFyIGFub3RoZXJVc2VyID0gc29tZVVzZXJcblxuc29tZVVzZXIuZW1haWwgPSBcIm5ld2VtYWlsQGVtYWlsXCJcblxuLy8gcmVtYWlucyBhcyB0ZXN0QHRlc3RcbmFub3RoZXJVc2VyLmVtYWlsXG5cbmNsYXNzIFBlcnNvbiB7XG4gIHZhciBmdWxsTmFtZTogU3RyaW5nXG4gIHZhciBlbWFpbDogU3RyaW5nXG4gIHZhciBhZ2U6IEludFxuXG4gIGluaXQobmFtZTogU3RyaW5nLCBlbWFpbDogU3RyaW5nLCBhZ2U6IEludCkge1xuICAgIHNlbGYuZnVsbE5hbWUgPSBuYW1lXG4gICAgc2VsZi5lbWFpbCA9IGVtYWlsXG4gICAgc2VsZi5hZ2UgPSBhZ2VcbiAgfVxufVxuXG52YXIgc29tZVBlcnNvbiA9IFBlcnNvbihuYW1lOiBcIlRpbSBDb29rXCIsIGVtYWlsOiBcInRjQGFwcGxlLmNvbVwiLCBhZ2U6IDU0KVxuXG52YXIgYW5vdGhlclBlcnNvbiA9IHNvbWVQZXJzb25cblxuc29tZVBlcnNvbi5lbWFpbCA9IFwibmV3ZW1haWxAZW1haWxcIlxuXG4vLyBuZXdlbWFpbEBlbWFpbCAtPiBwb2ludHMgdG8gdGhlIHNhbWUgcmVmZXJlbmNlXG5hbm90aGVyUGVyc29uLmVtYWlsXG4iKSksbWR4KCJkaXYiLHtpZDoidmFsdWV2c3JlZiJ9KSxtZHgoImgzIix7ImlkIjoiLS0tLS12YWx1ZS10eXBlLXZzLXJlZmVyZW5jZS10eXBlIn0sIi0tLS0gVmFsdWUgdHlwZSB2cyBSZWZlcmVuY2UgdHlwZSIpLG1keCgicCIsbnVsbCwiVmFsdWVzIGFyZSBjb3BpZWQgYWNyb3NzLCByZWZlcmVuY2VzIGFyZSBub3QuIEFsbCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwic3RydWN0cyIpLCIgYXJlIHZhbHVlIHR5cGVzLiIpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvU3dpZnQvU3dpZnQtMy1PT1AubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"swift-3-oop\"\n    }}>{`Swift 3 OOP`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-oop\"\n        }}>{`Swift 3 OOP`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#structs\"\n            }}>{`Structs`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#instances-of-objects\"\n            }}>{`Instances of Objects`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#methods\"\n            }}>{`Methods`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#initialisers-and-self\"\n            }}>{`Initialisers and Self`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#class\"\n            }}>{`Class`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#inheritance\"\n            }}>{`Inheritance`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#structs-vs-classes\"\n            }}>{`Structs vs Classes`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----value-type-vs-reference-type\"\n                }}>{`---- Value type vs Reference type`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs\"\n    }}>{`Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`let coordinate1: (x: Int, y: Int) = (1,0) //tuple\ncoordinate1.x\n\n// structs are the blueprints\nstruct Point {\n  let x: Int\n  let y: Int\n}\n\n// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"instances-of-objects\"\n    }}>{`Instances of Objects`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\np1.x\np1.y\n\nstruct User {\n  let username: String\n  let password: String\n}\n\nlet Login = User(username: \"example@mail.com\", password: \"123pass\")\nLogin.username\nLogin.password\n`}</code></pre>\n    <div id=\"newSection\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Declaring empty arrays that infer a type `}<inlineCode parentName=\"li\">{`var results: [Point] = []`}</inlineCode></li>\n      <li parentName=\"ul\">{`Declaring it the preferred way `}<inlineCode parentName=\"li\">{`var results = [Point]()`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`struct PointTwo {\n  let x: Int\n  let y: Int\n\n  // three slashes helps with definitions\n\n  /// Returns the surrounding points in range of\n  /// the current one\n  func points(inRange range: Int = 1) -> [PointTwo] {\n    var results = [PointTwo]()\n\n    let lowerBoundOfXRange = x - range\n    let upperBoundOfXRange = x + range\n\n    let lowerBoundOfYRange = y - range\n    let upperBoundOfYRange = y + range\n\n    for xCoordinate in lowerBoundOfXRange...upperBoundOfXRange {\n      for yCoordinate in lowerBoundOfYRange...upperBoundOfYRange {\n        let coordinatePoint = PointTwo(x: xCoordinate, y: yCoordinate)\n        results.append(coordinatePoint)\n      }\n    }\n\n    return results\n  }\n}\n\nlet p2 = PointTwo(x: 1, y: 0)\np2.x\np2.y\n\nlet rangeReturn = p2.points(inRange: 3)\nrangeReturn[0].x\nrangeReturn[3].y\n\nstruct Person {\n    let firstName: String\n    let lastName: String\n\n    func fullName() -> String {\n      return firstName + \" \" + lastName\n    }\n}\n\nlet aPerson = Person(firstName: \"Billy\", lastName: \"Bob\")\nlet myFullName = aPerson.fullName()\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"initialisers-and-self\"\n    }}>{`Initialisers and Self`}</h2>\n    <p>{`Self is generally only used in Swift in the init method or when differentiating`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Point {\n  let x: Int\n  let y: Int\n\n  init(x: Int, y: Int) {\n    self.x = x;\n    self.y = x;\n  }\n}\n\nstruct RGBColor {\n  let red: Double\n  let green: Double\n  let blue: Double\n  let alpha: Double\n\n  let description: String\n\n  // Add your code below\n  init(red: Double, green: Double, blue: Double, alpha: Double) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n    self.alpha = alpha\n\n    self.description = \"red: \\\\(self.red), green: \\\\(self.green), blue: \\\\(self.blue), alpha: \\\\(self.alpha)\"\n  }\n}\n\nlet test = RGBColor(red: 16.0, green: 5.0, blue: 4.3, alpha: 3.0)\ntest.description\n`}</code></pre>\n    <div id=\"classes\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"class\"\n    }}>{`Class`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Enemy {\n  var life: Int = 2\n  let position: Point\n\n  init(x: Int, y: Int) {\n    self.position = Point(x: x, y: y)\n  }\n\n  func decreaseLife(by factor: Int) {\n    life -= factor\n  }\n\n}\n\nstruct Location {\n  let latitude: Double\n  let longitude: Double\n}\n\nclass Business {\n  var name: String\n  var location: Location\n\n  init(name: String, location: Location) {\n    self.name = name\n    self.location = location\n  }\n}\n\nlet someBusiness = Business(name: \"Quiry\", location: Location(latitude: 341, longitude: 82))\n`}</code></pre>\n    <div id=\"inheritance\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class SuperEnemy: Enemy {\n  let isSuper: Bool = true\n\n  override init(x: Int, y: Int) {\n    super.init(x: x, y: y)\n    self.life = 50\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Vehicle {\n  var numberOfDoors: Int\n  var numberOfWheels: Int\n\n  init(withDoors doors: Int, andWheels wheels: Int) {\n      self.numberOfDoors = doors\n      self.numberOfWheels = wheels\n  }\n}\n\nclass Car: Vehicle {\n  var numberOfSeats: Int = 4\n\n  override init(withDoors doors: Int, andWheels wheels: Int) {\n    super.init(withDoors: doors, andWheels: wheels)\n  }\n\n}\n\nlet someCar = Car(withDoors: 4, andWheels: 4)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Person {\n  let firstName: String\n  let lastName: String\n\n  init(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n\n  func fullName() -> String {\n    return \"\\\\(firstName) \\\\(lastName)\"\n  }\n}\n\n// Enter your code below\nclass Doctor: Person {\n\n  override init(firstName: String, lastName: String) {\n    super.init(firstName: firstName, lastName: lastName)\n  }\n\n  override func fullName() -> String {\n    return \"Dr. \\\\(lastName)\"\n  }\n}\n\nlet someDoctor = Doctor(firstName: \"Sam\", lastName: \"Smith\")\n`}</code></pre>\n    <div id=\"final\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs-vs-classes\"\n    }}>{`Structs vs Classes`}</h2>\n    <p>{`Distinct line in the sand.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\n\nvar str = \"Hello, playground\"\n\n\nstruct User {\n  var fullName: String\n  var email: String\n  var age: Int\n}\n\nvar someUser = User(fullName: \"Denis O'Keeffe\", email: \"test@test\", age: 24)\n\nvar anotherUser = someUser\n\nsomeUser.email = \"newemail@email\"\n\n// remains as test@test\nanotherUser.email\n\nclass Person {\n  var fullName: String\n  var email: String\n  var age: Int\n\n  init(name: String, email: String, age: Int) {\n    self.fullName = name\n    self.email = email\n    self.age = age\n  }\n}\n\nvar somePerson = Person(name: \"Tim Cook\", email: \"tc@apple.com\", age: 54)\n\nvar anotherPerson = somePerson\n\nsomePerson.email = \"newemail@email\"\n\n// newemail@email -> points to the same reference\nanotherPerson.email\n`}</code></pre>\n    <div id=\"valuevsref\"></div>\n    <h3 {...{\n      \"id\": \"-----value-type-vs-reference-type\"\n    }}>{`---- Value type vs Reference type`}</h3>\n    <p>{`Values are copied across, references are not. All `}<inlineCode parentName=\"p\">{`structs`}</inlineCode>{` are value types.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}