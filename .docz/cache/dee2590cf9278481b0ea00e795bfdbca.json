{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md","mtime":1562563032037},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"the-complete-go-developer-guide\"\n    }}>{`The Complete Go Developer Guide`}</h1>\n    <h2 {...{\n      \"id\": \"intro-to-the-go-cli\"\n    }}>{`Intro to the Go CLI`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go build`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles go source files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go run`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and executes one or two files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go fmt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Formats all go code in current directory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go install`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and \"installs\" a package`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go get`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Downloads the raw source code of someone else's pacakge`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go test`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Runs any tests associated with the current project`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"hello-world\"\n    }}>{`Hello World`}</h2>\n    <p>{`Using the Go CLI, we can run a simple hello world as so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\n/**\n * Basic hello world.\n * Run using go -o\n */\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"go-packages\"\n    }}>{`Go Packages`}</h2>\n    <p>{`When you see lines like `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, that's like a workspace. `}</p>\n    <p>{`There are two types of packages in Golang: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Executable: Generates a file that we can run.`}</li>\n      <li parentName=\"ol\">{`Reuseable: Code used as \"helpers\" -- a good place to put reusable login.`}</li>\n    </ol>\n    <p>{`Take for example three files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n\n// support.go\npackage main\n\nfunc support() {\n  fmt.Println(\"Hi support!\")\n}\n\n// helper.go\npackage main\n\nfunc helper() {\n  fmt.Println(\"Hi helper!\")\n}\n`}</code></pre>\n    <p>{`How can we tell the difference between whether we are creating a `}<inlineCode parentName=\"p\">{`executable`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`reuseable`}</inlineCode>{` type of package? It actually depends on whether you use the name `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`. If you ran `}<inlineCode parentName=\"p\">{`go build`}</inlineCode>{` and you did not use `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, it will not spit out an executable file.`}</p>\n    <p>{`Any executable package also needs a func called `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"variable-declarations\"\n    }}>{`Variable Declarations`}</h2>\n    <p>{`Variables in Go can generally be inferred from the right hand side. Linters will generally help you out with this.`}</p>\n    <p>{`Shorthand declarations with initialisation can be done with `}<inlineCode parentName=\"p\">{`:=`}</inlineCode>{`, although it should be noted you can omit the `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` when declaring new values for variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nfunc main() {\n  var card string = \"Ace of spades\"\n  easierCard := \"Ace of hearts\"\n  easierCard = \"Five of Diamonds\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions-and-return-types\"\n    }}>{`Functions and Return Types`}</h2>\n    <p>{`The patter for declaring a return type is to name that return type after a func is called.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n  card := newCard()\n\n  fmt.Println(card)\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"slices-and-for-loops\"\n    }}>{`Slices and For Loops`}</h2>\n    <p>{`Go has two basic structures for handling lists: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Array: fixed length list of things`}</li>\n      <li parentName=\"ol\">{`Slice: an array that can grow or shrink`}</li>\n    </ol>\n    <p>{`Every slice must also be of the same type.`}</p>\n    <p>{`For a slice, we create it like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n  cards := []string{newCard()}\n  cards = append(cards, \"Six of Spades\")\n  \n  for i, card := range cards {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`Note that the cards variable is immutable and a new slice is returned when we use the `}<inlineCode parentName=\"p\">{`append`}</inlineCode>{` function to add to the slice.`}</p>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{` keyword to iterate over a slice.`}</p>\n    <h2 {...{\n      \"id\": \"object-oriented-approach-vs-go-approach\"\n    }}>{`Object Oriented approach vs Go approach`}</h2>\n    <p>{`Note that there are no classes in Go.`}</p>\n    <p>{`In Go, what we do is declare a new type and then create `}<inlineCode parentName=\"p\">{`functions with a receiver`}</inlineCode>{`. This is a common pattern that repeats throughout Go courses.`}</p>\n    <p>{`In practice, we can update the `}<inlineCode parentName=\"p\">{`main.go`}</inlineCode>{` file with a new type we create:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := deck{newCard()}\n  cards = append(cards, \"Six of Spades\")\n\n  cards.print()\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n\n// deck.go\npackage main\n\nimport \"fmt\"\n\n// Create a new type of 'deck'\n// which is a slice of strings\ntype deck []string\n\n// Creating a receiver function\nfunc (d deck) print() {\n  for i, card := range d {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`It is important to note that if your other `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{` files are not in the `}<inlineCode parentName=\"p\">{`$GOPATH`}</inlineCode>{` that you need to include them during your run state ie `}<inlineCode parentName=\"p\">{`go run main.go deck.go`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"slice-range-syntax\"\n    }}>{`Slice range syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// [StartingAt : UpToButNotInclusive]\nslice := [\"one\", \"two\", \"three\"]\n// Get \"one\", \"two\"\nsliceRange := slice[0:2]\n// Same as...\nsliceRangeTwo  := [:2]\n// Get just the last\nsliceRangeThree := [2:]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returning-multiple-values\"\n    }}>{`Returning multiple values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc main() {\n  cards := newDeck()\n\n  // init and assign return values\n  hand, remainingDeck := deal(cards, 5)\n  hand.print()\n  remainingDeck.print()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"converting-to-bite-slices-type-conversion\"\n    }}>{`Converting to bite slices (type conversion)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`byteSlice := []byte(\"Hi there\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-to-file\"\n    }}>{`Writing to file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := newDeck()\n  cards.saveToFile(\"my_cards\")\n}\n\n// deck.go\n\n// omit newDeck()\nfunc (d deck) saveToFile(filename string) error {\n   return ioutil.WriteFile(filename, []byte(d.toString()), 0666)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-from-hard-drive\"\n    }}>{`Reading from hard drive`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\n// main.go\npackage main\n\nfunc main() {\n  cards := newDeckFromFile(\"my_cards\")\n  cards.print()\n}\n\n// deck.go\nfunc newDeckFromFile(filename string) deck {\n    // bs = byteSlice\n    bs, err := ioutil.ReadFile(filename)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        os.Exit(1)\n    }\n\n    s := strings.Split(string(bs), \",\")\n    return deck(s)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shuffling-a-deck\"\n    }}>{`Shuffling a Deck`}</h2>\n    <p>{`There is no inbuilt function to randomise a slice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\nimport (\n  \"math/rand\"\n  \"time\"\n)\n\n// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc (d deck) shuffle() {\n  source := rand.NewSource(time.Now().UnixNano())\n  r := rand.New(source)\n\n  for i := range d {\n    newPosition := r.Intn(len(d) - 1)\n\n    // fancy one line swap\n    d[i], d[newPosition] = d[newPosition], d[i]\n  }\n}\n\nfunc main() {\n   func main() {\n     cards := newDeck()\n\n     // init and assign return values\n     cards.shuffle()\n     cards.print()\n   }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing-with-go\"\n    }}>{`Testing with Go`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"asserting-elements\"\n    }}>{`Asserting Elements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clean-up-for-file-writing\"\n    }}>{`Clean up for file writing`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport (\n  \"testing\"\n  \"os\"\n)\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n\n// although long name, the test \nfunc TestSaveToDeckAndNewDeckFromFile(t *testing.T) {\n  os.Remove(\"_decktesting\")\n\n  d := new Deck()\n  d.saveToFile(\"_decktesting\")\n\n  loadedDeck := newDeckFromFile(\"_decktesting\")\n\n  if len(loadedDeck) != 16 {\n    t.Errorf(\"Expected 16 cards in deck, got %v\", len(loadedDeck))\n  }\n\n  os.Remove(\"_decktesting\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-in-go\"\n    }}>{`Structs in Go`}</h2>\n    <p>{`Structs are a collection of different properties linked with a particular purpose.`}</p>\n    <p>{`If we want to convert the string \"Ace of Spaces\" to become more flexible and as a structure, we could create a struct:`}</p>\n    <p>{`If you init a struct with no values, the zero values are assigned as the following:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Zero Value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type card struct {\n  house string\n  value string\n}\n\n// usage\nfunc main() {\n  card := card{\"Spaces\", \"Ace\"}\n  // being more definitive\n  cardTwo := card{house: \"Spaces\", value: \"Ace\"}\n  fmt.Println(card)\n\n  // non-init - sets the zero value\n  // %+v will print out all field names and values\n  var cardThree card\n  fmt.Printf(\"%+v\", cardThree)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"embedding-structs\"\n    }}>{`Embedding Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type contactInfo struct {\n  email string\n  zipCode int\n}\n\ntype person struct {\n  firstName string\n  lastName string\n  contactInfo\n}\n\nfunc main() {\n  jim := person{\n    firstName: \"Jim\",\n    lastName: \"Party\",\n    contactInfo: contactInfo{\n      email: \"jim@gmail.com\",\n      zipCode: 94000\n    }\n  }\n\n  fmt.Printf(\"%+v\", jim)\n  // same as\n  jim.print()\n\n  // Update name\n  jim.updateNameIncorrect(\"jimmy\")\n  jim.print() // still shows jim instead of jimmy\n\n  // Correct\n  jimPointer := &jim\n  jimPointer.updateName(\"jimmy\")\n  jim.print() // prints jimmy\n\n  // Also works - shortcut for the receiver\n  jim.updatename(\"jimmy\")\n  jim.print()\n}\n\nfunc (p person) print() {\n  fmt.Printf(\"%+v\", p)\n}\n\n// updateName without a pointer\nfunc (p person) updateNameIncorrect(newFirstName string) {\n  p.firstName = newFirstname\n}\n\n// updateName correctly\n// note that taking *type means we're working with a pointer\n// *variable means we want to manipulate the value it is pointing at\nfunc (p *person) updateName(newFirstName string) {\n  (*p).firstName = newFirstname\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-operations\"\n    }}>{`Pointer operations`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`*address`}</inlineCode></li>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`&value`}</inlineCode></li>\n      <li parentName=\"ul\">{`Note that with slices vs structs, you can manipulate the slice directly without having to use a pointer, unlike structs.`}</li>\n      <li parentName=\"ul\">{`Slices with the underlying array get copied, but the array points to the same addresses.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reference-vs-value-types\"\n    }}>{`Reference vs Value Types`}</h3>\n    <p>{`Use pointers for value types, don't worry about it for reference types.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value types`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference types`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`slices`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maps`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`channels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pointers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`structs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`functions`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h2>\n    <p>{`Maps are similar to structs, but have some differences. These are basically `}<inlineCode parentName=\"p\">{`key:value`}</inlineCode>{` pairs.`}</p>\n    <p>{`These are comparable to `}<inlineCode parentName=\"p\">{`hash`}</inlineCode>{` in Ruby, `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` in JavaScript or `}<inlineCode parentName=\"p\">{`Dict`}</inlineCode>{` in Python.`}</p>\n    <p>{`For a map, the keys all need to be the same type, and the values all need to be the same type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\n)\n\nfunc main() {\n  // map: declare new map\n  // [string]: keys are type string\n  // string: values are type string\n  colors := map[string]string {\n    \"red\": \"#ff0000\",\n    \"green\": \"#4b9000\"\n  }\n\n  fmt.Println(colors)\n}\n`}</code></pre>\n    <p>{`Creating a zero value map can be done basically in two ways:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`var colors map[string]string\ncolorsEq = make(map[string]string)\n\n// adding in values\ncolorsEq[\"white\"] = \"#ffffff\"\n`}</code></pre>\n    <p>{`We MUST use square braces to access map values, NOT dot notation.`}</p>\n    <h2 {...{\n      \"id\": \"iterating-over-maps\"\n    }}>{`Iterating Over Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`colors := map[string]string {\n  \"red\": \"#ff0000\",\n  \"green\": \"#4b9000\"\n}\n\n\nfunc printMap(c map[string]string) {\n  for color, hex := range c {\n    fmt.Println(\"Hex code for\", color, \"is\", hex)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-vs-structs\"\n    }}>{`Maps Vs Structs`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Maps`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Structs`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All keys must be same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values can be different types`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a collection of related properties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Need to know all the different fields at compile time`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All values must be the same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys don't support indexing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Don't need to know all keys at compile time`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a `}<inlineCode parentName=\"td\">{`thing`}</inlineCode>{` with a lot of properties`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys are indexed - can iterate over them`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value type!`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference type !`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`The following example shows similar types but returning different values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\ntype englishBot struct {}\ntype spanishBot struct {}\n\n//\ntype bot interface {\n  getGreeting() string\n}\n\nfunc main() {\n  eb := englishBot()\n  sb := spanishBot()\n\n  printGreeting(eb)\n  printGreeting(sb)\n}\n\nfunc (eb englishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hi There!\"\n}\n\nfunc (sb spanishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hola!\"\n}\n\n// any type that implements getGreeting is now an \"honorary\" member of type bot\nfunc printGreet(b bot) {\n  fmt.Println(b.getGreeting())\n}\n`}</code></pre>\n    <p>{`More complex interfaces in Go might have signatures like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n}\n`}</code></pre>\n    <p>{`If you want to set more \"qualifiers\" to conform to the interface, you can add more methods to the signature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n  getBotVersion() float64\n  respondToUser(user) string\n}\n`}</code></pre>\n    <p>{`You can only create values out of the concrete types and not interface types.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Interfaces are not generic types (other langs have them, Go famously does not).`}</li>\n      <li parentName=\"ul\">{`Interfaces are \"implicit\", we don't have to say a custom type satisfies some interface.`}</li>\n      <li parentName=\"ul\">{`Interfaces are a contract to help us manage types.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"http-package\"\n    }}>{`HTTP Package`}</h2>\n    <p>{`Using http and getting a body response back and helping us understanding how structs work a little better.`}</p>\n    <p><img alt=\"Diagram of how to access return body\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550201024/developer-notes/Screen_Shot_2019-02-15_at_2.22.59_pm.png\" /></p>\n    <p>{`If we use an interface as a property of a struct, we can add any property there as long as it conforms to the interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type example interface {\n  Reader\n}\n\ntype resp struct {\n  propOne example\n}\n`}</code></pre>\n    <p>{`We can also assemble multiple interfaces together to create another interface where all requirements need to be satisfied:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type reader interface {}\ntype closer interface {}\n\ntype readCloser interface {\n  reader\n  closer\n}\n`}</code></pre>\n    <p>{`For an application of this in action with the http.Get func:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Note: Reader interface manipulates byte slice -- it doesn't return it. Go also has easier help functions to simply reading responses.\n  bs := make([]byte, 99999)\n  resp.Body.Read(bs)\n  fmt.Println(string(bs))\n}\n`}</code></pre>\n    <p>{`In order to prevent ourselves from having to manually create a byte slice each time, we can use the `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` function instead. The method signature for this requires a destination that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface and a source that implements the `}<inlineCode parentName=\"p\">{`Reader`}</inlineCode>{` interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(os.Stdout, resp.Body)\n}\n`}</code></pre>\n    <p>{`With everything that we have learned so far about how `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` works, let's create something that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\ntype logWriter struct {}\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  lw := logWriter{}\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(lw, resp.Body)\n}\n\nfunc (logWriter) Write(bs []byte) (int, error) {\n  fmt.Println(string(bs))\n  fmt.Println(\"Just wrote this many bytes\", len(bs))\n  return len(bs), nil\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channels-and-go-routines\"\n    }}>{`Channels and Go Routines`}</h2>\n    <p>{`Both channels and go routines are used for cocurrency programming.`}</p>\n    <p>{`The project for this particular example will use a status checker.`}</p>\n    <p><img alt=\"Project layout\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533610/developer-notes/Screen_Shot_2019-02-19_at_9.59.38_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\"http://google.com\", \"http://amazon.com\", \"http://facebook.com\"}\n\n  for _, link := range ws {\n    checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <p>{`If we think of the main function as the `}<inlineCode parentName=\"p\">{`main go routine`}</inlineCode>{`, we can start to imagine the above working sequentially as a result. In order to create new go routines, we can use the keyword `}<inlineCode parentName=\"p\">{`go`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  for _, link := range ws {\n    // creates new Go routine\n    go checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"go-scheduler-behind-the-scenes\"\n    }}>{`Go Scheduler Behind The Scenes`}</h3>\n    <p><img alt=\"Go scheduler\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533611/developer-notes/Screen_Shot_2019-02-19_at_10.46.20_am.png\" /></p>\n    <p>{`Not that with one CPU, the Go scheduler runs `}<inlineCode parentName=\"p\">{`one`}</inlineCode>{` routine until finished or hits a blocking call. If a blocking call is hit, the scheduler pausing execution on a routine and starts the next one.`}</p>\n    <p>{`If we insteads have multiple cores, the scheduler runs one thread on each \"logical\" core. This then truly runs multiple routines at the same time.`}</p>\n    <p>{`By default, Go tries to use one core.`}</p>\n    <p>{`In Go, you will constantly see `}<inlineCode parentName=\"p\">{`concurrency is not parallelism`}</inlineCode>{`. Concurrency is the case of multiple threads executing code. `}</p>\n    <p>{`If one thread blocks, another one is picked up and worked out. Parallelism is the use of multiple physical CPU cores at the same time.`}</p>\n    <h3 {...{\n      \"id\": \"returning-from-go-routines\"\n    }}>{`Returning from Go routines`}</h3>\n    <p>{`In order to get back to the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` routine from child routines, we need to update the code to handle channels for communication.`}</p>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`channel`}</inlineCode>{` communicates with a particular type - something incredibly important.`}</p>\n    <h3 {...{\n      \"id\": \"sending-data-with-channels\"\n    }}>{`Sending Data with Channels`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Syntax`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`channel <- 5`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Send value 5 into this channel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`myNumber <- channel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into the channel. When we get one, assign the value to 'myNumber'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fmt.Println(<- channel)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into channel. When we get one, log it out immediately`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`One of the challenging concepts with channels is that each message coming back from a channel is also `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` code. This means that for every iteration that uses a channel, it is important to have the appropriate amount of receivers ready on the main routine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  for {\n    go checkLink(<-c, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alternative-loop-syntax\"\n    }}>{`Alternative loop syntax`}</h3>\n    <p>{`So we don't want to continually ping a request, we can update the control loop with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    go checkLink(l, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sleeping-a-routine\"\n    }}>{`Sleeping a routine`}</h3>\n    <p>{`We sleep a routine in order to generate a pause.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n  \"time\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    // invoke function literal\n    // ensure to pass the argument to have a copy in memory\n    go func(link string) {\n      time.Sleep(5*time.Second)\n      checkLink(link, c)\n    }(l)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}