{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Udacity.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Udacity.md","mtime":1562563032055},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kubernetes/Kubernetes-Udacity.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAApB,EAEsC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAClC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAApB,EAE0C;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACtC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAApB,CADsC,EAItC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAApB,CAJsC,EAOtC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAApB,CAPsC,EAUtC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAApB,CAVsC,EAatC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApB,CAbsC,EAgBtC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApB,CAhBsC,CAF1C,CADkC,EAuBlC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAApB,EAE0D;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACtD;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApB,CADsD,CAF1D,CAvBkC,EA8BlC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAApB,EAEiC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAC7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApB,CAD6B,EAI7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApB,CAJ6B,EAO7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAApB,CAP6B,EAU7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAApB,CAV6B,EAa7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAApB,CAb6B,EAgB7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApB,CAhB6B,EAmB7B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAApB,CAnB6B,CAFjC,CA9BkC,EAuDlC;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAApB,EAE8C;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAC1C;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApB,CAD0C,CAF9C,CAvDkC,CAFtC,CADF,CAPK,EA6EL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA7EK,EAgFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAhFK,EAiFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAjFK,EAkFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlFK,EAmFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAHF,CAnFK,EAwFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAxFK,EA2FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA3FK,EA4FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIA5FK,EA6FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yHA7FK,EA8FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2JA9FK,EA+FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2LA/FK,EAgGL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhGK,EAmGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAnGK,EAoGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHF,CApGK,EAyGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAzGK,EA0GL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA1GK,EA6GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HA7GK,EA8GL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA9GK,EAiHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAA4F;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA5F,QAAyJ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAzJ,WAA2N;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3N,MAjHK,EAkHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAlHK,EAmHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qxBAAL,CAnHK,EAuJL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAvJK,EA0JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EA1JK,EA2JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0IA3JK,EA4JL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA+C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA/C,WAA8H;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA9H,MA5JK,EA6JL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA7JK,EAgKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iJAhKK,EAiKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAjKK,EAkKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wRAlKK,EAmKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAnKK,EAoKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDApKK,EAuKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAvKK,EAwKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAxKK,EAyKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGAzKK,EA0KL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA1KK,EA6KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJA7KK,EA8KL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA9KK,EAiLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oOAjLK,EAkLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6IAlLK,EAmLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,oGAnLK,EAoLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FApLK,EAqLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGArLK,EAsLL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAtLK,EAyLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2KAzLK,EA0LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BA1LK,EA2LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFA3LK,EA4LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CA5LK,EAkML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+HAlMK,EAmML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0JAnMK,EAoML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFApMK,EAqML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArMK,EAwML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAA0C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA1C,MAxMK,EAyML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yJAAL,CAzMK,EA8ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EA9MK,EA+ML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA/MK,EAkNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAlNK,EAmNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6JAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHF,CAnNK,EAwNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAH,CAxNK,EAyNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAzNK,EA0NL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAAL,CA1NK,EAgOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAH,uEAhOK,EAiOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAqD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAArD,yBAjOK,EAkOL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAlOK,EAqOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAH,+EArOK,EAsOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kKAtOK,EAuOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kKAvOK,EAwOL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAxOK,EA2OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gKA3OK,EA4OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAuD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAvD,iBAAuI;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAAvI,MA5OK,EA6OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HA7OK,EA8OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,CA9OK,EA+OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kQA/OK,EAgPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAyB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAzB,qEAA4I;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA5I,yBAAoN;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAApN,yBAhPK,EAiPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,uDAA2G;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAA3G,MAjPK,EAkPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAiC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAjC,YAAgG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAAhG,0BAA0O;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAA1O,iHAlPK,EAmPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qIAAmI;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnI,iCAnPK,EAoPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA+C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA/C,WAAyG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAzG,wDApPK,EAqPL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArPK,EAwPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAAoF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApF,mJAxPK,EAyPL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAzPK,EA4PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAA0D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAA1D,uFA5PK,EA6PL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA7PK,EAgQL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAhQK,EAmQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAnQK,EAoQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DApQK,CAAP;AAsQD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BArRMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kubernetes-udacity-course\"\n    }}>{`Kubernetes Udacity Course`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#kubernetes-udacity-course\"\n        }}>{`Kubernetes Udacity Course`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#introduction-to-microservices\"\n            }}>{`Introduction to Microservices`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#the-evolution-of-applications\"\n                }}>{`The Evolution of Applications`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#microservices\"\n                }}>{`Microservices`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#the-app-on-google-cloud\"\n                }}>{`The app on Google Cloud`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#12-factor-apps\"\n                }}>{`12 factor apps`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#refactor-to-msa\"\n                }}>{`Refactor to MSA`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#json-web-tokens\"\n                }}>{`JSON Web Tokens`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#lesson-2-building-the-containers-with-docker\"\n            }}>{`Lesson 2: Building the Containers with Docker`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#what-is-docker\"\n                }}>{`What is Docker?`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#lesson-3-kubernetes\"\n            }}>{`Lesson 3: Kubernetes`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#how-to-learn-k8s\"\n                }}>{`How to learn k8s`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#kubernetes-intro\"\n                }}>{`Kubernetes Intro`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#pods\"\n                }}>{`Pods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#monitoring-and-health-checks\"\n                }}>{`Monitoring and Health Checks`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#app-config-and-security-overview\"\n                }}>{`App Config and Security Overview`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#create-a-service\"\n                }}>{`Create a service`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#adding-labels-to-pods\"\n                }}>{`Adding labels to pods`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#lesson-4-deploying-microservices\"\n            }}>{`Lesson 4: Deploying Microservices`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#deployment\"\n                }}>{`Deployment`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"introduction-to-microservices\"\n    }}>{`Introduction to Microservices`}</h2>\n    <p>{`Microservices helps the method for \"always on\" apps.`}</p>\n    <p>{`Distributed systems will be taught to add ontop of tools we may already use like Chef etc.`}</p>\n    <p>{`Order:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Understanding the basics`}</li>\n      <li parentName=\"ol\">{`How to package and distribute apps`}</li>\n      <li parentName=\"ol\">{`Running applications using a distributed platform that can scale`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"the-evolution-of-applications\"\n    }}>{`The Evolution of Applications`}</h3>\n    <p>{`Why was it designed this way?`}</p>\n    <p>{`Years ago, applications were huge and it would take hours just for a build. Typically you would release software infrequently.`}</p>\n    <p>{`Recently, the idea of microservices is to break down these large applications which allow for faster deployments.`}</p>\n    <p>{`The main reason for microservices is to speed up development. Breaking things down into microservices allow you have many releases or few releases.`}</p>\n    <p>{`If we think of a simple setup being done through things like Chef. Co-ordination of many things will need to compose them all together like a Docker compose or a kubernetes setup.`}</p>\n    <h3 {...{\n      \"id\": \"microservices\"\n    }}>{`Microservices`}</h3>\n    <p>{`What does it mean? It's just an architectual approach. It's goes for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Modularity`}</li>\n      <li parentName=\"ul\">{`Scalability`}</li>\n      <li parentName=\"ul\">{`Ease of deployment`}</li>\n    </ul>\n    <p>{`The design pattern applies to any application. It just refers to rapid deployments and continuous delivery. it pushes the automation tools to their limits.`}</p>\n    <h3 {...{\n      \"id\": \"the-app-on-google-cloud\"\n    }}>{`The app on Google Cloud`}</h3>\n    <p>{`The app on the Gcloud console is a basic server which gives a JWT and allows you to use this to access a secure route.`}</p>\n    <h3 {...{\n      \"id\": \"12-factor-apps\"\n    }}>{`12 factor apps`}</h3>\n    <p>{`You can think of the 12 factors as quintessential to building an app that deals with `}<inlineCode parentName=\"p\">{`portability`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`deployability`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`scalability`}</inlineCode>{`.`}</p>\n    <p>{`The 12 factor manifesto can be found (here)`}{`[https://12factor.net/]`}{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I. Codebase\nOne codebase tracked in revision control, many deploys\n\nII. Dependencies\nExplicitly declare and isolate dependencies\n\nIII. Config\nStore config in the environment\n\nIV. Backing services\nTreat backing services as attached resources\n\nV. Build, release, run\nStrictly separate build and run stages\n\nVI. Processes\nExecute the app as one or more stateless processes\n\nVII. Port binding\nExport services via port binding\n\nVIII. Concurrency\nScale out via the process model\n\nIX. Disposability\nMaximize robustness with fast startup and graceful shutdown\n\nX. Dev/prod parity\nKeep development, staging, and production as similar as possible\n\nXI. Logs\nTreat logs as event streams\n\nXII. Admin processes\nRun admin/management tasks as one-off processes\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"refactor-to-msa\"\n    }}>{`Refactor to MSA`}</h3>\n    <p>{`All the monolithic stuff we wish to break down into smaller systems.`}</p>\n    <p>{`Splitting up the application doubles the complexity. This complexity is what drives the use of management systems like Kubernetes.`}</p>\n    <p>{`The idea is that the MSA will deal with `}<inlineCode parentName=\"p\">{`tightly coupled components`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`maintenance`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"json-web-tokens\"\n    }}>{`JSON Web Tokens`}</h3>\n    <p>{`JWTs (pronounced lie jot). Super useful and compact means to encode and decode. The fact that they can be signed is for things like auth.`}</p>\n    <p>{`Since they can be signed, you can ensure safety and that things are not being tampered with.`}</p>\n    <p>{`They work through a client/server relationship. The server knows a client cannot be trusted - it only wants to give something to someone they trust. As the client sends data, the server replies with a token. The client then stores the data and sends it along with the JWT.`}</p>\n    <p>{`So the server verifies the token and checks that it hasn't been tampered with.`}</p>\n    <h2 {...{\n      \"id\": \"lesson-2-building-the-containers-with-docker\"\n    }}>{`Lesson 2: Building the Containers with Docker`}</h2>\n    <p>{`The packaging of things seems like a bunch of difficult work.`}</p>\n    <p>{`We use container images, as it is a packaging format that knows and has all of your dependencies.`}</p>\n    <p>{`Things like Docker make container service APIs nice and easy to run on your own servers.`}</p>\n    <h3 {...{\n      \"id\": \"what-is-docker\"\n    }}>{`What is Docker?`}</h3>\n    <p>{`Opensournce tool that builds container images with all the dependencies already installed on it. They startup and shutdown quickly and benef`}</p>\n    <h2 {...{\n      \"id\": \"lesson-3-kubernetes\"\n    }}>{`Lesson 3: Kubernetes`}</h2>\n    <p>{`If you look at the history of large systems in the data center, you'd buy, depreciate them etc etc. What we want to do is essentially the \"cow paddock\" where we want to know that if the cattle goes, we still have milk.`}</p>\n    <p>{`If we think of this as herds of machines, containers come in nicely. We could use VMs, but that take plenty of setup and config time.`}</p>\n    <p><inlineCode parentName=\"p\">{`serverless`}</inlineCode>{` also comes from this idea of running a container from start to finish and shutting down again.`}</p>\n    <p>{`One of the problems that people come into is keeping older practises or organisations.`}</p>\n    <p>{`Because you also know a bunch of automation is required, logging etc becomes super important.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-learn-k8s\"\n    }}>{`How to learn k8s`}</h3>\n    <p>{`Info overload, so many tools - what is the fastest way to become productive? The reply was Kubernetes. Kubernetes was an abstraction of containers that made sense.`}</p>\n    <p>{`So what is Kubernetes?`}</p>\n    <p>{`Packaging the containers is like 5% of the problem. We still need to deal with:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`App configuration`}</li>\n      <li parentName=\"ol\">{`Service discovery`}</li>\n      <li parentName=\"ol\">{`Managing updates`}</li>\n      <li parentName=\"ol\">{`Monitoring`}</li>\n    </ol>\n    <p>{`While we build all those things on Docker, we're better off leveraging a platform to manage all that complexity for us.`}</p>\n    <p>{`Kubernetes provides a new set of abstractions and allow you to focus on the big picture. You can treat the cluster like a single, logical machine.`}</p>\n    <p>{`We can describe a set of applications with Kubernetes and let it do the hardwork.`}</p>\n    <h3 {...{\n      \"id\": \"kubernetes-intro\"\n    }}>{`Kubernetes Intro`}</h3>\n    <p>{`The easiest way to start is to use `}<inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl run nginx --image=nginx:1.10.0\nkubectl get pods\nkubectl export deployments nginx --port 80 --type LoadBalancer\nkubectl get services\n`}</code></pre>\n    <p>{`Kubernetes just creating a load balancer and exposed it to port 80.`}</p>\n    <h3 {...{\n      \"id\": \"pods\"\n    }}>{`Pods`}</h3>\n    <p>{`Pods are a logical application.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`one of more containers eg. having an nginx and monolith containers`}</li>\n      <li parentName=\"ul\">{`volumes that are data divs, they can be used by any containers in the pod - this allows the containers within the pod to communicate with each other.`}</li>\n      <li parentName=\"ul\">{`there is also one IP per pod`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Creating Pods`}</strong></p>\n    <p>{`You can use a .yaml pod configuration file.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# files contain specs like containers, ports expose etc.\n...\nspec:\n    containers:\n        ...\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`kubectl describe pods monolith`}</inlineCode>{` commands like this will give you information for troubleshooting.`}</p>\n    <p>{`Pods by default are giving a private IP - use `}<inlineCode parentName=\"p\">{`kubectl port-forward <pod> 10080:80`}</inlineCode>{` to forward this on.`}</p>\n    <h3 {...{\n      \"id\": \"monitoring-and-health-checks\"\n    }}>{`Monitoring and Health Checks`}</h3>\n    <p><inlineCode parentName=\"p\">{`Readiness`}</inlineCode>{` checks will check if something is ready to be added to the load balancer.`}</p>\n    <p>{`On a node we have a Pod with an app and a Kubelet. Since the Kubelet is responsible for making sure that a pod is healthy, it will perform the live check.`}</p>\n    <p>{`If in the example, the app is dead, the Kubelet will restart the container and check again. If the response is then successful, then we are ready to roll.`}</p>\n    <h3 {...{\n      \"id\": \"app-config-and-security-overview\"\n    }}>{`App Config and Security Overview`}</h3>\n    <p>{`One problem is that people want to bake in their configs and put onto Docker. Don't do it. There are Configmaps and Secrets to deal with these problems.`}</p>\n    <p>{`Creating Secrets is an easy problem. We can use `}<inlineCode parentName=\"p\">{`kubectl create secret`}</inlineCode>{` - such as `}<inlineCode parentName=\"p\">{`kubectl create secret generic tls-certs --from-file=tls/`}</inlineCode>{`.`}</p>\n    <p>{`The Kubernets Master will then know the secret. Now we a pod is created, the secret is then also mounted onto the pod.`}</p>\n    <p><strong parentName=\"p\">{`Creating Secrets`}</strong></p>\n    <p>{`Before we can serve HTTPS we need a self-signed TLS cert. So give the certs that we have (in the .pem files) can be used to secure traffic on the monolith server with other keys to secure traffic. Another can be used by HTTP clients as a CA to trust.`}</p>\n    <p>{`Assuming the four `}<inlineCode parentName=\"p\">{`.pem`}</inlineCode>{` files (ca-key.pem, ca.pem, cert.pem, key.pem) are stored in a `}<inlineCode parentName=\"p\">{`./tls`}</inlineCode>{` folder we can run `}<inlineCode parentName=\"p\">{`kubectl create secret generic tls-certs --from-file=tls`}</inlineCode>{` to store the certs.`}</p>\n    <p><inlineCode parentName=\"p\">{`kubectl`}</inlineCode>{` will create a key for each dile. We can use the `}<inlineCode parentName=\"p\">{`kubectl describe secrets tls-certs`}</inlineCode>{`.`}</p>\n    <p>{`We can also then create a `}<inlineCode parentName=\"p\">{`configmap`}</inlineCode>{` usin `}<inlineCode parentName=\"p\">{`kubectl create configmap nginx-proxy-conf --from-file nginx/proxy.conf`}</inlineCode>{`. Again, we can use `}<inlineCode parentName=\"p\">{`kubectl describe config map nginx-proxy-conf`}</inlineCode>{` to get more details about it after. At this point, we are ready to attach these things to the monolith pod.`}</p>\n    <p>{`In creating a .yaml file for configuration, you can add these certs and conf files we added as a secret and configmap using `}<inlineCode parentName=\"p\">{`volumeMounts`}</inlineCode>{` when decribing a container.`}</p>\n    <p>{`Something to note is that forwarding of `}<inlineCode parentName=\"p\">{`10080`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`10443`}</inlineCode>{` is not by accidenta and relates to http and https.`}</p>\n    <h3 {...{\n      \"id\": \"create-a-service\"\n    }}>{`Create a service`}</h3>\n    <p>{`We create a Kubernetes service to expose things such as the logs. We can use `}<inlineCode parentName=\"p\">{`nodePort`}</inlineCode>{` to help forward on these new details. If we allow traffic to the expose tcp:31000 port, we should be able to hit it from outside the cluster.`}</p>\n    <h3 {...{\n      \"id\": \"adding-labels-to-pods\"\n    }}>{`Adding labels to pods`}</h3>\n    <p>{`Currently, the service does not have any in ports. `}<inlineCode parentName=\"p\">{`kubectl label pods secure-monolith \"secure=enabled\"`}</inlineCode>{` allows us to add labels and then we will be able to try hitting the exposed port.`}</p>\n    <h2 {...{\n      \"id\": \"lesson-4-deploying-microservices\"\n    }}>{`Lesson 4: Deploying Microservices`}</h2>\n    <h3 {...{\n      \"id\": \"deployment\"\n    }}>{`Deployment`}</h3>\n    <p>{`What we are interested in is production.`}</p>\n    <p>{`Deployments drive current state towards desired state.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}