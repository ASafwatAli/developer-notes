{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md","mtime":1548282825014},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1548285281334},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/babel-loader/lib/index.js","mtime":1548285280890}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-master-class\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"CloudFormation Master Class\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"what-is-cloudformation\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"What is CloudFormation\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Having >50 services, CloudFormation was brought in to help develops scaffold out the requires AWS stack.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Eg. I want a security group, two EC2 machines with it, two elastic IPs, an S3 bucket + a load balancer in front.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"CloudFormation will create all of this in the right order with the exact config.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"benefits\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Benefits\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Infrastructure as code\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"No manual creation\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Can be version controlled\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Changes to infrastructure are reviewed through code\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Cost\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Each resource will be tagged so you can estimate the costs and figure out which costs what\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Great savings strategy\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Productivity\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Ability to destroy and re-create an infrastructure\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Automated generation of Diagram for templates\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"All declarative\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Separation of concern\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Many different stacks for many different layers\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Don't re-invent the wheel\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Already so many templates\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Leverage the docs\")))), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-vs-ansible--terraform\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"CloudFormation vs Ansible / Terraform\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"CF is native, and also contain the latest\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"CF is state based\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"The others are instruction based - difficult to orchestrate\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"For new services, Ansible / Terraform can take a long time\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"first-template\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"First template\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"---\\nResources:\\n  MyInstance:\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      AvailabilityZone: us-east-1a\\n      ImageId: ami-a4c7edb2\\n      InstanceType: t2.micro\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"The stack instance can be created, updated or destroyed.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"You cannot edit the stack itself later, you need to just re-update the stack by uploading a new file.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"The stack itself can clean up instances after itself too.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"yaml-intro\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"YAML Intro\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"You can use YAML or JSON for writing it - but JSON is tough for it\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Array support:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"product:\\n    - test  : 1\\n      quantity: 2\\n    - test  : 2\\n      quantity: 4\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"creating-a-s3-bucket\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Creating a S3 Bucket\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Googling for the type, you will get the in depth docs from AWS.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"---\\nResources: # always the start\\n    MyS3Bucket: # template name\\n        Type: \\\"AWS::S3::Bucket\\\"\\n        Properties:\\n            AccessControl: PublicRead\\n            BucketName: \\\"www.site.com\\\"\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"types-of-updates\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Types of updates\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Updates with no interruption\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Replacements are breaking and need to replace the resource\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"properties\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Properties\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"On the properties under the docs, you can see info about the properties.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"deleting-the-stack\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Deleting the stack\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Just right click on the CloudFormation and delete the resources.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-template-options\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"CloudFormation template options\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"You have a few template options:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Tags\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Permissions (IAM role)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Notifications Options (SNS topic)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Timeouts (minutes before calling failure)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Rollback on Failure\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Stack Policy\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"These (if you manually do it) all show up on the \\\"create stack\\\" part of CloudFormation.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"The template review also gives you an opportunity to estimate cost.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-designer\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"CloudFormation Designer\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"A visual aid to help build the CF Stack. Ensure the template is also well written.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"You can drag and drop basically everything. Dropping it will give you options to selecting documentation etc.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"It's great for dragging and dropping templates and giving information on that template as well.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"building-blocks\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Building Blocks\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"There are a number of building blocks for each template:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Resources: your AWS resources declared in the template\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Parameters: the dynamic inputs for your template\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Mappings: the static variables for your template\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Outputs: References to what has been created\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Conditionals: List of conditions to perform resource creation\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Metadata\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"template-helpers\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Template helpers\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"References\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Functions\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-parameters\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"CloudFormation Parameters\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"overview\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Overview\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"What are they? The way to provide inputs to your AWS CloudFormation template.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"They're important to know about it:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"You want to reuse your templates across the company\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Some inputs can not be determined ahead of time\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"The major benefit: you won't have to re-upload a template to change its content.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"theory-and-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Theory and hands on\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Parameters can be controlled by all these settings:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Type:\")), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"String\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Number\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"CommaDelimitedList\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"List<Type>\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"AWS Parameter (to help catch invalid values - match against existing values in the AWS Account)\")), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        props: {\n          \"start\": 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Description\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Constraints\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"ConstraintDescription (String)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Min/MaxLength\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Min/MaxValue\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Defaults\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"AllowedValues (array)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"AllowedPattern (regexp)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"NoEcho (Boolean)\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"This can be found in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"0-parameters-hands-on.yaml\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Again - check the docs.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"To reference a parameter, you then go with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Key: !Ref Reference\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"If you have \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"!Select\"), \" for a CommaDelimitedList, you need to go \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Key: !Select [ArrayNumber, !Ref Reference]\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"how-to-reference-a-parameter\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"How to reference a parameter\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Using the Fn::Ref function.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Shorthand in YAML is !Ref.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Can reference block, not just parameter\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"resources\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Resources\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Resources are the core of your CloudFormation template. They represent the different AWS Components that will be created and configured.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"They are declared and can be references by eachother. AWS figures out creation, updates, deletes etc.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"There are over 224 types of resources.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"They are identified using the form \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"AWS::aws-product-name::data-type-name\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"reading-the-docs-for-an-es2-instance\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Reading the docs for an ES2 Instance\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"If you look at the docs, if comes up with both JSON and YAML docs.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"optional-attributes-for-resources\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Optional Attributes for Resources\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"DependsOn: very useful to draw a dependency between two resources. For example, only create an ECS cluster after creating an ASG (auto scaling group).\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"DeletionPolicy: protect resource from being deleted even if cloudformation is deleted.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"CreationPolicy: more info on CFN\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Metadata: anything you want!\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"faq-for-resources\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"FAQ for resources\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Can I create a dynamic a dynamic amount of resources? No you can perform code generation. The work around is the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"troposphere\"), \" Python library.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Is every AWS Service supported? Almost. Only a select few niches are not there.\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"mappings\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Mappings\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"What are mappings? Fixed ariables within your CF Template. Great for dev vs prod, regions, AMI types etc.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Every mapping has top, middle and bottom.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Great to use when you know in advance:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Region\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"AZ\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"AWSAccount\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Environment (dev vs prod)\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"They allow safer control over the template. Use parameters when the values are \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"really\"), \" user specific.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"fnfindinmap---accessing-mapping-values\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Fn::FindInMap - Accessing Mapping Values\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Use Fn::FindInMap to return a named value from a specific key.\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"!FindInMap \", \"[ MapName, TopLevelKey, SecondLevelKey ]\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Example:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"AWSTemplateFormatVersion: '2010-09-09'\\nMappings:\\n  RegionMap:\\n    us-east-1:\\n      '32': 'ami-6411e20d'\\n      '64': 'ami-7a11e213'\\nResources:\\n  myEC2Instance:\\n    Type: 'AWS::EC2::Instance'\\n    Properties:\\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 32]\\n      InstanceType: m1.small\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"mappings-in-practise\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Mappings in practise\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Parameters:\\n  EnvironmentName:\\n    Description: Environment Name\\n    Type: String\\n    AllowedValues: [development, production]\\n    ConstraintDescription: must be development or production\\n\\nMappings:\\n  AWSRegionArch2AMI:\\n    us-east-1:\\n      HVM64: ami-6869aa05\\n  EnvironmentToInstantType:\\n    development:\\n      instanceType: t2.micro\\n    production:\\n      instanceType: t2.small\\n\\nResources:\\n  EC2Instance:\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      InstanceType:\\n        !FindInMap [\\n          EnvironmentToInstanceType,\\n          !Ref 'EnvironmentName',\\n          instanceType,\\n        ]\\n      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"concept-pseudo-parameters\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Concept: Pseudo Parameters\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"AWS offers us pseudo params in any CF template.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"These can be used at any time and are enabled by default.\")), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"AWS::AccountId\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"AWS::NotificationsARNs\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"AWS::NoValue\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"AWS::Region\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"AWS::StackId\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"AWS::StackName\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-outputs\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"CloudFormation Outputs\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"What are they? They are \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"optional\"), \" values that we can import into other stacks.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"You can also view the outputs in the AWS Console or in using the AWS CLI.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"They're very useful for example if you define a network CloudFormation, and output the variables such as VPC ID and your Subnet IDs.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, \"It's the best way to perform some collaboration cross stack. Let the expert handle their part and you handle yours.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"outputs-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"Outputs Hands-On\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"Creating a SSH Security Group as part of one template. We can create an output that references that security group.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, \"Outputs:\\n  <Logical ID>:\\n    Description: Information about the value\\n    Value: Value to return\\n    Export:\\n      Name: Value to export\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"In 0-create-ssh-security-group.yaml\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Resources:\\n  # here we define a SSH security group that will be used in the entire company\\n  MyCompanyWideSSHSecurityGroup:\\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\\n    Type: AWS::EC2::SecurityGroup\\n    Properties:\\n      GroupDescription: Enable SSH access via port 22\\n      SecurityGroupIngress:\\n        # we have a lot of rules because it's a perfect security group\\n        # finance team network\\n        - CidrIp: 10.0.48.0/24\\n          FromPort: 22\\n          IpProtocol: tcp\\n          ToPort: 22\\n          # marketing team network\\n        - CidrIp: 10.0.112.0/24\\n          FromPort: 22\\n          IpProtocol: tcp\\n          ToPort: 22\\n          # application team support network\\n        - CidrIp: 10.0.176.0/24\\n          FromPort: 22\\n          IpProtocol: tcp\\n          ToPort: 22\\n\\nOutputs:\\n  StackSSHSecurityGroup:\\n    Description: The SSH Security Group for our Company\\n    Value: !Ref MyCompanyWideSSHSecurityGroup\\n    Export:\\n      Name: SSHSecurityGroup\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"It is important to note that for an \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"output\"), \" to be used anywhere, you need to define an \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"export\"), \" value.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cross-stack-reference\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, \"Cross Stack Reference\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \"We use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \"Fn::ImportValue\"), \" in a simple block:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, \"Resources:\\n  MySecureInstance:\\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      AvailabilityZone: us-east-1a\\n      ImageId: ami-a4c7edb2\\n      InstanceType: t2.micro\\n      SecurityGroups:\\n        # we reference the output here, using the Fn::ImportValue function\\n        - !ImportValue SSHSecurityGroup\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"conditions\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"Conditions\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, \"Conditionals are used to control the creation of resources or outputs based on a condition.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, \"Conditions can be whatever you want them to be, but common ones are:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \"Environment (dev/test/prod)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"AWS Region\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Any parameter value\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, \"Each condition can reference another condition, parameter value or mapping.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"how-to-define-a-condition\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, \"How to define a condition?\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, \"Conditions:\\n  [Logical ID]: [Intrinsic function]\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, \"Logical ID is for you to choose. It's how you name the condition.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"The intrinsic function (logical) can be any of the following: - Fn::And - Fn::Equals - Fn::If - Fn::Not - Fn::Or\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"conditional-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"Conditional Hands On\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"Let's analyze a CF template that optionally creates a volume and mount point only if \\\"prod\\\" is specified as a parameter.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \"It utilizes params, mappings, conditionals, outputs\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"AWSTemplateFormatVersion: '2010-09-09'\\nMappings:\\n  RegionMap:\\n    us-east-1:\\n      AMI: 'ami-a4c7edb2'\\n      TestAz: 'us-east-1a'\\n    us-west-1:\\n      AMI: 'ami-6df1e514'\\n      TestAz: 'us-west-1a'\\n    us-west-2:\\n      AMI: 'ami-327f5352'\\n      TestAz: 'us-west-2a'\\n    eu-west-1:\\n      AMI: 'ami-d7b9a2b1'\\n      TestAz: 'eu-west-1a'\\n    sa-east-1:\\n      AMI: 'ami-87dab1eb'\\n      TestAz: 'sa-east-1a'\\n    ap-southeast-1:\\n      AMI: 'ami-77af2014'\\n      TestAz: 'ap-southeast-1a'\\n    ap-southeast-2:\\n      AMI: 'ami-10918173'\\n      TestAz: 'ap-southeast-2a'\\n    ap-northeast-1:\\n      AMI: 'ami-e21cc38c'\\n      TestAz: 'ap-northeast-1a'\\nParameters:\\n  EnvType:\\n    Description: Environment type.\\n    Default: test\\n    Type: String\\n    AllowedValues:\\n      - prod\\n      - test\\n    ConstraintDescription: must specify prod or test.\\n\\nConditions:\\n  CreateProdResources: !Equals [!Ref EnvType, prod]\\n\\nResources:\\n  EC2Instance:\\n    Type: 'AWS::EC2::Instance'\\n    Properties:\\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]\\n      InstanceType: t2.micro\\n      AvailabilityZone: !FindInMap [RegionMap, !Ref 'AWS::Region', TestAz]\\n\\n  MountPoint:\\n    Type: 'AWS::EC2::VolumeAttachment'\\n    Condition: CreateProdResources\\n    Properties:\\n      InstanceId: !Ref EC2Instance\\n      VolumeId: !Ref NewVolume\\n      Device: /dev/sdh\\n\\n  NewVolume:\\n    Type: 'AWS::EC2::Volume'\\n    Condition: CreateProdResources\\n    Properties:\\n      Size: 100\\n      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone\\n\\nOutputs:\\n  VolumeId:\\n    Condition: CreateProdResources\\n    Value: !Ref NewVolume\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"Note that \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"conditions\"), \" can not be applied to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"parameters\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"fngetatt\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \"Fn::GetAtt\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, \"Get an attribute attached to any resource that exists. To know the attributes, check the docs.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cf-metadata\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, \"CF Metadata\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, \"This is any optional metadata section to include arbitrary YAML that provide details about the template or resource.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, \"There are 3 metadata keys that have special meaning:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Designer\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, \"Describes how the resources are laid out in your template. This is automatically added by the AWS Designer. This helps the UI (x and y)\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        props: {\n          \"start\": 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Interface\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, \"Define grouping and ordering of input parameters when they are displayed in the AWS Console.\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        props: {\n          \"start\": 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, \"Define configuration tasks for cfn-init. It's the most powerful usage of the metadata. This is very important and a lot to learn about it below.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"awscloudformationdesigner-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Designer hands on\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, \"This is automatically added for you but worth deleting for online sharing and usage. When dragging and dropping each resource you will see a huge set of metadata left there. The metadata can also be added to each resource.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"awscloudformationinterface-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Interface hands on\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"Define grouping and ordering of input parameteres when they are displayed in the AWS Console. This is meant when users must input params manually.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, \"You provide them with grouping, or sorting, that allow them to input parameters efficiently.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \"Example: Group all the EC2 related params together.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, \"---\\nParameters:\\n  KeyName:\\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\\n    Type: AWS::EC2::KeyPair::KeyName\\n  InstanceType:\\n    Description: EC2 instance type.\\n    Type: String\\n    Default: t2.micro\\n    AllowedValues:\\n      - t2.micro\\n      - t2.small\\n      - t2.medium\\n      - m3.medium\\n      - m3.large\\n      - m3.xlarge\\n      - m3.2xlarge\\n  SSHLocation:\\n    Description: The IP address range that can SSH to the EC2 instance.\\n    Type: String\\n    MinLength: '9'\\n    MaxLength: '18'\\n    Default: 0.0.0.0/0\\n    AllowedPattern: \\\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\\\"\\n    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\\n  VPCID:\\n    Description: VPC to operate in\\n    Type: AWS::EC2::VPC::Id\\n  SubnetID:\\n    Description: Subnet ID\\n    Type: AWS::EC2::Subnet::Id\\n  SecurityGroupID:\\n    Description: Security Group\\n    Type: AWS::EC2::SecurityGroup::Id\\n\\nResources:\\n  MyEC2Instance:\\n    Type: 'AWS::EC2::Instance'\\n    Properties:\\n      AvailabilityZone: us-east-1a\\n      ImageId: ami-a4c7edb2\\n      InstanceType: !Ref InstanceType\\n      SecurityGroups:\\n        - !Ref SecurityGroupID\\n      SubnetID: !Ref SubnetID\\n\\nMetadata:\\n  # This is the important part\\n  AWS::CloudFormation::Interface:\\n    ParameterGroups:\\n      - Label:\\n          default: 'Network Configuration'\\n        Parameters:\\n          - VPCID\\n          - SubnetID\\n          - SecurityGroupID\\n      - Label:\\n          default: 'Amazon EC2 Configuration'\\n        Parameters:\\n          - InstanceType\\n          - KeyName\\n    ParameterLabels:\\n      VPCID:\\n        default: 'Which VPC should this be deployed to?'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, \"If you deploy a new stack using the above, you will see that the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, \"Parameters\"), \" block will then drop you to questions about what configuration you are looking for.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"cfn-init-and-ec2-user-data\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, \"CFN Init and EC2 User Data\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"ec2-user-data-overview\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, \"EC2 User Data Overview\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, \"Many CF templates will be about provisioning computer resources in your AWS Cloud eg. EC2 instances, autoscaling.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, \"Usually, you want to the instances to be self configured so that they can perform the job they are supposed to perform.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }, \"You can fully automate the EC2 fleet with CF init.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, \"Example: an EC2 instance that has php and mysql installed on it.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, \"We want a user-data script to get this up and going. From the EC2 management console, you can basically use the advanced section to add a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, \"/bin/bash\"), \" section. This is already started to become more tedious than what we want.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }, \"How can we do this in CloufFormation?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, \"The following script can use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, \"UserData\"), \" to add the script:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, \"Parameters:\\n  KeyName:\\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\\n    Type: AWS::EC2::KeyPair::KeyName\\n  SSHLocation:\\n    Description: The IP address range that can be used to SSH to the EC2 instances\\n    Type: String\\n    MinLength: '9'\\n    MaxLength: '18'\\n    Default: 0.0.0.0/0\\n    AllowedPattern: \\\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\\\"\\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\\n\\nResources:\\n  WebServer:\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      ImageId: ami-a4c7edb2\\n      InstanceType: t2.micro\\n      KeyName: !Ref KeyName\\n      SecurityGroups:\\n        - !Ref WebServerSecurityGroup\\n      UserData:\\n        Fn::Base64: | # everything after will be kept as is\\n          #!/bin/bash\\n          yum update -y\\n          yum install -y httpd24 php56 mysql55-server php56-mysqlnd\\n          service httpd start\\n          chkconfig httpd on\\n          groupadd www\\n          usermod -a -G www ec2-user\\n          chown -R root:www /var/www\\n          chmod 2775 /var/www\\n          find /var/www -type d -exec chmod 2775 {} +\\n          find /var/www -type f -exec chmod 0664 {} +\\n          echo \\\"<?php phpinfo(); ?>\\\" > /var/www/html/phpinfo.php\\n\\n  WebServerSecurityGroup:\\n    Type: AWS::EC2::SecurityGroup\\n    Properties:\\n      GroupDescription: 'Enable HTTP access via port 80 + SSH access'\\n      SecurityGroupIngress:\\n        - CidrIp: 0.0.0.0/0\\n          FromPort: '80'\\n          IpProtocol: tcp\\n          ToPort: '80'\\n        - CidrIp: !Ref SSHLocation\\n          FromPort: '22'\\n          IpProtocol: tcp\\n          ToPort: '22'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, \"Now that we see the power of this, let's have a look at CF Init.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cloudformation-init\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561\n        },\n        __self: this\n      }, \"CloudFormation Init\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562\n        },\n        __self: this\n      }, \"What is the problem with EC2 user data? Well, what happens if we have a large configuration? What if we want to evolve the state without terminating it? How do we make it readable? How do we know or signal that our EC2 user-data script actually completed successfully?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }, \"Amazon creating CF helper scripts.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, \"There are 4 python scripts that come directly with Amazon Linux AMI or can be installed using \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, \"yum\"), \" on non-Amazon Linux. They are:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, \"cfn-init: Used to retrieve and interprety the resouce metadata, installing packages, creating files and starting services.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }, \"cfn-signal: A simple wrapper to signal an AWS CloudFormation CreationPolicy or WaitCondition, enabling you to sync other resources in the stack with the application being ready. This can give us the yes/no if succssful.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, \"cfn-get-metadata: A wrapper script making it easy to retrieve either all metadata defined for a resource or path to a specific key or subtree of the resource metadata.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }, \"cfn-hup: A daemon to check for updates to metadata and execute custom hooks when the changes are detected.\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, \"The usual flow? cfn-init, then cfn-signal, then optionally cfn-hup.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"awscloudformationinit\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, \"A config contains the following and is executed in that order:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }, \"Packages: install a list of packages on the Linux OS (mysql, wordpress, etc)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      }, \"Groups: define user groups\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, \"Users: define users, and which group they belong to\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578\n        },\n        __self: this\n      }, \"Sources: download an archive file and place it on the ec2 instance (tar, zip, bz2)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      }, \"Files: create files on the ec2 instance, using inline or can be pulled from a URL\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580\n        },\n        __self: this\n      }, \"Commands: run a series of commands\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }, \"Services: launch a list of sysvinit\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      }, \"You can also have multiple configs and you can run them sequentially etc.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"packages\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }, \"Packages\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }, \"You can install packages from the following repositories:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587\n        },\n        __self: this\n      }, \"apt\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        },\n        __self: this\n      }, \"msi\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589\n        },\n        __self: this\n      }, \"python\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590\n        },\n        __self: this\n      }, \"rpm\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, \"rubygems\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592\n        },\n        __self: this\n      }, \"yum\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594\n        },\n        __self: this\n      }, \"Packages are processed in the following order: rpm, yum/apt, and then rubygems and python.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, \"You can also specify a version if you want.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    packages:\\n      rpm:\\n        epel: 'http://download....'\\n      yum:\\n        httpd: [] # means latest\\n        php: []\\n        wordpress: []\\n      rubygems:\\n        chef:\\n          - '0.10.2' # get this version\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"groups-and-users\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }, \"Groups and Users\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610\n        },\n        __self: this\n      }, \"If you want to have multiple users and groups (with optional gid) in your ec2 instance, you can add groups and users to CF and metadata.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    groups:\\n      groupeOne: {}\\n      groupTwo:\\n        gid: '45' #gid = group ID\\n    users:\\n      myUser:\\n        groups:\\n          - 'groupOne'\\n          - 'groupTwo'\\n        uid: '50'\\n        homeDir: '/tmp'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      }, \"In the larger example...\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    groups:\\n      apache: {} # assign any group ID\\n    users:\\n      'apache':\\n        groups:\\n          - 'apache' # user apache belongs to apache\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"sources\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635\n        },\n        __self: this\n      }, \"Sources\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636\n        },\n        __self: this\n      }, \"These are conveninence for a compressed archieve.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    # where to unpack and from where\\n    sources:\\n      '/home/ec2-user/aws-cli': 'https://github.com/aws/aws-cli/tarball/master'\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"files\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643\n        },\n        __self: this\n      }, \"Files\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      }, \"Files can be the most used section. Almost all the full power. It can be a specific URL or written inline for what you are doing.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645\n        },\n        __self: this\n      }, \"Base example:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    # where to unpack and from where\\n    files:\\n      /tmp/setup.mysql:\\n        content: !Sub |\\n          CREATE DATABASE ${DBName};\\n          CREATE USER '${DBUsername}'@'localhost' IDENTIFIED BY '${DBPassword}';\\n          GRANT ALL ON ${DBName}.* TO '${DBUsername}'@'localhost';\\n          FLUSH PRIVILEDGES;\\n        mode: '000644'\\n        owner: 'root'\\n        group: 'root'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660\n        },\n        __self: this\n      }, \"Full example:\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      }, \"Note: !Sub is a function used for making substitution. ie where you see \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      }, \"${AWS::StackName}\"), \".\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    # where to unpack and from where\\n    files:\\n      '/tmp/cwlogs/apacheaccess.conf':\\n        content: !Sub |\\n          [general]\\n          state_file= /var/awslogs/agent-state\\n          [/var/log/httpd/access_log]\\n          file = /var/log/httpd/access_log\\n          log_group_name = ${AWS::StackName}\\n          log_stream_name = {instance_id}/apache.log\\n          datetime_format = %d/%b/%Y:%H:%M:%S\\n        mode: '000400'\\n        owner: apache\\n        group: apache\\n      '/var/www/html/index.php':\\n        content: !Sub |\\n          <?php\\n          echo '<h1>AWS CloudFormation sample PHP application for ${AWS::StackName}</h1>';\\n          ?>\\n        mode: '000644'\\n        owner: apache\\n        group: apache\\n      '/etc/cfn/cfn-hup.conf':\\n        content: !Sub |\\n          [main]\\n          stack=${AWS::StackId}\\n          region=${AWS::Region}\\n        mode: '000400'\\n        owner: 'root'\\n        group: 'root'\\n      '/etc/cfn/hooks.d/cfn-auto-reloader.conf':\\n        content: !Sub |\\n          [cfn-auto-reloader-hook]\\n          triggers=post.update\\n          path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\\n          action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}\\n        mode: '000400'\\n        owner: 'root'\\n        group: 'root'\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"fnsub\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704\n        },\n        __self: this\n      }, \"Fn::Sub\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705\n        },\n        __self: this\n      }, \"(Or as !Sub) is used to substitute variables from a text. It's a very handy function that will allow you to fully customize your templates.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706\n        },\n        __self: this\n      }, \"For example, you can combine !Sub with References or AWS Pseudo variables.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707\n        },\n        __self: this\n      }, \"Must be in the form \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707\n        },\n        __self: this\n      }, \"${VarName}\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        },\n        __self: this\n      }, \"Forms:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709\n        },\n        __self: this\n      }, \"# You can do this\\n!Sub\\n  - String\\n  - { Var1Name: Var1Value, Var2Name: Var2Value }\\n\\n# or (more complicated and rarely seen)\\n!Sub String\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"commands\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717\n        },\n        __self: this\n      }, \"Commands\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718\n        },\n        __self: this\n      }, \"You can run commands one at a time in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718\n        },\n        __self: this\n      }, \"alphabetical order\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719\n        },\n        __self: this\n      }, \"You can set a directory from which that command is run, environment variables etc.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720\n        },\n        __self: this\n      }, \"You can also provide a test to control whether the command is executed or not.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721\n        },\n        __self: this\n      }, \"This should be a last resort. You can execute any of the scripts from the above files in this section.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722\n        },\n        __self: this\n      }, \"Example: call the echo command only if the file doesn't exist\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }, \"commands:\\n  test:\\n    command: 'echo \\\"$MAGIC\\\" > test.txt'\\n    env:\\n      MAGIC: 'I come from the environment!'\\n    cwd: '~'\\n    test: 'test ! -e ~/test.txt' # check file exists\\n    ignoreErrors: 'false' # fail if is doesn't work\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"services\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }, \"Services\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, \"AWS::CloudFormation::Init:\\n  config:\\n    services:\\n      sysvinit:\\n        httpd:\\n          enabled: 'true'\\n          ensureRunning: 'true'\\n        sendmail:\\n          enabled: 'false'\\n          ensureRunning: 'false'\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cfn-init-and-signal\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744\n        },\n        __self: this\n      }, \"CFN Init and Signal\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745\n        },\n        __self: this\n      }, \"First, we use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745\n        },\n        __self: this\n      }, \"cfn-init\"), \" to launch the config.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      }, \"Then we use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      }, \"cfn-signal\"), \" to tell when the config is complete, which will let CF know that the resource creation has been successful.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747\n        },\n        __self: this\n      }, \"This has to be used in conjuction with a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747\n        },\n        __self: this\n      }, \"CreationPolicy\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, \"This example means waiting a max of 5 minutes for the instance to come online and be self configured. If we don't hear back by \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, \"cfn-signal\"), \" by the, CF will fail and rollback.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }, \"CreationPolicy:\\n  ResourceSignal:\\n    Timeout: PT5M\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753\n        },\n        __self: this\n      }, \"This is useful in case of a bad update.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cfn-hup\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754\n        },\n        __self: this\n      }, \"cfn-hup\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 756\n        },\n        __self: this\n      }, \"Cfn-hup can be used to tell your EC2 instance to look for Metadata changes every 15 minutes and apply the metadata configuration again.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757\n        },\n        __self: this\n      }, \"It's very powerful but you really need to try it out to understand how it works.\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759\n        },\n        __self: this\n      }, \"Example from the \\\"files\\\" declation:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }, \"'/etc/cfn/cfn-hup.conf':\\n  content: !Sub |\\n    [main]\\n    stack=${AWS::StackId}\\n    region=${AWS::Region}\\n  mode: '000400'\\n  owner: 'root'\\n  group: 'root'\\n'/etc/cfn/hooks.d/cfn-auto-reloader.conf':\\n  content: !Sub |\\n    [cfn-auto-reloader-hook]\\n    triggers=post.update\\n    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\\n    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}\\n  mode: '000400'\\n  owner: 'root'\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cfn-init-hands-on\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }, \"CFN Init Hands-On\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, \"After loading the CFN Init yaml file into CF, it will go through a series of different events.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779\n        },\n        __self: this\n      }, \"You can under \\\"status reason\\\" if there is a success message sent back.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780\n        },\n        __self: this\n      }, \"You need to practise your !Init skilles. It will be extremely handy for creating EC2 Instances or AutoScaling groups.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        },\n        __self: this\n      }, \"Remember logs for ec2-user data are in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        },\n        __self: this\n      }, \"/var/log/cloud-init-output.log\"), \" and logs for cfn-init are in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        },\n        __self: this\n      }, \"/var/log/cfn-init.log\"), \", which is really helpful if commands don't complete like you want them to.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"advanced-cf-concepts\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782\n        },\n        __self: this\n      }, \"Advanced CF Concepts\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783\n        },\n        __self: this\n      }, \"Review of current standing:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, \"You can check AWS labs templates from \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, \"https://github/com/awslabs/aws-cloudformation-templates\"), \" to see what you can understand/see good practise.\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 787\n        },\n        __self: this\n      }, \"The example with WordPress is what is shown in the course.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"using-the-aws-cli\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788\n        },\n        __self: this\n      }, \"Using the AWS CLI\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789\n        },\n        __self: this\n      }, \"We can use the AWS CLI to create, update or delete CF templates.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 790\n        },\n        __self: this\n      }, \"Super conventient for when you start automating your deployments.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791\n        },\n        __self: this\n      }, \"Once you've downloaded the AWS config, use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791\n        },\n        __self: this\n      }, \"aws configure --profile <profile_name>\"), \" to configure a profile with the ID and Secret Access key.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792\n        },\n        __self: this\n      }, \"To run a CF command, you can use something like the following \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792\n        },\n        __self: this\n      }, \"aws cloudformation create-stack --stack-name example-cli-stack --template-body file://0-sample-template.yaml --parameters file://0-parameters.json --profile cf-course --region us-east-1\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, \"We can use the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, \"parameters.json\"), \" file to set ParameterKey and ParameterValue for all the keys and values we are looking to share.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 794\n        },\n        __self: this\n      }, \"After running the command, what you get back is the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 794\n        },\n        __self: this\n      }, \"StackId\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"using-troposphere-python-to-generate-cloudformation-templates\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795\n        },\n        __self: this\n      }, \"Using Troposphere (Python) to generate CloudFormation templates\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 796\n        },\n        __self: this\n      }, \"Troposhere allows you to leverage Python write the templates.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797\n        },\n        __self: this\n      }, \"This means you can start using types in your templates for safety.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 798\n        },\n        __self: this\n      }, \"You will also have valid CF and can dynamically generate CloudFormation.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 799\n        },\n        __self: this\n      }, \"This means you can also have very complex conditions.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800\n        },\n        __self: this\n      }, \"The disadvantage is that the Python needs to generate the JSON for it to be.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"deletionpolicy\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801\n        },\n        __self: this\n      }, \"DeletionPolicy\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802\n        },\n        __self: this\n      }, \"This policy can prevent resources from being deleted, or in some cases, back them up before the deletion. This will help prevent doing something really, really bad.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803\n        },\n        __self: this\n      }, \"Deletion Policy can take up the following values:\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 805\n        },\n        __self: this\n      }, \"Delete: AWS CloudFormation will delete the resource and all its content if applicable during stack deletion (does not apply to S3)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806\n        },\n        __self: this\n      }, \"Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted. You can add this deletion policy to any resource type.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807\n        },\n        __self: this\n      }, \"Snapshot: For resources that support snapshots (AWS::EC2::Volume, AWS::ElasticCache::CacheCluster etc)\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-yaml\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        },\n        __self: this\n      }, \"Resources:\\n  myS3Bucket:\\n    Type: AWS::S3::Bucket\\n    DeletionPolicy: Retain\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814\n        },\n        __self: this\n      }, \"In the above example, it will create the S3 Bucket, you will see the bucket created.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815\n        },\n        __self: this\n      }, \"Now if we delete that stack and the deletion policy is retain, you will still have that bucket there.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"custom-resources-with-aws-lambda\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816\n        },\n        __self: this\n      }, \"Custom Resources with AWS Lambda\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817\n        },\n        __self: this\n      }, \"Custom resources enable you to write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update (if you changed the custom resource) or delete stacks.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818\n        },\n        __self: this\n      }, \"For example, you might want to include resources that aren't available as AWS CloudFormation resource types.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 819\n        },\n        __self: this\n      }, \"Check online for a walkthrough of custom resources.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"best-practises-to-organize-your-cloudformation-templates\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820\n        },\n        __self: this\n      }, \"Best practises to organize your CloudFormation templates\"), React.createElement(MDXTag, {\n        name: \"ol\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 822\n        },\n        __self: this\n      }, \"How to organise templates: you can have a layered architecture (horizontal layers) vs service oriented architecture (vertical layers).\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823\n        },\n        __self: this\n      }, \"Use cross stack references eg. to reference a VPC or subnet.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824\n        },\n        __self: this\n      }, \"Make sure the template is environment agnostic to do dev / test / prod and across regions / accounts seemlessly.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825\n        },\n        __self: this\n      }, \"Never embed credentials (use parameters with NoEcho or KMS).\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826\n        },\n        __self: this\n      }, \"Use specific parameters types and constraints.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827\n        },\n        __self: this\n      }, \"Use CFN Init (& latest version of the helper scripts)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, \"Validate templates\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829\n        },\n        __self: this\n      }, \"Don't do anything manual on the elements of the stack - that can cause a state mismatch.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830\n        },\n        __self: this\n      }, \"Verify changes with changesets (and avoid disasters).\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831\n        },\n        __self: this\n      }, \"Use stack policies to prevent critical components from being deleted after create (such as your most valuable RDS database).\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"cost-estimate-for-templates\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833\n        },\n        __self: this\n      }, \"Cost estimate for templates\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834\n        },\n        __self: this\n      }, \"You can estimate the cost of a stack very easily.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 835\n        },\n        __self: this\n      }, \"For this, just upload the stack onto the AWS console, enter the params and click \\\"cost\\\".\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md\");\n  leaveModule(module);\n})();\n\n;\nMDXContent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MDXContent\"\n};",{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;;IAGmBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,MAAL,GAAc,IAAd;AAFiB;AAGlB;;;;6BACQ;AAAA,wBAC0B,KAAKD,KAD/B;AAAA,UACCE,UADD,eACCA,UADD;AAAA,UACgBF,KADhB;;AAGP,aAAO,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAGE,QAAA,UAAU,EAAEE,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAG0B,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAH1B,EAKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCALW,EAMX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oHANW,EAOX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HAPW,EAQX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FARW,EASX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATW,EAUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAoF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACpF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADoF,EAEpF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFoF,EAGpF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAHoF,CAApF,CADA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAClE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGADkE,EAElE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFkE,CAAlE,CANA,EAUA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA0E,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAC1E,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAD0E,EAE1E,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAF0E,EAG1E,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAH0E,CAA1E,CAVA,EAeA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAmF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACnF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADmF,CAAnF,CAfA,EAkBA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAuF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACvF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADuF,EAEvF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFuF,CAAvF,CAlBA,CAVW,EAiCX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAjCW,EAkCX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAJA,CAlCW,EAwCX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAxCW,EAyCX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0LAA3C,CAzCW,EAkDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAlDW,EAmDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAnDW,EAoDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEApDW,EAqDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArDW,EAsDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAtDW,EAuDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAvDW,EAwDX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE,EAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAA3C,CAxDW,EA8DX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA9DW,EA+DX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EA/DW,EAgEX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE,EAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0NAA3C,CAhEW,EAwEX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAxEW,EAyEX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAFA,CAzEW,EA6EX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7EW,EA8EX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFA9EW,EA+EX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BA/EW,EAgFX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAhFW,EAiFX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAjFW,EAkFX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAlFW,EAmFX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANA,CAnFW,EA2FX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGA3FW,EA4FX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EA5FW,EA6FX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA7FW,EA8FX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FA9FW,EA+FX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yHA/FW,EAgGX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GAhGW,EAiGX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAjGW,EAkGX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAlGW,EAmGX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANA,CAnGW,EA2GX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA3GW,EA4GX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFA,CA5GW,EAgHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAhHW,EAiHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjHW,EAkHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFAlHW,EAmHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAnHW,EAoHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAFA,CApHW,EAwHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAxHW,EAyHX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAzHW,EA0HX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DA1HW,EA2HX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,CA3HW,EA8HX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0D,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA1D,CAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GALA,CA9HW,EAqIX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,mBAAQ;AAAT,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANA,EAOA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAPA,EAQA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCARA,EASA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATA,CArIW,EAgJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAsE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAtE,MAhJW,EAiJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAjJW,EAkJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAwF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAxF,MAlJW,EAmJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAyD,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzD,gDAA4L,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAA5L,MAnJW,EAoJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCApJW,EAqJX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAHA,CArJW,EA0JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA1JW,EA2JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJA3JW,EA4JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHA5JW,EA6JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDA7JW,EA8JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAgF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAhF,MA9JW,EA+JX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDA/JW,EAgKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAhKW,EAiKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAjKW,EAkKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kKADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAJA,CAlKW,EAwKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAxKW,EAyKX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HAA+K,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA/K,qBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAFA,CAzKW,EA6KX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7KW,EA8KX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHA9KW,EA+KX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDA/KW,EAgLX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAhLW,EAiLX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJA,CAjLW,EAuLX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAA4H,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5H,oBAvLW,EAwLX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAxLW,EAyLX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EAzLW,EA0LX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEADA,CA1LW,EA6LX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7LW,EA8LX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iUAA3C,CA9LW,EA2MX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA3MW,EA4MX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,usBAA3C,CA5MW,EAyOX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAzOW,EA0OX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAFA,CA1OW,EA8OX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANA,CA9OW,EAsPX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAtPW,EAuPX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAArE,kDAvPW,EAwPX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAxPW,EAyPX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gJAzPW,EA0PX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+HA1PW,EA2PX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA3PW,EA4PX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+HA5PW,EA6PX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2JAA3C,CA7PW,EAoQX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CApQW,EAqQX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+iCAA3C,CArQW,EAqSX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAiF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAjF,kDAAqN,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArN,YArSW,EAsSX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAtSW,EAuSX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoD,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAApD,wBAvSW,EAwSX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6aAA3C,CAxSW,EAoTX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBApTW,EAqTX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGArTW,EAsTX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFAtTW,EAuTX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAHA,CAvTW,EA4TX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFA5TW,EA6TX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA7TW,EA8TX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAA3C,CA9TW,EAiUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAjUW,EAkUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HAlUW,EAmUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAnUW,EAoUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAFA,CApUW,EAwUX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6nDAA3C,CAxUW,EA4YX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAuD,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAvD,6BAA0K,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA1K,MA5YW,EA6YX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7YW,EA8YX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GA9YW,EA+YX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA/YW,EAgZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gIAhZW,EAiZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAjZW,EAkZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,CAlZW,EAqZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJArZW,EAsZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,mBAAQ;AAAT,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADA,CAtZW,EAyZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAzZW,EA0ZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,mBAAQ;AAAT,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADA,CA1ZW,EA6ZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4JA7ZW,EA8ZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDA9ZW,EA+ZX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0OA/ZW,EAgaX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAhaW,EAiaX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8JAjaW,EAkaX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAlaW,EAmaX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAnaW,EAoaX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6sDAA3C,CApaW,EAqeX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAA8G,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA9G,yFAreW,EAseX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAteW,EAueX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAveW,EAweX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HAxeW,EAyeX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mIAzeW,EA0eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DA1eW,EA2eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EA3eW,EA4eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJAAuL,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAvL,gFA5eW,EA6eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDA7eW,EA8eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAA0E,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA1E,wBA9eW,EA+eX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sqDAA3C,CA/eW,EAkiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAliBW,EAmiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAniBW,EAoiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wRApiBW,EAqiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAriBW,EAsiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GAA2I,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA3I,oCAtiBW,EAuiBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uOAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mLAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAJA,CAviBW,EA6iBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EA7iBW,EA8iBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA9iBW,EA+iBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EA/iBW,EAgjBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CANA,EAOA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAPA,CAhjBW,EAyjBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAzjBW,EA0jBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA1jBW,EA2jBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEA3jBW,EA4jBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANA,CA5jBW,EAokBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGApkBW,EAqkBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDArkBW,EAskBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kRAA3C,CAtkBW,EAmlBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnlBW,EAolBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJAplBW,EAqlBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iRAA3C,CArlBW,EAmmBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAnmBW,EAomBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4MAA3C,CApmBW,EA6mBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA7mBW,EA8mBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DA9mBW,EA+mBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wLAA3C,CA/mBW,EAqnBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBArnBW,EAsnBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6IAtnBW,EAunBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAvnBW,EAwnBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ubAA3C,CAxnBW,EAsoBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAtoBW,EAuoBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAAqH,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAArH,MAvoBW,EAwoBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,43CAA3C,CAxoBW,EAkrBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAlrBW,EAmrBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJAnrBW,EAorBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAprBW,EAqrBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAiE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAjE,MArrBW,EAsrBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAtrBW,EAurBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2JAA3C,CAvrBW,EA+rBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA/rBW,EAgsBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAuF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAvF,MAhsBW,EAisBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAjsBW,EAksBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FAlsBW,EAmsBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHAnsBW,EAosBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEApsBW,EAqsBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2PAA3C,CArsBW,EA8sBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA9sBW,EA+sBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gPAA3C,CA/sBW,EA0tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA1tBW,EA2tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA2D,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA3D,2BA3tBW,EA4tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAyD,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAzD,iHA5tBW,EA6tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAsF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAtF,MA7tBW,EA8tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4IAA4K,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA5K,wCA9tBW,EA+tBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAA3C,CA/tBW,EAmuBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAnuBW,EAouBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBApuBW,EAquBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAFA,CAruBW,EAyuBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAzuBW,EA0uBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8fAA3C,CA1uBW,EA2vBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA3vBW,EA4vBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GA5vBW,EA6vBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFA7vBW,EA8vBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iIA9vBW,EA+vBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAoF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAApF,oCAAkO,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAlO,gFA/vBW,EAgwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAhwBW,EAiwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAjwBW,EAkwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAoG,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAApG,uDADA,CAlwBW,EAqwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEArwBW,EAswBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAtwBW,EAuwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAvwBW,EAwwBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAxwBW,EAywBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAwF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAAxF,+DAzwBW,EA0wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA2G,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qMAA3G,CA1wBW,EA2wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA4D,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA5D,sGA3wBW,EA4wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAAiG,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,UAAU,EAAEA,UAAtC;AAAkD,QAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAjG,MA5wBW,EA6wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EA7wBW,EA8wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEA9wBW,EA+wBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EA/wBW,EAgxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAhxBW,EAixBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAjxBW,EAkxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFAlxBW,EAmxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAnxBW,EAoxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gLApxBW,EAqxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DArxBW,EAsxBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yLAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHAHA,CAtxBW,EA2xBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAA3C,CA3xBW,EAgyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGAhyBW,EAiyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAjyBW,EAkyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAlyBW,EAmyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sMAnyBW,EAoyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wHApyBW,EAqyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAryBW,EAsyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAtyBW,EAuyBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HAHA,EAIA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAJA,EAKA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DALA,EAMA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEANA,EAOA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAPA,EAQA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGARA,EASA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEATA,EAUA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,UAAU,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIAVA,CAvyBW,EAmzBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAnzBW,EAozBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DApzBW,EAqzBX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGArzBW,CAAP;AAuzBD;;;;;;;;;;;EA/zBqCL,KAAK,CAACM,S;;SAAzBJ,U;;;;;;;;;;;;0BAAAA,U","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"cloudformation-master-class\"}}>{`CloudFormation Master Class`}</MDXTag>\n{/* TOC -->autoauto- [CloudFormation Master Class](#cloudformation-master-class)auto    - [What is CloudFormation](#what-is-cloudformation)auto    - [Benefits](#benefits)auto    - [CloudFormation vs Ansible / Terraform](#cloudformation-vs-ansible--terraform)auto    - [First template](#first-template)auto    - [YAML Intro](#yaml-intro)auto    - [Creating a S3 Bucket](#creating-a-s3-bucket)auto        - [Types of updates](#types-of-updates)auto        - [Properties](#properties)auto        - [Deleting the stack](#deleting-the-stack)auto    - [CloudFormation template options](#cloudformation-template-options)auto    - [CloudFormation Designer](#cloudformation-designer)auto    - [Building Blocks](#building-blocks)auto    - [Template helpers](#template-helpers)auto    - [CloudFormation Parameters](#cloudformation-parameters)auto        - [Overview](#overview)auto        - [Theory and hands on](#theory-and-hands-on)auto    - [How to reference a parameter](#how-to-reference-a-parameter)auto    - [Resources](#resources)auto        - [Reading the docs for an ES2 Instance](#reading-the-docs-for-an-es2-instance)auto        - [Optional Attributes for Resources](#optional-attributes-for-resources)auto        - [FAQ for resources](#faq-for-resources)auto    - [Mappings](#mappings)auto        - [Fn::FindInMap - Accessing Mapping Values](#fnfindinmap---accessing-mapping-values)auto        - [Mappings in practise](#mappings-in-practise)auto    - [Concept: Pseudo Parameters](#concept-pseudo-parameters)auto    - [CloudFormation Outputs](#cloudformation-outputs)auto        - [Outputs Hands-On](#outputs-hands-on)auto        - [Cross Stack Reference](#cross-stack-reference)auto    - [Conditions](#conditions)auto        - [How to define a condition?](#how-to-define-a-condition)auto    - [Conditional Hands On](#conditional-hands-on)auto    - [Fn::GetAtt](#fngetatt)auto    - [CF Metadata](#cf-metadata)auto        - [AWS::CloudFormation::Designer hands on](#awscloudformationdesigner-hands-on)auto        - [AWS::CloudFormation::Interface hands on](#awscloudformationinterface-hands-on)auto    - [CFN Init and EC2 User Data](#cfn-init-and-ec2-user-data)auto        - [EC2 User Data Overview](#ec2-user-data-overview)auto        - [CloudFormation Init](#cloudformation-init)auto        - [AWS::CloudFormation::Init](#awscloudformationinit)auto        - [Packages](#packages)auto        - [Groups and Users](#groups-and-users)auto        - [Sources](#sources)auto        - [Files](#files)auto        - [Fn::Sub](#fnsub)auto        - [Commands](#commands)auto        - [Services](#services)auto        - [CFN Init and Signal](#cfn-init-and-signal)auto        - [cfn-hup](#cfn-hup)auto        - [CFN Init Hands-On](#cfn-init-hands-on)auto    - [Advanced CF Concepts](#advanced-cf-concepts)auto        - [Using the AWS CLI](#using-the-aws-cli)auto        - [Using Troposphere (Python) to generate CloudFormation templates](#using-troposphere-python-to-generate-cloudformation-templates)auto        - [DeletionPolicy](#deletionpolicy)auto        - [Custom Resources with AWS Lambda](#custom-resources-with-aws-lambda)auto        - [Best practises to organize your CloudFormation templates](#best-practises-to-organize-your-cloudformation-templates)auto        - [Cost estimate for templates](#cost-estimate-for-templates)autoauto<!-- /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"what-is-cloudformation\"}}>{`What is CloudFormation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Having >50 services, CloudFormation was brought in to help develops scaffold out the requires AWS stack.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Eg. I want a security group, two EC2 machines with it, two elastic IPs, an S3 bucket + a load balancer in front.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`CloudFormation will create all of this in the right order with the exact config.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"benefits\"}}>{`Benefits`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Infrastructure as code`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`No manual creation`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Can be version controlled`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Changes to infrastructure are reviewed through code`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Cost`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Each resource will be tagged so you can estimate the costs and figure out which costs what`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Great savings strategy`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Productivity`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Ability to destroy and re-create an infrastructure`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Automated generation of Diagram for templates`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`All declarative`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Separation of concern`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Many different stacks for many different layers`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Don't re-invent the wheel`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Already so many templates`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Leverage the docs`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cloudformation-vs-ansible--terraform\"}}>{`CloudFormation vs Ansible / Terraform`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`CF is native, and also contain the latest`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`CF is state based`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The others are instruction based - difficult to orchestrate`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`For new services, Ansible / Terraform can take a long time`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"first-template\"}}>{`First template`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`---\nResources:\n  MyInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The stack instance can be created, updated or destroyed.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You cannot edit the stack itself later, you need to just re-update the stack by uploading a new file.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The stack itself can clean up instances after itself too.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"yaml-intro\"}}>{`YAML Intro`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can use YAML or JSON for writing it - but JSON is tough for it`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Array support:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`product:\n    - test  : 1\n      quantity: 2\n    - test  : 2\n      quantity: 4\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-a-s3-bucket\"}}>{`Creating a S3 Bucket`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Googling for the type, you will get the in depth docs from AWS.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`---\nResources: # always the start\n    MyS3Bucket: # template name\n        Type: \"AWS::S3::Bucket\"\n        Properties:\n            AccessControl: PublicRead\n            BucketName: \"www.site.com\"\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"types-of-updates\"}}>{`Types of updates`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Updates with no interruption`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Replacements are breaking and need to replace the resource`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"properties\"}}>{`Properties`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`On the properties under the docs, you can see info about the properties.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"deleting-the-stack\"}}>{`Deleting the stack`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Just right click on the CloudFormation and delete the resources.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cloudformation-template-options\"}}>{`CloudFormation template options`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You have a few template options:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Tags`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Permissions (IAM role)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Notifications Options (SNS topic)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Timeouts (minutes before calling failure)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Rollback on Failure`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Stack Policy`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`These (if you manually do it) all show up on the \"create stack\" part of CloudFormation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The template review also gives you an opportunity to estimate cost.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cloudformation-designer\"}}>{`CloudFormation Designer`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A visual aid to help build the CF Stack. Ensure the template is also well written.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can drag and drop basically everything. Dropping it will give you options to selecting documentation etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It's great for dragging and dropping templates and giving information on that template as well.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"building-blocks\"}}>{`Building Blocks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are a number of building blocks for each template:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Resources: your AWS resources declared in the template`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Parameters: the dynamic inputs for your template`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Mappings: the static variables for your template`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Outputs: References to what has been created`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Conditionals: List of conditions to perform resource creation`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Metadata`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"template-helpers\"}}>{`Template helpers`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`References`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Functions`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cloudformation-parameters\"}}>{`CloudFormation Parameters`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"overview\"}}>{`Overview`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What are they? The way to provide inputs to your AWS CloudFormation template.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They're important to know about it:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`You want to reuse your templates across the company`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Some inputs can not be determined ahead of time`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The major benefit: you won't have to re-upload a template to change its content.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"theory-and-hands-on\"}}>{`Theory and hands on`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Parameters can be controlled by all these settings:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Type:`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`String`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Number`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`CommaDelimitedList`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`List<Type>`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`AWS Parameter (to help catch invalid values - match against existing values in the AWS Account)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":2}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Description`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Constraints`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`ConstraintDescription (String)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Min/MaxLength`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Min/MaxValue`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Defaults`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AllowedValues (array)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AllowedPattern (regexp)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`NoEcho (Boolean)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This can be found in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0-parameters-hands-on.yaml`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Again - check the docs.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To reference a parameter, you then go with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Key: !Ref Reference`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`!Select`}</MDXTag>{` for a CommaDelimitedList, you need to go `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Key: !Select [ArrayNumber, !Ref Reference]`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"how-to-reference-a-parameter\"}}>{`How to reference a parameter`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Using the Fn::Ref function.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Shorthand in YAML is !Ref.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Can reference block, not just parameter`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"resources\"}}>{`Resources`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Resources are the core of your CloudFormation template. They represent the different AWS Components that will be created and configured.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They are declared and can be references by eachother. AWS figures out creation, updates, deletes etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are over 224 types of resources.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They are identified using the form `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AWS::aws-product-name::data-type-name`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"reading-the-docs-for-an-es2-instance\"}}>{`Reading the docs for an ES2 Instance`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you look at the docs, if comes up with both JSON and YAML docs.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"optional-attributes-for-resources\"}}>{`Optional Attributes for Resources`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`DependsOn: very useful to draw a dependency between two resources. For example, only create an ECS cluster after creating an ASG (auto scaling group).`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`DeletionPolicy: protect resource from being deleted even if cloudformation is deleted.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`CreationPolicy: more info on CFN`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Metadata: anything you want!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"faq-for-resources\"}}>{`FAQ for resources`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Can I create a dynamic a dynamic amount of resources? No you can perform code generation. The work around is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`troposphere`}</MDXTag>{` Python library.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Is every AWS Service supported? Almost. Only a select few niches are not there.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mappings\"}}>{`Mappings`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What are mappings? Fixed ariables within your CF Template. Great for dev vs prod, regions, AMI types etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Every mapping has top, middle and bottom.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Great to use when you know in advance:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Region`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`AZ`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`AWSAccount`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Environment (dev vs prod)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They allow safer control over the template. Use parameters when the values are `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`really`}</MDXTag>{` user specific.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"fnfindinmap---accessing-mapping-values\"}}>{`Fn::FindInMap - Accessing Mapping Values`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use Fn::FindInMap to return a named value from a specific key.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`!FindInMap `}{`[ MapName, TopLevelKey, SecondLevelKey ]`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      '32': 'ami-6411e20d'\n      '64': 'ami-7a11e213'\nResources:\n  myEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 32]\n      InstanceType: m1.small\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"mappings-in-practise\"}}>{`Mappings in practise`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Parameters:\n  EnvironmentName:\n    Description: Environment Name\n    Type: String\n    AllowedValues: [development, production]\n    ConstraintDescription: must be development or production\n\nMappings:\n  AWSRegionArch2AMI:\n    us-east-1:\n      HVM64: ami-6869aa05\n  EnvironmentToInstantType:\n    development:\n      instanceType: t2.micro\n    production:\n      instanceType: t2.small\n\nResources:\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      InstanceType:\n        !FindInMap [\n          EnvironmentToInstanceType,\n          !Ref 'EnvironmentName',\n          instanceType,\n        ]\n      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"concept-pseudo-parameters\"}}>{`Concept: Pseudo Parameters`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`AWS offers us pseudo params in any CF template.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`These can be used at any time and are enabled by default.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::AccountId`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::NotificationsARNs`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::NoValue`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::Region`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::StackId`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::StackName`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cloudformation-outputs\"}}>{`CloudFormation Outputs`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What are they? They are `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`optional`}</MDXTag>{` values that we can import into other stacks.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also view the outputs in the AWS Console or in using the AWS CLI.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They're very useful for example if you define a network CloudFormation, and output the variables such as VPC ID and your Subnet IDs.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It's the best way to perform some collaboration cross stack. Let the expert handle their part and you handle yours.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"outputs-hands-on\"}}>{`Outputs Hands-On`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Creating a SSH Security Group as part of one template. We can create an output that references that security group.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Outputs:\n  <Logical ID>:\n    Description: Information about the value\n    Value: Value to return\n    Export:\n      Name: Value to export\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In 0-create-ssh-security-group.yaml`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Resources:\n  # here we define a SSH security group that will be used in the entire company\n  MyCompanyWideSSHSecurityGroup:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Enable SSH access via port 22\n      SecurityGroupIngress:\n        # we have a lot of rules because it's a perfect security group\n        # finance team network\n        - CidrIp: 10.0.48.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # marketing team network\n        - CidrIp: 10.0.112.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # application team support network\n        - CidrIp: 10.0.176.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n\nOutputs:\n  StackSSHSecurityGroup:\n    Description: The SSH Security Group for our Company\n    Value: !Ref MyCompanyWideSSHSecurityGroup\n    Export:\n      Name: SSHSecurityGroup\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`It is important to note that for an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`output`}</MDXTag>{` to be used anywhere, you need to define an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`export`}</MDXTag>{` value.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cross-stack-reference\"}}>{`Cross Stack Reference`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Fn::ImportValue`}</MDXTag>{` in a simple block:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Resources:\n  MySecureInstance:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      SecurityGroups:\n        # we reference the output here, using the Fn::ImportValue function\n        - !ImportValue SSHSecurityGroup\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"conditions\"}}>{`Conditions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Conditionals are used to control the creation of resources or outputs based on a condition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Conditions can be whatever you want them to be, but common ones are:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Environment (dev/test/prod)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`AWS Region`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Any parameter value`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Each condition can reference another condition, parameter value or mapping.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"how-to-define-a-condition\"}}>{`How to define a condition?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Conditions:\n  [Logical ID]: [Intrinsic function]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Logical ID is for you to choose. It's how you name the condition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The intrinsic function (logical) can be any of the following: - Fn::And - Fn::Equals - Fn::If - Fn::Not - Fn::Or`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"conditional-hands-on\"}}>{`Conditional Hands On`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Let's analyze a CF template that optionally creates a volume and mount point only if \"prod\" is specified as a parameter.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`It utilizes params, mappings, conditionals, outputs`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      AMI: 'ami-a4c7edb2'\n      TestAz: 'us-east-1a'\n    us-west-1:\n      AMI: 'ami-6df1e514'\n      TestAz: 'us-west-1a'\n    us-west-2:\n      AMI: 'ami-327f5352'\n      TestAz: 'us-west-2a'\n    eu-west-1:\n      AMI: 'ami-d7b9a2b1'\n      TestAz: 'eu-west-1a'\n    sa-east-1:\n      AMI: 'ami-87dab1eb'\n      TestAz: 'sa-east-1a'\n    ap-southeast-1:\n      AMI: 'ami-77af2014'\n      TestAz: 'ap-southeast-1a'\n    ap-southeast-2:\n      AMI: 'ami-10918173'\n      TestAz: 'ap-southeast-2a'\n    ap-northeast-1:\n      AMI: 'ami-e21cc38c'\n      TestAz: 'ap-northeast-1a'\nParameters:\n  EnvType:\n    Description: Environment type.\n    Default: test\n    Type: String\n    AllowedValues:\n      - prod\n      - test\n    ConstraintDescription: must specify prod or test.\n\nConditions:\n  CreateProdResources: !Equals [!Ref EnvType, prod]\n\nResources:\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]\n      InstanceType: t2.micro\n      AvailabilityZone: !FindInMap [RegionMap, !Ref 'AWS::Region', TestAz]\n\n  MountPoint:\n    Type: 'AWS::EC2::VolumeAttachment'\n    Condition: CreateProdResources\n    Properties:\n      InstanceId: !Ref EC2Instance\n      VolumeId: !Ref NewVolume\n      Device: /dev/sdh\n\n  NewVolume:\n    Type: 'AWS::EC2::Volume'\n    Condition: CreateProdResources\n    Properties:\n      Size: 100\n      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone\n\nOutputs:\n  VolumeId:\n    Condition: CreateProdResources\n    Value: !Ref NewVolume\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`conditions`}</MDXTag>{` can not be applied to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`parameters`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"fngetatt\"}}>{`Fn::GetAtt`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Get an attribute attached to any resource that exists. To know the attributes, check the docs.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cf-metadata\"}}>{`CF Metadata`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is any optional metadata section to include arbitrary YAML that provide details about the template or resource.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are 3 metadata keys that have special meaning:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::CloudFormation::Designer`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Describes how the resources are laid out in your template. This is automatically added by the AWS Designer. This helps the UI (x and y)`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":2}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::CloudFormation::Interface`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Define grouping and ordering of input parameters when they are displayed in the AWS Console.`}</MDXTag>\n<MDXTag name=\"ol\" components={components} props={{\"start\":3}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`AWS::CloudFormation::Init`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Define configuration tasks for cfn-init. It's the most powerful usage of the metadata. This is very important and a lot to learn about it below.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"awscloudformationdesigner-hands-on\"}}>{`AWS::CloudFormation::Designer hands on`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is automatically added for you but worth deleting for online sharing and usage. When dragging and dropping each resource you will see a huge set of metadata left there. The metadata can also be added to each resource.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"awscloudformationinterface-hands-on\"}}>{`AWS::CloudFormation::Interface hands on`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Define grouping and ordering of input parameteres when they are displayed in the AWS Console. This is meant when users must input params manually.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You provide them with grouping, or sorting, that allow them to input parameters efficiently.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: Group all the EC2 related params together.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`---\nParameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  InstanceType:\n    Description: EC2 instance type.\n    Type: String\n    Default: t2.micro\n    AllowedValues:\n      - t2.micro\n      - t2.small\n      - t2.medium\n      - m3.medium\n      - m3.large\n      - m3.xlarge\n      - m3.2xlarge\n  SSHLocation:\n    Description: The IP address range that can SSH to the EC2 instance.\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\"\n    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n  VPCID:\n    Description: VPC to operate in\n    Type: AWS::EC2::VPC::Id\n  SubnetID:\n    Description: Subnet ID\n    Type: AWS::EC2::Subnet::Id\n  SecurityGroupID:\n    Description: Security Group\n    Type: AWS::EC2::SecurityGroup::Id\n\nResources:\n  MyEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: !Ref InstanceType\n      SecurityGroups:\n        - !Ref SecurityGroupID\n      SubnetID: !Ref SubnetID\n\nMetadata:\n  # This is the important part\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: 'Network Configuration'\n        Parameters:\n          - VPCID\n          - SubnetID\n          - SecurityGroupID\n      - Label:\n          default: 'Amazon EC2 Configuration'\n        Parameters:\n          - InstanceType\n          - KeyName\n    ParameterLabels:\n      VPCID:\n        default: 'Which VPC should this be deployed to?'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you deploy a new stack using the above, you will see that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Parameters`}</MDXTag>{` block will then drop you to questions about what configuration you are looking for.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"cfn-init-and-ec2-user-data\"}}>{`CFN Init and EC2 User Data`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"ec2-user-data-overview\"}}>{`EC2 User Data Overview`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Many CF templates will be about provisioning computer resources in your AWS Cloud eg. EC2 instances, autoscaling.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Usually, you want to the instances to be self configured so that they can perform the job they are supposed to perform.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can fully automate the EC2 fleet with CF init.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: an EC2 instance that has php and mysql installed on it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We want a user-data script to get this up and going. From the EC2 management console, you can basically use the advanced section to add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/bin/bash`}</MDXTag>{` section. This is already started to become more tedious than what we want.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How can we do this in CloufFormation?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following script can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`UserData`}</MDXTag>{` to add the script:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Parameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  SSHLocation:\n    Description: The IP address range that can be used to SSH to the EC2 instances\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\"\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\n\nResources:\n  WebServer:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      KeyName: !Ref KeyName\n      SecurityGroups:\n        - !Ref WebServerSecurityGroup\n      UserData:\n        Fn::Base64: | # everything after will be kept as is\n          #!/bin/bash\n          yum update -y\n          yum install -y httpd24 php56 mysql55-server php56-mysqlnd\n          service httpd start\n          chkconfig httpd on\n          groupadd www\n          usermod -a -G www ec2-user\n          chown -R root:www /var/www\n          chmod 2775 /var/www\n          find /var/www -type d -exec chmod 2775 {} +\n          find /var/www -type f -exec chmod 0664 {} +\n          echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php\n\n  WebServerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Enable HTTP access via port 80 + SSH access'\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          FromPort: '80'\n          IpProtocol: tcp\n          ToPort: '80'\n        - CidrIp: !Ref SSHLocation\n          FromPort: '22'\n          IpProtocol: tcp\n          ToPort: '22'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we see the power of this, let's have a look at CF Init.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cloudformation-init\"}}>{`CloudFormation Init`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What is the problem with EC2 user data? Well, what happens if we have a large configuration? What if we want to evolve the state without terminating it? How do we make it readable? How do we know or signal that our EC2 user-data script actually completed successfully?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Amazon creating CF helper scripts.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are 4 python scripts that come directly with Amazon Linux AMI or can be installed using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`yum`}</MDXTag>{` on non-Amazon Linux. They are:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`cfn-init: Used to retrieve and interprety the resouce metadata, installing packages, creating files and starting services.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`cfn-signal: A simple wrapper to signal an AWS CloudFormation CreationPolicy or WaitCondition, enabling you to sync other resources in the stack with the application being ready. This can give us the yes/no if succssful.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`cfn-get-metadata: A wrapper script making it easy to retrieve either all metadata defined for a resource or path to a specific key or subtree of the resource metadata.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`cfn-hup: A daemon to check for updates to metadata and execute custom hooks when the changes are detected.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The usual flow? cfn-init, then cfn-signal, then optionally cfn-hup.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"awscloudformationinit\"}}>{`AWS::CloudFormation::Init`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A config contains the following and is executed in that order:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Packages: install a list of packages on the Linux OS (mysql, wordpress, etc)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Groups: define user groups`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Users: define users, and which group they belong to`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Sources: download an archive file and place it on the ec2 instance (tar, zip, bz2)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Files: create files on the ec2 instance, using inline or can be pulled from a URL`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Commands: run a series of commands`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Services: launch a list of sysvinit`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also have multiple configs and you can run them sequentially etc.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"packages\"}}>{`Packages`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can install packages from the following repositories:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`apt`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`msi`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`python`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`rpm`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`rubygems`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`yum`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Packages are processed in the following order: rpm, yum/apt, and then rubygems and python.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also specify a version if you want.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    packages:\n      rpm:\n        epel: 'http://download....'\n      yum:\n        httpd: [] # means latest\n        php: []\n        wordpress: []\n      rubygems:\n        chef:\n          - '0.10.2' # get this version\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"groups-and-users\"}}>{`Groups and Users`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to have multiple users and groups (with optional gid) in your ec2 instance, you can add groups and users to CF and metadata.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      groupeOne: {}\n      groupTwo:\n        gid: '45' #gid = group ID\n    users:\n      myUser:\n        groups:\n          - 'groupOne'\n          - 'groupTwo'\n        uid: '50'\n        homeDir: '/tmp'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the larger example...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      apache: {} # assign any group ID\n    users:\n      'apache':\n        groups:\n          - 'apache' # user apache belongs to apache\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"sources\"}}>{`Sources`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`These are conveninence for a compressed archieve.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    sources:\n      '/home/ec2-user/aws-cli': 'https://github.com/aws/aws-cli/tarball/master'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"files\"}}>{`Files`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Files can be the most used section. Almost all the full power. It can be a specific URL or written inline for what you are doing.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Base example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      /tmp/setup.mysql:\n        content: !Sub |\n          CREATE DATABASE \\${DBName};\n          CREATE USER '\\${DBUsername}'@'localhost' IDENTIFIED BY '\\${DBPassword}';\n          GRANT ALL ON \\${DBName}.* TO '\\${DBUsername}'@'localhost';\n          FLUSH PRIVILEDGES;\n        mode: '000644'\n        owner: 'root'\n        group: 'root'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Full example:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note: !Sub is a function used for making substitution. ie where you see `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`\\${AWS::StackName}`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      '/tmp/cwlogs/apacheaccess.conf':\n        content: !Sub |\n          [general]\n          state_file= /var/awslogs/agent-state\n          [/var/log/httpd/access_log]\n          file = /var/log/httpd/access_log\n          log_group_name = \\${AWS::StackName}\n          log_stream_name = {instance_id}/apache.log\n          datetime_format = %d/%b/%Y:%H:%M:%S\n        mode: '000400'\n        owner: apache\n        group: apache\n      '/var/www/html/index.php':\n        content: !Sub |\n          <?php\n          echo '<h1>AWS CloudFormation sample PHP application for \\${AWS::StackName}</h1>';\n          ?>\n        mode: '000644'\n        owner: apache\n        group: apache\n      '/etc/cfn/cfn-hup.conf':\n        content: !Sub |\n          [main]\n          stack=\\${AWS::StackId}\n          region=\\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n      '/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n        content: !Sub |\n          [cfn-auto-reloader-hook]\n          triggers=post.update\n          path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n          action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"fnsub\"}}>{`Fn::Sub`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`(Or as !Sub) is used to substitute variables from a text. It's a very handy function that will allow you to fully customize your templates.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For example, you can combine !Sub with References or AWS Pseudo variables.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Must be in the form `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`\\${VarName}`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Forms:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`# You can do this\n!Sub\n  - String\n  - { Var1Name: Var1Value, Var2Name: Var2Value }\n\n# or (more complicated and rarely seen)\n!Sub String\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"commands\"}}>{`Commands`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can run commands one at a time in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`alphabetical order`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can set a directory from which that command is run, environment variables etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also provide a test to control whether the command is executed or not.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This should be a last resort. You can execute any of the scripts from the above files in this section.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: call the echo command only if the file doesn't exist`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`commands:\n  test:\n    command: 'echo \"\\$MAGIC\" > test.txt'\n    env:\n      MAGIC: 'I come from the environment!'\n    cwd: '~'\n    test: 'test ! -e ~/test.txt' # check file exists\n    ignoreErrors: 'false' # fail if is doesn't work\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"services\"}}>{`Services`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`AWS::CloudFormation::Init:\n  config:\n    services:\n      sysvinit:\n        httpd:\n          enabled: 'true'\n          ensureRunning: 'true'\n        sendmail:\n          enabled: 'false'\n          ensureRunning: 'false'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cfn-init-and-signal\"}}>{`CFN Init and Signal`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First, we use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`cfn-init`}</MDXTag>{` to launch the config.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then we use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`cfn-signal`}</MDXTag>{` to tell when the config is complete, which will let CF know that the resource creation has been successful.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This has to be used in conjuction with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CreationPolicy`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This example means waiting a max of 5 minutes for the instance to come online and be self configured. If we don't hear back by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`cfn-signal`}</MDXTag>{` by the, CF will fail and rollback.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`CreationPolicy:\n  ResourceSignal:\n    Timeout: PT5M\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is useful in case of a bad update.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cfn-hup\"}}>{`cfn-hup`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Cfn-hup can be used to tell your EC2 instance to look for Metadata changes every 15 minutes and apply the metadata configuration again.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`It's very powerful but you really need to try it out to understand how it works.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example from the \"files\" declation:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`'/etc/cfn/cfn-hup.conf':\n  content: !Sub |\n    [main]\n    stack=\\${AWS::StackId}\n    region=\\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n  group: 'root'\n'/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n  content: !Sub |\n    [cfn-auto-reloader-hook]\n    triggers=post.update\n    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n    action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cfn-init-hands-on\"}}>{`CFN Init Hands-On`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After loading the CFN Init yaml file into CF, it will go through a series of different events.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can under \"status reason\" if there is a success message sent back.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You need to practise your !Init skilles. It will be extremely handy for creating EC2 Instances or AutoScaling groups.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Remember logs for ec2-user data are in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/var/log/cloud-init-output.log`}</MDXTag>{` and logs for cfn-init are in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/var/log/cfn-init.log`}</MDXTag>{`, which is really helpful if commands don't complete like you want them to.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"advanced-cf-concepts\"}}>{`Advanced CF Concepts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Review of current standing:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You can check AWS labs templates from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`https://github/com/awslabs/aws-cloudformation-templates`}</MDXTag>{` to see what you can understand/see good practise.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The example with WordPress is what is shown in the course.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"using-the-aws-cli\"}}>{`Using the AWS CLI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can use the AWS CLI to create, update or delete CF templates.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Super conventient for when you start automating your deployments.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once you've downloaded the AWS config, use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`aws configure --profile <profile_name>`}</MDXTag>{` to configure a profile with the ID and Secret Access key.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To run a CF command, you can use something like the following `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`aws cloudformation create-stack --stack-name example-cli-stack --template-body file://0-sample-template.yaml --parameters file://0-parameters.json --profile cf-course --region us-east-1`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`parameters.json`}</MDXTag>{` file to set ParameterKey and ParameterValue for all the keys and values we are looking to share.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After running the command, what you get back is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StackId`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"using-troposphere-python-to-generate-cloudformation-templates\"}}>{`Using Troposphere (Python) to generate CloudFormation templates`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Troposhere allows you to leverage Python write the templates.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This means you can start using types in your templates for safety.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You will also have valid CF and can dynamically generate CloudFormation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This means you can also have very complex conditions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The disadvantage is that the Python needs to generate the JSON for it to be.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"deletionpolicy\"}}>{`DeletionPolicy`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This policy can prevent resources from being deleted, or in some cases, back them up before the deletion. This will help prevent doing something really, really bad.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Deletion Policy can take up the following values:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Delete: AWS CloudFormation will delete the resource and all its content if applicable during stack deletion (does not apply to S3)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted. You can add this deletion policy to any resource type.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Snapshot: For resources that support snapshots (AWS::EC2::Volume, AWS::ElasticCache::CacheCluster etc)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-yaml\"}}>{`Resources:\n  myS3Bucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the above example, it will create the S3 Bucket, you will see the bucket created.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now if we delete that stack and the deletion policy is retain, you will still have that bucket there.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"custom-resources-with-aws-lambda\"}}>{`Custom Resources with AWS Lambda`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Custom resources enable you to write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update (if you changed the custom resource) or delete stacks.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For example, you might want to include resources that aren't available as AWS CloudFormation resource types.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Check online for a walkthrough of custom resources.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"best-practises-to-organize-your-cloudformation-templates\"}}>{`Best practises to organize your CloudFormation templates`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`How to organise templates: you can have a layered architecture (horizontal layers) vs service oriented architecture (vertical layers).`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Use cross stack references eg. to reference a VPC or subnet.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Make sure the template is environment agnostic to do dev / test / prod and across regions / accounts seemlessly.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Never embed credentials (use parameters with NoEcho or KMS).`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Use specific parameters types and constraints.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Use CFN Init (& latest version of the helper scripts)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Validate templates`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Don't do anything manual on the elements of the stack - that can cause a state mismatch.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Verify changes with changesets (and avoid disasters).`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Use stack policies to prevent critical components from being deleted after create (such as your most valuable RDS database).`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"cost-estimate-for-templates\"}}>{`Cost estimate for templates`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can estimate the cost of a stack very easily.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For this, just upload the stack onto the AWS console, enter the params and click \"cost\".`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}