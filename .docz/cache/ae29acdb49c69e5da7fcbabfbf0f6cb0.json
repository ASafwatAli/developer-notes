{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/EKS-Kubernetes-Dashboard.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/EKS-Kubernetes-Dashboard.md","mtime":1548282825044},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Kubernetes/EKS-Kubernetes-Dashboard.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,sBADA,CAAR,wBADK,CAIL,uGAJK,CAKL,uCALK,CAML,cACE,UAAI,UAAU,CAAC,IAAf,kDADF,CAEE,UAAI,UAAU,CAAC,IAAf,eAFF,CAGE,UAAI,UAAU,CAAC,IAAf,aAHF,CAIE,UAAI,UAAU,CAAC,IAAf,oBAJF,CAKE,UAAI,UAAU,CAAC,IAAf,iDALF,CANK,CAaL,wFAbK,CAcL,yBAdK,CAeL,cACE,UAAI,UAAU,CAAC,IAAf,UADF,CAEE,UAAI,UAAU,CAAC,IAAf,2BAFF,CAGE,UAAI,UAAU,CAAC,IAAf,sDAHF,CAfK,CAoBL,uCAA8B,uBAAG,UAAU,CAAC,GAAd,EAAsB,CAChD,OAAQ,yCADwC,CAAtB,4CAA9B,KApBK,CAuBL,2FAvBK,CAwBL,aAAG,WAAK,GAAG,CAAC,yBAAT,CAAmC,GAAG,CAAC,qHAAvC,EAAH,CAxBK,CAyBL,SAAQ,CACN,KAAM,eADA,CAAR,iBAzBK,CA4BL,cACE,UAAI,UAAU,CAAC,IAAf,0CADF,CAEE,UAAI,UAAU,CAAC,IAAf,qBAFF,CAGE,UAAI,UAAU,CAAC,IAAf,2BAHF,CAIE,UAAI,UAAU,CAAC,IAAf,uDAJF,CA5BK,CAkCL,kCAlCK,CAmCL,cACE,UAAI,UAAU,CAAC,IAAf,wCADF,CAEE,UAAI,UAAU,CAAC,IAAf,8DAFF,CAGE,UAAI,UAAU,CAAC,IAAf,iEAHF,CAnCK,CAwCL,SAAQ,CACN,KAAM,uCADA,CAAR,yCAxCK,CA2CL,0DAAiD,kBAAY,UAAU,CAAC,GAAvB,mBAAjD,SAAoH,kBAAY,UAAU,CAAC,GAAvB,SAApH,sBAA0L,kBAAY,UAAU,CAAC,GAAvB,gBAA1L,gDA3CK,CA4CL,2CA5CK,CA6CL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,y7DAAL,CA7CK,CAkHL,SAAQ,CACN,KAAM,yBADA,CAAR,2BAlHK,CAqHL,aAAG,WAAK,GAAG,CAAC,QAAT,CAAkB,GAAG,CAAC,qHAAtB,EAAH,CArHK,CAsHL,iEAtHK,CAuHL,cACE,UAAI,UAAU,CAAC,IAAf,gDADF,CAEE,UAAI,UAAU,CAAC,IAAf,kEAFF,CAGE,UAAI,UAAU,CAAC,IAAf,sDAHF,CAvHK,CA4HL,0CAAiC,kBAAY,UAAU,CAAC,GAAvB,yBAAjC,UA5HK,CA6HL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,qjGAAL,CA7HK,CAsOL,qFAA4E,kBAAY,UAAU,CAAC,GAAvB,oFAA5E,KAtOK,CAuOL,mDAvOK,CAwOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,0VAAL,CAxOK,CA+OL,SAAQ,CACN,KAAM,8BADA,CAAR,gCA/OK,CAkPL,aAAG,WAAK,GAAG,CAAC,+BAAT,CAAyC,GAAG,CAAC,qHAA7C,EAAH,CAlPK,CAmPL,qIAnPK,CAoPL,aAAG,WAAK,GAAG,CAAC,oBAAT,CAA8B,GAAG,CAAC,qHAAlC,EAAH,CApPK,CAqPL,iIArPK,CAsPL,aAAG,WAAK,GAAG,CAAC,iBAAT,CAA2B,GAAG,CAAC,qHAA/B,EAAH,CAtPK,CAuPL,SAAQ,CACN,KAAM,oBADA,CAAR,sBAvPK,CA0PL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,slCAAL,CA1PK,CAuSL,SAAQ,CACN,KAAM,mBADA,CAAR,qBAvSK,CA0SL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,qjCAAL,CA1SK,CAqVL,SAAQ,CACN,KAAM,yBADA,CAAR,2BArVK,CAwVL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,iYAAL,CAxVK,CA6WL,SAAQ,CACN,KAAM,iCADA,CAAR,oCA7WK,CAgXL,0DAhXK,CAiXL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,4HAAL,CAjXK,CAuXL,mDAvXK,CAwXL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,yEAAL,CAxXK,CA4XL,gEA5XK,CA6XL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,i/BAAL,CA7XK,CA+YL,qCAA4B,kBAAY,UAAU,CAAC,GAAvB,gBAA5B,sCAAyH,kBAAY,UAAU,CAAC,GAAvB,SAAzH,SAAkL,kBAAY,UAAU,CAAC,GAAvB,gBAAlL,KA/YK,CAgZL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,0EAAX,mBAhZK,CAiZL,SAAQ,CACN,KAAM,gDADA,CAAR,kDAjZK,CAoZL,yCApZK,CAqZL,cACE,UAAI,UAAU,CAAC,IAAf,0BADF,CAEE,UAAI,UAAU,CAAC,IAAf,iBAFF,CArZK,CAyZL,sCAA6B,kBAAY,UAAU,CAAC,GAAvB,kBAA7B,iEAzZK,CA0ZL,SAAQ,CACN,KAAM,oCADA,CAAR,sCA1ZK,CA6ZL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,oYAAL,CA7ZK,CAmbL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,+CAAX,cAnbK,CAobL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,mHAAL,CApbK,CA0bL,SAAQ,CACN,KAAM,eADA,CAAR,iBA1bK,CA6bL,4LA7bK,CA8bL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,qKAAL,CA9bK,CAqcL,yCAAgC,kBAAY,UAAU,CAAC,GAAvB,4GAAhC,eArcK,CAscL,+DAtcK,CAucL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,6HAAL,CAvcK,CA2cL,gDAAuC,kBAAY,UAAU,CAAC,GAAvB,6EAAvC,KA3cK,CA4cL,SAAQ,CACN,KAAM,eADA,CAAR,iBA5cK,CA+cL,cACE,UAAI,UAAU,CAAC,IAAf,iEAAoF,kBAAY,UAAU,CAAC,IAAvB,6BAApF,KADF,CAEE,UAAI,UAAU,CAAC,IAAf,iTAFF,CA/cK,CAmdL,sLAndK,CAAP,CAqdD,C,yRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kubernetes-dashboard\"\n    }}>{`Kubernetes Dashboard`}</h1>\n    <p>{`This belongs to the Kubernetes project and gives you a UI overview of what is going on.`}</p>\n    <p>{`It displays info about:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Workload (Deployments, Pods, ReplicationSets)`}</li>\n      <li parentName=\"ul\">{`Namespaces`}</li>\n      <li parentName=\"ul\">{`Services`}</li>\n      <li parentName=\"ul\">{`Nodes & Storage`}</li>\n      <li parentName=\"ul\">{`Usage Metrics (Heapster monitoring required)`}</li>\n    </ul>\n    <p>{`The dashboard can also execute commands based on propr RBAC permissions.`}</p>\n    <p>{`Security:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`HTTPS`}</li>\n      <li parentName=\"ul\">{`Login via Bearer token`}</li>\n      <li parentName=\"ul\">{`RBAC to define fine-grain access to UI components`}</li>\n    </ul>\n    <p>{`More info can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kubernetes/dashboard\"\n      }}>{`https://github.com/kubernetes/dashboard`}</a>{`.`}</p>\n    <p>{`What the setup for us will look like when touching base with the dashboard:`}</p>\n    <p><img alt=\"Dashboard access layout\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1548218031/eks-course/Screen_Shot_2019-01-23_at_3.33.27_pm.png\" /></p>\n    <h2 {...{\n      \"id\": \"steps-to-take\"\n    }}>{`Steps to take`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Create service account and RBAC rules`}</li>\n      <li parentName=\"ol\">{`Deploy dashboard`}</li>\n      <li parentName=\"ol\">{`Deploy metrics Add-Ons`}</li>\n      <li parentName=\"ol\">{`Create cluster admin account and explore dashboard`}</li>\n    </ol>\n    <p>{`We need to create:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A service account for the dashboard`}</li>\n      <li parentName=\"ol\">{`Several roles to grant privileges (RBAC) to the dashboard`}</li>\n      <li parentName=\"ol\">{`A role binding to link the service account to the RBAC roles`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"creating-the-serviceaccount-and-roles\"\n    }}>{`Creating the ServiceAccount and Roles`}</h2>\n    <p>{`First, we handle the RBAC by creating the `}<inlineCode parentName=\"p\">{`ServiceAccount`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Role`}</inlineCode>{` and then using a `}<inlineCode parentName=\"p\">{`RoleBinding`}</inlineCode>{` to attach that Role to the Service Account.`}</p>\n    <p>{`dashboard-account-rab.yaml:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ------------------- Dashboard Service Account ------------------- #\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kube-system\n\n---\n# ------------------- Dashboard Role & Role Binding ------------------- #\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: kubernetes-dashboard-minimal\n  namespace: kube-system\nrules:\n  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.\n  - apiGroups: ['']\n    resources: ['secrets']\n    verbs: ['create']\n    # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.\n  - apiGroups: ['']\n    resources: ['configmaps']\n    verbs: ['create']\n    # Allow Dashboard to get, update and delete Dashboard exclusive secrets.\n  - apiGroups: ['']\n    resources: ['secrets']\n    resourceNames:\n      ['kubernetes-dashboard-key-holder', 'kubernetes-dashboard-certs']\n    verbs: ['get', 'update', 'delete']\n    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.\n  - apiGroups: ['']\n    resources: ['configmaps']\n    resourceNames: ['kubernetes-dashboard-settings']\n    verbs: ['get', 'update']\n    # Allow Dashboard to get metrics from heapster.\n  - apiGroups: ['']\n    resources: ['services']\n    resourceNames: ['heapster']\n    verbs: ['proxy']\n  - apiGroups: ['']\n    resources: ['services/proxy']\n    resourceNames: ['heapster', 'http:heapster:', 'https:heapster:']\n    verbs: ['get']\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: kubernetes-dashboard-minimal\n  namespace: kube-system\nroleRef:\n  # Reference role we created above\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: kubernetes-dashboard-minimal\nsubjects:\n  # Attach RoleBinding to Service Account we first created\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kube-system\n\n---\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deploying-the-dashboard\"\n    }}>{`Deploying the dashboard`}</h2>\n    <p><img alt=\"Layout\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1548219837/eks-course/Screen_Shot_2019-01-23_at_4.03.45_pm.png\" /></p>\n    <p>{`There will be 3 resources created in the lecture:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Service: fixed port, fixed url, user facing`}</li>\n      <li parentName=\"ol\">{`Deployment: Dashboard pod -- port 8443 (can live on any host)`}</li>\n      <li parentName=\"ol\">{`Volume: This will contain our secret certificates`}</li>\n    </ol>\n    <p>{`This is all stored in the `}<inlineCode parentName=\"p\">{`deploy-dashboard.yml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# Copyright 2017 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# ------------------- Dashboard Secret ------------------- #\n\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    # Using this to match easily\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kube-system\ntype: Opaque\n\n---\n# ------------------- Dashboard Deployment ------------------- #\n\nkind: Deployment\napiVersion: apps/v1beta2\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  # Used for Service to target\n  name: kubernetes-dashboard\n  namespace: kube-system\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n    spec:\n      containers:\n        - name: kubernetes-dashboard\n          image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0\n          # Used for Service to expose\n          ports:\n            - containerPort: 8443\n              protocol: TCP\n          args:\n            - --auto-generate-certificates\n            # Uncomment the following line to manually specify Kubernetes API server Host\n            # If not specified, Dashboard will attempt to auto discover the API server and connect\n            # to it. Uncomment only if the default does not work.\n            # - --apiserver-host=http://my-address:port\n          volumeMounts:\n            - name: kubernetes-dashboard-certs\n              mountPath: /certs\n              # Create on-disk volume to store exec logs\n            - mountPath: /tmp\n              name: tmp-volume\n          livenessProbe:\n            httpGet:\n              scheme: HTTPS\n              path: /\n              port: 8443\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n      volumes:\n        - name: kubernetes-dashboard-certs\n          secret:\n            secretName: kubernetes-dashboard-certs\n        - name: tmp-volume\n          emptyDir: {}\n      serviceAccountName: kubernetes-dashboard\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n\n---\n# ------------------- Dashboard Service ------------------- #\n\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kube-system\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n`}</code></pre>\n    <p>{`After we applying the yaml file, we can see what we've created using `}<inlineCode parentName=\"p\">{`kubectl get all --namespace kube-system --selector=k8s-app=kubernetes-dashboard`}</inlineCode>{`.`}</p>\n    <p>{`We can get even more granular with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl get svc --namespace kube-system --selector=k8s-app=kubernetes-dashboard\nkubectl get pods --namespace kube-system --selector=k8s-app=kubernetes-dashboard\nkubectl get deployments --namespace kube-system --selector=k8s-app=kubernetes-dashboard\nkubectl get replicasets --namespace kube-system --selector=k8s-app=kubernetes-dashboard\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deploying-the-metrics-add-on\"\n    }}>{`Deploying the metrics add-on`}</h2>\n    <p><img alt=\"Heapster Kubernetes resources\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1548221185/eks-course/Screen_Shot_2019-01-23_at_4.26.16_pm.png\" /></p>\n    <p>{`We will deploy Heapster and that is made up of three Kubernetes resources: a service, deployment and service account.`}</p>\n    <p><img alt=\"InfluxDB resources\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1548221289/eks-course/Screen_Shot_2019-01-23_at_4.28.00_pm.png\" /></p>\n    <p>{`We will also deploy InfluxDB to store its data. The Heapster deployment will interface with the InfluxDB service.`}</p>\n    <p><img alt=\"Full connection\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1548221371/eks-course/Screen_Shot_2019-01-23_at_4.29.21_pm.png\" /></p>\n    <h3 {...{\n      \"id\": \"deploying-influxdb\"\n    }}>{`Deploying InfluxDB`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: monitoring-influxdb\n  namespace: kube-system\nspec:\n  replicas: 1\n  template:\n    metadata:\n      # label k8s-app used for Service spec\n      labels:\n        task: monitoring\n        k8s-app: influxdb\n    spec:\n      containers:\n        - name: influxdb\n          image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2\n          volumeMounts:\n            - mountPath: /data\n              name: influxdb-storage\n      volumes:\n        - name: influxdb-storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    task: monitoring\n    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)\n    # If you are NOT using this as an addon, you should comment out this line.\n    kubernetes.io/cluster-service: 'true'\n    kubernetes.io/name: monitoring-influxdb\n  name: monitoring-influxdb\n  namespace: kube-system\nspec:\n  ports:\n    - port: 8086\n      targetPort: 8086\n  # What Service should be linked to\n  selector:\n    k8s-app: influxdb\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"deploying-heapter\"\n    }}>{`Deploying Heapter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: heapster\n  namespace: kube-system\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        task: monitoring\n        k8s-app: heapster\n    spec:\n      serviceAccountName: heapster\n      containers:\n        - name: heapster\n          image: k8s.gcr.io/heapster-amd64:v1.5.4\n          imagePullPolicy: IfNotPresent\n          command:\n            - /heapster\n            - --source=kubernetes:https://kubernetes.default\n            - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    task: monitoring\n    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)\n    # If you are NOT using this as an addon, you should comment out this line.\n    kubernetes.io/cluster-service: 'true'\n    kubernetes.io/name: Heapster\n  name: heapster\n  namespace: kube-system\nspec:\n  ports:\n    - port: 80\n      targetPort: 8082\n  selector:\n    k8s-app: heapster\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"deploying-heapster-rbac\"\n    }}>{`Deploying Heapster RBAC`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: heapster\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: heapster\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:heapster\nsubjects:\n  - kind: ServiceAccount\n    name: heapster\n    namespace: kube-system\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deploying-heapster-and-influxdb\"\n    }}>{`Deploying Heapster and Influx.db`}</h2>\n    <p>{`Applying these deployments to the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl apply -f deploy-heapster.yml\nkubectl apply -f deploy-influxdb.yml\nkubectl apply -f deploy-heapster-rbac.yml\n`}</code></pre>\n    <p>{`Using a selector see what we built:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl get all --namespace kube-system --selector=task=monitoring\n`}</code></pre>\n    <p>{`Applying the above should return something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`NAME                                       READY   STATUS    RESTARTS   AGE\npod/heapster-84c9bc48c4-lph2v              1/1     Running   0          1m\npod/monitoring-influxdb-848b9b66f6-7tkcv   1/1     Running   0          2m\n\nNAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/heapster              ClusterIP   [REDACTED]      <none>        80/TCP     3m\nservice/monitoring-influxdb   ClusterIP   [REDACTED]      <none>        8086/TCP   2m\n\nNAME                                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/heapster              1         1         1            1           3m\ndeployment.apps/monitoring-influxdb   1         1         1            1           2m\n\nNAME                                             DESIRED   CURRENT   READY   AGE\nreplicaset.apps/heapster-84c9bc48c4              1         1         1       3m\nreplicaset.apps/monitoring-influxdb-848b9b66f6   1         1         1       2m\n`}</code></pre>\n    <p>{`Note that Kubernetes `}<inlineCode parentName=\"p\">{`Deployments`}</inlineCode>{` provides declarative updates for `}<inlineCode parentName=\"p\">{`Pods`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ReplicaSets`}</inlineCode>{`.`}</p>\n    <p>{`See `}<inlineCode parentName=\"p\">{`https://kubernetes.io/docs/concepts/workloads/controllers/deployment/`}</inlineCode>{` for more info.`}</p>\n    <h2 {...{\n      \"id\": \"creating-an-admin-account-to-use-the-dashboard\"\n    }}>{`Creating an Admin Account to use the dashboard`}</h2>\n    <p>{`Using YAML, we'll create:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`cluster admin account`}</li>\n      <li parentName=\"ol\">{`Role binding`}</li>\n    </ol>\n    <p>{`Then we can start the `}<inlineCode parentName=\"p\">{`kubectl proxy`}</inlineCode>{` to authenticate the K8s dashboard and explore the dashboard.`}</p>\n    <h2 {...{\n      \"id\": \"creating-the-admin-service-account\"\n    }}>{`Creating the admin Service Account`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: eks-admin\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: eks-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n  - kind: ServiceAccount\n    name: eks-admin\n    namespace: kube-system\n`}</code></pre>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`kubectl apply -f admin-service-account.yml`}</inlineCode>{` to apply.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# Returned\nserviceaccount/eks-admin created\nclusterrolebinding.rbac.authorization.k8s.io/eks-admin created\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"kubectl-proxy\"\n    }}>{`Kubectl proxy`}</h2>\n    <p>{`Now we should be able to run the proxy to see the dashboard! Ensure if you are port forwarding further if you need to see it on a particular host from a VM or docker image.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# This is to forward from Docker container to host\nkubectl proxy --address='0.0.0.0' --port=8001 --accept-hosts='.*'\n\n# Starting to serve on 127.0.0.1:8001\n`}</code></pre>\n    <p>{`Now head to a browser at `}<inlineCode parentName=\"p\">{`http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login`}</inlineCode>{` for login.`}</p>\n    <p>{`To login with the token, we need the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-course-admin | awk '{print $1}')\n`}</code></pre>\n    <p>{`There is some more info here at `}<inlineCode parentName=\"p\">{`https://docs.aws.amazon.com/eks/latest/userguide/dashboard-tutorial.html`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"chaos-testing\"\n    }}>{`Chaos testing`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Simulating a failure of the frontend pods can be done using `}<inlineCode parentName=\"li\">{`kubectl delete pod <POD>`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Simulating a failure of the nodes is to just stop one of the three EC2 instances (can be done from AWS console easily). If a node goes down, the rest of the pods are distributed amongst the other nodes. If nodes are considered for autoscaling, then the EC2 instance will against restart another node.`}</li>\n    </ul>\n    <p>{`Note, there is no automatic redeployment to the other nodes when a node becomes rescheduled. Killing some pods will of course help with rescheduling and distribution.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}