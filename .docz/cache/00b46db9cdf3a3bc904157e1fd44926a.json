{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Big-Data/Tools-And-Technologies.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Big-Data/Tools-And-Technologies.md","mtime":1562563032013},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Big-Data/Tools-And-Technologies.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"big-data-tools-and-technologies\"\n    }}>{`Big Data Tools and Technologies`}</h1>\n    <h2 {...{\n      \"id\": \"apache-hadoop\"\n    }}>{`Apache Hadoop`}</h2>\n    <p>{`Hadoop is a very significant player in the Big Data landscape.`}</p>\n    <p>{`It's an open-sourced framework for distributed storage and processing of very large data sets.`}</p>\n    <p>{`Originally built in 2005 by a Yahoo engineer.`}</p>\n    <p>{`It was inspired by Google's `}<inlineCode parentName=\"p\">{`MapReduce`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`Google File System`}</inlineCode>{` papers.`}</p>\n    <p>{`It was written in Java to implement the `}<inlineCode parentName=\"p\">{`MapReduce`}</inlineCode>{` programming model for scalable, reliable and distributed computing.`}</p>\n    <p>{`The framework is composed of:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Hadoop Common: Contains libraries and utilities needed by other Hadoop modules.`}</li>\n      <li parentName=\"ol\">{`Hadoop Distributed File System (HDFS): A distributed file system that stores data on the commodity machines, providing very high aggregate bandwidth across the cluster.`}</li>\n      <li parentName=\"ol\">{`Hadoop MapReduce: A programming model for large-scale data processing.`}</li>\n      <li parentName=\"ol\">{`Hadoop YARN: A resource management platform responsible for managing compute resources in clusters and using them for the scheduling of users' applications.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"hdfs\"\n    }}>{`HDFS`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Structured like a regular Unix file system with data storage distributed across several machines in the cluster.`}</li>\n      <li parentName=\"ul\">{`Data service that sits atop regular file systems, allowing a fault tolerant, resilient clustered approach to storing and processing data.`}</li>\n      <li parentName=\"ul\">{`Fault-tolerant: Detection of faults and quick automatic recovery is a core architectural goal.`}</li>\n      <li parentName=\"ul\">{`Tuned to support large files. Typically a file is GB or TB and can support tens of millions of files by scaling to hundreds of nodes in a cluster.`}</li>\n      <li parentName=\"ul\">{`Follows `}<inlineCode parentName=\"li\">{`write once, read multiple`}</inlineCode>{` approach, simplifying data coherency issues and enabling high throughput data access. Example is a web crawler application.`}</li>\n      <li parentName=\"ul\">{`Optimized for throughput rather than latency. This makes it suited for long batch operations on large scale data rather than interactive analysis on streaming data.`}</li>\n      <li parentName=\"ul\">{`Moving computation near the data reduces network congestion and increses throughput. HDFS provides interfaces or applications to move closer to data storage.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"architecture\"\n    }}>{`Architecture`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Leader-follower architecture, where `}<inlineCode parentName=\"li\">{`Namenode`}</inlineCode>{` is the leader and `}<inlineCode parentName=\"li\">{`Datanodes`}</inlineCode>{` are slaves.`}</li>\n      <li parentName=\"ol\">{`Files split into blocks, and blocks are stored on datanodes (generally one per node within cluster).`}</li>\n      <li parentName=\"ol\">{`Datanodes manage storage attached to nodes that they run on.`}</li>\n      <li parentName=\"ol\">{`Namenode controls all metadata, including what blocks make up a file and which datanode the blocks are stored on.`}</li>\n      <li parentName=\"ol\">{`Namenode executres file system operations like opening, closing and renaming files and directories.`}</li>\n      <li parentName=\"ol\">{`Datanodes serve read and write requests from the clients.`}</li>\n      <li parentName=\"ol\">{`Datanodes perform block creation, deletion, replication upon instruction from the Namenode.`}</li>\n      <li parentName=\"ol\">{`Namenode and Datanode are Java software designed to run on commodity hardware that supports Java.`}</li>\n      <li parentName=\"ol\">{`Usually a cluster contains a single Namenode and multiple datanodes, one each for each node in the cluster.`}</li>\n    </ol>\n    <p><img alt=\"HDFS Architecture\" src=\"https://hadoop.apache.org/docs/r1.2.1/images/hdfsarchitecture.gif\" /></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Namenode`}</inlineCode>{` makes all decisions around replication of blocks for data durability. Periodically receives heartbeat and `}<inlineCode parentName=\"p\">{`BlockReport`}</inlineCode>{` from datanodes in the cluster. Receipt of heartbeat is the health check.`}</p>\n    <h2 {...{\n      \"id\": \"hadoop-mapreduce\"\n    }}>{`Hadoop MapReduce`}</h2>\n    <p>{`A framework that makes it easy to write applications which can consume huge amouts of data.`}</p>\n    <p>{`It allows processing in parallel on large clusters consisting of thousands of nodes in a manner that is reliable and fault tolerant.`}</p>\n    <p>{`The MapReduce layer consists of:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`MapReduce Java API to write workflows`}</li>\n      <li parentName=\"ol\">{`Services to manage these workflows and provide the scheduling, distribution and parallelizing.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"mapreduce-jobs\"\n    }}>{`MapReduce jobs`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Splits the data sets into independent chunks.`}</li>\n      <li parentName=\"ol\">{`Data sets are processed by map tasks in parallel.`}</li>\n      <li parentName=\"ol\">{`MapReduce sorts the output of map jobs and feeds them to reduce tasks.`}</li>\n      <li parentName=\"ol\">{`Both input and output of map and reduce are stored on the file system.`}</li>\n      <li parentName=\"ol\">{`Framework takes care of scheduling tasks, monitoring them and re-executing failed tasks.`}</li>\n      <li parentName=\"ol\">{`MapReduce framework and HDFS are running on the same set of nodes. Tasks are scheduled on nodes where data is already present, hence yielding high bandwidth across the cluster.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"inputs-and-outputs-of-a-mapreduce-job\"\n    }}>{`Inputs and Outputs of a MapReduce Job`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Exclusively operates on key-value pairs.`}</li>\n      <li parentName=\"ul\">{`Input is large scale data set which benefits from parallel processing and does not fit on a single machine.`}</li>\n      <li parentName=\"ul\">{`Input split into independent data sets and map function produces key-value pair for each record in the data set.`}</li>\n      <li parentName=\"ul\">{`Output of mappers is shuffled, sorted, grouped and passed to the reducers.`}</li>\n      <li parentName=\"ul\">{`Reducer function applied to sets of key-value pairs that share the same key. The reducer function often agregates the value for the pairs with the same key.`}</li>\n    </ul>\n    <p>{`It is important to know that:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Almost all data can be mapped to a key-value pair using a map function.`}</li>\n      <li parentName=\"ol\">{`Keys and values can be of any type. If using a custom type, the type must be implement a writable interface.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`MapReduce`}</inlineCode>{` cannot be used if a computation of a value depends on a previously computed value. Recursive funcs like Fibonnaci cannot be implemented using `}<inlineCode parentName=\"li\">{`MapReduce`}</inlineCode>{`.`}</li>\n    </ol>\n    <p>{`This is an example of a word count `}<inlineCode parentName=\"p\">{`MapReduce`}</inlineCode>{` job.`}</p>\n    <p><img alt=\"Example of MapReduce job\" src=\"https://www.guru99.com/images/Big_Data/061114_0930_Introductio1.png\" /></p>\n    <p>{`The order of a job goes as the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Input`}</li>\n      <li parentName=\"ol\">{`Splitting`}</li>\n      <li parentName=\"ol\">{`Mapping`}</li>\n      <li parentName=\"ol\">{`Shuffle`}</li>\n      <li parentName=\"ol\">{`Reduce`}</li>\n      <li parentName=\"ol\">{`Final Result`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"example-applications-of-mapreduce\"\n    }}>{`Example Applications of MapReduce`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Counting votes by processing data from each polling booth.`}</li>\n      <li parentName=\"ol\">{`Aggregating electricy consumption from data points collected across a large geographical area.`}</li>\n      <li parentName=\"ol\">{`Used by Google Maps to calculate nearest neighbour.`}</li>\n      <li parentName=\"ol\">{`Performing statistical aggregate type functions on large data sets.`}</li>\n      <li parentName=\"ol\">{`Counting number of href links in web log files for clickstream analysis.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"writing-and-running-hadoop-mapreduce-jobs\"\n    }}>{`Writing and Running Hadoop MapReduce Jobs`}</h3>\n    <p>{`Typicall jobs are written in Java, but can also be written using:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Hadoop Streaming: A utility which allows users to create an run MapReduce jobs with any executables.`}</li>\n      <li parentName=\"ol\">{`Hadoop Pipes: C++ API to implement MapReduce applications`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"hadoop-job-configurations\"\n    }}>{`Hadoop Job configurations`}</h3>\n    <p>{`Consists of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Input and output locations on HDFS.`}</li>\n      <li parentName=\"ul\">{`Map and reduce functions via implementations of interfaces or abstract classes.`}</li>\n      <li parentName=\"ul\">{`Other job parameters.`}</li>\n    </ul>\n    <p>{`A Hadoop job client submits the job (jar/executable) and configuration to the `}<inlineCode parentName=\"p\">{`ResourceManager`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`YARN`}</inlineCode>{` which distributes them to the workers and performs functions like scheduling, monitoring and providing status and diagnostic information.`}</p>\n    <h2 {...{\n      \"id\": \"yet-another-resource-negotiator-yarn\"\n    }}>{`Yet Another Resource Negotiator (YARN)`}</h2>\n    <p>{`Introduced in Hadoop 2.0, YARN provides a general processing platform not constrained to `}<inlineCode parentName=\"p\">{`MapReduce`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`Global ResourceManager`}</inlineCode>{` is the authority that delegates resources among the applications in the system.`}</p>\n    <p>{`It has a `}<inlineCode parentName=\"p\">{`NodeManager`}</inlineCode>{` on each node that is responsible for containers, monitoring their resource usage (CPU, memory, disk, network) and reporting this data to the `}<inlineCode parentName=\"p\">{`ResourceManager`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ResourceManager`}</inlineCode>{` has two components:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Scheduler - responsible for allocating resources the various running applications.`}</li>\n      <li parentName=\"ol\">{`ApplicationsManager - responsible for accepting job-submissions, negotiating the first container for executing the application-specific `}<inlineCode parentName=\"li\">{`ApplicationMaster`}</inlineCode>{` and provides the service for restarting the `}<inlineCode parentName=\"li\">{`ApplicationMaster`}</inlineCode>{` on failure.`}</li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ApplicationMaster`}</inlineCode>{` has the responsibility of negotiating appropriate resource containers from the `}<inlineCode parentName=\"p\">{`Scheduler`}</inlineCode>{`, tracking their status and monitoring progress.`}</p>\n    <h3 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h3>\n    <p>{`Note that for YARN, a `}<inlineCode parentName=\"p\">{`container`}</inlineCode>{` represents a collection of physical `}<inlineCode parentName=\"p\">{`resources`}</inlineCode>{`. Also could mean CPU cores, disk along with RAM.`}</p>\n    <h2 {...{\n      \"id\": \"hadoop-ecosystem\"\n    }}>{`Hadoop Ecosystem`}</h2>\n    <p><img alt=\"Ecosystem\" src=\"https://i.ytimg.com/vi/1WY63n2XRLM/maxresdefault.jpg\" /></p>\n    <p>{`5 functions of Hadoop ecosystem:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Data management using HDFS, HBase and YARN`}</li>\n      <li parentName=\"ol\">{`Data access with MapReduce, Hive and Pig`}</li>\n      <li parentName=\"ol\">{`Data ingestion and integration using Flume, Sqoop, Kafka and Storm`}</li>\n      <li parentName=\"ol\">{`Data monitoring using Ambari, Zookeeper and Oozie`}</li>\n      <li parentName=\"ol\">{`Data governance and security using Falcon, Ranger and Knox`}</li>\n    </ol>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}