{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","mtime":1562563032043},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"testing-with-enzyme\"\n    }}>{`Testing with Enzyme`}</h1>\n    <p>{`React components allow unit tests in JS to be much easier.`}</p>\n    <p>{`These exampes require `}<inlineCode parentName=\"p\">{`sinonjs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`enzyme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mocha`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chai`}</inlineCode></p>\n    <p>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<inlineCode parentName=\"p\">{`shallow`}</inlineCode>{`.`}</p>\n    <p>{`Testing lifecycle events, use `}<inlineCode parentName=\"p\">{`mount`}</inlineCode>{`.`}</p>\n    <p>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`File structure`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</li>\n      <li parentName=\"ul\">{`scripts\n- mocha_runner.js`}</li>\n      <li parentName=\"ul\">{`package.json`}</li>\n      <li parentName=\"ul\">{`src\n- components\n- repositories.js`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"enz-1-testing-with-shallow\"\n    }}>{`ENZ-1: Testing with \"Shallow\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-2-testing-with-mount\"\n    }}>{`ENZ-2: Testing with \"Mount\"`}</h2>\n    <p>{`This requires use of `}<inlineCode parentName=\"p\">{`js-dom`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-3-testing-with-render\"\n    }}>{`ENZ-3: Testing with \"Render\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}