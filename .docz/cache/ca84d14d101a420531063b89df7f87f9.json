{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md","mtime":1563949828549},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJydWJ5LWNvbnRydWN0b3JzIn0sIlJ1YnkgQ29udHJ1Y3RvcnMiKSxtZHgoInAiLG51bGwsIlRoZSBpbXBvcnRhbnQgY29uc3RydWN0b3IgbWV0aG9kIGlzIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiaW5pdGlhbGl6ZSIpLCIgbWV0aG9kLiIpLG1keCgiaDIiLHsiaWQiOiJ0bGRyIn0sInRsO2RyIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksImNsYXNzIEVtcGxveWVlXG5cbiAgIyBjaGFuZ2Ugc2NvcGUgdG8gcHVibGljXG4gIHB1YmxpY1xuXG4gICMgc3RhdGljIGNsYXNzIHZhcmlhYmxlXG4gIEBAY291bnQgPSAwXG5cbiAgIyBjb25zdHJ1Y3RvclxuICBkZWYgaW5pdGlhbGl6ZShuYW1lLCBkZXNpZ25hdGlvbiwgc2FsYXJ5KVxuICAgIEBuYW1lID0gbmFtZVxuICAgIEBkZXNpZ25hdGlvbiA9IGRlc2lnbmF0aW9uXG4gICAgQHNhbGFyeSA9IHNhbGFyeVxuICAgIEBAY291bnQgKz0gMVxuICBlbmRcblxuICAjIGNsYXNzIG1ldGhvZFxuICBkZWYgc2VsZi5jb3VudFxuICAgIEBAY291bnRcbiAgZW5kXG5cbiAgIyBnZXR0ZXJzL3NldHRlcnMgZm9yIG5hbWUsIGRlc2lnbmF0aW9uLCBhbmQgc2FsYXJ5XG4gIGRlZiBuYW1lXG4gICAgQG5hbWVcbiAgZW5kXG5cbiAgZGVmIG5hbWU9KG5hbWUpXG4gICAgQG5hbWUgPSBuYW1lXG4gIGVuZFxuXG4gIGRlZiBkZXNpZ25hdGlvblxuICAgIEBkZXNpZ25hdGlvblxuICBlbmRcblxuICBkZWYgZGVzaWduYXRpb249KGRlc2lnbmF0aW9uKVxuICAgIEBkZXNpZ25hdGlvbiA9IGRlc2lnbmF0aW9uXG4gIGVuZFxuXG4gIGRlZiBzYWxhcnlcbiAgICBAc2FsYXJ5XG4gIGVuZFxuXG4gIGRlZiBzYWxhcnk9KHNhbGFyeSlcbiAgICBAc2FsYXJ5ID0gc2FsYXJ5XG4gIGVuZFxuXG4gICMgY2hhbmdlIHNjb3BlIHRvIHByaXZhdGVcbiAgcHJpdmF0ZVxuXG4gIGRlZiBvcmdhbml6YXRpb25cbiAgICBcIkhhY2tlcnMgZGUgQW5vbnltb3VzXCJcbiAgZW5kXG5cbiAgIyBjaGFuZ2Ugc2NvcGUgdG8gcHJvdGVjdGVkXG4gIHByb3RlY3RlZFxuXG4gIGRlZiBvd25lclxuICAgIFwiV2UgbmV2ZXIgbWVudGlvbiBoaXMgbmFtZSFcIlxuICBlbmRcblxuZW5kXG4iKSksbWR4KCJoMyIseyJpZCI6ImluaGVyaXRhbmNlIn0sIkluaGVyaXRhbmNlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksImNsYXNzIFNvZnR3YXJlRW5naW5lZXIgPCBFbXBsb3llZVxuXG4gICMgY29kZSBmb3IgU29mdHdhcmVFbmdpbmVlciBjbGFzc1xuXG5lbmRcbiIpKSxtZHgoImgzIix7ImlkIjoiYXR0cmlidXRlLWFjY2Vzc29ycyJ9LCJBdHRyaWJ1dGUgYWNjZXNzb3JzIiksbWR4KCJwIixudWxsLCJGb3Igd2hhdCBpcyByZWFkYWJsZS93cml0YWJsZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVieSJ9KSwiY2xhc3MgRW1wbG95ZWVcblxuICBhdHRyX2FjY2Vzc29yIDpuYW1lLCA6ZGVzaWduYXRpb24sIDpzYWxhcnlcblxuICBAQGNvdW50ID0gMFxuXG4gIGRlZiBpbml0aWFsaXplKG5hbWUsIGRlc2lnbmF0aW9uLCBzYWxhcnkpXG4gICAgQG5hbWUgPSBuYW1lXG4gICAgQGRlc2lnbmF0aW9uID0gZGVzaWduYXRpb25cbiAgICBAc2FsYXJ5ID0gc2FsYXJ5XG4gICAgQEBjb3VudCArPSAxXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmNvdW50XG4gICAgQEBjb3VudFxuICBlbmRcblxuICBwcml2YXRlXG5cbiAgZGVmIG9yZ2FuaXphdGlvblxuICAgIFwiSGFja2VycyBkZSBBbm9ueW1vdXNcIlxuICBlbmRcblxuICBwcm90ZWN0ZWRcblxuICBkZWYgb3duZXJcbiAgICBcIldlIG5ldmVyIG1lbnRpb24gaGlzIG5hbWUhXCJcbiAgZW5kXG5cbmVuZFxuIikpLG1keCgiaDIiLHsiaWQiOiJzaW1wbGUtZXhhbXBsZSJ9LCJTaW1wbGUgRXhhbXBsZSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1ydWJ5In0pLCIjIFJ1YnkgcHJvZ3JhbSB0byBpbml0aWFsaXplIGluc3RhbmNlXG4jIHZhcmlhYmxlIHVzaW5nIGNvbnN0cnVjdG9yXG5cbiMhL3Vzci9iaW4vcnVieVxuXG4jIGNsYXNzIG5hbWVcbmNsYXNzIEdlZWtzXG4gICAgIyBjb25zdHJ1Y3RvclxuICAgIGRlZiBpbml0aWFsaXplXG5cbiAgICAgICAgIyBpbnN0YW5jZSB2YXJpYWJsZSBpbnRpYWx6YXRpb25cbiAgICAgICAgQGluc3RfMSA9IFwiR2Vla3Nmb3JHZWVrc1wiXG4gICAgICAgIEBpbnN0XzIgPSBcIlN1ZG8gUGxhY2VtZW50XCJcbiAgICBlbmRcblxuICAgICMgZGlzcGxheSBtZXRob2RcbiAgICBkZWYgZGlzcGxheVxuICAgICAgICBwdXRzIFwiVmFsdWUgb2YgRmlyc3QgaW5zdGFuY2UgdmFyaWFibGUgaXM6ICN7QGluc3RfMX1cIlxuICAgICAgICBwdXRzIFwiVmFsdWUgb2YgU2Vjb25kIGluc3RhbmNlIHZhcmlhYmxlIGlzOiAje0BpbnN0XzJ9XCJcbiAgICBlbmRcbmVuZFxuXG4jIGNyZWF0aW5nIG9iamVjdFxub2JqMSA9IEdlZWtzLm5ldygpXG5cbiMgY2FsbGluZyBkaXNwbGF5IG1ldGhvZFxub2JqMS5kaXNwbGF5KClcbiIpKSxtZHgoImgyIix7ImlkIjoibGlua2VkLWxpc3QtZXhhbXBsZSJ9LCJMaW5rZWQgTGlzdCBFeGFtcGxlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksIlwiXCJcIlxuQmFzaWMgaW1wbGVtZW50YXRpb24gd2l0aG91dCBhbGwgbWV0aG9kc1xuXCJcIlwiXG5cbmNsYXNzIExpbmtlZExpc3RcbiAgICBkZWYgaW5pdGlhbGl6ZShoZWFkPW5pbClcbiAgICAgICAgaWYgaGVhZC5uaWw/XG4gICAgICAgICAgICBAc2l6ZSA9IDBcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNpemUgPSAxXG4gICAgICAgIGVuZFxuICAgICAgICBAaGVhZCA9IGhlYWRcbiAgICBlbmRcblxuICAgIGRlZiBnZXRTaXplXG4gICAgICAgIEBzaXplXG4gICAgZW5kXG5cbiAgICBkZWYgaW5zZXJ0Rmlyc3QobilcbiAgICAgICAgaWYgQGhlYWQubmlsP1xuICAgICAgICAgICAgQGhlYWQgPSBuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRtcCA9IEBoZWFkXG4gICAgICAgICAgICBAaGVhZCA9IG5cbiAgICAgICAgICAgIG4uc2V0TmV4dCh0bXApXG4gICAgICAgIGVuZFxuICAgICAgICBAc2l6ZSArPSAxXG4gICAgZW5kXG5cbiAgICBkZWYgY2xlYXJcbiAgICAgICAgQGhlYWQgPSBuaWxcbiAgICAgICAgQHNpemUgPSAwXG4gICAgZW5kXG5cbiAgICBkZWYgZ2V0Rmlyc3RcbiAgICAgICAgQGhlYWRcbiAgICBlbmRcbmVuZFxuXG5jbGFzcyBOb2RlXG4gICAgZGVmIGluaXRpYWxpemUoZGF0YSA9IG5pbClcbiAgICAgICAgQGRhdGEgPSBkYXRhXG4gICAgICAgIEBuZXh0ID0gbmlsXG4gICAgZW5kXG5cbiAgICBkZWYgZ2V0TmV4dFxuICAgICAgICBAbmV4dFxuICAgIGVuZFxuXG4gICAgZGVmIHNldE5leHQobilcbiAgICAgICAgQG5leHQgPSBuXG4gICAgZW5kXG5lbmRcblxuIyB0ZXN0IFJ1YnkgZmlsZVxuYmVnaW5cbiAgZ2VtICdtaW5pdGVzdCcsICc+PSA1LjAuMCdcbiAgcmVxdWlyZSAnbWluaXRlc3QvYXV0b3J1bidcbiAgcmVxdWlyZV9yZWxhdGl2ZSAnbGlua2VkX2xpc3QnXG5yZXNjdWUgR2VtOjpMb2FkRXJyb3IgPT4gZVxuICBwdXRzIFwiXFxuTWlzc2luZyBEZXBlbmRlbmN5OlxcbiN7ZS5iYWNrdHJhY2UuZmlyc3R9ICN7ZS5tZXNzYWdlfVwiXG4gIHB1dHMgJ01pbml0ZXN0IDUuMCBnZW0gbXVzdCBiZSBpbnN0YWxsZWQgZm9yIHRoZSBSdWJ5IHRyYWNrLidcbnJlc2N1ZSBMb2FkRXJyb3IgPT4gZVxuICBwdXRzIFwiXFxuRXJyb3I6XFxuI3tlLmJhY2t0cmFjZS5maXJzdH0gI3tlLm1lc3NhZ2V9XCJcbiAgcHV0cyBEQVRBLnJlYWRcbiAgZXhpdCAxXG5lbmRcblxuIyBDb21tb24gdGVzdCBkYXRhIHZlcnNpb246IDEuMS4wIGJlM2FlNjZcbmNsYXNzIExpbmtlZExpc3RUZXN0IDwgTWluaXRlc3Q6OlRlc3RcbiAgZGVmIHRlc3RfZ2V0X3NpemVcbiAgICAjIHNraXBcbiAgICBuMSA9IE5vZGUubmV3KDEpXG4gICAgbGwgPSBMaW5rZWRMaXN0Lm5ldyhuMSlcbiAgICBhc3NlcnRfZXF1YWwgMSwgbGwuZ2V0U2l6ZSgpXG4gIGVuZFxuXG4gIGRlZiB0ZXN0X2luc2VydF9maXJzdFxuICAgICMgc2tpcFxuICAgIG4xID0gTm9kZS5uZXcoMSlcbiAgICBuMiA9IE5vZGUubmV3KDEpXG4gICAgbGwgPSBMaW5rZWRMaXN0Lm5ldyhuMSlcbiAgICBsbC5pbnNlcnRGaXJzdChuMilcbiAgICBhc3NlcnRfZXF1YWwgMiwgbGwuZ2V0U2l6ZSgpXG4gIGVuZFxuXG4gIGRlZiB0ZXN0X2NsZWFyXG4gICAgIyBza2lwXG4gICAgbjEgPSBOb2RlLm5ldygxKVxuICAgIG4yID0gTm9kZS5uZXcoMSlcbiAgICBsbCA9IExpbmtlZExpc3QubmV3KG4xKVxuICAgIGxsLmluc2VydEZpcnN0KG4yKVxuICAgIGxsLmNsZWFyKClcbiAgICBhc3NlcnRfZXF1YWwgMCwgbGwuZ2V0U2l6ZSgpXG4gICAgYXNzZXJ0X25pbCBuaWwsIGxsLmdldEZpcnN0KClcbiAgZW5kXG5lbmRcblxuX19FTkRfX1xuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvUnVieS9SdWJ5LUNvbnN0cnVjdG9ycy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Constructors.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kBADA,CAAR,oBADK,CAIL,wDAA+C,kBAAY,UAAU,CAAC,GAAvB,eAA/C,YAJK,CAKL,SAAQ,CACN,KAAM,MADA,CAAR,SALK,CAQL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,+2BAAL,CARK,CAwEL,SAAQ,CACN,KAAM,aADA,CAAR,eAxEK,CA2EL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,sFAAL,CA3EK,CAmFL,SAAQ,CACN,KAAM,qBADA,CAAR,uBAnFK,CAsFL,8CAtFK,CAuFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,saAAL,CAvFK,CAwHL,SAAQ,CACN,KAAM,gBADA,CAAR,kBAxHK,CA2HL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,kjBAAL,CA3HK,CAyJL,SAAQ,CACN,KAAM,qBADA,CAAR,uBAzJK,CA4JL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,2xDAAL,CA5JK,CAAP,CAmQD,C,4QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-contructors\"\n    }}>{`Ruby Contructors`}</h1>\n    <p>{`The important constructor method is the `}<inlineCode parentName=\"p\">{`initialize`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  # change scope to public\n  public\n\n  # static class variable\n  @@count = 0\n\n  # constructor\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  # class method\n  def self.count\n    @@count\n  end\n\n  # getters/setters for name, designation, and salary\n  def name\n    @name\n  end\n\n  def name=(name)\n    @name = name\n  end\n\n  def designation\n    @designation\n  end\n\n  def designation=(designation)\n    @designation = designation\n  end\n\n  def salary\n    @salary\n  end\n\n  def salary=(salary)\n    @salary = salary\n  end\n\n  # change scope to private\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  # change scope to protected\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class SoftwareEngineer < Employee\n\n  # code for SoftwareEngineer class\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"attribute-accessors\"\n    }}>{`Attribute accessors`}</h3>\n    <p>{`For what is readable/writable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  attr_accessor :name, :designation, :salary\n\n  @@count = 0\n\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  def self.count\n    @@count\n  end\n\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple-example\"\n    }}>{`Simple Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# Ruby program to initialize instance\n# variable using constructor\n\n#!/usr/bin/ruby\n\n# class name\nclass Geeks\n    # constructor\n    def initialize\n\n        # instance variable intialzation\n        @inst_1 = \"GeeksforGeeks\"\n        @inst_2 = \"Sudo Placement\"\n    end\n\n    # display method\n    def display\n        puts \"Value of First instance variable is: #{@inst_1}\"\n        puts \"Value of Second instance variable is: #{@inst_2}\"\n    end\nend\n\n# creating object\nobj1 = Geeks.new()\n\n# calling display method\nobj1.display()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"linked-list-example\"\n    }}>{`Linked List Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`\"\"\"\nBasic implementation without all methods\n\"\"\"\n\nclass LinkedList\n    def initialize(head=nil)\n        if head.nil?\n            @size = 0\n        else\n            @size = 1\n        end\n        @head = head\n    end\n\n    def getSize\n        @size\n    end\n\n    def insertFirst(n)\n        if @head.nil?\n            @head = n\n        else\n            tmp = @head\n            @head = n\n            n.setNext(tmp)\n        end\n        @size += 1\n    end\n\n    def clear\n        @head = nil\n        @size = 0\n    end\n\n    def getFirst\n        @head\n    end\nend\n\nclass Node\n    def initialize(data = nil)\n        @data = data\n        @next = nil\n    end\n\n    def getNext\n        @next\n    end\n\n    def setNext(n)\n        @next = n\n    end\nend\n\n# test Ruby file\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'linked_list'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass LinkedListTest < Minitest::Test\n  def test_get_size\n    # skip\n    n1 = Node.new(1)\n    ll = LinkedList.new(n1)\n    assert_equal 1, ll.getSize()\n  end\n\n  def test_insert_first\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    assert_equal 2, ll.getSize()\n  end\n\n  def test_clear\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    ll.clear()\n    assert_equal 0, ll.getSize()\n    assert_nil nil, ll.getFirst()\n  end\nend\n\n__END__\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}