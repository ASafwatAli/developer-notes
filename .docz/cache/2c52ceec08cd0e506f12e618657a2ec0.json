{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md","mtime":1580977427652},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0FsZ29yaXRobXMvUG9seW5vbWlhbC1FeHByZXNzaW9uLm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsWyJkZWZhdWx0Il0uc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInBvbHlub21pYWwtZXhwcmVzc2lvbiIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiUG9seW5vbWlhbCBFeHByZXNzaW9uIiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJhbnN3ZXIiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFuc3dlciIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOb3QgdGhlIGFuc3dlcjoiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImZ1bmN0aW9uIFBvbHlub21pYWxFeHBhbnNpb24oc3RyKSB7XG4gIC8vIG11bHRpcGx5IHRvIHBvbHlub21pYWwgZXhwcmVzc2lvbnNcbiAgY29uc3QgbXVsdGlwbHkgPSAoYSwgYikgPT4ge1xuICAgIGNvbnN0IHZhcmlhYmxlQSA9IGEubWF0Y2goL1thLXpBLVpdXFxeL2kpO1xuICAgIGNvbnN0IFtjb2VmZmljaWVudEEsIGV4cG9uZW50QV0gPSBhLnNwbGl0KC9bYS16QS1aXVxcXi9pKTtcbiAgICBjb25zdCBbY29lZmZpY2llbnRCLCBleHBvbmVudEJdID0gYi5zcGxpdCgvW2EtekEtWl1cXF4vaSk7XG5cbiAgICBsZXQgbmV3Q29lZmZpY2llbnQ7XG4gICAgaWYgKGNvZWZmaWNpZW50QSAhPT0gJycgJiYgY29lZmZpY2llbnRCICE9PSAnJykge1xuICAgICAgbmV3Q29lZmZpY2llbnQgPSBwYXJzZUludChjb2VmZmljaWVudEEpICogcGFyc2VJbnQoY29lZmZpY2llbnRCKTtcbiAgICB9IGVsc2UgaWYgKGNvZWZmaWNpZW50QSAhPT0gJycpIHtcbiAgICAgIG5ld0NvZWZmaWNpZW50ID0gcGFyc2VJbnQoY29lZmZpY2llbnRBKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q29lZmZpY2llbnQgPSBwYXJzZUludChjb2VmZmljaWVudEIpO1xuICAgIH1cblxuICAgIGxldCBuZXdFeHBvbmVudDtcbiAgICBpZiAoZXhwb25lbnRBICE9PSAnJyAmJiBleHBvbmVudEIgIT09ICcnKSB7XG4gICAgICBuZXdFeHBvbmVudCA9IHBhcnNlSW50KGV4cG9uZW50QSkgKyBwYXJzZUludChleHBvbmVudEIpO1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnRBICE9PSAnJykge1xuICAgICAgbmV3RXhwb25lbnQgPSBwYXJzZUludChleHBvbmVudEEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdFeHBvbmVudCA9IHBhcnNlSW50KGV4cG9uZW50Qik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke25ld0NvZWZmaWNpZW50fSR7dmFyaWFibGVBID8gdmFyaWFibGVBWzBdIDogJyd9JHtuZXdFeHBvbmVudH1gO1xuICB9O1xuXG4gIGNvbnN0IG1hdGNoZXMgPSBzdHIubWF0Y2goL1xcKC4qP1xcKS9naSk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IFthLCBiXSA9IG1hdGNoZXMubWFwKGVsID0+IGVsLnJlcGxhY2UoJygnLCAnJykucmVwbGFjZSgnKScsICcnKSk7XG4gIGxldCBmaXJzdEVsID0gYS5zcGxpdCgvWystXS9naSk7XG4gIGxldCBzZWNvbmRFbCA9IGIuc3BsaXQoL1srLV0vZ2kpO1xuXG4gIGxldCByZXNBcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdEVsLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzZWNvbmRFbC5sZW5ndGg7IGorKykge1xuICAgICAgcmVzQXJyLnB1c2gobXVsdGlwbHkoZmlyc3RFbFtpXSwgc2Vjb25kRWxbal0pKTtcbiAgICB9XG4gIH1cblxuICBjb25zb2xlLmxvZyhyZXNBcnIpO1xuICAvLyBjb2RlIGdvZXMgaGVyZVxuICByZXR1cm4gc3RyO1xufVxuXG4vLyBrZWVwIHRoaXMgZnVuY3Rpb24gY2FsbCBoZXJlIGRcbmNvbnNvbGUubG9nKFBvbHlub21pYWxFeHBhbnNpb24ocmVhZGxpbmUoKSkpO1xuIikpKTsKfQoKaWYgKHR5cGVvZiBNRFhDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBNRFhDb250ZW50ICYmIE1EWENvbnRlbnQgPT09IE9iamVjdChNRFhDb250ZW50KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJNRFhDb250ZW50IiwKICAgICAgZmlsZW5hbWU6ICJtYW51YWwvQWxnb3JpdGhtcy9Qb2x5bm9taWFsLUV4cHJlc3Npb24ubWQiCiAgICB9CiAgfSk7Cn0KCk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlOwo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKG1ha2VTaG9ydGNvZGUsICJtYWtlU2hvcnRjb2RlIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvQWxnb3JpdGhtcy9Qb2x5bm9taWFsLUV4cHJlc3Npb24ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvQWxnb3JpdGhtcy9Qb2x5bm9taWFsLUV4cHJlc3Npb24ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhMYXlvdXQsICJNRFhMYXlvdXQiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9BbGdvcml0aG1zL1BvbHlub21pYWwtRXhwcmVzc2lvbi5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWENvbnRlbnQsICJNRFhDb250ZW50IiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvQWxnb3JpdGhtcy9Qb2x5bm9taWFsLUV4cHJlc3Npb24ubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kgDAAL,CARK,CAAP;AA+DD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA9EMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"polynomial-expression\"\n    }}>{`Polynomial Expression`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`Not the answer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return \\`\\${newCoefficient}\\${variableA ? variableA[0] : ''}\\${newExponent}\\`;\n  };\n\n  const matches = str.match(/\\\\(.*?\\\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}