{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Decision-Trees.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Decision-Trees.md","mtime":1562563032060},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Decision-Trees.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,gBADA,CAAR,kBADK,CAOL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,iBAD+B,CAAvB,mBAApB,CAE2B,UAAI,UAAU,CAAC,IAAf,EACvB,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,YAD+B,CAAvB,cAApB,CADuB,CAIvB,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,qCAD+B,CAAvB,uCAApB,CAJuB,CAF3B,CADF,CAPK,CAsBL,SAAQ,CACN,KAAM,WADA,CAAR,aAtBK,CAyBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,8CAAH,CAzBK,CA0BL,mFA1BK,CA2BL,kFA3BK,CA4BL,8KA5BK,CA6BL,qHA7BK,CA8BL,sGA9BK,CA+BL,6FA/BK,CAgCL,qDAhCK,CAiCL,wHAjCK,CAkCL,aAAG,cAAQ,UAAU,CAAC,GAAnB,cAAH,CAlCK,CAmCL,4BAAmB,kBAAY,UAAU,CAAC,GAAvB,cAAnB,kDAA0H,kBAAY,UAAU,CAAC,GAAvB,eAA1H,6BAA6M,kBAAY,UAAU,CAAC,GAAvB,cAA7M,qCAAuS,kBAAY,UAAU,CAAC,GAAvB,KAAvS,sBAnCK,CAoCL,yDAAgD,kBAAY,UAAU,CAAC,GAAvB,cAAhD,eAAoH,kBAAY,UAAU,CAAC,GAAvB,cAApH,qBAA8L,kBAAY,UAAU,CAAC,GAAvB,eAA9L,8BAAkR,kBAAY,UAAU,CAAC,GAAvB,cAAlR,qBAA4V,kBAAY,UAAU,CAAC,GAAvB,eAA5V,KApCK,CAqCL,8GAAqG,kBAAY,UAAU,CAAC,GAAvB,MAArG,yEArCK,CAsCL,0BAAiB,kBAAY,UAAU,CAAC,GAAvB,mCAAjB,KAtCK,CAuCL,8JAvCK,CAwCL,mKAxCK,CAyCL,SAAQ,CACN,KAAM,oCADA,CAAR,sCAzCK,CA4CL,gQA5CK,CA6CL,kGA7CK,CA8CL,gIA9CK,CA+CL,0EA/CK,CAgDL,sEAhDK,CAiDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,0XAAL,CAjDK,CA8DL,6DA9DK,CA+DL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,iOAAL,CA/DK,CAyEL,6NAzEK,CA0EL,qIA1EK,CA2EL,aAAG,cAAQ,UAAU,CAAC,GAAnB,+CAAH,CA3EK,CA4EL,uHA5EK,CAAP,CA8ED,C,wRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"decision-trees\"\n    }}>{`Decision Trees`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#decision-trees\"\n        }}>{`Decision Trees`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#intuition\"\n            }}>{`Intuition`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#decision-tree-regression-in-python\"\n            }}>{`Decision Tree Regression in Python`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"intuition\"\n    }}>{`Intuition`}</h2>\n    <p><strong parentName=\"p\">{`CART: Classification and Regression Trees`}</strong></p>\n    <p>{`We speak about both types, but for now - focus on regression trees.`}</p>\n    <p>{`Regression trees are a bit more complex than classification trees.`}</p>\n    <p>{`Imagine a scatter plot with two IV and we are predicting an DV y (which you wouldn't be able to see on the chart). Essentially the DV would sit on the z axis.`}</p>\n    <p>{`Once you run the regression decision tree algorithm, the scatter plot will be split up into segments.`}</p>\n    <p>{`For example, x1 might be split at 20. Another split may happen for x2 at 170, 200 etc.`}</p>\n    <p>{`The question, are the splits adding value to way we want to group our points?`}</p>\n    <p>{`Each split itself is known as a leaf.`}</p>\n    <p>{`The algorithm can handle mathematical issues and we can focus on the practical element of the algorithm.`}</p>\n    <p><strong parentName=\"p\">{`Splitting`}</strong></p>\n    <p>{`If we split `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{`, we have two options (y/N). If we then split `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{`, we add a child node to `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{` that checks y/N. If we then set `}<inlineCode parentName=\"p\">{``}</inlineCode>{`x`}{`[2]`}{` < 200\\`.`}</p>\n    <p>{`After having a two child tree, if we set `}<inlineCode parentName=\"p\">{`x[1] < 40`}</inlineCode>{` such that `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{` is not true and `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{` is true, we can then set `}<inlineCode parentName=\"p\">{`x[1] < 40`}</inlineCode>{` as the child to `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{`.`}</p>\n    <p>{`Once we start this tree, what do we populate into those boxes? Well, we decide how we predict `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` with a new observation added to the plane x`}{`[1]`}{` and x`}{`[2]`}{`.`}</p>\n    <p>{`Key note: `}<inlineCode parentName=\"p\">{`Adding splits adds information`}</inlineCode>{`.`}</p>\n    <p>{`What we do is that for each terminal leaf, we take the average and assign the value that we give to any new element that falls into that leaf.`}</p>\n    <p>{`Now, if we have a new value, we check the decision tree where it falls and then assign the new element the value of where it falls as a prediction.`}</p>\n    <h2 {...{\n      \"id\": \"decision-tree-regression-in-python\"\n    }}>{`Decision Tree Regression in Python`}</h2>\n    <p>{`Warning for the decision tree, because we need to consider the entropy and split the result into data points. If we stick to one dimension, how do we have a line that is not horizontal? If the splits are made, they should remain a constant.`}</p>\n    <p>{`Either the intervals are infinite (which they are not), or the model has an issue.`}</p>\n    <p>{`The reason the issue came up, is because of what we have used to create the plot since this is no longer linear.`}</p>\n    <p>{`This is now a non-linear, non-continuous regression model.`}</p>\n    <p>{`What is the best way to view something non-continuous?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Visualising the Decision Tree results\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape(len(X_grid), 1)\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.savefig('decision-tree.png')\nplt.show()\n`}</code></pre>\n    <p>{`As for getting the decision tree code to run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Prediciting the Decision Tree results\n# Create the Regressor\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state=0)\nregressor.fit(X, y)\n\ny_pred = regressor.predict(6.5)\n`}</code></pre>\n    <p>{`Ensure you have a higher resolution in order to visualize the splits. Given that the example in the tutorial has just 1 DV and 1 IV, it will come out like steps as the only splits will occur on the x axis.`}</p>\n    <p>{`The model itself is not necessarily that interesting in 1D, but over many dimensions it becomes far more interesting.`}</p>\n    <p><strong parentName=\"p\">{`What happens when you use a random forest?`}</strong></p>\n    <p>{`A Random Forest is a team of decision trees. What happens with a team of 10 trees? 50 trees? 500 trees?`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}