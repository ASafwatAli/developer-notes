{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Server-Side-React/Server-Side-Rendering-With-React-And-Redux.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Server-Side-React/Server-Side-Rendering-With-React-And-Redux.md","mtime":1562563032089},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Server-Side-React/Server-Side-Rendering-With-React-And-Redux.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"server-side-rendering-with-react-and-redux\"\n    }}>{`Server side Rendering with React and Redux`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#server-side-rendering-with-react-and-redux\"\n        }}>{`Server side Rendering with React and Redux`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#how-do-tradition-react-apps-work\"\n            }}>{`How do tradition React apps work?`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#serverside---what-happens\"\n            }}>{`Serverside - What happens`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#serverside-architecture\"\n            }}>{`Serverside Architecture`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-base-packagejson\"\n            }}>{`Example base package.json`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#rendertostring-function\"\n            }}>{`RenderToString function`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#the-build-process\"\n            }}>{`The build process`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#what-is-isomorphic-javascript\"\n            }}>{`What is Isomorphic Javascript?`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#clientside-js\"\n            }}>{`Clientside JS`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#client-bundles\"\n            }}>{`Client bundles`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"how-do-tradition-react-apps-work\"\n    }}>{`How do tradition React apps work?`}</h2>\n    <p>{`In relation to the index `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` file, we end up with a root div that React targets onto.`}</p>\n    <p>{`The webpage makes the request to the server, then we fetch the JS file, then app boots and we make some requests - all before any content is visible.`}</p>\n    <p>{`Using server side React, the goal is to make one request. The impact of this means that after the browser requests the page, the return info is the content being visible.`}</p>\n    <h2 {...{\n      \"id\": \"serverside---what-happens\"\n    }}>{`Serverside - What happens`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Receive the request`}</li>\n      <li parentName=\"ol\">{`Load up React app in memory`}</li>\n      <li parentName=\"ol\">{`Fetch any required data`}</li>\n      <li parentName=\"ol\">{`Render app`}</li>\n      <li parentName=\"ol\">{`Send back to the HTML`}</li>\n    </ol>\n    <p>{`Back on the browser side, the React application still ensure it fetches the bundle for the client-side interactivity.`}</p>\n    <h2 {...{\n      \"id\": \"serverside-architecture\"\n    }}>{`Serverside Architecture`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Run two back end server. One for the API, the other for rendering. - The API layer is to deal wth DB access, validation, auth etc. - The View layer just focuses on producing data.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-base-packagejson\"\n    }}>{`Example base package.json`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"name\": \"react-ssr\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Server side rendering project\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"0.16.2\",\n    \"babel-cli\": \"6.26.0\",\n    \"babel-core\": \"6.26.0\",\n    \"babel-loader\": \"7.1.2\",\n    \"babel-preset-env\": \"1.6.0\",\n    \"babel-preset-es2015\": \"6.24.1\",\n    \"babel-preset-es2017\": \"6.24.1\",\n    \"babel-preset-react\": \"6.24.1\",\n    \"babel-preset-stage-0\": \"6.24.1\",\n    \"compression\": \"1.7.0\",\n    \"concurrently\": \"3.5.0\",\n    \"express\": \"4.15.4\",\n    \"express-http-proxy\": \"1.0.6\",\n    \"lodash\": \"4.17.4\",\n    \"nodemon\": \"1.12.0\",\n    \"npm-run-all\": \"4.1.1\",\n    \"react\": \"16.0.0\",\n    \"react-dom\": \"16.0.0\",\n    \"react-helmet\": \"5.2.0\",\n    \"react-redux\": \"5.0.6\",\n    \"react-router-config\": \"1.0.0-beta.4\",\n    \"react-router-dom\": \"4.2.2\",\n    \"redux\": \"3.7.2\",\n    \"redux-thunk\": \"2.2.0\",\n    \"serialize-javascript\": \"1.4.0\",\n    \"webpack\": \"3.5.6\",\n    \"webpack-dev-server\": \"2.8.2\",\n    \"webpack-merge\": \"4.1.0\",\n    \"webpack-node-externals\": \"1.6.0\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rendertostring-function\"\n    }}>{`RenderToString function`}</h2>\n    <p>{`We use ReactDOM and instead of rendering it, we render it to raw HTML and turn it into string.`}</p>\n    <p>{`We can use an example of a Express file like so to run a base file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/*\n    Use this for the optimized build\n    and serve out with Docker\n */\n\nvar fs = require('fs');\nvar dotenv = require('dotenv').config;\n\n// Main starting point of the application\nconst express = require('express');\nconst http = require('http');\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\nconst app = express();\nconst cors = require('cors');\nconst spawn = require('child_process').spawn;\nconst path = require('path');\nconst React = require('react');\nconst renderToString = require('react-dom/server').renderToString;\nconst Home = require('./components/home/Home').default;\n\n// App Setup\napp.use(morgan('combined'));\napp.use(cors());\napp.use(bodyParser.json({ type: '*/*' }));\n\napp.use(express.static(path.resolve(__dirname, 'build')));\n\napp.get('/', (req, res) => {\n    const content = renderToString(<Home />);\n\n    res.send(content);\n});\n\napp.get('*', (req, res) => {\n    res.sendFile(path.resolve(__dirname, 'build', 'index.html'));\n});\n\n// Server Setup\nconst port = process.env.PORT || 3000;\nconst server = http.createServer(app);\nserver.listen(port);\nconsole.log('Server listening on:', port);\n`}</code></pre>\n    <p>{`Given a Webpack file like the following, we can bundle the .js file and then use a Node server to run and return the code:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const path = require('path');\n\nmodule.exports = {\n    // Target Nodehs\n    target: 'node',\n    // Looking for the root of server app\n    entry: './src/app.js',\n    output: {\n        filename: 'server.js',\n        path: path.resolve(__dirname, 'build')\n    },\n    // Run Babel on every file\n    module: {\n        rules: [\n            {\n                test: /\\\\.js?$/,\n                loader: 'babel-loader',\n                exclude: /node_modules/,\n                options: {\n                    presets: [\n                        'react',\n                        'stage-0',\n                        ['env', { targets: { browsers: ['last 2 versions']}}]\n                    ]\n                }\n            }\n        ]\n    }\n}\n`}</code></pre>\n    <p>{`If using with `}<inlineCode parentName=\"p\">{`create-react-app`}</inlineCode>{` - add the following config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// config/paths.js\n\nmodule.exports = {\n    ...\n    appServer: resolveApp('server'),\n    serverIndexJs: resolveApp('src/server.js'),\n    ...\n}\n`}</code></pre>\n    <p>{`Ignore the file itself in the appropriate places. for the other webpack configs.`}</p>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`webpack.config.server.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const path = require('path');\nconst paths = require('./paths');\nconst webpackNodeExternals = require('webpack-node-externals');\n\nmodule.exports = {\n    // Target Nodehs\n    target: 'node',\n    // Looking for the root of server app\n    entry: paths.serverIndexJs,\n    output: {\n        // The build folder.\n        path: paths.appServer,\n        filename: 'server.js'\n    },\n    // Run Babel on every file\n    module: {\n        rules: [\n            {\n                test: /\\\\.js?$/,\n                loader: 'babel-loader',\n                exclude: /node_modules/,\n                options: {\n                    presets: [\n                        'react',\n                        'stage-0',\n                        ['env', { targets: { browsers: ['last 2 versions']}}]\n                    ]\n                }\n            }\n        ]\n    },\n    externals: [webpackNodeExternals()]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-build-process\"\n    }}>{`The build process`}</h2>\n    <p>{`Currently, we have a static base file. We want to watch and re-run the server on changes. This can be done with Nodemon and Webpack's `}<inlineCode parentName=\"p\">{`--watch`}</inlineCode>{` option.`}</p>\n    <h2 {...{\n      \"id\": \"what-is-isomorphic-javascript\"\n    }}>{`What is Isomorphic Javascript?`}</h2>\n    <p><inlineCode parentName=\"p\">{`Serverside rendering`}</inlineCode>{` isn't necessarily accurate. Univeral/Isomorphic JS basically means that code that is rendered serverside might also be used client side.`}</p>\n    <h2 {...{\n      \"id\": \"clientside-js\"\n    }}>{`Clientside JS`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<div className=\"home\">\n    <h1>Home</h1>\n    <button onClick={() => console.log('HI!')}>Press me!</button>\n</div>\n`}</code></pre>\n    <p>{`Why doesn't the above work? We are rendering out HTML and 0 JavaScript code being sent to the user browser. How can we ship this down?`}</p>\n    <h2 {...{\n      \"id\": \"client-bundles\"\n    }}>{`Client bundles`}</h2>\n    <p>{`We basically want to create 2 bundles:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A server + client side bundle`}</li>\n      <li parentName=\"ol\">{`A client side only bundle`}</li>\n    </ol>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}