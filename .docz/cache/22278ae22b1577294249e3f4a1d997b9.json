{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Testing-Cheat-Sheet.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Testing-Cheat-Sheet.md","mtime":1548282825024},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Testing-Cheat-Sheet.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,SADA,CAAR,WADK,CAIL,+FAAsF,kBAAY,UAAU,CAAC,GAAvB,gCAAtF,KAJK,CAKL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,aAAX,6DALK,CAML,+HANK,CAOL,aAAG,cAAQ,UAAU,CAAC,GAAnB,mBAAH,CAPK,CAQL,6HARK,CASL,0KAAiK,kBAAY,UAAU,CAAC,GAAvB,UAAjK,wBAA0O,kBAAY,UAAU,CAAC,GAAvB,WAA1O,KATK,CAUL,0DAVK,CAWL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,q+BAAL,CAXK,CAkDL,aAAG,cAAQ,UAAU,CAAC,GAAnB,aAAH,CAlDK,CAmDL,6LAnDK,CAoDL,qDAA4C,kBAAY,UAAU,CAAC,GAAvB,QAA5C,WAAsG,kBAAY,UAAU,CAAC,GAAvB,SAAtG,sCApDK,CAqDL,aAAG,UAAI,UAAU,CAAC,GAAf,gBAAH,CArDK,CAsDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,22BAAL,CAtDK,CA+FL,aAAG,UAAI,UAAU,CAAC,GAAf,iBAAH,CA/FK,CAgGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,kgCAAL,CAhGK,CA6IL,aAAG,cAAQ,UAAU,CAAC,GAAnB,UAAH,CA7IK,CA8IL,8DAAqD,kBAAY,UAAU,CAAC,GAAvB,cAArD,kFA9IK,CA+IL,4CAAmC,kBAAY,UAAU,CAAC,GAAvB,yBAAnC,KA/IK,CAAP,CAiJD,C,oRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`The test files are stored in the test folders and require the dev dependencies `}<inlineCode parentName=\"p\">{`sinonjs, jsdom, mocha, chai`}</inlineCode>{`.`}</p>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`npm test`}</inlineCode>{` to view the tests files that are written in that folder.`}</p>\n    <p>{`Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.`}</p>\n    <p><strong parentName=\"p\">{`mocha and chai`}</strong></p>\n    <p>{`These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.`}</p>\n    <p>{`Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{` library and import `}<inlineCode parentName=\"p\">{`jquery`}</inlineCode>{`.`}</p>\n    <p>{`Below is a small example of a test set up.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n    let $;\n    let ageGateFilters;\n    jsdom();\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const moduleToTest = new ModuleToTest(...params);\n    });\n\n    // Test Spec (unit test)\n    it('This test should return ok', () => {\n        expect(true).to.be.ok;  // returns ok\n    });\n\n    // Test Spec (unit test)\n    it('This test should return true for the ModuleToTest function', () => {\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\n    });\n\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`sinon.js`}</strong></p>\n    <p>{`This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.`}</p>\n    <p>{`For now, I will show an example of a `}<inlineCode parentName=\"p\">{`spy`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`stub`}</inlineCode>{` (as this may the most relevant): `}</p>\n    <p><em parentName=\"p\">{`For the Spy`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout() {\n        let a = 1;\n        let b = 2;\n\n        return target(a,b);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should return that the async func was called', () => {\n        \n        let targetSpy = sinon.spy(example, 'target');\n\n        // Now, any time we call the function, the spy logs information about it\n        example.callout();\n\n        assert(targetSpy.calledOnce); // returns true\n    });\n});\n`}</code></pre>\n    <p><em parentName=\"p\">{`For the Stub`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout(param, callback) {\n        $.ajax({\n            // whatever it normally is\n        }, callback);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should call callback after saving', () => {\n        \n        //We'll stub $.post so a request is not sent\n        const post = sinon.stub($, 'ajax');\n        post.yields();\n\n        //We can use a spy as the callback so it's easy to verify\n        var callback = sinon.spy();\n\n        example.callout(param, callback);\n\n        post.restore();\n        sinon.assert.calledOnce(callback); // returns true\n    });\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`jsdom`}</strong></p>\n    <p>{`jsdom is a library that allows you to write a `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` var for the test to use if you want to test out the jQuery values for a test.`}</p>\n    <p>{`For an example, checkout yt `}<inlineCode parentName=\"p\">{`test/agegate_test.js`}</inlineCode>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}