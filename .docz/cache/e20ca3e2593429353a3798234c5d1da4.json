{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md","mtime":1562563032023},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"javascript-data-structures\"\n    }}>{`JavaScript Data Structures`}</h1>\n    <h2 {...{\n      \"id\": \"string-reversal\"\n    }}>{`String reversal`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const str = 'test';\n\nconst reverseOne = (str) => {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed = reversed + str[i];\n  }\n\n  return reversed;\n};\n\nconst reverseTwo = (str) => {\n  return str\n    .split('')\n    .reverse()\n    .join('');\n};\n\nconst reverseThree = (str) => {\n  let reversed = '';\n  for (let char of str) {\n    reversed = char + reversed;\n  }\n\n  return reversed;\n};\n\nconst reverseFour = (str) => {\n  let arr = str.split('').reduce((reversed, char) => {\n    return char + reversed;\n  }, '');\n\n  return reversed;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-debugger-statements\"\n    }}>{`Basic debugger statements`}</h2>\n    <p>{`Sometimes that we to pause during execution to do some debugging.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const reverse = (str) => {\n  debugger;\n  let reversed = '';\n  for (let char of str) {\n    reversed = char + reversed;\n  }\n\n  return reversed;\n};\n\nreverse(str);\n`}</code></pre>\n    <p>{`From within the terminal, we can then inspect by running:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node inspect path/to/file.js\ncont # to continue execution (can also use c)\nrepl # kicks you into a js repl\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const palindrome = (str) => {\n  if (typeof str === String) {\n    return str === reverse(str);\n  } else {\n    return false;\n  }\n};\n\npalindrome('noon'); // true\npalindrome('asdf'); // false\n\nconst palindromeTwo = (str) => {\n  str.split('').every((char, index) => {\n    if (i <= Math.ceil(str.length / 2)) {\n      return char === str[str.length - 1 - index];\n    }\n  });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reverse-integer\"\n    }}>{`Reverse Integer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const reverseInt = (n) => {\n  // Check if negative\n  const isPos = Math.sign(n);\n  // 1. cast to string\n  const str = n.toString();\n  // 2. reverse\n  str\n    .split('')\n    .reverse()\n    .join('');\n  // 3. cast to int\n  const revInt = parseInt(str);\n  return isPos > 0 ? revInt : revInt * -1;\n  // return isPos * Math.sign(n);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"max-chars\"\n    }}>{`Max Chars`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// 1\n// maxChar('abccccccd'); // 'c'\nconst maxChar = (str) => {\n    let obj = {};\n    for (let char of str) {\n        if (typeof obj[char] !== 'undefined') {\n            obj[char] = obj[char] + 1l\n        } else {\n            obj[char] = 1;\n        }\n    }\n\n    let maxChar = '';\n    let max = 0;\n    for (let key of obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n            maxChar = key;\n        }\n    }\n\n    return maxChar;\n};\n\n// 2\nconst chars = {};\nconst maxCharTwo = str => {\n    for (let char of str) {\n        if (!chars[char]) {\n            chars[char] = 1;\n        } else {\n            chars[char]++;\n        }\n    }\n\n    let maxChar = '';\n    let max = 0;\n\n    for (let key of obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n            maxChar = key;\n        }\n    }\n    return maxChar;\n}\n\n// 3\nconst maxCharThree = str => {\n    for (let char of str) {\n        chars[char] === !chars[char] ? 1 : chars[char]++;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fizz-buzz\"\n    }}>{`Fizz Buzz`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let fizzBuzz = (i) => {\n  switch (true) {\n    case i % 3 === 0 && i % 5 === 0:\n      return 'fizzbuzz';\n    case i % 3 === 0:\n      return 'fizz';\n    case i % 5 === 0:\n      return 'buzz';\n    default:\n      return i;\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-chunk-problem\"\n    }}>{`Array Chunk Problem`}</h2>\n    <p>{`One solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  let tmp = [];\n  let chunkedArr = [];\n  arr.map((d, index) => {\n    tmp.push(d);\n    if (index % i === i - 1) {\n      chunkedArr.push(tmp);\n      tmp = [];\n    }\n  });\n\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Second solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  for (let el of arr) {\n    const last = chunkedArr[chunkedArr.length - 1];\n\n    if (!last || last.length === size) {\n      chunkedArr.push([el]);\n    } else [\n      last.push([el]);\n    ]\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Third solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  let start = 0;\n  let index = 1;\n  while (start < arr.length) {\n    chunkedArr.push(arr.slice(start, index * i));\n\n    start = start + i;\n    index++;\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Fourth solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  let start = 0;\n  while (start < arr.length) {\n    chunkedArr.push(arr.slice(start, start + i));\n    start += i;\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"anagrams\"\n    }}>{`Anagrams`}</h2>\n    <p>{`Solution one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagram = (strA, strB) => {\n  // use regexp to remove spaces and grammar\n  const cmpA = strA.replace(/[^\\\\w]/g, '').toLowerCase();\n  const cmpB = strB.replace(/[^\\\\w]/g, '').toLowerCase();\n\n  if (cmpA.length !== cmpB.length) {\n    return false;\n  }\n\n  let charMapA = {};\n  let charMapB = {};\n  for (let i in cmpA) {\n    if (!charMapA[cmpA[i]]) {\n      charMapA[cmpA[i]] = 1;\n    } else {\n      charMapA[cmpA[i]] = charMapA[cmpA[i]]++;\n    }\n\n    if (!charMapB[cmpB[i]]) {\n      charMapB[cmpB[i]] = 1;\n    } else {\n      charMapB[cmpB[i]] = charMapB[cmpB[i]]++;\n    }\n  }\n\n  const keysA = Object.keys(charMapA);\n  const keysB = Object.keys(charMapB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (let k in keysA) {\n    if (typeof keysB[k] === 'undefined') {\n      return false;\n    }\n\n    if (keysA[k] !== keysB[k]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n`}</code></pre>\n    <p>{`Solution two (basic refactor):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagram = (strA, strB) => {\n  const filterStr = (str) => str.replace(/[^\\\\w]/g, '').toLowerCase();\n\n  // use regexp to remove spaces and grammar\n  const cmpA = filterStr(str);\n  const cmpB = filterStr(str);\n\n  if (cmpA.length !== cmpB.length) {\n    return false;\n  }\n\n  let charMapA = {};\n  let charMapB = {};\n  const mapHelper = (i, str, map) => {\n    if (!map[str[i]]) {\n      map[str[i]] = 1;\n    } else {\n      map[str[i]] = map[str[i]]++;\n    }\n  };\n\n  for (let i in cmpA) {\n    mapHelper(i, cmpA, charMapA);\n    mapHelper(i, cmpB, charMapB);\n  }\n\n  const keysA = Object.keys(charMapA);\n  const keysB = Object.keys(charMapB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (let k in keysA) {\n    if (typeof keysB[k] === 'undefined') {\n      return false;\n    }\n\n    if (keysA[k] !== keysB[k]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n`}</code></pre>\n    <p>{`Solution three:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagrams = (strA, strB) => {\n  const charMapA = buildCharMap(strA);\n  const charMapB = buildCharMap(strB);\n\n  if (Object.keys(charMapA).length !== Object.keys(charMapB).length) {\n    return false;\n  }\n\n  for (let char in charMapA) {\n    if (aCharMap[char] !== bCharMap[char]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst buildCharMap = (str) => {\n  const charMap = {};\n  for (let char of str.replace(/[^\\\\w]/g, '').toLowerCase()) {\n    charMap[char] = charMap[char] + 1 || 1;\n  }\n\n  return charMap;\n};\n`}</code></pre>\n    <p>{`Solution four:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagrams = (strA, strB) => cleanStr(strA) === cleanStr(strB);\n\nconst cleanStr = (str) =>\n  str\n    .replace(/[^\\\\w]/g, '')\n    .toLowerCase()\n    .split('')\n    .sort()\n    .join('');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"capitalising-a-sentece\"\n    }}>{`Capitalising a sentece`}</h2>\n    <p>{`Easy solution for first of sentence:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => str[0].toUpperCase() + str.slice(1);\n`}</code></pre>\n    <p>{`If you actually need to capitalise all sentences...`}</p>\n    <p>{`First solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  const arr = str.split(' ');\n\n  return arr\n    .map((str) => {\n      return str[0].toUpperCase() + str.slice(1);\n    })\n    .join(' ');\n};\n`}</code></pre>\n    <p>{`Second solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  let res = str[0].toUpperCase();\n  for (let i = 1; i < str.length; i++) {\n    if (str[i - 1] === ' ') {\n      res = res + str[i].toUpperCase();\n    } else {\n      res = res + str[i];\n    }\n  }\n  return res;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stepper\"\n    }}>{`Stepper`}</h2>\n    <p>{`Without a space:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (stepper) => {\n  let res = '';\n  for (let i = 0; i < stepper; i++) {\n    let count = 0;\n    while (count <= i) {\n      res = res + '#';\n      count++;\n    }\n\n    if (i !== stepper - 1) {\n      res = res + '\\\\n';\n    }\n  }\n\n  console.log(res);\n  return res;\n};\n\nmodule.exports = {\n  step\n};\n`}</code></pre>\n    <p>{`With a space:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (stepper) => {\n  let res = '';\n  for (let i = 0; i < stepper; i++) {\n    let count = 0;\n    while (count <= i) {\n      res = res + '#';\n      count++;\n    }\n\n    while (count <= stepper) {\n      res = res + ' ';\n      count++;\n    }\n\n    if (i !== stepper - 1) {\n      res = res + '\\\\n';\n    }\n  }\n\n  console.log(res);\n  return res;\n};\n\nmodule.exports = {\n  step\n};\n`}</code></pre>\n    <p>{`Using recursion (doesn't return the string):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (n, row = 0, stair = '') => {\n  // Complete\n  if (n === row) {\n    return;\n  }\n\n  // Handling a row\n  if (n === stair.length) {\n    console.log(stair);\n    return step(n, row + 1);\n  }\n\n  // Handling str on row\n  if (stair.length <= row) {\n    stair += '#';\n  } else {\n    stair += ' ';\n  }\n\n  return step(n, row, stair);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyramids\"\n    }}>{`Pyramids`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const pyramid = (n) => {\n  const midpoint = Math.floor((2 * n - 1) / 2);\n  let level = '';\n  for (let row = 0; row < n; row++) {\n    for (let column = 0; column < 2 * n - 1; column++) {\n      if (midpoint - row <= column && midpoint + row >= column) {\n        level += '#';\n      } else {\n        level += ' ';\n      }\n\n      if (column === 2 * n - 2) {\n        level += '\\\\n';\n      }\n    }\n  }\n\n  return level;\n};\n`}</code></pre>\n    <p>{`Solution with recursion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const pyramid = (n, row = 0, level = '') => {\n  // Complete\n  if (n === row) {\n    console.log(level);\n    return;\n  }\n\n  // Handling a row\n  if (2 * n - 1 === level.length) {\n    console.log(level);\n    return pyramid(n, row + 1);\n  }\n\n  const midpoint = Math.floor((2 * n - 1) / 2);\n  let add = '';\n  if (midpoint - row <= level.length && midpoint + row >= level.length) {\n    add += '#';\n  } else {\n    add += ' ';\n  }\n\n  return pyramid(n, row, level + add);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"vowel-counting\"\n    }}>{`Vowel Counting`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let vowels = (str) => {\n  let count = 0;\n  // could also just use vowels = 'aeiou'\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let char of str) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n`}</code></pre>\n    <p>{`Solution Two:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let vowels = (str) => {\n  const matches = str.match(/[aeiou]/gi);\n  return matches ? matches.length : 0;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"general-matrix\"\n    }}>{`General Matrix`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let matrix = (n) => {\n  let mat = [];\n  let count = 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j === 0) {\n        mat[i] = [];\n      }\n\n      mat[i][j] = count;\n      count++;\n    }\n  }\n\n  return mat;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"matrix-spiral\"\n    }}>{`Matrix Spiral`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let matrix = (n) => {\n  let results = [];\n\n  // init all 2d arrays\n  for (let i = 0; i < n; i++) {\n    results.push([]);\n  }\n\n  let count = 1;\n  let startRow = 0;\n  let endRow = n - 1;\n  let startCol = 0;\n  let endCol = n - 1;\n\n  while (startCol <= endCol && endRow >= startRow) {\n    // Top row\n    for (let i = startCol; i <= endCol; i++) {\n      results[startRow][i] = count;\n      count++;\n    }\n    startRow++;\n\n    // Right col\n    for (let i = startRow; i <= endRow; i++) {\n      results[i][endCol] = count;\n      count++;\n    }\n    endCol--;\n\n    // Bottom row\n    for (let i = endCol; i >= startCol; i--) {\n      results[endRow][i] = count;\n      count++;\n    }\n    endRow--;\n\n    // Start col\n    for (let i = endRow; i >= startRow; i--) {\n      results[i][startCol] = count;\n      count++;\n    }\n    startCol++;\n  }\n  console.log('results', results);\n  // find midpoint to start at (base on even/odd) console.log(results);\n  return results;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"runtime-complexity\"\n    }}>{`Runtime Complexity`}</h2>\n    <p>{`Linear runtime (N):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  let res = str[0].toUpperCase();\n  for (let i = 1; i < str.length; i++) {\n    if (str[i - 1] === ' ') {\n      res = res + str[i].toUpperCase();\n    } else {\n      res = res + str[i];\n    }\n  }\n  return res;\n};\n`}</code></pre>\n    <p>{`For an example of quadratic runtime (N^2):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (n, row = 0, stair = '') => {\n  // Complete\n  if (n === row) {\n    return;\n  }\n\n  // Handling a row\n  if (n === stair.length) {\n    console.log(stair);\n    return step(n, row + 1);\n  }\n\n  // Handling str on row\n  if (stair.length <= row) {\n    stair += '#';\n  } else {\n    stair += ' ';\n  }\n\n  return step(n, row, stair);\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"determining-complexity\"\n    }}>{`Determining complexity`}</h3>\n    <p>{`How can we determine complexity?`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Constant`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No mantter how many elements we're working with, the algorithm/operation/whatever will always take the same amount of time`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Logarithmic`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You have this if doubling the number of elements you are iterating over doesn't double the amount of work. Always assume search algorithms to be log(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Linear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through all elements in a colection of data (think arrays)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quasilinear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n * log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You have this if doubling the number of elements you are iterating over doesn't double the amount of work. Always assume sort algorithms to be n*log(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quadratic`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Every el in a collection has to be compared to every other elements (handshake problem)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Exponential`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2^n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If you add a \"single\" element to a collection, the processing power required doubles`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"big-o-notation\"\n    }}>{`Big 'O' Notation`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Complexity`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Linear`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(1)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Constant`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quadratic`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"common-complexities-runtime\"\n    }}>{`Common Complexities (Runtime)`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Likely complexity`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through simple loop on single collection`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Probably O(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through half a collection?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Still O(n). There are no constants in runtime.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through 2 different collections with separate for loops`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n + m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops iterating over the same collection?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops iterating over different collections?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sorting`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*log(n))`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops on different collections`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sorting?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*log(n))`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Searching a sorted array?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(log(n))`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"space-complexity\"\n    }}>{`Space Complexity`}</h3>\n    <p>{`Extremely similar to performance but related to memory.`}</p>\n    <h2 {...{\n      \"id\": \"fibonacci\"\n    }}>{`Fibonacci`}</h2>\n    <p>{`First solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fib = n => {\n  const result = [0,1];\n\n  for (let i = 2; i <= n; i++) {\n    const a = result[result.length -1];\n    const b = result[result.length -2];\n\n    result.push(a + b);\n  }\n\n  return result[n];\n}\n`}</code></pre>\n    <p>{`Recursive solution one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fibonacci = (n, iter = 0, value = 1, prev = 0) => {\n    // 0, 1, 1, 2, 3, 5 ... handle base cases\n    if (n === 0) {\n        return 1;\n    } else if (n === 1) {\n        return 2;\n    }\n\n    if (iter < n - 1) {\n        const newValue = value + prev;\n        return fibonacci(n, iter + 1, newValue, value);\n    }\n\n    return value;\n};\n`}</code></pre>\n    <p>{`Recursive solution two:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fibonacci = n => {\n  if (n < 2) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n`}</code></pre>\n    <p>{`To get the complexity of the Fibonacci sequence, we need to think about how all the totals come together for the return calls.`}</p>\n    <p><img alt=\"Fibonacci tree\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550011633/developer-notes/Screen_Shot_2019-02-13_at_9.46.05_am.png\" /></p>\n    <p>{`We don't care of fib(0) since it comes back with zero.`}</p>\n    <p><img alt=\"Remove fib(0)\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550011724/developer-notes/Screen_Shot_2019-02-13_at_9.48.20_am.png\" /></p>\n    <p>{`Therefore for us, we can total calls of `}<inlineCode parentName=\"p\">{`fib(1)`}</inlineCode>{` and that is how we see that we get 5 for `}<inlineCode parentName=\"p\">{`fib(4)`}</inlineCode>{`.`}</p>\n    <p>{`The time complexity is O(2^n).`}</p>\n    <h2 {...{\n      \"id\": \"memoization\"\n    }}>{`Memoization`}</h2>\n    <p>{`Here are some of the performance characteristics of recursion vs quadratic. `}</p>\n    <p>{`For the recusive function, if we saw the tree that represents all the calls, you will see quickly that each iteration requires two more calls until we reach `}<inlineCode parentName=\"p\">{`fib(1)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fib(0)`}</inlineCode>{`.`}</p>\n    <p>{`Given the number of operations increases exponentially, we then know that it becomes `}<inlineCode parentName=\"p\">{`O(2^n)`}</inlineCode>{`. This is a massive no no.`}</p>\n    <p>{`With the first iterative solutin, we will get linear runtime. `}</p>\n    <p>{`What the interviewer wants to hear for the recursive answer is that we are wasting resources by recalling the same functions over and over (think of how often `}<inlineCode parentName=\"p\">{`fib(3)`}</inlineCode>{` might be called lower in the recursion tree when running `}<inlineCode parentName=\"p\">{`fib(6)`}</inlineCode>{`).`}</p>\n    <p>{`What they want to here is `}<inlineCode parentName=\"p\">{`memoization`}</inlineCode>{` - store the arguments of each function call along with the result. If the function is called again with the same arguments, return the precomputed results, rather than running the function again. `}</p>\n    <p>{`Using this will dramatically improve runtime.`}</p>\n    <h3 {...{\n      \"id\": \"implementing-memoization\"\n    }}>{`Implementing memoization`}</h3>\n    <p>{`Recursive solution with memoization:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const memoize(fn) {\n  const cache = {};\n  return function(...args) {\n    if (cache[args]) {\n      return cache[args];\n    }\n\n    // NOTE: apply is integral - check MDN if you don't know how it works \n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n    const result = fn.apply(this, args);\n    cache[args] = result;\n\n    return result;\n  };\n}\n\nconst slowFib = n => {\n  if (n < 2) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst fibonacci = memoize(slowFib);\n// fib = memoize(fib); // could also do this if we rename slowFib => fib\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"whats-a-data-structure\"\n    }}>{`What's a data structure?`}</h2>\n    <p>{`Data structures are all about runtime complexity:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Ways of organizing information with optimal 'runtime complexity' for adding or removing records.`}</li>\n      <li parentName=\"ul\">{`Javascript natively implements several data structures. You will still be asked about 'inferior' data structures.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"queueing\"\n    }}>{`Queueing`}</h2>\n    <p>{`Enqueing: push to back, dequeueing: pop from top.`}</p>\n    <p>{`Implementing a queue in JS:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Queue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array equivalent`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Add to queue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array.unshift();`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Remove from queue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array.pop();`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`So we could handicap an array. Why would we do that? Just to basically help hide some of the array functionality to lock it down.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export default class Queue {\n  constructor() {\n    this.data = [];\n  }\n\n  add(record) {\n    this.data.unshift(record);\n  }\n\n  remove() {\n    return this.data.pop();\n  }\n}\n\n// another file \nimport Queue from 'path/to/file';\nconst q = new Queue();\n\nq.add({foo: 'bar'});\nconst nextInQ = q.remove();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"weave\"\n    }}>{`Weave`}</h2>\n    <p>{`Weave receives two queues as arguments and combines the contents of each into a new, third queue. The third queue should contain the `}<inlineCode parentName=\"p\">{`alterating`}</inlineCode>{` content of the two queues. The function should handle queues of different lengths without inserting `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` into the new one.`}</p>\n    <p>{`Image you have queue one `}<inlineCode parentName=\"p\">{`[1,2,3]`}</inlineCode>{` and queue two `}<inlineCode parentName=\"p\">{`'hello', 'world', '!`}</inlineCode>{` then we want to have `}<inlineCode parentName=\"p\">{`[1, 'hello', 2, 'world', 3, '!']`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// first, update queue\nexport default class Queue {\n  constructor() {\n    this.data = [];\n  }\n\n  add(record) {\n    this.data.unshift(record);\n  }\n\n  remove() {\n    return this.data.pop();\n  }\n\n  peek() {\n    return this.data[this.data.length - 1];\n  }\n}\n\nimport Queue from 'path/to/file';\n// using weave\nfunction weave(srcOne, srcTwo) {\n  const q = new Queue();\n}\n\nmodule.exports = weave;\n`}</code></pre>\n    <p>{`Assuming we have that queue class, one implementation is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const runWeave = (qOne, qTwo) => {\n    const weave = new Queue();\n\n    while (qOne.peek() || qTwo.peek()) {\n        if (qOne.peek()) {\n            weave.add(qOne.remove());\n        }\n\n        if (qTwo.peek()) {\n            weave.add(qTwo.remove());\n        }\n    }\n\n    return weave;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stacks\"\n    }}>{`Stacks`}</h2>\n    <p>{`Stack is like a push pop implementation of records. It is `}<inlineCode parentName=\"p\">{`First in, Last out`}</inlineCode>{`.`}</p>\n    <p><img alt=\"Stack implemntation\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550020065/developer-notes/Screen_Shot_2019-02-13_at_12.07.28_pm.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Stack {\n  constructor() {\n    this.data = [];\n  }\n\n  push(record) {\n    this.data.push(record);\n  }\n\n  pop() {\n    return this.data.pop();\n  }\n\n  peek() {\n    return this.data[this.data.length - 1];\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"queue-from-stacks\"\n    }}>{`Queue from Stacks`}</h2>\n    <p>{`Using two stacks, can we emulate a queue?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Stack = require('stack');\nconst Queue = require('queue');\n\nconst s1 = new Stack();\nconst s2 = new Stack();\n\nconst q = new Queue();\n\nconst base = ['green', 'blue', 'red'];\n// start with ['green', 'blue', 'red']\n// act as if we were queueing to get green out first\nwhile (base.length > 0) {\n  s1.push(base.unshift());\n}\n\nwhile (s1.peek()) {\n  s2.push(s1.pop());\n}\n\n// now to act as if it is FIFO\ns2.pop(); // gets out green\n`}</code></pre>\n    <p>{`Instead of just emulating, if we create a new queue:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Queue {\n  constructor() {\n    this.first = new Stack();\n    this.second = new Stack();\n\n    add(record) {\n      this.first.push(record);\n    }\n\n    remove() {\n      while (this.first.peek()) {\n        this.second.push(this.first.pop());\n      }\n      const record = this.second.pop();\n\n      while (this.second.peek()) {\n        this.first.push(this.second.pop());\n      }\n\n      return record;\n    }\n\n    peek() {\n      while (this.first.peek()) {\n        this.second.push(this.first.pop());\n      }\n\n      const record = this.second.peek();\n\n      while (this.second.peek()) {\n        this.first.push(this.second.pop());\n      }\n\n      return record;\n    }\n  }\n}\n`}</code></pre>\n    <p>{`To clarify with the above challenge, it's to go A => StackA => StackB and back treating both the stacks as a queue.`}</p>\n    <h2 {...{\n      \"id\": \"linked-list\"\n    }}>{`Linked List`}</h2>\n    <p><img alt=\"Basic singularly linked list\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550023986/developer-notes/Screen_Shot_2019-02-13_at_1.12.51_pm.png\" /></p>\n    <p>{`A node generally contains data and a reference to the next node and the linked list is the collections of nodes linked to each other.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const nodeOne = {\n  data: 123\n}\n\nconst nodeTwo = {\n  data: 456\n}\n\nnodeOne.next = nodeTwo;\n`}</code></pre>\n    <p>{`We can build a `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`LinkedList`}</inlineCode>{` class to help us out here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n    constructor(data, next = null) {\n        this.data = data;\n        this.next = next;\n    }\n}\n\nclass LinkedList {\n    constructor(head = null) {\n        this.head = head;\n    }\n\n    insertFirst(data) {\n        const node = new Node(data, this.head);\n        this.head = node;\n    }\n\n    /**\n     * Return size of LinkedList\n     *\n     * @returns {Number} Size of list\n     * @memberof LinkedList\n     */\n    size() {\n        if (this.head) {\n            // traverse the head\n            let node = this.head;\n            let size = 1;\n            while (node.next) {\n                node = node.next;\n                size++;\n            }\n\n            return size;\n        }\n\n        return 0;\n    }\n\n    getFirst() {\n        return this.head;\n    }\n\n    getLast() {\n        let node = this.head;\n        while (node.next) {\n            node = node.next;\n        }\n\n        return node;\n    }\n\n    /**\n     * Note, we might not have to iterate through all the null values.\n     *\n     * @memberof LinkedList\n     */\n    clear() {\n        if (this.head.next) {\n            let node = this.head.next;\n            while (node.next) {\n                let temp = node.next;\n                node = null;\n                node = temp;\n            }\n        }\n\n        this.head = null;\n    }\n\n    removeFirst() {\n        if (!this.head) {\n            return;\n        }\n\n        this.head = this.head.next;\n    }\n\n    removeLast() {\n        if (!this.head) {\n            return;\n        }\n\n        if (!this.head.next) {\n            this.head = null\n            return;\n        }\n\n        let node = this.head.next;\n        let prev = this.head;\n\n        while (node.next) {\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = null;\n    }\n\n    insertLast(data) {\n        // this could also be done using this.getLast()\n        const n = new Node(data);\n\n        if (!this.head) {\n            this.head = n;\n            return;\n        }\n\n        if (!this.head.next) {\n            this.head.next = n;\n            return;\n        }\n\n        let node = this.head.next;\n\n        while (node.next) {\n            node = node.next;\n        }\n\n        node.next = n;\n    }\n\n    /**\n     * Get node at a particular index with head equating to 0.\n     *\n     * @param {*} index Index to fetch at.\n     * @memberof LinkedList\n     */\n    getAt(index) {\n        if (!this.head) {\n            return null;\n        }\n\n        let count = 0;\n        let node = this.head;\n        while (count < index) {\n            if (!node.next) {\n                return null;\n            }\n\n            count++;\n            node = node.next;\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove at a particular index.\n     *\n     * @param {*} index index to remove.\n     * @memberof LinkedList\n     */\n    removeAt(index) {\n        if (!this.head) {\n            return;\n        } else if (index === 0 && this.head.next) {\n            let node = this.head.next;\n            this.head = node;\n        }\n\n        let prev = this.head;\n        let node = this.head.next;\n        let counter = 0;\n\n        while (counter < index) {\n            if (!node.next) {\n                return;\n            }\n\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = node.next;\n    }\n\n    /**\n     * Insert node at a particular index. Ensure it can handle cases where there is a next or no next.\n     * Insert at end if index is out of bounds.\n     *\n     * @param {*} index Index to insert the object at.\n     * @memberof LinkedList\n     */\n    insertAt(data, index) {\n        if (!this.head) {\n            this.head = new Node(data);\n        }\n\n        if (index === 0) {\n            this.head = new Node(data, this.head);\n        }\n\n        let counter = 0;\n        let prev = this.head;\n        let node = this.head.next;\n        while (counter < index) {\n            if (!node.next) {\n                node.next = new Node(data);\n            }\n\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = new Node(data, node);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-notes-on-generators\"\n    }}>{`Basic notes on generators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function *numbers() {\n  yield 1;\n  yield 2;\n  yield* moreNumbers(); // I will pass another generator, next should continue to receive yields from this function\n  yield 6;\n  yield 7;\n}\n\nfunction *moreNumbers() {\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\nconst generator = numbers();\n\nconst values = [];\nfor (let value of generator) {\n  values.push(value);\n}\n\nconsole.log(values); // [1,2,3,4,5,6,7]\n`}</code></pre>\n    <p>{`A practical example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Tree {\n  constructor(value = null, children = []) {\n    this.value = value;\n    this.children = children;\n  }\n\n  *printValues() {\n    yield this.value;\n    for (let child of this.children) {\n      yield* child.printValues();\n    }\n  }\n}\n\nconst tree = new Tree(1, [\n  new Tree(2, [new Tree(4)]),\n  new Tree(3)\n]);\n\n// Go in a Depth First Search way to print out the tree\nconst values = [];\nfor (let value of tree.printValues()) {\n  values.push(value);\n}\n\nconsole.log(values); // [1,2,4,3]\n`}</code></pre>\n    <p>{`In practise with linked lists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class LinkedList {\n    constructor(head = null) {\n        this.head = head;\n    }\n\n    // ... other methods\n\n    /**\n     * This will allow us to use a for/of loop with our linked list.\n     *\n     * @memberof LinkedList\n     */ \n    * [Symbol.iterator]() {\n        let node = this.head;\n        while (node) {\n            yield node;\n            node = node.next;\n        }\n    }\n}\n\n// in use assuming we have a LinkedList object list\nfor (let node of list) {\n  console.log(node.data);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"midpoint-of-a-linked-list\"\n    }}>{`Midpoint of a Linked List`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Get list length / 2 but fetch the roof.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const midpoint = list => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (fast.next && fast.next.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n\n  return slow;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"detecting-linked-list-loops\"\n    }}>{`Detecting Linked List Loops`}</h2>\n    <p>{`How can you detect if a linked list has a circular reference?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const circular = list => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (fast.next && fast.next.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n\n    if (slow === fast) {\n      return true;\n    }\n  }\n\n  return false;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"linked-list-distance-n-from-last\"\n    }}>{`Linked List distance n from last`}</h2>\n    <p>{`Given linked list and int n, return el `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` spaces from the last node in the list. Do not call the size method. Always assume that nwill be less than the length of the list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fromLast = (list, n) => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (n > 0) {\n    fast = fast.next;\n    n--;\n  }\n\n  while (fast.next && fast.next) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"trees-overview\"\n    }}>{`Trees Overview`}</h2>\n    <p>{`Two basics ways we will go through the trees. Depth First Search and Breadth First Search.`}</p>\n    <p>{`A node class should have a data property, add method and remove method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n  constructor(data) {\n    this.data = data;\n    this.children = [];\n  }\n\n  /**\n   * Given some data, create a new node and add it to the current node's 'children' array\n   */\n  add(data) {\n    this.children.push(new Node(data));\n  }\n\n  /**\n   * Given some data, look at each child of the current node and remove any node with data === data\n   */\n  remove(data) {\n    this.children = this.children.filter(node => node.data !== data);\n  }\n}\n`}</code></pre>\n    <p>{`For the tree class, we want a constructor with root set to null.`}</p>\n    <p>{`We then want a `}<inlineCode parentName=\"p\">{`traverseBFS`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`traverseDFS`}</inlineCode>{` method.`}</p>\n    <p>{`Note: Practical reasoning for BFS vs DFS. `}</p>\n    <p>{`BFS example includes a tree of the position hierarchy of a company and wanting to print a tree of positions given importance. `}</p>\n    <p>{`DFS example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Tree {\n  constructor() {\n    this.root = null;\n  }\n  \n  /**\n   * (node) => // do something with node\n   */\n  traverseBFS(fn) {\n    // start at root\n    // check if children\n    // if children, iterate through and recall function \n    const arr = [this.root];\n    while (arr.length) {\n      const node = arr.shift();\n      arr.push(...node.children);\n      fn(node);\n    }\n  }\n\n  traverseDFS(fn) {\n    // start with root\n    // check if children\n    // if children, iterate through in depth fashion\n    const arr = [this.root];\n    while (arr.length) {\n      const node = arr.shift();\n      arr.unshift(...node.children);\n      fn(node);\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"level-width\"\n    }}>{`Level width`}</h2>\n    <p>{`Given the root node of a tree, return an array where each element is the width of the tree at each level.`}</p>\n    <p>{`What we need to do is use a \"stopper\" variable to help us define when we hit the end of level.`}</p>\n    <p><img alt=\"Approach to level width\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550103801/developer-notes/Screen_Shot_2019-02-14_at_11.22.10_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// given a node \nlet node = new Node(); // assume initiated with a bunch of children\n\nconst levelWidth = node => {\n  const counters = [0];\n  const arr = [node, 's'];\n  while (arr.length > 1) {\n    const node = arr.shift();\n    if (node === 's') {\n      arr.push('s');\n      counters.push(0);\n    } else if (arr.length) {\n      counters[counters.length - 1]++;\n      arr.push(...node.children);\n    }\n  } \n\n  return counters;\n}\n\nlevelWidth(node.root);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"binary-search-trees\"\n    }}>{`Binary Search Trees`}</h2>\n    <p>{`Binary trees can only have at most 2 children.`}</p>\n    <p>{`Because of the restrictions of `}<inlineCode parentName=\"p\">{`binary search trees`}</inlineCode>{`, we generally set them up so that the node has properties `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property that is greater than `}<inlineCode parentName=\"p\">{`left.value`}</inlineCode>{` but smaller than `}<inlineCode parentName=\"p\">{`right.value`}</inlineCode>{`.`}</p>\n    <p>{`Creating a BST:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n  constructor(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(data) {\n    if (data < this.data && this.left) {\n      this.left.insert(data);\n    } else if (data < this.data && !this.left) {\n      this.left = new Node(data);\n    } else if (data > this.data && this.right) {\n      this.right.insert(data);\n    } else if (data > this.data && !this.right) {\n      this.right = new Node(data);\n    }\n  }\n\n  // Find node with data value\n  contains(data) {\n    if (this.data === data) {\n      return this;\n    } else if (data < this.data) {\n      return this.left.contains(data);\n    } else if (data > this.data && this.right) {\n      return this.right.contains(data);\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-a-bst\"\n    }}>{`Validating a BST`}</h2>\n    <p>{`To handle this, we basically want to keep a `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` value to ensure that the thresholds are kept correctly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validation = (node, min = null, max = null) => {\n  if (max !== null && node.data > max) {\n    return false;\n  } else if (min !== null && node.data < min) {\n    return false;\n  }\n\n  if (node.left && !validate(node.left, min, node.data)) {\n    return false;\n  }\n\n  if (node.right && !validate(node.right, node.data, max)) {\n    return false;\n  }\n\n  return true;\n} \n\nvalidation(rootNode);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"eventing-system\"\n    }}>{`Eventing system`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Events {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName].push(callback);\n    } else {\n      this.events[eventName] = [callback];\n    }\n  }\n\n  trigger(eventName) {\n    if (this.events[eventName]) {\n      for (let fn of this.events[eventName]) {\n        fn();\n      }\n    }\n  }\n\n  off(eventName) {\n    delete this.events[eventName];\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sort-algos-and-complexities\"\n    }}>{`Sort Algos and Complexities`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Worst case runtime`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Difficulty`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BubbleSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`easiest`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SelectionSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`easier`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`MergeSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n*log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`medium`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"bubble-sort\"\n    }}>{`Bubble sort`}</h3>\n    <p>{`Take example `}<inlineCode parentName=\"p\">{`[10,-30,97,0,5]`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const arr = [10,-30,97,0,5];\n\nconst bubbleSort = arr => {\n  for (let i=0; i < arr.length; i++) {\n    for (let j=0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j+1]) {\n        let temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\nconst bubbleSorted = bubbleSort(arr);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection-sort\"\n    }}>{`Selection Sort`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const selectionSort = arr => { \n  for (let i=0; i < arr.length; i++) {\n    let indexOfMin = i;\n    for (let j=i+1; j < arr.length; j++) {\n      if (arr[j] > arr[indexOfMin]) {\n        indexOfMin = j;\n      }\n    }\n\n    if (indexOfMin !== i) {\n        let temp = arr[j];\n        arr[j] = arr[indexOfMin];\n        arr[indexOfMin] = temp;\n    }\n  }\n  return arr;\n}\n\nconst selectionSorted = selectionSort(arr);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"merge-sort\"\n    }}>{`Merge Sort`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Used to break down array recursively\nconst mergeSort = arr => {\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const center = Math.floor(arr.length / 2);\n  const left = arr.slice(0, center);\n  const right = arr.slice(center);\n\n  return merge (\n    mergeSort(left);\n    mergeSort(right);\n  );\n}\n\n// Used to build the array back together\nconst merge = (left, right) => {\n  // create results array \n  let results = [];\n  // while elements in BOTH arrays\n  while (left.length && right.length) {\n    // compare first left < first right \n    if (left[0] < right[0]) {\n      // shift el into res arr\n      results.push(left.shift());\n    } else {\n      results.push(right.shift());\n    }\n  }\n\n  // take everything from the arr that has stuff in it and put it in results\n  return [...results, ...left, ...right];\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}