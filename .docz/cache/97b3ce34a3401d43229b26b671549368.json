{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Express-Basics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Express-Basics.md","mtime":1562563032044},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/Express-Basics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"express-basics\"\n    }}>{`EXPRESS BASICS`}</h1>\n    <p>{`app.get('/blog', function (req, res) {\nres.send(posts);\n});`}</p>\n    <p>{`app.listen(3000, function(){\nconsole.log(\"The frontend server is running on port 3000!\")\n});`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Easily Debug Express`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`Programming it iterative.`}</li>\n    </ul>\n    <p>{`Nodemon not needing to stop and restart the server.`}</p>\n    <p>{`Node-inspector is great for debugging.`}</p>\n    <p>{`nodemon is like a replacement for the keyword node!`}</p>\n    <p>{`nodemon src/app //this will start a node.js app which restarts when changes are made.`}</p>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Interactive Debugging\nand explorative programming`}</li>\n    </ol>\n    <p>{`node-debug src/app.js`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`this launches node inspector in debug mode.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`select in the body of the route to set a breakpoint.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`access in the Chrome debugger`}</p>\n      </li>\n    </ul>\n    <p>{`To put node-debugger and nodemon together.`}</p>\n    <p>{`Do this:\nnode-inspector //run this by itself. Won't run the server.`}</p>\n    <p>{`//in a seperate tab\nnodemon --debug src/app`}</p>\n    <p>{`You can do the same thing with the regular node command - but with no server restart`}</p>\n    <p>{`node --debug src/app`}</p>\n    <p>{`Passing the breakpoint to the nodemon comment`}</p>\n    <p>{`nodemon --debug-brk src/app`}</p>\n    <ul>\n      <li parentName=\"ul\">{`this will hit the debugger; statement.`}</li>\n    </ul>\n    <p>{`QUESTIONS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`When the debugger breaks in the application, you have access to all variables in the current application context in the browser’s console.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`What command will runs the node app in “debug” mode?`}</li>\n    </ol>\n    <p>{`A: nodemon --debug src`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`node-inspector`}</inlineCode>{` can be used to run node apps directly OR to debug node apps being run in debug mode`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`A breakpoint in a JavaScript application can be set by clicking on the line of a file in the browser console, or writing the `}<strong parentName=\"li\">{`_`}</strong>{` statement directly into your code.`}</li>\n    </ol>\n    <p>{`A: debugger;`}</p>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`The following command will break the debugger on the first line`}</li>\n    </ol>\n    <p>{`A: nodemon --debug-brk src/app`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 3: THE REQUEST AND RESPONSE OBJECTS IN EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`6.  Requests and the\n    request objects\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Every route processes a request`}</li>\n    </ul>\n    <p>{`So far, index AND blog route.`}</p>\n    <p>{`The server catches the http request, then sends back as a JS request object`}</p>\n    <p>{`In the debug mode:`}</p>\n    <p>{`req.param in debug currently empty. Can run the paramter through our routes!`}</p>\n    <p>{`eg.\napp.get('/blog/:id', function(req, res) {\nres.send(post);\n});`}</p>\n    <p>{`Visiting .../blog/1 will set the id param to \"1\" etc`}</p>\n    <p>{`You can change the parameter names to be things like \"title\" or whatever you want.`}</p>\n    <p>{`QUESTIONS`}</p>\n    <p>{`////////////////////////`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The request object gives you access to the “hostname” where the server is serving from.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Express route parameters allow you to request different data simply by changing the `}{`_`}{`_`}{`_`}{`_`}{`.`}</li>\n    </ol>\n    <p>{`A: URL`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`The request object is like a JavaScript bundle of the incoming `}<strong parentName=\"li\">{`_`}{`_`}</strong></li>\n    </ol>\n    <p>{`A: HTTP Request`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`The request object stores route parameters in the parameters object.`}</li>\n    </ol>\n    <p>{`A: False`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`7.  Responses and the\n    Response Object\n`}</code></pre>\n    <p>{`The server sends back the response.`}</p>\n    <p>{`This includes HTML and tons of behind the scenes info.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`status codes, response info etc.`}</li>\n    </ul>\n    <p>{`Using the debugger:`}</p>\n    <p>{`res //a lot going on`}</p>\n    <ul>\n      <li parentName=\"ul\">{`this gives a lot of return details`}</li>\n    </ul>\n    <p>{`Add a question mark makes the route param optional.`}</p>\n    <p>{`app.get('/blog/:title?', function(req, res) { //now we can access the blog page when it is empty\nvar title = req.params.title;\nif (title === undefined) {\nres.send(\"This page is under construction\");\n} else {\nvar post = posts`}{`[title]`}{`;\nres.send(post);\n}\n});`}</p>\n    <p>{`res.get`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In express the `}{`_`}{`_`}{`_`}{` character at the end of a route parameter indicates that it is optional.`}</li>\n    </ol>\n    <p>{`A: ?`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Status codes can be set manually on the response object.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`The response object’s `}<strong parentName=\"li\">{`_`}</strong>{` method is used to turn templates into HTML.`}</li>\n    </ol>\n    <p>{`A: render`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 4: USING TEMPLATES WITH EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`7.  What is Template\n    Rendering\n`}</code></pre>\n    <p>{`Templates and template rendering at the core of an internet application framework.`}</p>\n    <p>{`res.send can send things to the browser.`}</p>\n    <p>{`Can also send back html.`}</p>\n    <p>{`Basically a example.html that can dynamically injected`}</p>\n    <p>{`This templates are referred to as VIEWS.`}</p>\n    <p>{`Popular template languages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Handlebars`}</li>\n      <li parentName=\"ul\">{`EJS (Embedded Javascript)`}</li>\n      <li parentName=\"ul\">{`JADE // the most popular`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`8.  What is Jade?\n`}</code></pre>\n    <p>{`Most popular template engines for Node and Express.`}</p>\n    <p>{`Why do they love it?`}</p>\n    <p>{`It quickly uses block indents for taggings.`}</p>\n    <p>{`Examples:`}</p>\n    <p>{`doctype html\nhtml\nhead\ntitle Express Basics\nbody\nh1 This is an awesome HTML page, generated with Jade.\np.class1.class2.another-class //used to make classes\np.(class=\"test\") Some content`}</p>\n    <ol {...{\n      \"start\": 9\n    }}>\n      <li parentName=\"ol\">{`Using Jade in your\nExpress App`}</li>\n    </ol>\n    <p>{`How to configure your template to use Jade.`}</p>\n    <p>{`//app.js`}</p>\n    <p>{`'use strict'; //throws error if you make one`}</p>\n    <p>{`var express = require('express'); //now can access all methods and properties of express through this.\nvar posts = require('./mock/posts.json');`}</p>\n    <p>{`var app = express();`}</p>\n    <p>{`//app variable will extended`}</p>\n    <p>{`//set up dev server`}</p>\n    <p>{`app.set('view engine', 'jade');\napp.set('views', `}<strong parentName=\"p\">{`dirname + '/templates'); //`}</strong>{`dirname important for different directories from where node starts`}</p>\n    <p>{`app.get('/', function(req, res) { //req and res are convention\nres.render('index');\n});`}</p>\n    <p>{`app.get('/blog/:title?', function(req, res) { //now we can access the blog page when it is empty\nvar title = req.params.title;\nif (title === undefined) {\nres.status(503); //good for bots to see this status codes\nres.send(\"This page is under construction\");\n} else {\nvar post = posts`}{`[title]`}{`;\nres.send(post);\n}\n});`}</p>\n    <p>{`app.listen(3000, function(){\nconsole.log(\"The frontend server is running on port 3000!\");\n});`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In node.js, `}<inlineCode parentName=\"li\">{`__dirname`}</inlineCode>{` is a variable that gives you:`}</li>\n    </ol>\n    <p>{`A: The path to the current file`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Which of the following is NOT a conventional folder name for storing templates`}</li>\n    </ol>\n    <p>{`A: jade`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In Jade's syntax, which of the following is NOT a correct assignment of the class `}<inlineCode parentName=\"p\">{`nav`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`div`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The response object's `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` method takes the name of a template as its first parameter. The file extension (e.g. `}<inlineCode parentName=\"p\">{`.jade`}</inlineCode>{`) is required.`}</p>\n      </li>\n    </ol>\n    <p>{`A: False`}</p>\n    <ol {...{\n      \"start\": 10\n    }}>\n      <li parentName=\"ol\">{`The \"response.render\"\nMethod`}</li>\n    </ol>\n    <p>{`So far, still only been using static data.`}</p>\n    <p>{`doctype html\nhtml(lang=\"en\")\nhead\ntitle Post Page\nbody\nsection.post\n.container.text-right\na(href=\"\").text-faded view all\n.row\n.col-lg-8.col-lg-offset-2.text-center\nh2.section-heading I like to run!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`        hr.light\n\n        p.text-faded\n          | Fanny pack vinyl put a bird on it, small batch viral migas 8-bit meditation Shoreditch keytar health goth bespoke sustainable. Viral you probably haven't heard of them try-hard ennui, pug Thundercats selfies. Normcore cray health goth, umami ennui beard art party skateboard squid distillery.\n        .article\n          | Fanny pack vinyl put a bird on it, small batch viral migas 8-bit meditation Shoreditch keytar health goth bespoke sustainable. Viral you probably haven't heard of them try-hard ennui, pug Thundercats selfies. Normcore cray health goth, umami ennui beard art party skateboard squid distillery.\n`}</code></pre>\n    <p>{`//app.js`}</p>\n    <p>{`'use strict'; //throws error if you make one`}</p>\n    <p>{`var express = require('express'); //now can access all methods and properties of express through this.\nvar posts = require('./mock/posts.json');`}</p>\n    <p>{`var app = express();`}</p>\n    <p>{`//app variable will extended`}</p>\n    <p>{`//set up dev server`}</p>\n    <p>{`app.set('view engine', 'jade');\napp.set('views', `}<strong parentName=\"p\">{`dirname + '/templates'); //`}</strong>{`dirname important for different directories from where node starts`}</p>\n    <p>{`app.get('/', function(req, res) { //req and res are convention\nres.render('index');\n});`}</p>\n    <p>{`app.get('/blog/:title?', function(req, res) { //now we can access the blog page when it is empty\nvar title = req.params.title;\nif (title === undefined) {\nres.status(503); //good for bots to see this status codes\nres.send(\"This page is under construction\");\n} else {\nvar post = posts`}{`[title]`}{` || {};\nres.render('post', { post: post});\n}\n});`}</p>\n    <p>{`app.listen(3000, function(){\nconsole.log(\"The frontend server is running on port 3000!\");\n});`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`11. Scaffolding the\n    Templates\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Name your templates well`}</li>\n      <li parentName=\"ul\">{`Helps everyone for their team`}</li>\n    </ul>\n    <p>{`in the layout.jade`}</p>\n    <p>{`block content //add more renderhtml from here`}</p>\n    <p>{`To add the content from layout.jade:`}</p>\n    <p>{`extends ./layout.jade\nblock content //again`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`12. Adding Partials\n`}</code></pre>\n    <p>{`Too much code in the layout file with the nav etc.`}</p>\n    <p>{`Solve by moving everything in a partial called nav.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`make partials directors`}</li>\n    </ul>\n    <p>{`First file will be `}{`_`}{`nav.jade`}</p>\n    <p><em parentName=\"p\">{` - not used on its own! Sass usually uses this `}</em>{` naming convention before.`}</p>\n    <p>{`To use partial:\ninclude ./partials/`}{`_`}{`nav.jade`}</p>\n    <p>{`QUESTIONS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Keeping your project's views/templates folder well organized is an important part of scaling your project.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Jade uses the `}<strong parentName=\"li\">{`_`}{`_`}</strong>{` keyword to break chunks of content up for use across different files, or to be changed dynamically.`}</li>\n    </ol>\n    <p>{`A: 'block' e.g. 'block content'`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Partials are useful for including portions of a page like navbars and footers, that are the same, or almost the same across a number of pages.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 5: SERVING STATIC FILES IN EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`        13. Setting Up the\nExpress Static Server\nin Development\n`}</code></pre>\n    <p>{`Static files: sent to client as is eg. images etc.`}</p>\n    <p>{`public dir:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Contains other folders:\ncss\njs\nimg etc.`}</li>\n    </ul>\n    <p>{`Middleware:`}</p>\n    <p>{`Middleware the logic on how to handle the a request in between when made by client but before it arrives at the route.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`included in Express.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`14. Add static to\n    the layout template\n`}</code></pre>\n    <p>{`Adding styles and js is easy.`}</p>\n    <p>{`In the head.jade template, punch through all of it.`}</p>\n    <p>{`link() in the head.jade`}</p>\n    <p>{`script() in the body.jade at the end`}</p>\n    <p>{`Notes:`}</p>\n    <p>{`Convention for static files is that they're stored in public.`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 6: DOING MORE WITH EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`15. Marking Lists\n    in Jade Templates\n`}</code></pre>\n    <p>{`In the blog...`}</p>\n    <p>{`res.render('index')`}</p>\n    <p>{`We need files to be in an array from the .json file.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`eg.`}</li>\n    </ul>\n    <p>{`var postsLists = Object.keys(posts).map(function(value) {\nreturn posts`}{`[value]`}{`;\n});`}</p>\n    <ul>\n      <li parentName=\"ul\">{`map turns each array member into something that can have a callback function which can return the value.`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 16\n    }}>\n      <li parentName=\"ol\">{`Using logic in Jade`}</li>\n    </ol>\n    <p>{`Powerful to just have one nav bar to edit and change.`}</p>\n    <p>{`So in Jade...`}</p>\n    <p>{`if path === '/'\n//indent everything to be here`}</p>\n    <p>{`If something doesn't fit and is undefined, then it is false.`}</p>\n    <p>{`in app.js\n//for the index`}</p>\n    <p>{`app.get('/', function(req, res) {\nvar path = req.path;\n//res.locals.path = path;\n//res.render('index');`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`//OR\n\nres.render('index', {path: path});\n`}</code></pre>\n    <p>{`});`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`res.locals`}</inlineCode>{` object stores`}</li>\n    </ol>\n    <p>{`A: Variables that will be accessible in the template`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In the case of the Jade if block `}<inlineCode parentName=\"li\">{`if path === '/'`}</inlineCode>{`, the block's content would NOT be displayed in which of the following scenarios`}</li>\n    </ol>\n    <p>{`A: /blog`}</p>\n    <ol {...{\n      \"start\": 17\n    }}>\n      <li parentName=\"ol\">{`Use Express Generator`}</li>\n    </ol>\n    <p>{`We don't have to build an Express app from scratch`}</p>\n    <p>{`npm install -g express-generator`}</p>\n    <p>{`express `}<inlineCode parentName=\"p\">{`<appname>`}</inlineCode></p>\n    <p>{`npm start //this is a script`}</p>\n    <p>{`Instead of templates, it has views`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`18. REST APIs\n`}</code></pre>\n    <p>{`app.get('/posts', function(req,res) {\nif (req.query.raw) {\nres.json(posts);\n} else {\nres.json(postLists);\n}\n});`}</p>\n    <p>{`To allow to access as a hash:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We can have /posts?raw=true`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}