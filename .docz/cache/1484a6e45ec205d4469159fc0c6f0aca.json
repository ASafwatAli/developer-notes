{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Chain-Of-Responsibility.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Chain-Of-Responsibility.md","mtime":1562563032024},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Chain-Of-Responsibility.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"chain-of-responsibility\"\n    }}>{`Chain Of Responsibility`}</h1>\n    <p>{`Purpose: Behavioural\nType: Object`}</p>\n    <h2 {...{\n      \"id\": \"about\"\n    }}>{`About`}</h2>\n    <p>{`Used to achieve loose coupling where a request from a client is passed to a chain of objects to process them. The object in the chain will decide whether the request moves onto the next object in the chain or not.`}</p>\n    <p>{`Applicable when:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Decoupling request's sender and reciever`}</li>\n      <li parentName=\"ul\">{`Multiple objects, determined at runtime, are candidates to handle a request`}</li>\n      <li parentName=\"ul\">{`Don't want to specific handlers explicitly`}</li>\n      <li parentName=\"ul\">{`Want to issue a request to one of several objects without explicitly specifying the reciever`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Handler: An interface which will primarily recieve the request and dispatch that request to the chain of handlers.`}</li>\n      <li parentName=\"ul\">{`Concrete handlers: Handlers that actually handle the request chained in some sequential order.`}</li>\n      <li parentName=\"ul\">{`Client: Originator of request and will access handler to handle it.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"proscons\"\n    }}>{`Pros/Cons`}</h2>\n    <p>{`Pros:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Reduce coupling degree.`}</li>\n      <li parentName=\"ul\">{`Flexible, simplified objct that does not need to know the chain structure.`}</li>\n      <li parentName=\"ul\">{`Convenient to increase request processing.`}</li>\n    </ul>\n    <p>{`Cons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`No guarantee for request recieved.`}</li>\n      <li parentName=\"ul\">{`Performance of system affected, but also code debugging may not be so easy and could by cyclical.`}</li>\n      <li parentName=\"ul\">{`Observability of operation characteristcs not so easy.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Handler {\n  private _successor: Handler;\n\n  public set successor(successor: Handler) {\n    this._successor = successor;\n  }\n\n  public get successor() {\n    return this._successor;\n  }\n\n  public handleRequest(msg: Number): void {}\n}\n\nclass ConcreteHandlerA extends Handler {\n  handleRequest(req: Number): void {\n    if (req > 0) {\n      console.log(\\`Handler A process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerB extends Handler {\n  handleRequest(req: Number): void {\n    if (req < 0) {\n      console.log(\\`Handler B process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerC extends Handler {\n  handleRequest(req: Number): void {\n    if (req === 0) {\n      console.log(\\`Handler C process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\n(function main() {\n  const reqA = new ConcreteHandlerA();\n  const reqB = new ConcreteHandlerB();\n  const reqC = new ConcreteHandlerC();\n\n  // set the chain or responsibility\n  reqA.successor = reqB;\n  reqB.successor = reqC;\n\n  // handle the requests\n  reqA.handleRequest(0); // logs \"Handler C process 0\"\n  reqA.handleRequest(1); // logs \"Handler A process 1\"\n  reqA.handleRequest(-1); // logs \"Handler B process -1\"\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/chain-responsibility-design-pattern/\"\n        }}>{`C# Implementation`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}