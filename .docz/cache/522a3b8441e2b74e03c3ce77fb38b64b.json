{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Angular/Angular2-Basics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Angular/Angular2-Basics.md","mtime":1562563032012},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0FuZ3VsYXIvQW5ndWxhcjItQmFzaWNzLm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsWyJkZWZhdWx0Il0uc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImFuZ3VsYXItMi1iYXNpY3MiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFuZ3VsYXIgMiBCYXNpY3MiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiWW91IGNhbiBub3QganVzdCB1c2UgQW5ndWxhciBmb3Igd2ViIGFwcHMsIGJ1dCBhbHNvIGlPUyBhbmQgSmF2YSB1c2luZyBOYXRpdmUga2l0LiIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAid2h5LWFuZ3VsYXIiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIldoeSBBbmd1bGFyPyIpLCBtZHgoInVsIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIml0J3MgTW9kdWxhclxuLSBpbiBwcmV2aW91cyB2ZXJzaW9ucywgeW91IG5lZWRlZCB0aGUgZW50aXJlIEFuZ3VsYXIgZnJhbWV3b3JrIGxvYWRlZCIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDMxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInVzZXMgVHlwZVNjcmlwdCwgaXQgdXNlcyBzdGF0aWMgdHlwaW5nIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiR29vZ2xlIGhhcyBodW5kcmVkcyBvZiBpbnRlcm5hbCBhcHBsaWNhdGlvbnMgdXNpbmcgQW5ndWxhciAiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJsYXJnZSBjb21tdW5pdHkgb2YgZGV2ZWxvcGVycyAiKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFuZ3VsYXIgSlMgcmVmZXJzIHRvIHZlcnNpb24gMSwgd2hlcmVhcyBBbmd1bGFyIHJlZmVycyB0byB2ZXJzaW9uIDIuIiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0aGUtcGFydHMtYW5kLXBpZWNlcy1vZi1hbi1hbmd1bGFyLWFwcGxpY2F0aW9uIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJUaGUgUGFydHMgYW5kIFBpZWNlcyBvZiBhbiBBbmd1bGFyIEFwcGxpY2F0aW9uIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJzdHJvbmciLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJIb3cgZG9lcyBpdCB3b3JrPyIpKSwgbWR4KCJ1bCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgicCIsIHsKICAgIHBhcmVudE5hbWU6ICJsaSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJBcHAgcmVxdWlyZXMgb25lICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInJvb3QiKSwgIiBjb21wb25lbnQiKSksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInAiLCB7CiAgICBwYXJlbnROYW1lOiAibGkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhlIGFwcCByZXF1aXJlcyBzZXJ2aWNlcywgY29tcG9uZW50cyBhbmQgM3JkIHBhcnR5IG1vZHVsZXNcbi0gU2VydmljZXMgY2FuIGJlIGludGVybmFsIG9yIHBhcnQgb2YgM3JkIHBhcnR5IG1vZHVsZXMiKSksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInAiLCB7CiAgICBwYXJlbnROYW1lOiAibGkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJTZXJ2aWNlcyIpLCAiOiB1c2VkIHRvIHBlcmZvcm0gdGhpbmdzIGxpa2UgbG9uZyBydW5uaW5nIGNhbGNzIG9yIHJ1bm5pbmcgd2ViIHJlcXVlc3RzLiIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgicCIsIHsKICAgIHBhcmVudE5hbWU6ICJsaSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkNvbXBvbmVudHMiKSwgIjogQnJva2VuIGRvd24gY29tcG9uZW50cy9lbGVtZW50cyAiKSksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInAiLCB7CiAgICBwYXJlbnROYW1lOiAibGkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOZ01vZHVsZSIpLCAiOiBUaGlzIGlzIGxpa2UgYSBjb250YWluZXIgZm9yIHRoZSBhcHBsaWNhdGlvblxuLSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOZyIpLCAiIGlzIHRoZSBuYW1lc3BhY2UgQW5ndWxhciBhZG9wdGVkIikpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiWW91IGNhbiB1c2UgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVHlwZXNjcmlwdCIpLCAiLCAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJKYXZhc2NyaXB0IiksICIgb3IgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRGFydCIpLCAiIHdpdGggQW5ndWxhcjIuIiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0eXBlc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJUeXBlc2NyaXB0IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFuZ3VsYXIgaXMgdGhlIGZpcnN0IGxhcmdlIGZyYW1ld29yayB0byBhZG9wdCAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUeXBlc2NyaXB0IiksICIuIFRoZSBpZGVhIGlzIHRvIGtlZXAgeW91IGluIHRoZSBlZGl0b3IuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIldlIGNhbiB1c2UgVHlwZXNjcmlwdCB0byBoZWxwIGVuZm9yY2Ugc3RhdGljIHR5cGluZy4iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJJbnRlbGxpc2Vuc2UiKSwgIiBpcyBhbHNvIHVzZWQgYXMgaGVscGluZyBhdXRvY29tcGxldGlvbiBpbnRlbGxpZ2VuY2Ugd2hlbiBjb2RpbmcgYW5kIGNlcnRhaW4gc3R5bGVzIG9mIGNvZGluZyBhbGxvdyBmb3IgdGhpcy4iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRWcuIGNvZGU6IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIvLyBleGFtcGxlIDEgXG5cbmNsYXNzIEdyZWV0ZXJ7XG4gICAgZ3JlZXQobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKG5hbWUpO1xuICAgIH1cbn1cblxuY29uc3QgZ3JlZXRlciA9IG5ldyBHcmVldGVyKCk7XG5cbmdyZWV0ZXIuZ3JlZXQoJ0ppbScpO1xuXG4vLyBleGFtcGxlIDJcblxuZnVuY3Rpb24gcm9sbENhbGwoc3R1ZGVudHM6IGFueVtdLCBtYXg/OiBudW1iZXIpIHtcbiAgICBtYXggPSBtYXggfHwgc3R1ZGVudHMubGVuZ3RoO1xuICAgIGNvbnN0IGF0dGVuZGFuY2UgPSBzdHVkZW50cy5zbGljZSh1bmRlZmluZWQsIG1heCk7XG4gICAgY29uc29sZS5sb2coYXR0ZW5kZW5jZSk7XG59XG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0aGUtZmlyc3QtYW5ndWxhci1hcHBsaWNhdGlvbiIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVGhlIEZpcnN0IEFuZ3VsYXIgQXBwbGljYXRpb24iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogOTIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiQXMgeW91IGJ1aWxkIG91dCB5b3VyICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDkyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImluZGV4Lmh0bWwiKSwgIiBmaWxlIHlvdSBzZXQgYSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICI8YXBwLXJvb3Q+IiksICIgY29tcG9uZW50IGFzIHRoZSB0YXJnZXQgZm9yIEFuZ3VsYXIyIGVudHJ5IHBvaW50LiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJXaXRoaW4gIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogOTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAic3JjL2FwcCIpLCAiIGNyZWF0ZSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJhcHAubW9kdWxlLnRzIiksICIgYXMgdGhlIHJvb3QgbW9kdWxlLiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDk0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLyogaW4gYXBwLm1vZHVsZXMudHMgKi9cblxuLy8gbm90ZSB0aGUgQCBpcyB0byBkbyB3aXRoIG5wbSBzdXBwb3J0aW5nIG5hbWVzcGFjZSBtb2R1bGVzXG4vLyB0aGlzIGFsbG93cyBjb2RlIHRvIGJlIHNoYXJlZCBiZXR3ZWVuIHBhY2thZ2VzIFxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XG5cbi8vIGNyZWF0ZSB0aGUgQXBwTW9kdWxlIFxuLy8gZXhwb3J0IGZvciB1c2UgaW4gbWFpbi50cyBcbi8vIGFkZCB0aGUgZGVjb3JhdG9yIHRvIHBvc3QtcHJvY2VzcyBpdFxuLy8gdGhlIGRlY29yYXRvciBpcyB1c2VkIGJ5IGFuZ3VsYXIgdG8gY29tcG9zZSB0aGUgYXBwIFxuLy8gaW4gdGhlIG1vc3QgZWZmaWNpZW50IHdheSBwb3NzaWJsZVxuQE5nTW9kdWxlKHtcbiAgICAvLyB1c2luZyBCcm93c2VyTW9kdWxlIGxldHMgQW5ndWxhciBrbm93IHRoaXMgaXMgXG4gICAgLy8gZm9yIHdlYiB1c2VcbiAgICBpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sXG4gICAgLy8gZm9yIHRoZSB0YXJnZXQgY29tcG9uZW50IFxuICAgIC8vIGJlZm9yZSB1c2luZyBpdCB0aGUgZmlyc3QgdGltZSAtIGRlY2xhcmUgd2UgYXJlIHVzaW5nIGl0XG4gICAgLy8gaWYgbm90IHRoZXJlIHdpbGwgYmUgYSBkZWZpbml0aW9uIGVycm9yXG4gICAgZGVjbGFyYXRpb25zOiBbQXBwQ29tcG9uZW50XSxcbiAgICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7XG4gICAgXG59XG5cbi8qIGluIG1haW4udHMgKi9cbmltcG9ydCAnLi9zdHlsZXMvbWFpbi5jc3MnO1xuaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcblxucGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpO1xuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiIEluIG9yZGVyIGZvciB0aGlzIHRvIHdvcmssIHdlIG5lZWQgdG8gY3JlYXRlIGEgY29tcG9uZW50ISIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEzMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTMxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIvKiBpbiBhcHAuY29tcG9uZW50LnRzICovXG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICAvLyB3ZSBzaG91bGQgdGFyZ2V0IGFwcC1yb290IGluIHRoZSBjb21wb25lbnQgXG4gICAgLy8gYmVzdCBwcmFjdGlzZSB0byBwcmVmaXggY29tcG9uZW50cyB3aXRoIHNvbWV0aGluZyByZWxhdGVkIHRvIGFwcCBlZyBhcHAgb3IgYW5vdGhlciBuYW1lc3BhY2UgY29udmVudGlvblxuICAgIHNlbGVjdG9yOiAnYXBwLXJvb3QnLFxuICAgIHRlbXBsYXRlOiBgPGgyPkhlbGxvIFdvcmxkITwvaDI+YCxcbiAgICBzdHlsZTogW1xuICAgICAgICBgXG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgICB9XG4gICAgICAgIGBcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gICAgXG59XG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0aGUtYW5hdG9teS1vZi10aGUtY29tcG9uZW50IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVGhlIEFuYXRvbXkgb2YgdGhlIENvbXBvbmVudCIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiSW4gQW5ndWxhciwgYSBDb21wb25lbnQgPSBUZW1wbGF0ZSArIENsYXNzICsgRGVjb3JhdG9yLiIpLCBtZHgoInVsIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGVtcGxhdGU6IFZpZXcgb3IgdXNlciBpbnRlcmZhY2UgZm9yIGEgY29tcG9uZW50IiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkNsYXNzOiBDb2RlIHRoYXQgYnJpbmdzIHRlbXBsYXRlIHRvIGxpZmUgIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTYxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkRlY29yYXRvcjogTWV0YWRhdGEgdGhhdCB3aXJlcyB1cCB0aGUgY2xhc3MgdG8gdGhlIHRlbXBsYXRlLCBjb21wbGV0aW5nIHRoZSBjb21wb25lbnQgIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhpcyB3aWxsIGNvdmVyIGVhY2ggc2VjdGlvbi4iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInRoZS1jb21wb25lbnQtZGVjb3JhdG9yIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVGhlIEBDb21wb25lbnQgZGVjb3JhdG9yIiksIG1keCgidWwiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJsaSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAic2VsZWN0b3IiKSwgIjogbmFtZSBmb3IgdGhlIGNvbXBvbmVudCBIVE1MIHRhZyIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJsaSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAidGVtcGxhdGUiKSwgIjogQmFzZSBodG1sICIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJsaSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAic3R5bGVzIiksICI6IHlvdSBjYW4gYWxzbyBkbyB0aGlzIHdpdGggYSBmaWxlIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiR2VuZXJhbCBhbGwgZmlsZXMgKGluY2x1ZGluZyB0aGUgc3R5bGluZykgd2lsbCBiZSBwbGFjZWQgaW4gdGhlIHNhbWUgcGxhY2UgYXMgdGhlIGNvbXBvbmVudC4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gZXhhbXBsZSBjb21wb25lbnQgZmlsZSBcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLXJvb3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnYXBwLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnYXBwLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgIGV4YW1wbGU6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXhhbXBsZSA9IFtcIkhpXCIsIFwiaG9cIl07XG4gICAgfVxufVxuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZGF0YS1iaW5kaW5nIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE5MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRGF0YSBCaW5kaW5nIiksIG1keCgib2wiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxOTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE5NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJDbGFzcyB0byBUZW1wbGF0ZSAiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxOTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGVtcGxhdGUgdG8gQ2xhc3MiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxOTgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiKFR3by13YXkpIEJldHdlZW4gQ2xhc3MgYW5kIFRlbXBsYXRlIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICIxIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiPGgxPnt7IGV4cCB9fTwvaDE+IiksICIgdmlldyB3aWxsIHVwZGF0ZSB0byBjaGFuZ2VzIHRvIHRoZSBleHByZXNzaW9uLlxuIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIjxpbnB1dCBbdGFyZ2V0XT1cImV4cHJlc3Npb25cIiAvPiIpLCAiIGlzIGFub3RoZXIgZm9ybSBvZiBiaW5kaW5nIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIjIiKSwgIlxuIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjA0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIjxidXR0b24gKGV2ZW50KT1cImV4cHJlc3Npb25cIj48L2J1dHRvbj4iKSwgIiBmb3IgZXZlbnQgbGlzdGVuaW5nIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjA1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIjMiKSwgIlxuIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjA2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIjxpbnB1dCBbKHRhcmdldCldPVwiZXhwcmVzc2lvblwiIC8+IiksICIgLSB0YWtlcyBpbnB1dCBhbmQgc2VuZHMgb3V0cHV0IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJHaXZlbiB0aGUgZXhhbXBsZSBvZiAyIGFib3ZlLi4uIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjA4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIGZvciB0aGUgZXZlbnQgaGFuZGxlciBcblxuLi4uXG5leHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICBlbW9qaXMgPSBbJycsICcnLCAnJ107ICAvLyBhcnJheSBvZiBlbW9qaXNcbiAgICBhY3RpdmVFbW9qaTogc3RyaW5nO1xuXG4gICAgY2hhbmdlRW1vamkoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlRW1vamkgPSB0aGlzLmVtb2ppW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuZW1vamkubGVuZ3RoKV1cbiAgICB9XG59ICAgXG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJuZXN0aW5nLWNvbXBvbmVudHMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjIyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJOZXN0aW5nIENvbXBvbmVudHMiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlR3byBuZXcgY29tcG9uZW50czogQSBsaXN0IGFuZCBhIGNvbXBvbmVudCB3aXRoIHRoYXQgbGlzdC4gIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkVudHJ5IiksICIgYW5kICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFbnRyeS1saXN0IiksICIuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgic3Ryb25nIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImVudHJ5LWxpc3QiKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJBZnRlciBjcmVhdGlvbiBvZiB0aGlzIGNvbXBvbmVudCwgaXQgc2hvdWxkIGJlIGltcG9ydGVkIHRvICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJhcHAubW9kdWxlLnRzIiksICIgYW5kIGFkZGVkIHRvIHRoZSBkZWNsYXJhdGlvbnMgcHJvcGVydHkuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJCZWNhdXNlIHRoZXJlIHdpbGwgcHJvYmFibHkgYmUgbWFueSBjb21wb25lbnRzLCB3ZSB3aWxsIGNyZWF0ZSBhIGJhcnJlbCB0byB3b3JrIGFzIHRoZSBtaWRkbGUgbWFuLiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIvLyBpbmRleC50c1xuXG5leHBvcnQgKiBmcm9tICcuL2VudHJ5LWxpc3QvZW50cnktbGlzdC5jb21wb25lbnQnXG4iKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIzNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOb3cgdGhpcyBlbnRpcmUgZm9sZGVyIGNhbiBqdXN0IGJlIGltcG9ydGVkIHRvIHRoZSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMzUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiYXBwLm1vZHVsZS50cyIpLCAiIGZpbGUuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjM2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtamF2YXNjcmlwdCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMzYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIGVudHJ5LWxpc3QgdHMgXG5pbXBvcnQgeyBDb21wb25lbnRzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLWVudHJ5LWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnZW50cnktbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ2VudHJ5LWxpc3QuY29tcG9uZW50LmNzcyddIFxufSlcblxuZXhwb3J0IGNsYXNzIEVudHJ5TGlzdENvbXBvbmVudCB7XG4gICAgXG59XG5cbi8vIGluIGFwcC5jb21wb25lbnQuaHRtbCBcbjxhcHAtZW50cnktbGlzdD48L2FwcC1lbnRyeS1saXN0PlxuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNTQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInN0cm9uZyIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI1NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJlbnRyeSIpKSwgbWR4KCJ1bCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI1NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjU2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImNyZWF0ZSB0aGUgdXN1YWwgZmlsZXMiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiYWRkIGluIHRoZSBpbXBvcnQgZnJvbSB0aGUgYmFycmVsIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjU4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFMV0FZUyBBREQgQ0hJTEQgQ09NUE9ORU5UUyBGSVJTVCIpKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI2MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gZW50cnktbGlzdCB0cyBcbmltcG9ydCB7IENvbXBvbmVudHMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhcHAtZW50cnknLFxuICAgIHRlbXBsYXRlVXJsOiAnZW50cnkuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWydlbnRyeS5jb21wb25lbnQuY3NzJ10gIFxufSlcblxuZXhwb3J0IGNsYXNzIEVudHJ5Q29tcG9uZW50IHtcbiAgICBcbn1cbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjc1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIldoYXQgd2UgY2FuIG5vdyBkbyBpbiB0aGUgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjc1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImVudHJ5LWxpc3QuY29tcG9uZW50Lmh0bWwiKSwgIiwgd2UgY2FuIG5vdyBhZGQgaW4gdGhlIGNoaWxkcmVuLiIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAic3RydWN0dXJhbC1kaXJlY3RpdmVzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiU3RydWN0dXJhbCBEaXJlY3RpdmVzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJEaXJlY3RpdmVzIGxldCB5b3UuLi4iKSwgbWR4KCJ1bCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI4MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjgxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkNvbnRyb2wgVmlzaWJpbGl0eSAiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyODIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiQXBwbHkgU3R5bGluZyIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI4MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJMb29wIG92ZXIgaXRlbXMiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJ1bCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyODQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRXh0ZW5kIGFwcCB3aXRoIGN1c3RvbSBzY3JpcHRzIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyODYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhlcmUgYXJlIHRoaW5ncyBzdWNoIGFzICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI4NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXMiKSwgIiwgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjg2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImF0dHJpYnV0ZSBkaXJlY3RpdmVzIiksICIuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjg3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHt9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyODcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIGV4YW1wbGUgZm9yIGEgY2xpY2sgYWN0aW9uXG4vLyBoZXJlIHdlIGNhbiBhZGQgc3R5bGVzIGZvciBsaWtlZCBnaXZlIHRvZ2dsZWQgY2xhc3MgKGF0dHJpYnV0ZSlcbjxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGV2ZW50KT1cImlzTGlrZWQgPSAhaXNMaWtlZFwiIFtuZ0NsYXNzXT1cIntsaWtlZDogaXNMaWtlZH1cIj5TaG93IGlmIHRydWU8L2J1dHRvbj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAoZXZlbnQpPVwic2hvd0NvbW1lbnRzID0gIXNob3dDb21tZW50c1wiPkNvbW1lbnRzICh7e2NvbW1lbnRzLmxlbmd0aH19KTwvYnV0dG9uPlxuPC9kaXY+XG5cbi8vICpuZ0ZvciB0byBpdGVyYXRlIChzdHJ1Y3R1cmFsKVxuLy8gdXNpbmcgQW5ndWxhcnMgdGVtcGxhdGUgZW5naW5lXG48ZGl2IGNsYXNzPVwiY29tbWVudHNcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29tbWVudFwiICpuZ0Zvcj1cImxldCBjb21tZW50IG9mIGNvbW1lbnRzXCI+XG4gICAgICAgIDxwPnt7Y29tbWVudC5jb21tZW50fX08c3Ryb25nPnt7Y29tbWVudC5uYW1lfX08L3N0cm9uZz48L3A+XG4gICAgPC9kaXY+XG48L2Rpdj5cbiIpKSk7Cn0KCmlmICh0eXBlb2YgTURYQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgTURYQ29udGVudCAmJiBNRFhDb250ZW50ID09PSBPYmplY3QoTURYQ29udGVudCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTURYQ29udGVudCIsCiAgICAgIGZpbGVuYW1lOiAibWFudWFsL0FuZ3VsYXIvQW5ndWxhcjItQmFzaWNzLm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0FuZ3VsYXIvQW5ndWxhcjItQmFzaWNzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobGF5b3V0UHJvcHMsICJsYXlvdXRQcm9wcyIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0FuZ3VsYXIvQW5ndWxhcjItQmFzaWNzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYTGF5b3V0LCAiTURYTGF5b3V0IiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvQW5ndWxhci9Bbmd1bGFyMi1CYXNpY3MubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0FuZ3VsYXIvQW5ndWxhcjItQmFzaWNzLm1kIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Angular/Angular2-Basics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FAJK,EAKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FADF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCALF,CARK,EAeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAfK,EAgBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAhBK,EAmBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAH,CAnBK,EAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAwC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAxC,eADF,CADF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HADF,CAJF,EAQE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB,8EADF,CARF,EAWE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnB,uCADF,CAXF,EAcE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB,wDACJ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADI,sCADF,CAdF,CApBK,EAuCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnB,QAA+E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/E,UAA6I;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA7I,oBAvCK,EAwCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAxCK,EA2CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAqD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArD,6CA3CK,EA4CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DA5CK,EA6CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,kHA7CK,EA8CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA9CK,EA+CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wWAAL,CA/CK,EAqEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCArEK,EAwEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA7B,sBAAuG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvG,uDAxEK,EAyEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAc;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAd,cAA6E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA7E,yBAzEK,EA0EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0kCAAL,CA1EK,EA8GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEA9GK,EA+GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,idAAL,CA/GK,EAsIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAtIK,EAyIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAzIK,EA0IL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAHF,CA1IK,EA+IL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA/IK,EAgJL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAhJK,EAmJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,sCADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,iBAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB,uCAHF,CAnJK,EAwJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAxJK,EAyJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gVAAL,CAzJK,EA4KL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA5KK,EA+KL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAHF,CA/KK,EAoLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,CApLK,EAqLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAH,uDACF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADE,gCArLK,EAuLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,QACF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADE,yBAvLK,EAyLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,QACF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADE,oCAzLK,EA2LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCA3LK,EA4LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4QAAL,CA5LK,EA0ML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA1MK,EA6ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAAkE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAlE,WAA4H;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5H,MA7MK,EA8ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,CA9MK,EA+ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAAkE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAlE,6CA/MK,EAgNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAhNK,EAiNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAAL,CAjNK,EAuNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAA0D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA1D,WAvNK,EAwNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yUAAL,CAxNK,EA0OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAH,CA1OK,EA2OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAHF,CA3OK,EAgPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uPAAL,CAhPK,EA+PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAiC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAjC,sCA/PK,EAgQL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAhQK,EAmQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnQK,EAoQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAJF,CApQK,EA0QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAgC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAhC,QAAuG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAvG,MA1QK,EA2QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,umBAAL,CA3QK,CAAP;AA2RD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA1SMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"angular-2-basics\"\n    }}>{`Angular 2 Basics`}</h1>\n    <p>{`You can not just use Angular for web apps, but also iOS and Java using Native kit.`}</p>\n    <h2 {...{\n      \"id\": \"why-angular\"\n    }}>{`Why Angular?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`it's Modular\n- in previous versions, you needed the entire Angular framework loaded`}</li>\n      <li parentName=\"ul\">{`uses TypeScript, it uses static typing`}</li>\n      <li parentName=\"ul\">{`Google has hundreds of internal applications using Angular `}</li>\n      <li parentName=\"ul\">{`large community of developers `}</li>\n    </ul>\n    <p>{`Angular JS refers to version 1, whereas Angular refers to version 2.`}</p>\n    <h2 {...{\n      \"id\": \"the-parts-and-pieces-of-an-angular-application\"\n    }}>{`The Parts and Pieces of an Angular Application`}</h2>\n    <p><strong parentName=\"p\">{`How does it work?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`App requires one `}<inlineCode parentName=\"p\">{`root`}</inlineCode>{` component`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The app requires services, components and 3rd party modules\n- Services can be internal or part of 3rd party modules`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Services`}</inlineCode>{`: used to perform things like long running calcs or running web requests.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Components`}</inlineCode>{`: Broken down components/elements `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`NgModule`}</inlineCode>{`: This is like a container for the application\n- `}<inlineCode parentName=\"p\">{`Ng`}</inlineCode>{` is the namespace Angular adopted`}</p>\n      </li>\n    </ul>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`Typescript`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Javascript`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Dart`}</inlineCode>{` with Angular2.`}</p>\n    <h2 {...{\n      \"id\": \"typescript\"\n    }}>{`Typescript`}</h2>\n    <p>{`Angular is the first large framework to adopt `}<inlineCode parentName=\"p\">{`Typescript`}</inlineCode>{`. The idea is to keep you in the editor.`}</p>\n    <p>{`We can use Typescript to help enforce static typing.`}</p>\n    <p><inlineCode parentName=\"p\">{`Intellisense`}</inlineCode>{` is also used as helping autocompletion intelligence when coding and certain styles of coding allow for this.`}</p>\n    <p>{`Eg. code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example 1 \n\nclass Greeter{\n    greet(name: string) {\n        console.log(name);\n    }\n}\n\nconst greeter = new Greeter();\n\ngreeter.greet('Jim');\n\n// example 2\n\nfunction rollCall(students: any[], max?: number) {\n    max = max || students.length;\n    const attendance = students.slice(undefined, max);\n    console.log(attendence);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-first-angular-application\"\n    }}>{`The First Angular Application`}</h2>\n    <p>{`As you build out your `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` file you set a `}<inlineCode parentName=\"p\">{`<app-root>`}</inlineCode>{` component as the target for Angular2 entry point.`}</p>\n    <p>{`Within `}<inlineCode parentName=\"p\">{`src/app`}</inlineCode>{` create `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` as the root module.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/* in app.modules.ts */\n\n// note the @ is to do with npm supporting namespace modules\n// this allows code to be shared between packages \nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n// create the AppModule \n// export for use in main.ts \n// add the decorator to post-process it\n// the decorator is used by angular to compose the app \n// in the most efficient way possible\n@NgModule({\n    // using BrowserModule lets Angular know this is \n    // for web use\n    imports: [BrowserModule],\n    // for the target component \n    // before using it the first time - declare we are using it\n    // if not there will be a definition error\n    declarations: [AppComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n    \n}\n\n/* in main.ts */\nimport './styles/main.css';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n`}</code></pre>\n    <p>{` In order for this to work, we need to create a component!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/* in app.component.ts */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    // we should target app-root in the component \n    // best practise to prefix components with something related to app eg app or another namespace convention\n    selector: 'app-root',\n    template: \\`<h2>Hello World!</h2>\\`,\n    style: [\n        \\`\n        h2 {\n            color: blue;\n        }\n        \\`\n    ]\n})\nexport class AppComponent {\n    \n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-anatomy-of-the-component\"\n    }}>{`The Anatomy of the Component`}</h2>\n    <p>{`In Angular, a Component = Template + Class + Decorator.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Template: View or user interface for a component`}</li>\n      <li parentName=\"ul\">{`Class: Code that brings template to life `}</li>\n      <li parentName=\"ul\">{`Decorator: Metadata that wires up the class to the template, completing the component `}</li>\n    </ul>\n    <p>{`This will cover each section.`}</p>\n    <h2 {...{\n      \"id\": \"the-component-decorator\"\n    }}>{`The @Component decorator`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`selector`}</inlineCode>{`: name for the component HTML tag`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`template`}</inlineCode>{`: Base html `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`styles`}</inlineCode>{`: you can also do this with a file`}</li>\n    </ul>\n    <p>{`General all files (including the styling) will be placed in the same place as the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example component file \n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css']\n})\nexport class AppComponent {\n    example: string[];\n\n    constructor() {\n        this.example = [\"Hi\", \"ho\"];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"data-binding\"\n    }}>{`Data Binding`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Class to Template `}</li>\n      <li parentName=\"ol\">{`Template to Class`}</li>\n      <li parentName=\"ol\">{`(Two-way) Between Class and Template`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`1`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`<h1>{{ exp }}</h1>`}</inlineCode>{` view will update to changes to the expression.\n`}<inlineCode parentName=\"p\">{`<input [target]=\"expression\" />`}</inlineCode>{` is another form of binding`}</p>\n    <p><strong parentName=\"p\">{`2`}</strong>{`\n`}<inlineCode parentName=\"p\">{`<button (event)=\"expression\"></button>`}</inlineCode>{` for event listening`}</p>\n    <p><strong parentName=\"p\">{`3`}</strong>{`\n`}<inlineCode parentName=\"p\">{`<input [(target)]=\"expression\" />`}</inlineCode>{` - takes input and sends output`}</p>\n    <p>{`Given the example of 2 above...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// for the event handler \n\n...\nexport class AppComponent {\n    emojis = ['', '', ''];  // array of emojis\n    activeEmoji: string;\n\n    changeEmoji() {\n        this.activeEmoji = this.emoji[Math.floor(Math.random() * this.emoji.length)]\n    }\n}   \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nesting-components\"\n    }}>{`Nesting Components`}</h2>\n    <p>{`Two new components: A list and a component with that list. `}<inlineCode parentName=\"p\">{`Entry`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Entry-list`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`entry-list`}</strong></p>\n    <p>{`After creation of this component, it should be imported to `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` and added to the declarations property.`}</p>\n    <p>{`Because there will probably be many components, we will create a barrel to work as the middle man.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// index.ts\n\nexport * from './entry-list/entry-list.component'\n`}</code></pre>\n    <p>{`Now this entire folder can just be imported to the `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// entry-list ts \nimport { Components } from '@angular/core';\n\n@Component({\n    selector: 'app-entry-list',\n    templateUrl: 'entry-list.component.html',\n    styleUrls: ['entry-list.component.css'] \n})\n\nexport class EntryListComponent {\n    \n}\n\n// in app.component.html \n<app-entry-list></app-entry-list>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`entry`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`create the usual files`}</li>\n      <li parentName=\"ul\">{`add in the import from the barrel`}</li>\n      <li parentName=\"ul\">{`ALWAYS ADD CHILD COMPONENTS FIRST`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// entry-list ts \nimport { Components } from '@angular/core';\n\n@Component({\n    selector: 'app-entry',\n    templateUrl: 'entry.component.html',\n    styleUrls: ['entry.component.css']  \n})\n\nexport class EntryComponent {\n    \n}\n`}</code></pre>\n    <p>{`What we can now do in the `}<inlineCode parentName=\"p\">{`entry-list.component.html`}</inlineCode>{`, we can now add in the children.`}</p>\n    <h2 {...{\n      \"id\": \"structural-directives\"\n    }}>{`Structural Directives`}</h2>\n    <p>{`Directives let you...`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Control Visibility `}</li>\n      <li parentName=\"ul\">{`Apply Styling`}</li>\n      <li parentName=\"ul\">{`Loop over items`}</li>\n      <li parentName=\"ul\">{`Extend app with custom scripts`}</li>\n    </ul>\n    <p>{`There are things such as `}<inlineCode parentName=\"p\">{`structural directives`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attribute directives`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// example for a click action\n// here we can add styles for liked give toggled class (attribute)\n<div class=\"actions\">\n    <button type=\"button\" (event)=\"isLiked = !isLiked\" [ngClass]=\"{liked: isLiked}\">Show if true</button>\n    <button type=\"button\" (event)=\"showComments = !showComments\">Comments ({{comments.length}})</button>\n</div>\n\n// *ngFor to iterate (structural)\n// using Angulars template engine\n<div class=\"comments\">\n    <div class=\"comment\" *ngFor=\"let comment of comments\">\n        <p>{{comment.comment}}<strong>{{comment.name}}</strong></p>\n    </div>\n</div>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}