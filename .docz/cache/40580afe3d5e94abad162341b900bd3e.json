{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Extensions.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Extensions.md","mtime":1579078174073},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Extensions.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"swift-3-extensions\"\n    }}>{`Swift 3 Extensions`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-extensions\"\n        }}>{`Swift 3 Extensions`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#extensions\"\n            }}>{`Extensions`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----computed-properties\"\n                }}>{`---- Computed Properties`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----mutating-instance-methods\"\n                }}>{`---- Mutating Instance Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----subscripts\"\n                }}>{`---- Subscripts`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----nested-types\"\n                }}>{`---- Nested Types`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"extensions\"\n    }}>{`Extensions`}</h2>\n    <p>{`Extensions add new functionality to an existing class, structure, enumeration, or protocol type.`}</p>\n    <p>{`This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)`}</p>\n    <p>{`Extensions in Swift can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add computed instance properties and computed type properties`}</li>\n      <li parentName=\"ul\">{`Define instance methods and type methods`}</li>\n      <li parentName=\"ul\">{`Provide new initializers`}</li>\n      <li parentName=\"ul\">{`Define subscripts`}</li>\n      <li parentName=\"ul\">{`Define and use new nested types`}</li>\n      <li parentName=\"ul\">{`Make an existing type conform to a protocol`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`extension SomeType: SomeProtocol, AnotherProtocol {\n    // implementation of protocol requirements goes here\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"computed-properties\"\n    }}>{`Computed Properties`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n}\n\nlet defaultRect = Rect()\nlet memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))\n\nextension Rect {\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n\nlet centerRect = Rect(center: Point(x: 4.0, y: 4.0),\n                      size: Size(width: 3.0, height: 3.0))\n// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)\n`}</code></pre>\n    <p>{`Extensions can add new instance methods and type methods to existing types. The following example adds a new instance method called repetitions to the Int type:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    func repetitions(task: () -> Void) {\n        for _ in 0..<self {\n            task()\n        }\n    }\n}\n\n3.repetitions {\n    print(\"Hello!\")\n}\n// Hello!\n// Hello!\n// Hello!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-instance-methods\"\n    }}>{`Mutating Instance Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\nvar someInt = 3\nsomeInt.square()\n// someInt is now 9\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"subscripts\"\n    }}>{`Subscripts`}</h2>\n    <p>{`Extensions can add new subscripts to an existing type. This example adds an integer subscript to Swift’s built-in Int type. This subscript `}{`[n]`}{` returns the decimal digit n places in from the right of the number:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`123456789[0] returns 9\n123456789[1] returns 8\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    subscript(digitIndex: Int) -> Int {\n        var decimalBase = 1\n        for _ in 0..<digitIndex {\n            decimalBase *= 10\n        }\n        return (self / decimalBase) % 10\n    }\n}\n746381295[0]\n// returns 5\n746381295[1]\n// returns 9\n746381295[2]\n// returns 2\n746381295[8]\n// returns 7\n\n746381295[9]\n// returns 0, as if you had requested:\n0746381295[9]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nested-types\"\n    }}>{`Nested Types`}</h2>\n    <p>{`Extensions can add new nested types to existing classes, structures, and enumerations:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    enum Kind {\n        case negative, zero, positive\n    }\n    var kind: Kind {\n        switch self {\n        case 0:\n            return .zero\n        case let x where x > 0:\n            return .positive\n        default:\n            return .negative\n        }\n    }\n}\n\n// The nested enumeration can now be used with any Int value:\n\nfunc printIntegerKinds(_ numbers: [Int]) {\n    for number in numbers {\n        switch number.kind {\n        case .negative:\n            print(\"- \", terminator: \"\")\n        case .zero:\n            print(\"0 \", terminator: \"\")\n        case .positive:\n            print(\"+ \", terminator: \"\")\n        }\n    }\n    print(\"\")\n}\nprintIntegerKinds([3, 19, -27, 0, -6, 0, 7])\n// Prints \"+ + - 0 - 0 + \"\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}