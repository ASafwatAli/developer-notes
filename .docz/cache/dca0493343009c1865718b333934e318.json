{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/GraphQL/GraphQL.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/GraphQL/GraphQL.md","mtime":1562563032039},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/GraphQL/GraphQL.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"graphql---udemy\"\n    }}>{`GraphQL - Udemy`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#graphql---udemy\"\n        }}>{`GraphQL - Udemy`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#restful-router-primer\"\n            }}>{`RESTful Router Primer`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#the-shortcomings-of-restful-routing\"\n            }}>{`The shortcomings of RESTful routing`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#complex-example\"\n                }}>{`Complex example`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#starting-with-graphql\"\n            }}>{`Starting with GraphQL`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#working-with-graphql\"\n            }}>{`Working with GraphQL`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#registering-graphql-with-express\"\n            }}>{`Registering GraphQL with Express`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#graphql-schemas\"\n            }}>{`GraphQL Schemas`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#the-graphiql-tool\"\n            }}>{`The Graphiql tool`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#a-realistic-data-source\"\n            }}>{`A realistic data source`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#async-resolve-functions\"\n            }}>{`Async Resolve functions`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#how-do-we-hook-up-relating-a-company-to-a-user\"\n        }}>{`How do we hook up relating a company to a user?`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#updating-the-schema\"\n            }}>{`Updating the Schema`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#multiple-root-query-points\"\n            }}>{`Multiple Root Query Points`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#bidirectional-relations\"\n            }}>{`Bidirectional Relations`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#query-fragments\"\n            }}>{`Query Fragments`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#mutations\"\n            }}>{`Mutations`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#non-null-fields-and-mutations\"\n                }}>{`Non-null fields and Mutations`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#deleting-mutations\"\n                }}>{`Deleting mutations`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#editing-mutations\"\n                }}>{`Editing mutations`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#graphql-clients---apollo-vs-relay\"\n            }}>{`GraphQL Clients - Apollo vs Relay`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#apollo-server-vs-graphql-server\"\n                }}>{`Apollo Server vs GraphQL Server`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#setting-up-mongolab\"\n                }}>{`Setting up MongoLab`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#running-the-project\"\n                }}>{`Running the project`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#setting-up-apollo-client\"\n                }}>{`Setting up Apollo Client`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#gql-queries-in-react\"\n                }}>{`GQL Queries in React`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#bonding-queries-with-components\"\n                }}>{`Bonding queries with components`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#handling-pending-queries\"\n                }}>{`Handling Pending Queries`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#adding-react-router\"\n                }}>{`Adding React Router`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#mutations-in-react\"\n            }}>{`Mutations in React`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#query-params\"\n                }}>{`Query Params`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#passing-variables-in-react\"\n                }}>{`Passing variables in React`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#refetching-lists\"\n                }}>{`Refetching Lists`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#deletion-mutations\"\n                }}>{`Deletion mutations`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#fetching-a-particular-item\"\n                }}>{`Fetching a particular item`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#adding-fetchsong-to-the-component\"\n                }}>{`Adding fetchSong to the component`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#watching-for-data\"\n                }}>{`Watching for Data`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#more-action-submitting\"\n                }}>{`More action submitting`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#submitting-the-lyrics\"\n                }}>{`Submitting the lyrics`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#extending-queries\"\n                }}>{`Extending Queries`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#caching-with-dataidfromobject\"\n            }}>{`Caching with dataIdFromObject`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#more-on-mutations\"\n            }}>{`More on Mutations`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#optimistic-mutations\"\n                }}>{`Optimistic mutations`}</a></li>\n            </ul></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#authentication-applications---concerned-with-both-the-front-and-back-end\"\n        }}>{`Authentication Applications - concerned with both the front and back end`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#delegating-to-an-authentication-service\"\n        }}>{`Delegating to an Authentication Service`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#handling-errors-gracefully\"\n            }}>{`Handling Errors Gracefully`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#handling-errors-around-signup\"\n                }}>{`Handling Errors Around Signup`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"restful-router-primer\"\n    }}>{`RESTful Router Primer`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Given a collection of records on a server, there should be a uniform URL and HTTP request method used to utilize that collection of records.`}</li>\n    </ul>\n    <p>{`Having the ability to use CRUD requests to interact with data on the server.`}</p>\n    <p>{`There are more than just POST, GET, PUT and DELETE methods, but they are the most common.`}</p>\n    <p>{`So far, we have just looked at how to manipulate single records.`}</p>\n    <p>{`Handling users may look like `}<inlineCode parentName=\"p\">{`/users`}</inlineCode>{`, handling posts from that user may be `}<inlineCode parentName=\"p\">{`/users/23/posts`}</inlineCode>{` - get may then start deepening even further.`}</p>\n    <h2 {...{\n      \"id\": \"the-shortcomings-of-restful-routing\"\n    }}>{`The shortcomings of RESTful routing`}</h2>\n    <p>{`There are no hardcoded set of rules, just a set of conventions.`}</p>\n    <h3 {...{\n      \"id\": \"complex-example\"\n    }}>{`Complex example`}</h3>\n    <p>{`Think of a Facebook grid where the users are lined up with things like a user image, name, company name and position name. How might we store this data in the table?`}</p>\n    <p>{`Maybe create a User model? But also maybe no the ideal way to do it.`}</p>\n    <p>{`It would not be obvious to get all the company names back.`}</p>\n    <p>{`Maybe as an alternative schema, we would start build out a relational schema.`}</p>\n    <p>{`Given that, how do we now build out a URL RESTful route in order to get all of this data.`}</p>\n    <p>{`So far for `}<inlineCode parentName=\"p\">{`Current User > Friend > Company || Position`}</inlineCode>{`, we might be able to start with `}<inlineCode parentName=\"p\">{`/users/23/friends`}</inlineCode>{` - but then how do we get the company or the position for the deeper nested URL?`}</p>\n    <p>{`Maybe we could do `}<inlineCode parentName=\"p\">{`users/1/companies`}</inlineCode>{` which could get back the ID for the company, a similiar thing for the position etc. Alternatively, maybe `}<inlineCode parentName=\"p\">{`/users/23/friends/[companies|positions]`}</inlineCode>{`. The problem with these endpoints is that they are all very particular.`}</p>\n    <p>{`How about if we broke all conventions and went with `}<inlineCode parentName=\"p\">{`/users/23/friends_with_companies_and_positions`}</inlineCode>{`? We are definitely breaking conventions here.`}</p>\n    <p>{`Once we even do make the particular request, we might get a bunch of data from the tables that we don't even care about. This could be dramatically overserving or we may need to continually add or edit the RESTful end points.`}</p>\n    <h2 {...{\n      \"id\": \"starting-with-graphql\"\n    }}>{`Starting with GraphQL`}</h2>\n    <p>{`Now that we've seen the shortfalls of RESTful routing, let's see how GraphQL can help us out.`}</p>\n    <p>{`Let's now imagine we know all the data in this theoretical database. When we think about the `}<inlineCode parentName=\"p\">{`graph`}</inlineCode>{` that all the relations between all this data makes and the relations between them (nodes and edges), understanding how the data fits into the structure is key to understanding how GraphQL works. NOTE we can still use any database we want - use this as an understanding.`}</p>\n    <p>{`Now, if we take this graph and assign an ID to each of our users and organised the data, we can query it using GraphQL.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// start with user 23 - find all their friends\n// and all the companies that those friends work at\n\n1. Tell GraphQL find user 23\n2. Find all friends of user 23\n3. Tell GraphQL to find the company associated\n\n// the query that could do this\n// crawl along the query\nquery {\n    user(id: \"23\") {\n        friends {\n            company {\n                name\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"working-with-graphql\"\n    }}>{`Working with GraphQL`}</h2>\n    <p>{`How can we get this to come together?`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Make an Express server and hook it up to a datastore`}</li>\n      <li parentName=\"ol\">{`Hook it up to a prebuilt app called GraphiQL to make a couple of test queries`}</li>\n    </ol>\n    <p>{`For installation on the test `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` project, let's `}<inlineCode parentName=\"p\">{`yarn add express express-graphql graphql lodash`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"registering-graphql-with-express\"\n    }}>{`Registering GraphQL with Express`}</h2>\n    <p>{`Once you have set up a basic Express server, we can look at how to make GraphQL work with Express.`}</p>\n    <p>{`Process of the app`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`1. Web page makes a request to the Server\n2. Server decides whether it asks for Graphql\n    - if yes, GraphQL before 3\n    - if no, go to 3\n3. Respond\n`}</code></pre>\n    <p>{`GraphQL is just one little part of the Express app.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// hooking up GraphQL\nconst express = require('express');\nconst expressGraphQL = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', expressGraphQL({\n    graphiql: true\n}));\n\napp.listen(4000, () => {\n    console.log('listening on 4000');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"graphql-schemas\"\n    }}>{`GraphQL Schemas`}</h2>\n    <p>{`Using this middleware (using the \"use\" Express instance method), we passed in an options object. We need to also pass a schema along with these options.`}</p>\n    <p>{`We can do all this inside of a schema js file.`}</p>\n    <p>{`If we decide the `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` schema as such that is has an `}<inlineCode parentName=\"p\">{`id, firstName company_id, position_id and users [id]`}</inlineCode>{`, we can the picture our relational shema.`}</p>\n    <p><strong parentName=\"p\">{`Writing the schema`}</strong></p>\n    <p>{`Not the easiest the write, but as we continual to work with GraphQL, it'll start to become more and more of the same.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// schema.js\n\nconst graphql = require('graphql');\n\nconst {\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLInt\n} = graphql;\n\nconst UserType = new GraphQLObjectType({\n    name: 'User',\n    fields: {\n        id: { type: GraphQLString },\n        firstName: { type: GraphQLString },\n        age: { type: GraphQLInt }\n    }\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Root Query`}</strong></p>\n    <p>{`We need to pass something into the root query eg. \"Hey, give me the user with id 23\". We can think of it like an \"entry point\" into our data.`}</p>\n    <p>{`We can tell the 'root query' what we can ask about.`}</p>\n    <p>{`Below with the `}<inlineCode parentName=\"p\">{`resolve()`}</inlineCode>{` function, the parentValue is not used often, and the args are the args that we provide.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in GraphQL\nconst RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n\n            }\n        }\n    }\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Querying for data`}</strong></p>\n    <p>{`Instead of using a database, we're just going to hard code some users for now.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// top of the schema.js file\n\nconst users = [\n    { id: '23', firstName: 'Bill', age: 20 },\n    { id: '47', firstName: 'Sam', age: 21 }\n];\n\n// in the query\nconst RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                // use lodash to find\n                return _.find(users, { id: args.id });\n            }\n        }\n    }\n});\n`}</code></pre>\n    <p>{`To pass this schema back to express, we destructure import `}<inlineCode parentName=\"p\">{`GraphQLSchema`}</inlineCode>{` and at the bottom of the file we pass the root query.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`new GraphQLSchema({\n    query: RootQuery\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-graphiql-tool\"\n    }}>{`The Graphiql tool`}</h2>\n    <p>{`This tool has been given to us by the GraphQL team. On the left hand side, we can write a query and run it to see what happens.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`docs`}</inlineCode>{` auto generates docs for us to see the type of queries we can make.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// making the query\n// note: this is not JS\n{\n  user(id: \"23\") {\n    id,\n    firstName,\n    age\n  }\n}\n\n// what is returns\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"23\",\n      \"firstName\": \"Bill\",\n      \"age\": 20\n    }\n  }\n}\n`}</code></pre>\n    <p>{`So with the query, it heads to the `}<inlineCode parentName=\"p\">{`RootQueryType`}</inlineCode>{` and enter into the graph of data. Since we declared `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` on the query, it checks the `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` field in the RootQuery below.`}</p>\n    <p>{`With the args, we say that it expects an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` of type string of what we did, so what it then does with the lodash find method we added is that it looks within users for the id that matches the argument ID.`}</p>\n    <p>{`Lodash returns a raw JSON object directly since the return handles objects for us.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                // use lodash to find\n                return _.find(users, { id: args.id });\n            }\n        }\n    }\n});\n`}</code></pre>\n    <p>{`With the query, we can also now reduce and only call for the data that we want.`}</p>\n    <p>{`If we do not find an valid `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, we will get null back. If there is no arg to the query, we get an error where it expects the `}<inlineCode parentName=\"p\">{`name of an argument`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"a-realistic-data-source\"\n    }}>{`A realistic data source`}</h2>\n    <p>{`So we don't really want to use a static list of users - because that's not realistic. So let's use some different architectures that we can use to use GraphQL with.`}</p>\n    <p>{`We could the server which hosts GraphQL and then any database.`}</p>\n    <p>{`If it's any small sized project, we could use Express etc. With larger companies, you won't use a single monolithic store, but the same Express/GraphQL Server will touch bases with a variety of databases and can act as a proxy of sorts to go and collect this data from those different datasources.`}</p>\n    <p>{`What we can do is have an outside server to give us some data in our current approach.`}</p>\n    <p>{`That way, we will need to spin up a second server. We can use JSON server to act as another source of data.`}</p>\n    <p>{`For the outside API, we can use `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{`. Spin up a server create a `}<inlineCode parentName=\"p\">{`db.json`}</inlineCode>{` file in order to do so.`}</p>\n    <h2 {...{\n      \"id\": \"async-resolve-functions\"\n    }}>{`Async Resolve functions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios.get(\\`http://localhost:3000/users/\\${args.id}\\`)\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"how-do-we-hook-up-relating-a-company-to-a-user\"\n    }}>{`How do we hook up relating a company to a user?`}</h1>\n    <p>{`Given a schema of `}<inlineCode parentName=\"p\">{`id, name and description`}</inlineCode>{`, how can we relate a user and their company?`}</p>\n    <p>{`First with db.json, update the file to have companies.`}</p>\n    <p>{`Once we have...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"users\": [\n        { \"id\": \"23\", \"firstName\": \"Bill\", \"age\": 20, \"companyId\": \"1\" },\n        { \"id\": \"47\", \"firstName\": \"Sam\", \"age\": 21, \"companyId\": \"2\" },\n        { \"id\": \"41\", \"firstName\": \"Milly\", \"age\": 41, \"companyId\": \"2\" }\n    ],\n    \"companies\": [\n        { \"id\": \"1\", \"name\": \"Apple\", \"description\": \"iPhone\" },\n        { \"id\": \"2\", \"name\": \"Google\", \"description\": \"Search\" }\n    ]\n}\n`}</code></pre>\n    <p>{`We can now see the `}<inlineCode parentName=\"p\">{`/companies`}</inlineCode>{` url can give us a company. To get JSON server to show us who works where, `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` works the relationship out at `}<inlineCode parentName=\"p\">{`companies/1/users`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-schema\"\n    }}>{`Updating the Schema`}</h2>\n    <p>{`Now in the schema we can update to have the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CompanyType = new GraphQLObjectType({\n    name: 'Company',\n    fields: {\n        id: { type: GraphQLString },\n        name: { type: GraphQLString },\n        description: { type: GraphQLString }\n    }\n});\n\nconst UserType = new GraphQLObjectType({\n    name: 'User',\n    fields: {\n        id: { type: GraphQLString },\n        firstName: { type: GraphQLString },\n        age: { type: GraphQLInt },\n        // note: this is from the previously declared type\n        company: { type: CompanyType }\n    }\n});\n`}</code></pre>\n    <p>{`Why can we get away with saying a related `}<inlineCode parentName=\"p\">{`company`}</inlineCode>{` and not `}<inlineCode parentName=\"p\">{`companyId`}</inlineCode>{`. Where the difference is, the `}<inlineCode parentName=\"p\">{`resolve`}</inlineCode>{` function will help with the resolution.`}</p>\n    <h2 {...{\n      \"id\": \"multiple-root-query-points\"\n    }}>{`Multiple Root Query Points`}</h2>\n    <p>{`Currently, we cannot just find a company by itself. Only the user using the id.`}</p>\n    <p>{`We can adjust this with adding to the Root Query.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios\n                    .get(\\`http://localhost:3000/users/\\${args.id}\\`)\n                    .then((res) => res.data);\n            }\n        },\n        company: {\n            type: CompanyType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios\n                    .get(\\`http://localhost:3000/companies/\\${args.id}\\`)\n                    .then((res) => res.data);\n            }\n        }\n    }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bidirectional-relations\"\n    }}>{`Bidirectional Relations`}</h2>\n    <p>{`Given the one-to-many relationship we can find between companies and users, how can find the users that work for a company?`}</p>\n    <p>{`We can use a `}<inlineCode parentName=\"p\">{`GraphQLList`}</inlineCode>{` to return a list of different entities.`}</p>\n    <p>{`The circular reference order of operations issue requires a little work around. We can use a lexical arrow function to give lexical scope. Using this, it will ensure the entire file is executed beforehand.`}</p>\n    <p>{`The issue itself is more of closures and closure scopes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CompanyType = new GraphQLObjectType({\n    name: 'Company',\n    fields: () => ({\n        id: { type: GraphQLString },\n        name: { type: GraphQLString },\n        description: { type: GraphQLString },\n        users: {\n            // UserType may not yet be defined error may occur\n            // because of a circular reference\n            type: new GraphQLList(UserType),\n            resolve(parentValue, args) {\n                return axios\n                    .get(\n                        \\`http://localhost:3000/companies/\\${\n                            parentValue.id\n                        }/users\\`\n                    )\n                    .then((res) => res.data);\n            }\n        }\n    })\n});\n`}</code></pre>\n    <p>{`Now that we have circular relations, we can build back nested circular relations as we go.`}</p>\n    <h2 {...{\n      \"id\": \"query-fragments\"\n    }}>{`Query Fragments`}</h2>\n    <p>{`How does the syntax work and how can we expand upon it?`}</p>\n    <p>{`You could also add the `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` to a query to acknowledge`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`query findCompany {\n    company(id: \"2\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  }\n}\n`}</code></pre>\n    <p>{`With the Root Query, each field is like an optional query to make.`}</p>\n    <p>{`We can also ask for as many companies as we like, however we need to name the response so there are no JSON duplicate keys on the return:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  apple: company(id: \"1\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  },\n  google: company(id: \"2\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Query Fragments`}</strong></p>\n    <p>{`In the above, we list out the name, users etc twice.`}</p>\n    <p>{`A query fragment is a list of different properties we want to get back. These are seen a lot on the front end.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n    google: company(id: \"2\") {\n    ...companyDetails\n  },\n  apple: company(id: \"1\") {\n    ...companyDetails\n  }\n}\n\nfragment companyDetails on Company {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutations\"\n    }}>{`Mutations`}</h2>\n    <p>{`Now that we've set up the ability to read data, we haven't spent anything on modifying the datastore.`}</p>\n    <p>{`They're notorious for being a bit more challenging to work with.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` has support for updating records.`}</p>\n    <p>{`In order for updating, we create completely separate objects that we can manipulate in `}<inlineCode parentName=\"p\">{`schema.js`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {}\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"non-null-fields-and-mutations\"\n    }}>{`Non-null fields and Mutations`}</h3>\n    <p>{`Given our application at the moment, it probably makes sense that all of these users we add with this mutation have a `}<inlineCode parentName=\"p\">{`firstName`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`age`}</inlineCode>{`. We can use `}<inlineCode parentName=\"p\">{`GraphQLNonNull`}</inlineCode>{` as a wrapper object to ensure the value is non-null.`}</p>\n    <p>{`Make sure you import it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        }\n    }\n});\n`}</code></pre>\n    <p>{`As for using the mutation:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in graphiql\nmutation {\n    addUser(firstName: \"Stan\", age: \"26\") {\n        // we must ask for some property coming back\n        id,\n        firstName,\n        age\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"deleting-mutations\"\n    }}>{`Deleting mutations`}</h3>\n    <p>{`This will be different since you should take a shot.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        },\n        deleteUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            resolve(parentValue, { id }) {\n                return axios.delete(\\`http://localhost:3000/users/\\${id}\\`, { id })\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"editing-mutations\"\n    }}>{`Editing mutations`}</h3>\n    <p>{`Reminder: difference between a `}<inlineCode parentName=\"p\">{`put`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`patch`}</inlineCode>{` request.`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`put`}</inlineCode>{` request is used when we want to `}<strong parentName=\"p\">{`completely`}</strong>{` replace a record, whereas a `}<inlineCode parentName=\"p\">{`patch`}</inlineCode>{` request does not replace it completely, but forms the updates.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        },\n        deleteUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            resolve(parentValue, { id }) {\n                return axios.delete(\\`http://localhost:3000/users/\\${id}\\`, { id })\n                    .then(res => res.data);\n            }\n        },\n        editUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) } ,\n                firstName: { type: GraphQLString },\n                age: { type: GraphQLInt },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, args) {\n                return axios.patch(\\`http://localhost:3000/users/\\${args.id}\\`, args)\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</code></pre>\n    <p>{`As for the mutation itself for editing:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mutation {\n    editUser(id: \"23\", age: 10) {\n        id,\n        firstName,\n        age\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"graphql-clients---apollo-vs-relay\"\n    }}>{`GraphQL Clients - Apollo vs Relay`}</h2>\n    <p>{`So far we've limited everything to a client, but we haven't been able to put this data to the end user.`}</p>\n    <p>{`Let's take what we know and integrate it with a frontend framework.`}</p>\n    <p>{`In Graphiql, we can actually watch the `}<inlineCode parentName=\"p\">{`xhr`}</inlineCode>{` requests in the `}<inlineCode parentName=\"p\">{`Network`}</inlineCode>{` tab and can see everything that we get back etc. That way the data we get back it just the plain, raw data.`}</p>\n    <p>{`If we go down to request payload on the `}<inlineCode parentName=\"p\">{`Headers`}</inlineCode>{` tab, we can see the payload that we make. We can notice that even the query itself is the same as what we write in Graphiql.`}</p>\n    <p>{`The idea of having a front end app with a client is to do basically the same exact thing as we are currently seeing in the Graphiql client. The client itself should be that bonding layer.`}</p>\n    <p>{`With clients, there are basically three main ones we will discuss. `}<inlineCode parentName=\"p\">{`Lokka`}</inlineCode>{` being the simplest, `}<inlineCode parentName=\"p\">{`Apollo`}</inlineCode>{` built by the guys at Meteor JS - good balance between features and complexity. The downside of this is that they have huge experience with GraphQL clients. `}<inlineCode parentName=\"p\">{`Relay`}</inlineCode>{` is by far the most complex. `}<inlineCode parentName=\"p\">{`Relay`}</inlineCode>{` is officially used by the Facebook team. Things like mutations etc are 10x more difficult for mutations than what we've previously discussed. It makes sense for larger teams, although maybe not so much for smaller teams.`}</p>\n    <p>{`As of the current writing, it is at version one - they are in progress with version two.`}</p>\n    <p>{`In this course, the focus will be on `}<inlineCode parentName=\"p\">{`Apollo`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"apollo-server-vs-graphql-server\"\n    }}>{`Apollo Server vs GraphQL Server`}</h3>\n    <p>{`We are using GraphQL tech on both the frontend and the backend. There is an Apollo server you can make use of, but instead we will used `}<inlineCode parentName=\"p\">{`express-graphql`}</inlineCode>{`.`}</p>\n    <p>{`When is comes to the Apollo server \"schema\" set up, they split what we do in `}<inlineCode parentName=\"p\">{`GraphQL Express`}</inlineCode>{` into a `}<inlineCode parentName=\"p\">{`Types`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Resolves`}</inlineCode>{` file (for the server side).`}</p>\n    <p>{`The FOLLOWING section is about how to set up GraphQL on the client side before getting them to communicate.`}</p>\n    <p>{`This app will use the Mongo Lab custom URL.`}</p>\n    <h3 {...{\n      \"id\": \"setting-up-mongolab\"\n    }}>{`Setting up MongoLab`}</h3>\n    <p>{`Head onto MongoLab and then create a new free sandbox, then go find the address URI that we need from the info.`}</p>\n    <p>{`Ensure that you also add a `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` for the database.`}</p>\n    <h3 {...{\n      \"id\": \"running-the-project\"\n    }}>{`Running the project`}</h3>\n    <p>{`Start by adding a song using a `}<inlineCode parentName=\"p\">{`mutation`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mutation {\n    addSong(title:\"I want to know what love is\") {\n    id\n  }\n}\n\n// once we have the songId, add a lyric in\nmutation {\n    addLyricToSong(content:\"I want to know what loves is, I want you to show me!\", songId:\"5933a3ebcac9e6b57aad7f76\") {\n    id\n    title\n    lyrics {\n      id\n    }\n  }\n}\n\n// now we can query something!\nquery {\n    songs {\n    id,\n    title,\n    lyrics {\n      content\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-up-apollo-client\"\n    }}>{`Setting up Apollo Client`}</h3>\n    <p>{`In the front end, how do we wrap our `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{` application with helpers from the Apollo library?`}</p>\n    <p>{`The React app will have an Apollo Provider that talks back and forth with the Apollo Store. That in turn will talk to the GraphQL Server. The store will also `}<inlineCode parentName=\"p\">{`store`}</inlineCode>{` the data that comes back from the GraphQL Server.`}</p>\n    <p>{`The Apollo Store also doesn't care about the fact that we are using React. The Apollo Provider is what helps provide the data to the React application. Think of it as the `}<inlineCode parentName=\"p\">{`glue`}</inlineCode>{` layer.`}</p>\n    <p>{`For future projects, you will need to install `}<inlineCode parentName=\"p\">{`apollo-client`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`graphql-tag`}</inlineCode>{` and maybe `}<inlineCode parentName=\"p\">{`connect-mongo`}</inlineCode>{` if you are using a third party store. The following imports are required for the app.`}</p>\n    <p>{`In the code below, we have even passed an empty object to the ApolloClient - it can make assumptions. The store assumes that you are using `}<inlineCode parentName=\"p\">{`/graphql`}</inlineCode>{` route if you are passing in the object. If you deviate, you will need to start updating the config of this object.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import ApolloClient from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <div>Lyrical</div>\n        </ApolloProvider>\n    );\n};\n`}</code></pre>\n    <p>{`In opposition, `}<inlineCode parentName=\"p\">{`Relay`}</inlineCode>{` requires a bunch of configuration to start up and have a working provider.`}</p>\n    <p>{`We can create a basic `}<inlineCode parentName=\"p\">{`SongList`}</inlineCode>{` component.`}</p>\n    <h3 {...{\n      \"id\": \"gql-queries-in-react\"\n    }}>{`GQL Queries in React`}</h3>\n    <p>{`So the benefit of GraphQL again, you don't have to \"overfetch\".`}</p>\n    <p>{`GraphQL + Apollo take care of everything for us - we just need to bond the query and the component!`}</p>\n    <p>{`Once we have the query that we want, we can add the query into the component. That being said, queries are not valid JS. So what we will do is use `}<inlineCode parentName=\"p\">{`graphql-tag`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`gql`}</inlineCode>{` is a helper to help us write files.`}</p>\n    <p>{`Making a query will look like so...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const query = gql\\`\n    {\n        songs {\n            title\n        }\n    }\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bonding-queries-with-components\"\n    }}>{`Bonding queries with components`}</h3>\n    <p>{`In the component, `}<inlineCode parentName=\"p\">{`import { graphql } from 'react-apollo';`}</inlineCode>{`. After wrapping the export, we should have a component that may look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\n\nclass SongList extends Component {\n    render() {\n        return (\n            <div>\n                SongList\n            </div>\n        );\n    }\n}\n\nconst query = gql\\`\n    {\n        songs {\n            title\n        }\n    }\n\\`;\n\n// first parenthesis returns a function\n// that is immediately invocated again\nexport default graphql(query)(SongList);\n`}</code></pre>\n    <p>{`Now when the component is rendered, it will show up with no data until the query completes and then the data is resolved.`}</p>\n    <p>{`The data return is then kept within the component `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` field.`}</p>\n    <h3 {...{\n      \"id\": \"handling-pending-queries\"\n    }}>{`Handling Pending Queries`}</h3>\n    <p>{`The props handed in is `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` and we can access the return values from `}<inlineCode parentName=\"p\">{`this.props.data.[name]`}</inlineCode>{`.`}</p>\n    <p>{`We need to set some initial props value before we gets our GraphQL results back.`}</p>\n    <h3 {...{\n      \"id\": \"adding-react-router\"\n    }}>{`Adding React Router`}</h3>\n    <p>{`Note: ApolloProvider wraps the Router itself.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, hashHistory, IndexRoute } from 'react-router';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport SongList from './components/SongList';\nimport App from './components/App';\n\nconst client = new ApolloClient({});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router history={hashHistory}>\n                <Route path=\"/\" component={App}>\n                    <IndexRoute component={SongList} />\n                </Route>\n            </Router>\n        </ApolloProvider>\n    );\n};\n\nReactDOM.render(\n  <Root />,\n  document.querySelector('#root')\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutations-in-react\"\n    }}>{`Mutations in React`}</h2>\n    <p>{`When adding a track using a component, we want to use a form a submit action to post that data.`}</p>\n    <p>{`That being said, how can we create the mutation on the `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` event?`}</p>\n    <h3 {...{\n      \"id\": \"query-params\"\n    }}>{`Query Params`}</h3>\n    <p>{`In order to complete our `}<inlineCode parentName=\"p\">{`gql`}</inlineCode>{` mutation constant, we can make use of query variables.`}</p>\n    <p>{`A mutation that takes params can be like so:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mutation AddSong($title: String) {\n    addSong(title: $title) {\n        id\n        title\n    }\n}\n\n// in Graphql under query varibles, we can pass an object\n{\n    \"title\": \"Desperado\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"passing-variables-in-react\"\n    }}>{`Passing variables in React`}</h3>\n    <p>{`First, set the mutation.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const mutation = gql\\`\n    mutation addSong($title: String) {\n        addSong(title: $title) {\n            id,\n            title\n        }\n    }\n\\`;\n`}</code></pre>\n    <p>{`Second, we can use a GraphQL helper like `}<inlineCode parentName=\"p\">{`export default graphql(mutation)(SongCreate);`}</inlineCode>{` - however, when we wrap a mutation, it forms a mutate function as part of this.props under `}<inlineCode parentName=\"p\">{`mutate`}</inlineCode>{`. Now, for the `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` function we have:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`onSubmit(e) {\n    e.preventDefault();\n    console.log(this.props);\n    // point of time when we\n    // want to add a new song\n    this.props.mutate({\n        variables: {\n            title: this.state.title\n        }\n    });\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"refetching-lists\"\n    }}>{`Refetching Lists`}</h3>\n    <p>{`How do we get Apollo to refetch the query?`}</p>\n    <p>{`We can actually do it after the mutation. Using `}<inlineCode parentName=\"p\">{`this.props.mutate`}</inlineCode>{` takes variables but can also take `}<inlineCode parentName=\"p\">{`refetchQueries`}</inlineCode>{`.`}</p>\n    <p>{`In practice, we do not refetch queries. What we will do is pull out queries from the component files and import it from another queries file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`onSubmit(e) {\n        e.preventDefault();\n        console.log(this.props);\n        // point of time when we\n        // want to add a new song\n        this.props.mutate({\n            variables: {\n                title: this.state.title\n            },\n            // need to pass in the exact query\n            // can also pass variables: {} if we need them\n            refetchQueries: [{ query: fetchSongsQuery }]\n        }).then(() => hashHistory.push('/'));\n    }\n`}</code></pre>\n    <p>{`The GraphQL helper also knows not to rerun the same query twice too.`}</p>\n    <h3 {...{\n      \"id\": \"deletion-mutations\"\n    }}>{`Deletion mutations`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`mutation DeleteSong($id: ID) {\n    deleteSong(id: $id) {\n        id\n    }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`export default grahpql`}</inlineCode>{` can only take query at a time. So we need to create multiple instances of the `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` helper.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export default compose(\n    graphql(deleteSongQuery),\n    graphql(fetchSongsQuery)\n)(SongList);\n`}</code></pre>\n    <p>{`Setting this as our class allows for deletion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class SongList extends Component {\n    onSongDelete(id) {\n        // refetch will fetch any queries\n        // with this component\n        this.props\n            .mutate({ variables: { id } })\n            .then(() => this.props.data.refetch());\n    }\n\n    renderSongs() {\n        return this.props.data.songs.map(({ title, id }) => {\n            return (\n                <li key={id} className=\"collection-item\">\n                    {title}\n                    <i\n                        className=\"material-icons\"\n                        onClick={() => this.onSongDelete(id)}\n                    >\n                        delete\n                    </i>\n                </li>\n            );\n        });\n    }\n\n    render() {\n        console.log(this.props);\n        if (this.props.data.loading) {\n            return <div>Loading...</div>;\n        }\n        return <ul className=\"collection\">{this.renderSongs()}</ul>;\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Why `}<inlineCode parentName=\"strong\">{`refetch`}</inlineCode>{` vs `}<inlineCode parentName=\"strong\">{`refetchQueries`}</inlineCode>{`?`}</strong></p>\n    <p>{`Depends on how you're trying to update your query. If you refetch something not associated with the component, you would use refecthQueries. The `}<inlineCode parentName=\"p\">{`refetch`}</inlineCode>{` function would not have been available.`}</p>\n    <h3 {...{\n      \"id\": \"fetching-a-particular-item\"\n    }}>{`Fetching a particular item`}</h3>\n    <p>{`After creating a new song component, just in React Router and throw in the new route `}<inlineCode parentName=\"p\">{`songs/:id`}</inlineCode>{` - id being the wildcard.`}</p>\n    <p>{`Now in GraphiQL, just like mutations, we can make queries with query variables.`}</p>\n    <p>{`In a similar pattern:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`query SongQuery($id: ID!) {\n    song(id: $id) {\n        id\n        title\n  }\n}\n\n// query var\n{\n  \"id\": \"5933a3ebcac9e6b57aad7f76\"\n}\n\n// query js file\nimport gql from 'graphql-tag';\n\nexport default gql\\`\nquery FetchSong($id: ID!) {\n    song(id: $id) {\n    id\n    title\n  }\n}\n\\`;\n`}</code></pre>\n    <p>{`To get the access to React Router parameters, we can see how `}<inlineCode parentName=\"p\">{`React Router`}</inlineCode>{` wraps the entire app. If we `}<inlineCode parentName=\"p\">{`console.log(this.props)`}</inlineCode>{` and check `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{`, we will see that the params are in fact stored there.`}</p>\n    <h3 {...{\n      \"id\": \"adding-fetchsong-to-the-component\"\n    }}>{`Adding fetchSong to the component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport FetchSong from '../queries/fetchSong';\n\nclass SongDetail extends Component {\n    render() {\n        console.log(this.props);\n        return (\n            <div>\n                <h3>SongDetail!</h3>\n            </div>\n        );\n    }\n}\n\nexport default graphql(FetchSong)(SongDetail);\n`}</code></pre>\n    <p>{`So one gotcha we run into with the `}<inlineCode parentName=\"p\">{`graphql()()`}</inlineCode>{` wrapper is that we need an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`.`}</p>\n    <p>{`The problem is that GraphQL makes fetch queries automatically, as opposed to mutations.`}</p>\n    <p>{`With GraphQL React-Apollo, we can do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export default graphql(FetchSong, {\n    options: (props) => { return { variables: { id: props.params.id } } }\n})(SongDetail);\n`}</code></pre>\n    <p>{`This will allow us to map `}<inlineCode parentName=\"p\">{`react-router`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"watching-for-data\"\n    }}>{`Watching for Data`}</h3>\n    <p>{`First, handle if no song yet exists.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { Link } from 'react-router';\nimport FetchSong from '../queries/fetchSong';\n\nclass SongDetail extends Component {\n    render() {\n        console.log(this.props);\n        const { song } = this.props.data;\n        if (!song) {\n            return <div />;\n        }\n\n        return (\n            <div>\n                <Link to=\"/\">Back</Link>\n                <h3>{song.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default graphql(FetchSong, {\n    options: (props) => {\n        return { variables: { id: props.params.id } };\n    }\n})(SongDetail);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"more-action-submitting\"\n    }}>{`More action submitting`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nclass LyricCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { content: '' };\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form action=\"\">\n                <label>Add a lyric</label>\n                <input\n                    value={this.state.content}\n                    onChange={(event) =>\n                        this.setState({ content: event.target.value })\n                    }\n                    // onSubmit={ (event) => this.onSubmit(event) }\n                />\n            </form>\n        );\n    }\n}\n\nexport default LyricCreate;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"submitting-the-lyrics\"\n    }}>{`Submitting the lyrics`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import gql from 'graphql-tag';\n\nexport default gql\\`\n    mutation AddLyricToSong($content: String!, $songId: ID!) {\n        addLyricToSong(content: $content, songId: $songId) {\n            id\n            title\n            lyrics {\n                content\n            }\n        }\n    }\n\\`;\n`}</code></pre>\n    <p>{`Using the mutations, we cannot just do this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`onSubmit(event) {\n    event.preventDefault();\n    this.props.mutate({\n        variables: {\n            content: this.state.content,\n            // contrary to what you may expect\n            songId: this.props.params.id\n        }\n    });\n}\n`}</code></pre>\n    <p>{`We in fact need to pass the ID down as a prop from the other component.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`onSubmit(event) {\n    event.preventDefault();\n    this.props.mutate({\n        variables: {\n            content: this.state.content,\n            songId: this.props.songId\n        }\n    });\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"extending-queries\"\n    }}>{`Extending Queries`}</h3>\n    <p>{`How do we extend queries for something like a Lyric List? What we can do is enhance the `}<inlineCode parentName=\"p\">{`SongDetail`}</inlineCode>{` query to grab all the lyrics associated with it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`query FetchSong($id: ID!) {\n    song(id: $id) {\n        id\n        title\n        lyrics {\n            id\n            content\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Now we can simply pass down the lyric value.`}</p>\n    <p>{`Given that the refresh also again won't automatically happen, we can do something similar to what we did with `}<inlineCode parentName=\"p\">{`refetchQueries`}</inlineCode>{`, but this time let's try something different.`}</p>\n    <p><strong parentName=\"p\">{`How it all works`}</strong></p>\n    <p>{`Each time you make a response using the `}<inlineCode parentName=\"p\">{`apollo`}</inlineCode>{` client, `}<inlineCode parentName=\"p\">{`apollo`}</inlineCode>{` returns a `}<inlineCode parentName=\"p\">{`typeName`}</inlineCode>{` in the response.`}</p>\n    <p>{`However, Apollo does not no what data is set within each of these data stores. It doesn't know the data and what attributes that it has. That's where the root of the current problem is.`}</p>\n    <p>{`To fix this issue, we can use a piece of Apollo Client config. What we can do is \"associate\" an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` with each data state. That way, it can `}<inlineCode parentName=\"p\">{`bond`}</inlineCode>{` with React just that little bit better.`}</p>\n    <p>{`Now that `}<inlineCode parentName=\"p\">{`Apollo`}</inlineCode>{` can see that the song with an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` has been updated, Apollo can then itself tell React to update its components.`}</p>\n    <h2 {...{\n      \"id\": \"caching-with-dataidfromobject\"\n    }}>{`Caching with dataIdFromObject`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const client = new ApolloClient({\n    dataIdFromObject: (obj) => obj.id\n});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router history={hashHistory}>\n                <Route path=\"/\" component={App}>\n                    <IndexRoute component={SongList} />\n                    <Route path=\"songs/new\" component={SongCreate} />\n                    <Route path=\"songs/:id\" component={SongDetail} />\n                </Route>\n            </Router>\n        </ApolloProvider>\n    );\n};\nReactDOM.render(<Root />, document.querySelector('#root'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"more-on-mutations\"\n    }}>{`More on Mutations`}</h2>\n    <p>{`Liking a lyric`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const mutation = gql\\`\n    mutation LikeLyric($id: ID) {\n        likeLyric(id: $id) {\n            id\n            likes\n        }\n    }\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"optimistic-mutations\"\n    }}>{`Optimistic mutations`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`onLike(id, likes) {\n    this.props.mutate({\n        variables: { id },\n        optimisticResponse: {\n            _typename: 'Mutation',\n            likeLyric: {\n                id: id,\n                _typename: 'LyricType',\n                likes: likes + 1\n            }\n        }\n    });\n}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"authentication-applications---concerned-with-both-the-front-and-back-end\"\n    }}>{`Authentication Applications - concerned with both the front and back end`}</h1>\n    <p><strong parentName=\"p\">{`Challenges`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Challenge`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Solution`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Multiple pages`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React Router`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Data store`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`MongoDB`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Authentication`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PassportJS`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`But Passport isn't designed with GraphQL in mind.`}</p>\n    <p><strong parentName=\"p\">{`Auth with GraphQL`}</strong></p>\n    <p>{`There are two approaches that we can take to auth with GraphQL and Passport.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Decoupled approach`}</li>\n      <li parentName=\"ol\">{`Coupled approach`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Coupled vs Decoupled`}</strong></p>\n    <p>{`If we do not use a changed `}<inlineCode parentName=\"p\">{`mutation`}</inlineCode>{`, we are using the `}<inlineCode parentName=\"p\">{`decoupled approach`}</inlineCode>{`. In the `}<inlineCode parentName=\"p\">{`coupled`}</inlineCode>{` approach, we have GraphQL work as the `}<inlineCode parentName=\"p\">{`middleman`}</inlineCode>{` between the application and `}<inlineCode parentName=\"p\">{`passport`}</inlineCode>{`. It's about whether or not use GraphQL to process the request or not.`}</p>\n    <p>{`So, which one? Why would we ever have `}<inlineCode parentName=\"p\">{`Passport`}</inlineCode>{` involved with `}<inlineCode parentName=\"p\">{`GraphQL`}</inlineCode>{`? You could make a strong case for either approach.`}</p>\n    <p><strong parentName=\"p\">{`Coupled`}</strong></p>\n    <p>{`Pros:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`using Graphql in the way it was intended`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Decoupled`}</strong></p>\n    <p>{`Pros:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Once authenticated, you do not need to continue the authentication process.`}</li>\n    </ul>\n    <p>{`Cons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`part of the React app would not use GraphQL at all`}</li>\n    </ul>\n    <p>{`In the example given, they are used together - however, usually the argument is that maybe they should remain decoupled.`}</p>\n    <h3 {...{\n      \"id\": \"delegating-to-an-authentication-service\"\n    }}>{`Delegating to an Authentication Service`}</h3>\n    <h2 {...{\n      \"id\": \"handling-errors-gracefully\"\n    }}>{`Handling Errors Gracefully`}</h2>\n    <h3 {...{\n      \"id\": \"handling-errors-around-signup\"\n    }}>{`Handling Errors Around Signup`}</h3>\n    <p>{`With the `}<inlineCode parentName=\"p\">{`apollo`}</inlineCode>{` client, you can also `}<inlineCode parentName=\"p\">{`catch`}</inlineCode>{` after a mutation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`this.props.mutate({\n    variables: { email, password }\n}).catch(res => {\n    const errors = res.graphQLErrors.map(err => err.message);\n    this.setState({ errors });\n});\n\n### The Needs for a HOC\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}