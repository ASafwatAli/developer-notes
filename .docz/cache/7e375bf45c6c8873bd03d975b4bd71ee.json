{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md","mtime":1579074368919},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"docker-deep-dive\"\n    }}>{`Docker Deep Dive`}</h2>\n    <hr></hr>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-deep-dive\"\n        }}>{`Docker Deep Dive`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-basics\"\n        }}>{`Docker Basics`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----working-with-multiple-images\"\n            }}>{`---- Working with Multiple Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----packaging-a-customized-container\"\n            }}>{`---- Packaging A Customized Container`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----container-commands\"\n            }}>{`---- Container Commands`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----exposing-ports\"\n            }}>{`---- Exposing ports`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#the-dockerfile-builds-and-network-configuration\"\n        }}>{`The Dockerfile, Builds and Network Configuration`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----user-and-run\"\n            }}>{`---- USER and RUN`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----env\"\n            }}>{`---- ENV`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----cmd-vs-run\"\n            }}>{`---- CMD vs RUN`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----entrypoint\"\n            }}>{`---- ENTRYPOINT`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----expose\"\n            }}>{`---- EXPOSE`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----container-volume-management\"\n            }}>{`---- Container Volume Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-network-list-and-inspect\"\n            }}>{`---- Docker Network: List and Inspect`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-network-assign-to-containers\"\n            }}>{`---- Docker Network: Assign to Containers`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-commands-and-structures\"\n        }}>{`Docker commands and structures`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----inspect-container-processes\"\n            }}>{`---- Inspect Container Processes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----previous-container-management\"\n            }}>{`---- Previous Container Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----controlling-port-exposure-on-containers\"\n            }}>{`---- Controlling Port Exposure on Containers`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----naming-containers\"\n            }}>{`---- Naming Containers`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-events\"\n            }}>{`---- Docker Events`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----managing-and-removing-base-images\"\n            }}>{`---- Managing and Removing Base Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----saving-and-loading-docker-images\"\n            }}>{`---- Saving and Loading Docker Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----image-history\"\n            }}>{`---- Image History`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----take-control-of-our-tags\"\n            }}>{`---- Take Control of Our Tags`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----pushing-to-docker-hub\"\n            }}>{`---- Pushing to Docker Hub`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#integration-and-use-cases\"\n        }}>{`Integration and Use Cases`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----building-a-web-farm-for-development-and-testing\"\n            }}>{`---- Building a Web Farm for Development and Testing`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"docker-basics\"\n    }}>{`Docker Basics`}</h2>\n    <h2 {...{\n      \"id\": \"working-with-multiple-images\"\n    }}>{`Working with Multiple Images`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# i: interactive, t: tty, d: daemon mode\ndocker run -i -t -d ubuntu:latest /bin/bash\n\n# to attach to the container and edit the container\ndocker attach container_name\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"packaging-a-customized-container\"\n    }}>{`Packaging A Customized Container`}</h2>\n    <p>{`Once you are attached to a container, anytime you create files, it is now part of that container!`}</p>\n    <p>{`You can do all of your updates etc.`}</p>\n    <p>{`From here, we can commit to create a base image.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker commit -m \"This is a new image\" -a \"dennis@presentcompany.co\" dok/ubusshd:v1\n`}</code></pre>\n    <p>{`Once this is commited, it is now put to a base container! Yay!`}</p>\n    <p>{`Let's create a simple Dockerfile to give some info about us.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile - example Ubuntu example with SSH already installed\nFROM ubuntu:latest\nMAINTAINER okeeffed <dennis@presentcompany.co>\nRUN apt-get update\nRUN apt-get -y install telnet openssh-server\n`}</code></pre>\n    <p>{`For building:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# build a Dockerfile from the current location\ndocker build -t=\"dok/ubusshdonly:v2\" .\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"container-commands\"\n    }}>{`Container Commands`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`top # shows the processes\ndocker logs container_name #shows history for container\ndocker exec container name /bin/cat /etc/profile\n\ndocker run container name /bin/bash -c \"while true; do echo HELLO; sleep 1; done\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"exposing-ports\"\n    }}>{`Exposing ports`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 80:80 nginx:latest\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-dockerfile-builds-and-network-configuration\"\n    }}>{`The Dockerfile, Builds and Network Configuration`}</h2>\n    <h2 {...{\n      \"id\": \"user-and-run\"\n    }}>{`USER and RUN`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\nUSER user\n`}</code></pre>\n    <p>{`To connect as the root, you just need to start the container and run `}<inlineCode parentName=\"p\">{`docker exec -u 0 -it sleepy_allen /bin/bash`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Order of Execution`}</strong></p>\n    <p>{`We had to run a super user command to add the User. Now let's say we want to run another command.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n\nUSER user\n\n# below will give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"env\"\n    }}>{`ENV`}</h2>\n    <p>{`Example, let's install Java through the Dockerfile!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n\nRUN yum update -y\nRUN yum install -y net-tools wget\n\nRUN cd ~ && wget --no-cookies --no-check-certificate --header \"url\"\n\nRUN yum localinstall -y ~/java_file.rpm\n\nUSER user\n\nRUN cd ~ && echo \"export JAVA_HOME=/usr/java/jdk1.8.0/jre\" >> /home/user/.bashrc\n\n# generates env variable for everyone\nENV JAVA_BIN /usr/java/jdk1.8.0/jre/bin\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"cmd-vs-run\"\n    }}>{`CMD vs RUN`}</h2>\n    <p>{`Command generally sets the default command to run when there is nothing specified when container starts up.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\nCMD 'echo' 'This is a custom container message'\n\nUSER user\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"entrypoint\"\n    }}>{`ENTRYPOINT`}</h2>\n    <p>{`The entrypoint itself will ALWAYS be the concrete default application everytime that the container is created.`}</p>\n    <p><inlineCode parentName=\"p\">{`CMD`}</inlineCode>{` will only run when there is no argument, whereas `}<inlineCode parentName=\"p\">{`ENTRYPOINT`}</inlineCode>{` will always run.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN useradd -ms /bin/bash user\n\nENTRYPOINT echo \"This command will display this message on EVERY container that is run from it\"\n\nUSER user\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"expose\"\n    }}>{`EXPOSE`}</h2>\n    <p>{`EXPOSE will allow us to expose our ports.`}</p>\n    <p>{`The follow image will allow us to build a webserver and run it from basics.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo \"This is a custom index file built during the image creation\" > /var/www/html/index.html\n\nENTRYPOINT apachectl \"-DFOREGROUND\"\n`}</code></pre>\n    <p>{`However, if we don't expose any ports, then using `}<inlineCode parentName=\"p\">{`-P`}</inlineCode>{` won't automatically expose those ports. We can still forcably expose ports using \\`docker run --name apacheweb -d -p 8080:80 container`}</p>\n    <p>{`To auto-expose, we can do this...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo \"This is a custom index file built during the image creation\" > /var/www/html/index.html\n\nEXPOSE 80\n\nENTRYPOINT apachectl \"-DFOREGROUND\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"container-volume-management\"\n    }}>{`Container Volume Management`}</h2>\n    <p>{`How do we work with mounts and file systems?`}</p>\n    <p>{`We can mount using `}<inlineCode parentName=\"p\">{`-v`}</inlineCode>{` for mounting volumes.`}</p>\n    <p>{`Scenario One: Create a directory at launchtime called `}<inlineCode parentName=\"p\">{`mydata`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it --name voltest1 -v /mydata centos:latest /bin/bash\n# once logged in\ndf -h # shows that there is a mounted file\n\n# back from host OS terminal\ncd /var/lib/docker # will show us the volumes folder\n\n# if we docker inspect the container\n# it will show us the volume and the source\n`}</code></pre>\n    <p>{`Once we have things that are mounted, we can access them from the container and anything that we edit in the underlying host, we can see in the container!`}</p>\n    <p>{`We can't do this from the Dockerfile, because the base image is designed to be portable.`}</p>\n    <h2 {...{\n      \"id\": \"docker-network-list-and-inspect\"\n    }}>{`Docker Network: List and Inspect`}</h2>\n    <p>{`Thanks to Docker Swarm and Kubernetes, it has become easier to manage the Docker Network.`}</p>\n    <p>{`When you run a docker instance, it will auto pull the next available address.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# this will list all of the associated networks with the current host\ndocker network ls\n\ndocker network ls --no-trunc # to see the full address\n\ndocker network inspect bridge\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Creating Docker network configs`}</strong></p>\n    <p>{`To see things like a `}<inlineCode parentName=\"p\">{`man`}</inlineCode>{` page for docker, you essential just put dashes between multi-word commands.`}</p>\n    <p><inlineCode parentName=\"p\">{`man docker-network-create`}</inlineCode>{` will bring up the network create manual.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01 # /24 is everything in that network\n\ndocker network ls\n# the new bridge adapter is now there\n\n# to remove the bridge\ndocker network rm mybridge01\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-network-assign-to-containers\"\n    }}>{`Docker Network: Assign to Containers`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# subnet itself can be 10.1.[1-254].[1-254] while ip-range is 10.1.4.[1-254]\n# that is class b and class c respectively\ndocker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range=10.1.4.0/24 --driver=bridge --label=host4network bridge04\n`}</code></pre>\n    <p>{`If you then inspect the new above network config, it will have those settings within that inspect config.`}</p>\n    <p>{`So how do we now use this new network?`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it --name nettest1 --net bridge04 --ip 10.1.4.100 centos:latest /bin/bash\n\n# if we docker inspect nettest1 | grep IP we can see the address set at 10.1.4.100\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"docker-commands-and-structures\"\n    }}>{`Docker commands and structures`}</h2>\n    <h2 {...{\n      \"id\": \"inspect-container-processes\"\n    }}>{`Inspect Container Processes`}</h2>\n    <p>{`From the outside, we can run `}<inlineCode parentName=\"p\">{`docker exec`}</inlineCode>{` to get some more details about the container itself.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker exec container_name /bin/ps aux | grep bash`}</inlineCode></p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`docker top`}</inlineCode>{` to see the top command run on a container.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker top container_name`}</inlineCode></p>\n    <p>{`Let's execute a command to install `}<inlineCode parentName=\"p\">{`sshd`}</inlineCode>{`. We could attach to container and do so, but we have a few options. Instead of attaching, we could do the following:`}</p>\n    <p><inlineCode parentName=\"p\">{`docker exec -i -t container_name /bin/bash`}</inlineCode></p>\n    <p>{`This will ensure that the container doesn't stop, but will actually run two instances of `}<inlineCode parentName=\"p\">{`bash`}</inlineCode>{`. We can verify this by looking at the container processes.`}</p>\n    <p>{`So far, this can give us a momentary snap shot.`}</p>\n    <p><strong parentName=\"p\">{`See the history of previous processes and performances`}</strong></p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`docker stats`}</inlineCode>{` to see a live set of information for that container.`}</p>\n    <p><inlineCode parentName=\"p\">{`dock stats container_name`}</inlineCode></p>\n    <p>{`This will keep a view that is constantly updated to see what is going on.`}</p>\n    <h2 {...{\n      \"id\": \"previous-container-management\"\n    }}>{`Previous Container Management`}</h2>\n    <p>{`Just to see the previous containers not running with just their ids, we can run `}<inlineCode parentName=\"p\">{`docker ps -a -q`}</inlineCode></p>\n    <p>{`Of course, for removing older containers, we can `}<inlineCode parentName=\"p\">{`docker rm`}</inlineCode>{` previous containers.`}</p>\n    <p>{`We can also remove containers from the `}<inlineCode parentName=\"p\">{`/var/lib/docker`}</inlineCode>{` folder as the super user. If you do it this way, you want to ensure that you have `}<inlineCode parentName=\"p\">{`systemctl stop/restart docker`}</inlineCode>{` to ensure that there aren't any issues with Docker.`}</p>\n    <h2 {...{\n      \"id\": \"controlling-port-exposure-on-containers\"\n    }}>{`Controlling Port Exposure on Containers`}</h2>\n    <p>{`In this example, start up a nginx container in daemon mode without remapping the ports.`}</p>\n    <p>{`Again, we can inspect this container to find the IP etc. We know that we can get anything remapped to the localhost currently because there is no remapping.`}</p>\n    <p>{`In contrast, we can use `}<inlineCode parentName=\"p\">{`-P`}</inlineCode>{` to expose the ports and it will auto remap to high port value.`}</p>\n    <p><inlineCode parentName=\"p\">{`-p 8080:80`}</inlineCode>{` will be use defining the port that we want to expose it to.`}</p>\n    <p>{`If we want to define a certain interface eg. localhost...`}</p>\n    <p><inlineCode parentName=\"p\">{`docker run -itd -p 127.0.01:8081:80 nginx:latest`}</inlineCode>{` would ONLY allow localhost to access this site.`}</p>\n    <h2 {...{\n      \"id\": \"naming-containers\"\n    }}>{`Naming Containers`}</h2>\n    <p>{`To rename containers, we can run `}<inlineCode parentName=\"p\">{`docker rename currentname newname`}</inlineCode>{` - you can even rename container IDs, although there is likely no point.`}</p>\n    <p>{`You can also rename running containers!`}</p>\n    <h2 {...{\n      \"id\": \"docker-events\"\n    }}>{`Docker Events`}</h2>\n    <p>{`How can we monitor certain events?`}</p>\n    <p>{`Startup a few containers.`}</p>\n    <p>{`When we interact with them, certain events are generated.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`docker events`}</inlineCode>{`, it will begin a program to wait and register certain events.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`docker events --since '1h'`}</inlineCode>{`, we can then see all the events that have happened in the last hour.`}</p>\n    <p>{`If we run just `}<inlineCode parentName=\"p\">{`docker events`}</inlineCode>{` and run a `}<inlineCode parentName=\"p\">{`dok exec -it mycontainerid /bin/bash`}</inlineCode>{` command, we will then see those events registered. This is useful for debugging and monitoring the entire host.`}</p>\n    <p>{`We may not care about every event though. What happens if we just care about an attachment?`}</p>\n    <p><inlineCode parentName=\"p\">{`docker events --filter <keyword>`}</inlineCode>{` can then be used to filter for events we care about.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker events --filter event=attach`}</inlineCode></p>\n    <p>{`We can also filter for multiple events with multiple `}<inlineCode parentName=\"p\">{`--filter event=<event>`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"managing-and-removing-base-images\"\n    }}>{`Managing and Removing Base Images`}</h2>\n    <p>{`If you remove an image by name, then if there is a double up of the same ID, it will just remove the named image - however an ID removal will warn you if they share the ID. They only way to remove all of them is to use the force `}<inlineCode parentName=\"p\">{`-f`}</inlineCode>{` flag.`}</p>\n    <h2 {...{\n      \"id\": \"saving-and-loading-docker-images\"\n    }}>{`Saving and Loading Docker Images`}</h2>\n    <p><strong parentName=\"p\">{`Saving`}</strong></p>\n    <p>{`When we pull images, we can pull from local or from Docker Hub. You will use base of an official release usually etc.`}</p>\n    <p>{`How can we manage our custom images? We can `}<inlineCode parentName=\"p\">{`tar`}</inlineCode>{` any file and migrate it to another compute etc.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker commit containername centos:mine`}</inlineCode></p>\n    <p>{`This will allow us to save the image but remove the containers!`}</p>\n    <p>{`We can use`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker save --output centos.latest.tar centos:latest\n`}</code></pre>\n    <p>{`If you `}<inlineCode parentName=\"p\">{`ls`}</inlineCode>{` the tar file, it will give you details about the image/container.`}</p>\n    <p><strong parentName=\"p\">{`Restoring`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`docker load --input centos.latest.tar`}</inlineCode></p>\n    <p>{`If we have `}<inlineCode parentName=\"p\">{`gzip`}</inlineCode>{` a tar file, we can also load it directly from the `}<inlineCode parentName=\"p\">{`.tar.gz`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"image-history\"\n    }}>{`Image History`}</h2>\n    <p>{`How can we get the history of the base image?`}</p>\n    <p><inlineCode parentName=\"p\">{`docker history imagename`}</inlineCode></p>\n    <p>{`This will give us a list of commands etc.`}</p>\n    <h2 {...{\n      \"id\": \"take-control-of-our-tags\"\n    }}>{`Take Control of Our Tags`}</h2>\n    <p>{`Changes in the container is what is kept in storage layering.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker tag imageid mine/centos:v1.0`}</inlineCode>{` - this will create a new image with the repo tag.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker tag mine/centos:v1.0 dok.example.com/centos:v1.0b`}</inlineCode>{` will do the same.`}</p>\n    <h2 {...{\n      \"id\": \"pushing-to-docker-hub\"\n    }}>{`Pushing to Docker Hub`}</h2>\n    <p><inlineCode parentName=\"p\">{`docker login --username=name`}</inlineCode>{` throw in the password and you'll be authenticated.`}</p>\n    <p>{`One authenticated, `}<inlineCode parentName=\"p\">{`docker push image`}</inlineCode></p>\n    <p>{`Of course, to bring it back down, you will hit `}<inlineCode parentName=\"p\">{`docker pull name`}</inlineCode></p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"integration-and-use-cases\"\n    }}>{`Integration and Use Cases`}</h2>\n    <h2 {...{\n      \"id\": \"building-a-web-farm-for-development-and-testing\"\n    }}>{`Building a Web Farm for Development and Testing`}</h2>\n    <p><em parentName=\"p\">{`Prerequisites`}</em></p>\n    <p>{`So far, we have not had a specific purpose for Docker containers. These following examples are for real world use cases.`}</p>\n    <p>{`Set up a web farm with two Apache web nodes on port 80 - both sharing one or more file systems.`}</p>\n    <p><em parentName=\"p\">{`Part One`}</em></p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}