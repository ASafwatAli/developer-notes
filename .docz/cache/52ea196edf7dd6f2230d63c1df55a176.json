{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/COMP3306-AI/2-Problem-Solving-And-Search.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/COMP3306-AI/2-Problem-Solving-And-Search.md","mtime":1548283415352},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/COMP3306-AI/2-Problem-Solving-And-Search.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"problem-solving-and-search\"\n    }}>{`Problem Solving and Search`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#problem-solving-and-search\"\n        }}>{`Problem Solving and Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-problem-formulation\"\n        }}>{`Search Problem Formulation`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#searching-for-solutions\"\n        }}>{`Searching for solutions`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#tree-search-algorithm---pseudo-code\"\n        }}>{`Tree search algorithm - pseudo code`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#nodes-vs-states\"\n        }}>{`Nodes vs States`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-strategies\"\n        }}>{`Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#uninformed-blind-search-strategies\"\n        }}>{`Uninformed (Blind) Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#bfs---breadth-first-search\"\n        }}>{`BFS - Breadth First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ucs---uniform-cost-search\"\n        }}>{`UCS - Uniform Cost Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#dfs---depth-firth-search\"\n        }}>{`DFS - Depth-Firth Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ids---iterative-deepening-searh-ids\"\n        }}>{`IDS - Iterative Deepening Searh (IDS)`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#informed-vs-uninformed-search\"\n        }}>{`Informed vs Uninformed Search`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#best-first-search\"\n        }}>{`Best First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#greedy-search-gs\"\n        }}>{`Greedy Search (GS)`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Learning Aims`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed Search: BFS, DFS, UCS and IDS`}</li>\n      <li parentName=\"ol\">{`Informed Search: Greedy Best-First`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"search-problem-formulation\"\n    }}>{`Search Problem Formulation`}</h2>\n    <p>{`Defined by 4 items:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Initial state`}</li>\n      <li parentName=\"ol\">{`Goal state`}</li>\n      <li parentName=\"ol\">{`Operators = actions`}</li>\n      <li parentName=\"ol\">{`Path cost function`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Choosing States and Actions`}</strong></p>\n    <p>{`Real problems are too complex, to solve them we need to `}<em parentName=\"p\">{`abstract`}</em>{` them! Simplify them by removing unnecessary details.`}</p>\n    <p>{`Eg. If we need to find the path somewhere, we can ignore things such as weather, road conditions, scenary.`}</p>\n    <p>{`Actions need to be suitable specified eg not \"turn the steering wheel left by 5 degrees\".`}</p>\n    <p>{`The `}<em parentName=\"p\">{`level of abstraction`}</em>{` must be appropriate.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`State = set of real states`}</li>\n      <li parentName=\"ul\">{`Action = complex combination of real actions`}</li>\n      <li parentName=\"ul\">{`Solution = set of real paths that are solutions in the real world`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`8-Queens Problem`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Incremental - stat with empty space, add 1 queen at a time`}</li>\n      <li parentName=\"ol\">{`Complete-state - start with all 8 queens and move them around`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`For 1:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Add any queen to any square`}</li>\n      <li parentName=\"ul\">{`State space? 1.8 `}<em parentName=\"li\">{` 10^14 states (= 64 `}</em>{` 63 `}<em parentName=\"li\">{` ... `}</em>{` 57)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 2:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens, 1 in each column with no queen attacking each other`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Place a queen in the left-most-empty column such that it is not attacked by any other queen`}</li>\n      <li parentName=\"ul\">{`State space? 2057 states`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 100-queens:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`1: 10^400 states`}</li>\n      <li parentName=\"ul\">{`2: 10^52 states (hugh improvement but problem still not tractable)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"searching-for-solutions\"\n    }}>{`Searching for solutions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Searching the state space`}</li>\n      <li parentName=\"ul\">{`Generate a search tree starting from the initial state and applying the operators`}</li>\n      <li parentName=\"ul\">{`We can generate a search graph - in a graph the same state can be reached rom multiple paths`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tree-search-algorithm---pseudo-code\"\n    }}>{`Tree search algorithm - pseudo code`}</h2>\n    <p>{`Basic idea: offline exploration of the state space by generating successors of the explored states (i.e. exapnding states)`}</p>\n    <p><strong parentName=\"p\">{`We keep two lists:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Expanded - for nodes that have been expanded`}</li>\n      <li parentName=\"ul\">{`Fringe - for nodes that bae been generated but not expanded yet`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"nodes-vs-states\"\n    }}>{`Nodes vs States`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` is different than a `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`A node:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`represents a state`}</li>\n      <li parentName=\"ul\">{`is a data structure used in the search tree`}</li>\n      <li parentName=\"ul\">{`includes `}<inlineCode parentName=\"li\">{`parent`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`children`}</inlineCode>{`, and other relevant information e.g. `}<inlineCode parentName=\"li\">{`depth`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`path cost g`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"search-strategies\"\n    }}>{`Search Strategies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`search strategy`}</inlineCode>{` defines which node from the fringe is most promising and should be expanded next`}</li>\n      <li parentName=\"ul\">{`We always keep the nodes in the fringe orded based on the search strategy and always expand the first one`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Evaluation Critera`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Term`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Completeness`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find a solution if one exists?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optimality`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find an `}<inlineCode parentName=\"td\">{`optimal (least cost path)`}</inlineCode>{` solution?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Time complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`How long does it take to find the solution? (measured as no. of generated nodes)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Space complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`what is the max number of nodes in memory?`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Time and space complexity`}</strong></p>\n    <p>{`Measured in terms of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`b: max branching factor of the search tree (we can assume that it is finite)`}</li>\n      <li parentName=\"ul\">{`d: depth of the optimal (least cost) solution`}</li>\n      <li parentName=\"ul\">{`m: maximum depth of the state space (can be finite or not finite)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`There are two types of search methods:`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed (blind)`}</li>\n      <li parentName=\"ol\">{`Informed (heuristic)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"uninformed-blind-search-strategies\"\n    }}>{`Uninformed (Blind) Search Strategies`}</h2>\n    <p><strong parentName=\"p\">{`Uninformed strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Generate children in a systematic way eg level by level, from left to right`}</li>\n      <li parentName=\"ul\">{`Know if a child node is a goal or non-goal node`}</li>\n      <li parentName=\"ul\">{`Do not know if one non-goal child is better (more promising) than another one. By contrast, informed (heuristic) search strategies know this`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`5 uninformed search strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Breadth first`}</li>\n      <li parentName=\"ul\">{`Uniform-cost`}</li>\n      <li parentName=\"ul\">{`Depth-first`}</li>\n      <li parentName=\"ul\">{`Depth-limited`}</li>\n      <li parentName=\"ul\">{`Iterative deepening`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"bfs---breadth-first-search\"\n    }}>{`BFS - Breadth First Search`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Is the first node in the fringe a goal node?\n    Yes => stop and return solution\n    No => expand it:\n        - Move it to the expanded list\n        - Generate its children and put them in the fringe in a order defined by the search strategy\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes`}</li>\n      <li parentName=\"ul\">{`Optimal? Not optimal in general; Yes, if step cost is the same, e.g. =1`}</li>\n      <li parentName=\"ul\">{`Time? generated nodes = `}<inlineCode parentName=\"li\">{`1+b+b^2+ ... + b^d = O(b^d)`}</inlineCode>{`, exponential`}</li>\n      <li parentName=\"ul\">{`Space? O(b^d) (keeps every node in memory)`}</li>\n      <li parentName=\"ul\">{`Both time and space are problems as they grow exponentially with depth but space is the bigger problem!`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ucs---uniform-cost-search\"\n    }}>{`UCS - Uniform Cost Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes ( if step cost>0 )`}</li>\n      <li parentName=\"ul\">{`Optimal? Yes`}</li>\n      <li parentName=\"ul\">{`Time? # nodes with g  cost of optimal solution O(bd)`}</li>\n      <li parentName=\"ul\">{`Space? # nodes with g  cost of optimal solution O(bd)`}</li>\n    </ul>\n    <p>{`UCS is equivalent to BFS if the step cost is 1 or the same`}</p>\n    <h2 {...{\n      \"id\": \"dfs---depth-firth-search\"\n    }}>{`DFS - Depth-Firth Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Expands deepest unexpanded node`}</li>\n      <li parentName=\"ul\">{`Implementation: insert children at the front of the fringe Fringe: A\nExpanded: none`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ids---iterative-deepening-searh-ids\"\n    }}>{`IDS - Iterative Deepening Searh (IDS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Sidesteps issue o choosing the best depth limit by trying all possible depth limits in turn (0, 1, 2, etc.) and applying DFS.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Depth-limited search = DFS with depth limit l - i.e. it imposes a cutoff on the maximum depth`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Properties - similar to DFS - Complete? Yes (as the search depth is always finite) - Optimal? No - Time? 1+b^2+b^3+b^4 + ... +b^l = O(b^l) - Space? O(bl)`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Overhead of multiple expansion`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`May seem wasteful as many nodes are expanded multiple times`}</li>\n      <li parentName=\"ul\">{`But for most problems the overhead of this multiple expansion is small!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Common properties of IDS`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`b - branching factor\nd - depth of least cost solution\nm - max depth\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Combines the benefits of DFS and BFS`}</li>\n      <li parentName=\"ul\">{`Complete? As BFS: - Yes `}{`[DFS: yes, if m is finite; no otherwise]`}{`*`}</li>\n      <li parentName=\"ul\">{`Optimal? As BFS: - No in general; Yes if step cost=1 `}{`[DFS: not optimal, even if step cost=1]`}{` `}{`*`}</li>\n      <li parentName=\"ul\">{`Time? As BFS: - `}<inlineCode parentName=\"li\">{`(d+1)b^0+db^1+(d-1)b^2+ ... +bd = O(b^d) [DFS: O(bm)] *`}</inlineCode></li>\n      <li parentName=\"ul\">{`Space? As DFS: O(bd), linear`}</li>\n      <li parentName=\"ul\">{`Where are the improvements of IDS in comparison to DFS? - in completeness, optimality and time (shown with `}{`*`}{`)`}</li>\n      <li parentName=\"ul\">{`Can be modified to explore uniform-cost tree`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"informed-vs-uninformed-search\"\n    }}>{`Informed vs Uninformed Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A search strategy defines the order of node expansion`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Uniformed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Uninformed search strategies do not use problem specific knowledge beyond the definition of the problem, i.e. they do not use heuristic knowledge. - expand nodes systematically - know if node is goal or non-goal - cannot compare two non-goal nodes (do not know if one goal node is better than another) - typically inefficient`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Informed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Informed search strategies use problem-specific heuristic knowledge to select the order of node expansion. They: - can compare non-goal nodes – they know if one non-goal node is better than another one - are typically more efficient`}</li>\n    </ul>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"best-first-search\"\n    }}>{`Best First Search`}</h1>\n    <p>{`How can informed strategies compare non-goal nodes?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`By using domain specific knowledge to devise an evaluation function which estimates how good each node is`}</li>\n      <li parentName=\"ul\">{`The evaluation function assigns a value to each node`}</li>\n      <li parentName=\"ul\">{`At each step, the best node is expanded (the one with the best\nvalue)`}</li>\n      <li parentName=\"ul\">{`This is called best-first search - Note that we don’t really know which is the best node as we use an estimate based on the evaluation function. So best-first search expands the node that appears to be the best.`}</li>\n      <li parentName=\"ul\">{`Fringe: insert children in decreasing order of desirability`}</li>\n      <li parentName=\"ul\">{`We will study 2 best-first search algorithms: greedy and A`}{`*`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"greedy-search-gs\"\n    }}>{`Greedy Search (GS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value as an evaluation function (h - heuristic)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h(n)`}</inlineCode>{` for node `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` is the estimated cost from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to a `}<inlineCode parentName=\"li\">{`goal`}</inlineCode>{` node`}</li>\n      <li parentName=\"ul\">{`Eg for the Romania example we can use `}<inlineCode parentName=\"li\">{`h(n)=SLD(n, Bucharest)`}</inlineCode>{` = straight-line distance from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to Bucharest`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value of a goal node is 0, i.e. `}<inlineCode parentName=\"li\">{`h(goal)=0`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? As DFS - Yes in finite spaces (if `}<inlineCode parentName=\"li\">{`m`}</inlineCode>{` is finite) - No - fails in infinite spaces (can get stuck in a loop)`}</li>\n      <li parentName=\"ul\">{`Optimal? No`}</li>\n      <li parentName=\"ul\">{`Time? O(b^m) but good heauristic can give dramatic improvement`}</li>\n      <li parentName=\"ul\">{`Space? O(b^m), keeps every node in memory`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}