{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Dotnet/Adding-Models.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Dotnet/Adding-Models.md","mtime":1578713876671},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0RvdG5ldC9BZGRpbmctTW9kZWxzLm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsWyJkZWZhdWx0Il0uc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImFkZGluZy1tb2RlbHMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFkZGluZyBNb2RlbHMiKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInJlc291cmNlcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiUmVzb3VyY2VzIiksIG1keCgib2wiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAib2wiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImEiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJsaSIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hc3BuZXQvY29yZS90dXRvcmlhbHMvZmlyc3QtbXZjLWFwcC9hZGRpbmctbW9kZWw/dmlldz1hc3BuZXRjb3JlLTMuMSZ0YWJzPXZpc3VhbC1zdHVkaW8iCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIk1pY3Jvc29mdCBEb2NzOiBBZGQgYSBtb2RlbCB0byBhbiBBU1AuTkVUIENvcmUgTVZDIGFwcCIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9hcGkvc3lzdGVtLmNvbXBvbmVudG1vZGVsLmRhdGFhbm5vdGF0aW9ucz92aWV3PW5ldGZyYW1ld29yay00LjgiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkRhdGFBbm5vdGF0b25zIHVzZWQgaW4gdHV0b3JpYWwiKSkpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiYWRkLWEtZGF0YS1tb2RlbC1jbGFzcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiQWRkIGEgZGF0YSBtb2RlbCBjbGFzcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJVcGRhdGUgdGhlICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk1vZGVscy9Nb3ZpZS5jcyIpLCAiIGZpbGUgd2l0aCB0aGUgZm9sbG93aW5nIGNvZGU6IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1jc2hhcnAiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgInVzaW5nIFN5c3RlbTtcbnVzaW5nIFN5c3RlbS5Db21wb25lbnRNb2RlbC5EYXRhQW5ub3RhdGlvbnM7XG5cbm5hbWVzcGFjZSBNdmNNb3ZpZS5Nb2RlbHNcbntcbiAgICBwdWJsaWMgY2xhc3MgTW92aWVcbiAgICB7XG4gICAgICAgIHB1YmxpYyBpbnQgSWQgeyBnZXQ7IHNldDsgfVxuICAgICAgICBwdWJsaWMgc3RyaW5nIFRpdGxlIHsgZ2V0OyBzZXQ7IH1cblxuICAgICAgICBbRGF0YVR5cGUoRGF0YVR5cGUuRGF0ZSldXG4gICAgICAgIHB1YmxpYyBEYXRlVGltZSBSZWxlYXNlRGF0ZSB7IGdldDsgc2V0OyB9XG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2VucmUgeyBnZXQ7IHNldDsgfVxuICAgICAgICBwdWJsaWMgZGVjaW1hbCBQcmljZSB7IGdldDsgc2V0OyB9XG4gICAgfVxufVxuIikpLCBtZHgoInVsIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogInVsIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlRoZSBNb3ZpZSBjbGFzcyBjb250YWlucyBhbiAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAibGkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiSWQiKSwgIiBmaWVsZCwgd2hpY2ggaXMgcmVxdWlyZWQgYnkgdGhlIGRhdGFiYXNlIGZvciB0aGUgcHJpbWFyeSBrZXkuIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAidWwiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhlIERhdGFUeXBlIGF0dHJpYnV0ZSBvbiBSZWxlYXNlRGF0ZSBzcGVjaWZpZXMgdGhlIHR5cGUgb2YgdGhlIGRhdGEgKERhdGUpLiBXaXRoIHRoaXMgYXR0cmlidXRlOiIsIG1keCgib2wiLCB7CiAgICBwYXJlbnROYW1lOiAibGkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlRoZSB1c2VyIGlzIG5vdCByZXF1aXJlZCB0byBlbnRlciB0aW1lIGluZm9ybWF0aW9uIGluIHRoZSBkYXRlIGZpZWxkLiIpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk9ubHkgdGhlIGRhdGUgaXMgZGlzcGxheWVkLCBub3QgdGltZSBpbmZvcm1hdGlvbi4iKSkpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRGF0YUFubm90YXRpb25zIGFyZSBjb3ZlcmVkIGluIGEgbGF0ZXIgdHV0b3JpYWwuIiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJhZGQtbnVnZXQtcGFja2FnZXMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFkZCBOdUdldCBQYWNrYWdlcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJSZWZlcmVuY2UgIiwgbWR4KCJzdHJvbmciLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJSZXNvdXJjZSAiLCAiWzFdIiksICIgaW4gb3JkZXIgdG8gc2VlIGluc3RhbGxhdGlvbiBleGFtcGxlcyBmb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiZW0iLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3MAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOb3RlOiBJIGhhdmVuJ3QgY29uZmlybWVkLCBidXQgeW91IG1heSBiZSBhYmxlIHRvIGdldCBhd2F5IHdpdGggaW5zdGFsbGluZyB0aHJvdWdoIGRvdG5ldCBDTEkuIEZyb20gd2hhdCBJIHNlZSBsYXRlciBpbiB0aGUgdHV0b3JpYWwsIE51R2V0IG1heSBiZSByZXF1aXJlZC4iKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDcxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlBhY2thZ2VzIHJlcXVpcmVkIGluIHRoaXMgdHV0b3JpYWw6IiksIG1keCgib2wiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAib2wiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTWljcm9zb2Z0LkVudGl0eUZyYW1ld29ya0NvcmUuU1FMaXRlIiksIG1keCgibGkiLCB7CiAgICBwYXJlbnROYW1lOiAib2wiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNzQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5XZWIuQ29kZUdlbmVyYXRpb24uRGVzaWduIChsaWtlbHkgbm90IG5lZWRlZCBpZiBpbnN0YWxsaW5nIGJ5IENMSSkiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJNaWNyb3NvZnQuRW50aXR5RnJhbWV3b3JrQ29yZS5TcWxTZXJ2ZXIiKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJNaWNyb3NvZnQuRW50aXR5RnJhbWV3b3JrQ29yZS5EZXNpZ24iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJjcmVhdGUtZGF0YWJhc2UtY29udGV4dC1jbGFzcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiQ3JlYXRlIGRhdGFiYXNlIGNvbnRleHQgY2xhc3MiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiQSBkYXRhYmFzZSBjb250ZXh0IGNsYXNzIGlzIG5lZWRlZCB0byBjb29yZGluYXRlIEVGIENvcmUgZnVuY3Rpb25hbGl0eSAoQ3JlYXRlLCBSZWFkLCBVcGRhdGUsIERlbGV0ZSkgZm9yIHRoZSBNb3ZpZSBtb2RlbC4gVGhlIGRhdGFiYXNlIGNvbnRleHQgaXMgZGVyaXZlZCBmcm9tICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDgxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk1pY3Jvc29mdC5FbnRpdHlGcmFtZXdvcmtDb3JlLkRiQ29udGV4dCIpLCAiIGFuZCBzcGVjaWZpZXMgdGhlIGVudGl0aWVzIHRvIGluY2x1ZGUgaW4gdGhlIGRhdGEgbW9kZWwuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDgyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkNyZWF0ZSBhIERhdGEgZm9sZGVyLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJBZGQgYSBEYXRhL012Y01vdmllQ29udGV4dC5jcyBmaWxlIHdpdGggdGhlIGZvbGxvd2luZyBjb2RlOiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDg0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtY3MiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgInVzaW5nIE1pY3Jvc29mdC5FbnRpdHlGcmFtZXdvcmtDb3JlO1xudXNpbmcgTXZjTW92aWUuTW9kZWxzO1xuXG5uYW1lc3BhY2UgTXZjTW92aWUuRGF0YVxue1xuICAgIHB1YmxpYyBjbGFzcyBNdmNNb3ZpZUNvbnRleHQgOiBEYkNvbnRleHRcbiAgICB7XG4gICAgICAgIHB1YmxpYyBNdmNNb3ZpZUNvbnRleHQgKERiQ29udGV4dE9wdGlvbnM8TXZjTW92aWVDb250ZXh0PiBvcHRpb25zKVxuICAgICAgICAgICAgOiBiYXNlKG9wdGlvbnMpXG4gICAgICAgIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBEYlNldDxNb3ZpZT4gTW92aWUgeyBnZXQ7IHNldDsgfVxuICAgIH1cbn1cbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTAyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlRoZSBwcmVjZWRpbmcgY29kZSBjcmVhdGVzIGEgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTAyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkRiU2V0PE1vdmllPiIpLCAiIHByb3BlcnR5IGZvciB0aGUgZW50aXR5IHNldC4gSW4gRW50aXR5IEZyYW1ld29yayB0ZXJtaW5vbG9neSwgYW4gZW50aXR5IHNldCB0eXBpY2FsbHkgY29ycmVzcG9uZHMgdG8gYSBkYXRhYmFzZSB0YWJsZS4gQW4gZW50aXR5IGNvcnJlc3BvbmRzIHRvIGEgcm93IGluIHRoZSB0YWJsZS4iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInJlZ2lzdGVyLXRoZS1kYXRhYmFzZS1jb250ZXh0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiUmVnaXN0ZXIgdGhlIGRhdGFiYXNlIGNvbnRleHQiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTA2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFTUC5ORVQgQ29yZSBpcyBidWlsdCB3aXRoIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChESSkuIFNlcnZpY2VzIChzdWNoIGFzIHRoZSBFRiBDb3JlIERCIGNvbnRleHQpIG11c3QgYmUgcmVnaXN0ZXJlZCB3aXRoIERJIGR1cmluZyBhcHBsaWNhdGlvbiBzdGFydHVwLiBDb21wb25lbnRzIHRoYXQgcmVxdWlyZSB0aGVzZSBzZXJ2aWNlcyAoc3VjaCBhcyBSYXpvciBQYWdlcykgYXJlIHByb3ZpZGVkIHRoZXNlIHNlcnZpY2VzIHZpYSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLiBUaGUgY29uc3RydWN0b3IgY29kZSB0aGF0IGdldHMgYSBEQiBjb250ZXh0IGluc3RhbmNlIGlzIHNob3duIGxhdGVyIGluIHRoZSB0dXRvcmlhbC4gSW4gdGhpcyBzZWN0aW9uLCB5b3UgcmVnaXN0ZXIgdGhlIGRhdGFiYXNlIGNvbnRleHQgd2l0aCB0aGUgREkgY29udGFpbmVyLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMDcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiQWRkIHRvIHRoZSB0b3Agb2YgU3RhcnR1cC5jczoiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1jcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgInVzaW5nIE12Y01vdmllLkRhdGE7XG51c2luZyBNaWNyb3NvZnQuRW50aXR5RnJhbWV3b3JrQ29yZTtcbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTEzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFkZCB0aGUgZm9sbG93aW5nIGZvciAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiU3RhcnR1cC5Db25maWd1cmVTZXJ2aWNlcyIpLCAiOiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWNzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAicHVibGljIHZvaWQgQ29uZmlndXJlU2VydmljZXMoSVNlcnZpY2VDb2xsZWN0aW9uIHNlcnZpY2VzKVxue1xuICAgIHNlcnZpY2VzLkFkZENvbnRyb2xsZXJzV2l0aFZpZXdzKCk7XG5cbiAgICBzZXJ2aWNlcy5BZGREYkNvbnRleHQ8TXZjTW92aWVDb250ZXh0PihvcHRpb25zID0+XG4gICAgICAgICAgICBvcHRpb25zLlVzZVNxbGl0ZShDb25maWd1cmF0aW9uLkdldENvbm5lY3Rpb25TdHJpbmcoXCJNdmNNb3ZpZUNvbnRleHRcIikpKTtcbn1cbiIpKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImFkZC1hLWRhdGFiYXNlLWNvbm5lY3Rpb24tc3RyaW5nIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiQWRkIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBzdHJpbmciKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTI3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFkZCAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMjcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiQ29ubmVjdGlvblN0cmluZ3MiKSwgIiBjb25maWcgdG8gIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTI3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImFwcHNldHRpbmdzLmpzb24iKSwgIjoiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qc29uIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAie1xuICBcIkxvZ2dpbmdcIjoge1xuICAgIFwiTG9nTGV2ZWxcIjoge1xuICAgICAgXCJEZWZhdWx0XCI6IFwiSW5mb3JtYXRpb25cIixcbiAgICAgIFwiTWljcm9zb2Z0XCI6IFwiV2FybmluZ1wiLFxuICAgICAgXCJNaWNyb3NvZnQuSG9zdGluZy5MaWZldGltZVwiOiBcIkluZm9ybWF0aW9uXCJcbiAgICB9XG4gIH0sXG4gIFwiQWxsb3dlZEhvc3RzXCI6IFwiKlwiLFxuICBcIkNvbm5lY3Rpb25TdHJpbmdzXCI6IHtcbiAgICBcIk12Y01vdmllQ29udGV4dFwiOiBcIkRhdGEgU291cmNlPU12Y01vdmllLmRiXCJcbiAgfVxufVxuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAic2NhZmZvbGQtbW92aWUtcGFnZXMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQ0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJTY2FmZm9sZCBtb3ZpZSBwYWdlcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVXNlIHRoZSBzY2FmZm9sZGluZyB0b29sIHRvIHByb2R1Y2UgQ3JlYXRlLCBSZWFkLCBVcGRhdGUsIGFuZCBEZWxldGUgKENSVUQpIHBhZ2VzIGZvciB0aGUgbW92aWUgbW9kZWwuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQ4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2Utc2hlbGwiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQ4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJkb3RuZXQgYXNwbmV0LWNvZGVnZW5lcmF0b3IgY29udHJvbGxlciAtbmFtZSBNb3ZpZXNDb250cm9sbGVyIC1tIE1vdmllIC1kYyBNdmNNb3ZpZUNvbnRleHQgLS1yZWxhdGl2ZUZvbGRlclBhdGggQ29udHJvbGxlcnMgLS11c2VEZWZhdWx0TGF5b3V0IC0tcmVmZXJlbmNlU2NyaXB0TGlicmFyaWVzXG4iKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUaGUgZm9sbG93aW5nIHRhYmxlIGRldGFpbHMgdGhlIEFTUC5ORVQgQ29yZSBjb2RlIGdlbmVyYXRvciBwYXJhbWV0ZXJzOiIpLCBtZHgoInRhYmxlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTUzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJ0aGVhZCIsIHsKICAgIHBhcmVudE5hbWU6ICJ0YWJsZSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInRyIiwgewogICAgcGFyZW50TmFtZTogInRoZWFkIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgidGgiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJ0ciIKICB9LCB7CiAgICAiYWxpZ24iOiBudWxsCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJQYXJhbWV0ZXIiKSwgbWR4KCJ0aCIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInRyIgogIH0sIHsKICAgICJhbGlnbiI6IG51bGwKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkRlc2NyaXB0aW9uIikpKSwgbWR4KCJ0Ym9keSIsIHsKICAgIHBhcmVudE5hbWU6ICJ0YWJsZSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInRyIiwgewogICAgcGFyZW50TmFtZTogInRib2R5IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgidGQiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJ0ciIKICB9LCB7CiAgICAiYWxpZ24iOiBudWxsCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTY2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICItbSIpLCBtZHgoInRkIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAidHIiCiAgfSwgewogICAgImFsaWduIjogbnVsbAogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVGhlIG5hbWUgb2YgdGhlIG1vZGVsLiIpKSwgbWR4KCJ0ciIsIHsKICAgIHBhcmVudE5hbWU6ICJ0Ym9keSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInRkIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAidHIiCiAgfSwgewogICAgImFsaWduIjogbnVsbAogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLWRjIiksIG1keCgidGQiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJ0ciIKICB9LCB7CiAgICAiYWxpZ24iOiBudWxsCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTc3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJUaGUgZGF0YSBjb250ZXh0LiIpKSwgbWR4KCJ0ciIsIHsKICAgIHBhcmVudE5hbWU6ICJ0Ym9keSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxODEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInRkIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAidHIiCiAgfSwgewogICAgImFsaWduIjogbnVsbAogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLXVkbCIpLCBtZHgoInRkIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAidHIiCiAgfSwgewogICAgImFsaWduIjogbnVsbAogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4NQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVXNlIHRoZSBkZWZhdWx0IGxheW91dC4iKSksIG1keCgidHIiLCB7CiAgICBwYXJlbnROYW1lOiAidGJvZHkiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTg5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJ0ZCIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInRyIgogIH0sIHsKICAgICJhbGlnbiI6IG51bGwKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxOTAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi0tcmVsYXRpdmVGb2xkZXJQYXRoIiksIG1keCgidGQiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJ0ciIKICB9LCB7CiAgICAiYWxpZ24iOiBudWxsCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTkzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJUaGUgcmVsYXRpdmUgb3V0cHV0IGZvbGRlciBwYXRoIHRvIGNyZWF0ZSB0aGUgZmlsZXMuIikpLCBtZHgoInRyIiwgewogICAgcGFyZW50TmFtZTogInRib2R5IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE5NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgidGQiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJ0ciIKICB9LCB7CiAgICAiYWxpZ24iOiBudWxsCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTk4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICItLXVzZURlZmF1bHRMYXlvdXQiKSwgbWR4KCJ0ZCIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInRyIgogIH0sIHsKICAgICJhbGlnbiI6IG51bGwKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlRoZSBkZWZhdWx0IGxheW91dCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIHZpZXdzLiIpKSwgbWR4KCJ0ciIsIHsKICAgIHBhcmVudE5hbWU6ICJ0Ym9keSIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoInRkIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAidHIiCiAgfSwgewogICAgImFsaWduIjogbnVsbAogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLS1yZWZlcmVuY2VTY3JpcHRMaWJyYXJpZXMiKSwgbWR4KCJ0ZCIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInRyIgogIH0sIHsKICAgICJhbGlnbiI6IG51bGwKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFkZHMgIiwgIl8iLCAiVmFsaWRhdGlvblNjcmlwdHNQYXJ0aWFsIHRvIEVkaXQgYW5kIENyZWF0ZSBwYWdlcyIpKSkpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTm90ZTogZm9yIG1vcmUgaGVscCBydW4gIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjE1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImRvdG5ldCBhc3BuZXQtY29kZWdlbmVyYXRvciBjb250cm9sbGVyIC1oIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiaW5pdGlhbC1taWdyYXRpb24iCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjE2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJJbml0aWFsIG1pZ3JhdGlvbiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMTkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVXNlIHRoZSBFRiBDb3JlIE1pZ3JhdGlvbnMgZmVhdHVyZSB0byBjcmVhdGUgdGhlIGRhdGFiYXNlLiBNaWdyYXRpb25zIGlzIGEgc2V0IG9mIHRvb2xzIHRoYXQgbGV0IHlvdSBjcmVhdGUgYW5kIHVwZGF0ZSBhIGRhdGFiYXNlIHRvIG1hdGNoIHlvdXIgZGF0YSBtb2RlbC4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1zaGVsbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImRvdG5ldCBlZiBtaWdyYXRpb25zIGFkZCBJbml0aWFsQ3JlYXRlXG5kb3RuZXQgZWYgZGF0YWJhc2UgdXBkYXRlXG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJ0aGUtaW5pdGlhbGNyZWF0ZS1jbGFzcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlRoZSBJbml0aWFsQ3JlYXRlIGNsYXNzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFeGFtaW5lIHRoZSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTWlncmF0aW9ucy97dGltZXN0YW1wfV9Jbml0aWFsQ3JlYXRlLmNzIiksICIgbWlncmF0aW9uIGZpbGU6IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHsKICAgICJjbGFzc05hbWUiOiAibGFuZ3VhZ2UtY3MiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJwdWJsaWMgcGFydGlhbCBjbGFzcyBJbml0aWFsIDogTWlncmF0aW9uXG57XG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgVXAoTWlncmF0aW9uQnVpbGRlciBtaWdyYXRpb25CdWlsZGVyKVxuICAgIHtcbiAgICAgICAgbWlncmF0aW9uQnVpbGRlci5DcmVhdGVUYWJsZShcbiAgICAgICAgICAgIG5hbWU6IFwiTW92aWVcIixcbiAgICAgICAgICAgIGNvbHVtbnM6IHRhYmxlID0+IG5ld1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIElkID0gdGFibGUuQ29sdW1uPGludD4obnVsbGFibGU6IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAuQW5ub3RhdGlvbihcIlNxbFNlcnZlcjpWYWx1ZUdlbmVyYXRpb25TdHJhdGVneVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3FsU2VydmVyVmFsdWVHZW5lcmF0aW9uU3RyYXRlZ3kuSWRlbnRpdHlDb2x1bW4pLFxuICAgICAgICAgICAgICAgIFRpdGxlID0gdGFibGUuQ29sdW1uPHN0cmluZz4obnVsbGFibGU6IHRydWUpLFxuICAgICAgICAgICAgICAgIFJlbGVhc2VEYXRlID0gdGFibGUuQ29sdW1uPERhdGVUaW1lPihudWxsYWJsZTogZmFsc2UpLFxuICAgICAgICAgICAgICAgIEdlbnJlID0gdGFibGUuQ29sdW1uPHN0cmluZz4obnVsbGFibGU6IHRydWUpLFxuICAgICAgICAgICAgICAgIFByaWNlID0gdGFibGUuQ29sdW1uPGRlY2ltYWw+KG51bGxhYmxlOiBmYWxzZSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25zdHJhaW50czogdGFibGUgPT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5QcmltYXJ5S2V5KFwiUEtfTW92aWVcIiwgeCA9PiB4LklkKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIERvd24oTWlncmF0aW9uQnVpbGRlciBtaWdyYXRpb25CdWlsZGVyKVxuICAgIHtcbiAgICAgICAgbWlncmF0aW9uQnVpbGRlci5Ecm9wVGFibGUoXG4gICAgICAgICAgICBuYW1lOiBcIk1vdmllXCIpO1xuICAgIH1cbn1cbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlRoZSAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVXAiKSwgIiBtZXRob2QgY3JlYXRlcyB0aGUgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk1vdmllIiksICIgdGFibGUgYW5kIGNvbmZpZ3VyZXMgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIklkIiksICIgYXMgdGhlIHByaW1hcnkga2V5LiBUaGUgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkRvd24iKSwgIiBtZXRob2QgcmV2ZXJ0cyB0aGUgc2NoZW1hIGNoYW5nZXMgbWFkZSBieSB0aGUgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlVwIiksICIgbWlncmF0aW9uLiIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZGVwZW5kZW5jeS1pbmplY3Rpb24taW4tdGhlLWNvbnRyb2xsZXIiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjYxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJEZXBlbmRlbmN5IGluamVjdGlvbiBpbiB0aGUgY29udHJvbGxlciIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRmluaXNoIG9mZiB0aGUgdHV0b3JpYWwgbm90ZXMgIiwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicCIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hc3BuZXQvY29yZS90dXRvcmlhbHMvZmlyc3QtbXZjLWFwcC9hZGRpbmctbW9kZWw/dmlldz1hc3BuZXRjb3JlLTMuMSZ0YWJzPXZpc3VhbC1zdHVkaW8tbWFjI2RlcGVuZGVuY3ktaW5qZWN0aW9uLWluLXRoZS1jb250cm9sbGVyIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI2NAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiZnJvbSBoZXJlIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNjcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTm90ZTogU3RvcHBpbmcgc2luY2UgdGhlIGNvbnRleHQgaXMgZW5vdWdoIGZvciBvdGhlciB3b3JrIHRvIGJlIGNvbXBsZXRlZC4iKSk7Cn0KCmlmICh0eXBlb2YgTURYQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgTURYQ29udGVudCAmJiBNRFhDb250ZW50ID09PSBPYmplY3QoTURYQ29udGVudCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTURYQ29udGVudCIsCiAgICAgIGZpbGVuYW1lOiAibWFudWFsL0RvdG5ldC9BZGRpbmctTW9kZWxzLm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0RvdG5ldC9BZGRpbmctTW9kZWxzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobGF5b3V0UHJvcHMsICJsYXlvdXRQcm9wcyIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0RvdG5ldC9BZGRpbmctTW9kZWxzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYTGF5b3V0LCAiTURYTGF5b3V0IiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvRG90bmV0L0FkZGluZy1Nb2RlbHMubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0RvdG5ldC9BZGRpbmctTW9kZWxzLm1kIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Dotnet/Adding-Models.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAApB,CADF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAApB,CAJF,CAPK,EAeL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAfK,EAkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAlB,mCAlBK,EAmBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8YAAL,CAnBK,EAsCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAoD;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAApD,mEADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAAyH;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACrH;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADqH,EAErH;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAFqH,CAAzH,CAFF,CAtCK,EA6CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDA7CK,EA8CL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA9CK,EAiDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiB;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAjB,sEAjDK,EAkDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oKAAH,CAlDK,EAmDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAnDK,EAoDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAJF,CApDK,EA0DL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA1DK,EA6DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yKAAuK;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAvK,8DA7DK,EA8DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA9DK,EA+DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEA/DK,EAgEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sVAAL,CAhEK,EAkFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAoC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAApC,yKAlFK,EAmFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAnFK,EAsFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kbAtFK,EAuFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAvFK,EAwFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAAL,CAxFK,EA6FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA7B,MA7FK,EA8FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sQAAL,CA9FK,EAwGL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAxGK,EA2GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAX,iBAAuF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAvF,MA3GK,EA4GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qTAAL,CA5GK,EA4HL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA5HK,EA+HL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GA/HK,EAgIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oLAAL,CAhIK,EAoIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EApIK,EAqIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,UAAU,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CADF,CADF,EAWE;AAAO,IAAA,UAAU,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAJF,CADF,EASE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJF,CATF,EAiBE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAJF,CAjBF,EAyBE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAJF,CAzBF,EAiCE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAJF,CAjCF,EAyCE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAJF,CAzCF,CAXF,CArIK,EAmML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA+B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA/B,CAnMK,EAoML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BApMK,EAuML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAvMK,EAwML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAL,CAxMK,EA6ML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA7MK,EAgNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAnB,qBAhNK,EAiNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ogCAAL,CAjNK,EAgPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,0BAAiF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjF,4BAA4J;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA5J,+BAAuO;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAvO,qDAA0U;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA1U,gBAhPK,EAiPL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAjPK,EAoPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAqC;AAAG,IAAA,UAAU,EAAC;AAAd,KAAsB;AACvD,YAAQ;AAD+C,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArC,CApPK,EAuPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAvPK,CAAP;AAyPD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAxQMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"adding-models\"\n    }}>{`Adding Models`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-model?view=aspnetcore-3.1&tabs=visual-studio\"\n        }}>{`Microsoft Docs: Add a model to an ASP.NET Core MVC app`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netframework-4.8\"\n        }}>{`DataAnnotatons used in tutorial`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"add-a-data-model-class\"\n    }}>{`Add a data model class`}</h2>\n    <p>{`Update the `}<inlineCode parentName=\"p\">{`Models/Movie.cs`}</inlineCode>{` file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace MvcMovie.Models\n{\n    public class Movie\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n\n        [DataType(DataType.Date)]\n        public DateTime ReleaseDate { get; set; }\n        public string Genre { get; set; }\n        public decimal Price { get; set; }\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The Movie class contains an `}<inlineCode parentName=\"li\">{`Id`}</inlineCode>{` field, which is required by the database for the primary key.`}</li>\n      <li parentName=\"ul\">{`The DataType attribute on ReleaseDate specifies the type of the data (Date). With this attribute:`}<ol parentName=\"li\">\n          <li parentName=\"ol\">{`The user is not required to enter time information in the date field.`}</li>\n          <li parentName=\"ol\">{`Only the date is displayed, not time information.`}</li>\n        </ol></li>\n    </ul>\n    <p>{`DataAnnotations are covered in a later tutorial.`}</p>\n    <h2 {...{\n      \"id\": \"add-nuget-packages\"\n    }}>{`Add NuGet Packages`}</h2>\n    <p>{`Reference `}<strong parentName=\"p\">{`Resource `}{`[1]`}</strong>{` in order to see installation examples for Visual Studio for Mac.`}</p>\n    <p><em parentName=\"p\">{`Note: I haven't confirmed, but you may be able to get away with installing through dotnet CLI. From what I see later in the tutorial, NuGet may be required.`}</em></p>\n    <p>{`Packages required in this tutorial:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Microsoft.EntityFrameworkCore.SQLite`}</li>\n      <li parentName=\"ol\">{`Microsoft.VisualStudio.Web.CodeGeneration.Design (likely not needed if installing by CLI)`}</li>\n      <li parentName=\"ol\">{`Microsoft.EntityFrameworkCore.SqlServer`}</li>\n      <li parentName=\"ol\">{`Microsoft.EntityFrameworkCore.Design`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"create-database-context-class\"\n    }}>{`Create database context class`}</h2>\n    <p>{`A database context class is needed to coordinate EF Core functionality (Create, Read, Update, Delete) for the Movie model. The database context is derived from `}<inlineCode parentName=\"p\">{`Microsoft.EntityFrameworkCore.DbContext`}</inlineCode>{` and specifies the entities to include in the data model.`}</p>\n    <p>{`Create a Data folder.`}</p>\n    <p>{`Add a Data/MvcMovieContext.cs file with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`using Microsoft.EntityFrameworkCore;\nusing MvcMovie.Models;\n\nnamespace MvcMovie.Data\n{\n    public class MvcMovieContext : DbContext\n    {\n        public MvcMovieContext (DbContextOptions<MvcMovieContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<Movie> Movie { get; set; }\n    }\n}\n`}</code></pre>\n    <p>{`The preceding code creates a `}<inlineCode parentName=\"p\">{`DbSet<Movie>`}</inlineCode>{` property for the entity set. In Entity Framework terminology, an entity set typically corresponds to a database table. An entity corresponds to a row in the table.`}</p>\n    <h2 {...{\n      \"id\": \"register-the-database-context\"\n    }}>{`Register the database context`}</h2>\n    <p>{`ASP.NET Core is built with dependency injection (DI). Services (such as the EF Core DB context) must be registered with DI during application startup. Components that require these services (such as Razor Pages) are provided these services via constructor parameters. The constructor code that gets a DB context instance is shown later in the tutorial. In this section, you register the database context with the DI container.`}</p>\n    <p>{`Add to the top of Startup.cs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`using MvcMovie.Data;\nusing Microsoft.EntityFrameworkCore;\n`}</code></pre>\n    <p>{`Add the following for `}<inlineCode parentName=\"p\">{`Startup.ConfigureServices`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`public void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllersWithViews();\n\n    services.AddDbContext<MvcMovieContext>(options =>\n            options.UseSqlite(Configuration.GetConnectionString(\"MvcMovieContext\")));\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-a-database-connection-string\"\n    }}>{`Add a database connection string`}</h2>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`ConnectionStrings`}</inlineCode>{` config to `}<inlineCode parentName=\"p\">{`appsettings.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"MvcMovieContext\": \"Data Source=MvcMovie.db\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scaffold-movie-pages\"\n    }}>{`Scaffold movie pages`}</h2>\n    <p>{`Use the scaffolding tool to produce Create, Read, Update, and Delete (CRUD) pages for the movie model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet aspnet-codegenerator controller -name MoviesController -m Movie -dc MvcMovieContext --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries\n`}</code></pre>\n    <p>{`The following table details the ASP.NET Core code generator parameters:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-m`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the model.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-dc`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The data context.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-udl`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use the default layout.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`--relativeFolderPath`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The relative output folder path to create the files.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`--useDefaultLayout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The default layout should be used for the views.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`--referenceScriptLibraries`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Adds `}{`_`}{`ValidationScriptsPartial to Edit and Create pages`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Note: for more help run `}<inlineCode parentName=\"p\">{`dotnet aspnet-codegenerator controller -h`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"initial-migration\"\n    }}>{`Initial migration`}</h2>\n    <p>{`Use the EF Core Migrations feature to create the database. Migrations is a set of tools that let you create and update a database to match your data model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet ef migrations add InitialCreate\ndotnet ef database update\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-initialcreate-class\"\n    }}>{`The InitialCreate class`}</h2>\n    <p>{`Examine the `}<inlineCode parentName=\"p\">{`Migrations/{timestamp}_InitialCreate.cs`}</inlineCode>{` migration file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`public partial class Initial : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"Movie\",\n            columns: table => new\n            {\n                Id = table.Column<int>(nullable: false)\n                    .Annotation(\"SqlServer:ValueGenerationStrategy\",\n                                 SqlServerValueGenerationStrategy.IdentityColumn),\n                Title = table.Column<string>(nullable: true),\n                ReleaseDate = table.Column<DateTime>(nullable: false),\n                Genre = table.Column<string>(nullable: true),\n                Price = table.Column<decimal>(nullable: false)\n            },\n            constraints: table =>\n            {\n                table.PrimaryKey(\"PK_Movie\", x => x.Id);\n            });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(\n            name: \"Movie\");\n    }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Up`}</inlineCode>{` method creates the `}<inlineCode parentName=\"p\">{`Movie`}</inlineCode>{` table and configures `}<inlineCode parentName=\"p\">{`Id`}</inlineCode>{` as the primary key. The `}<inlineCode parentName=\"p\">{`Down`}</inlineCode>{` method reverts the schema changes made by the `}<inlineCode parentName=\"p\">{`Up`}</inlineCode>{` migration.`}</p>\n    <h2 {...{\n      \"id\": \"dependency-injection-in-the-controller\"\n    }}>{`Dependency injection in the controller`}</h2>\n    <p>{`Finish off the tutorial notes `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-model?view=aspnetcore-3.1&tabs=visual-studio-mac#dependency-injection-in-the-controller\"\n      }}>{`from here`}</a></p>\n    <p>{`Note: Stopping since the context is enough for other work to be completed.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}