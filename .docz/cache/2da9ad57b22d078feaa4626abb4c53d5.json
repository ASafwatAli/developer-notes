{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/iOS/iOS-Gaming-Intro.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/iOS/iOS-Gaming-Intro.md","mtime":1579074369045},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/iOS/iOS-Gaming-Intro.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ios-gaming-intro\"\n    }}>{`iOS Gaming Intro`}</h1>\n    <h2 {...{\n      \"id\": \"iosgame-1-ziggity-gag-using-spritekit\"\n    }}>{`IOSGAME-1: Ziggity Gag using SpriteKit`}</h2>\n    <h2 {...{\n      \"id\": \"iosgame-11-creating-the-scene\"\n    }}>{`IOSGAME-1.1: Creating the Scene`}</h2>\n    <p>{`As a new Xcode Project, let's select Game, name, next and create!`}</p>\n    <p>{`When beginning, you will find a `}<inlineCode parentName=\"p\">{`GameViewController.swift`}</inlineCode>{` file. Starting from scratch, remove everything such that it looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport SpriteKit\nimport GameplayKit\n\nclass GameViewController: UIViewController {\n\n\n}\n`}</code></pre>\n    <p>{`Then, we begin by creating the scene:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  func createScene() {\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: firstBox)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // createLight\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n  }\n\n}\n`}</code></pre>\n    <p>{`To explore how the camera works, feel free to head to `}<inlineCode parentName=\"p\">{`art.scnassets > ship.scn`}</inlineCode>{` and throw in a camera to see how it works.`}</p>\n    <p>{`From this, you can head to position after adding a camera and chang the `}<inlineCode parentName=\"p\">{`Position`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Euler`}</inlineCode>{` to see the changes that this makes. `}<inlineCode parentName=\"p\">{`Euler`}</inlineCode>{` essentially rotates it clockwise around the axis.`}</p>\n    <p>{`After changing this, you can select `}<inlineCode parentName=\"p\">{`camera`}</inlineCode>{` from the bottom just to see how it looks.`}</p>\n    <h2 {...{\n      \"id\": \"iosgame-12-adding-colors-and-a-person\"\n    }}>{`IOSGAME-1.2: Adding Colors and a Person`}</h2>\n    <p>{`Create a global node: `}<inlineCode parentName=\"p\">{`var person = SCNNode()`}</inlineCode></p>\n    <p>{`Then, in `}<inlineCode parentName=\"p\">{`createScene()`}</inlineCode>{` we can add`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Create Person\n\nlet personGeo = SCNSphere(radius: 0.2)\nperson = SCNNode(geometry: personGeo)\nlet personMat = SCNMaterial()\npersonMat.diffuse.contents = UIColor.red\npersonGeo.materials = [personMat]\nperson.position = SCNVector3Make(0, 1.1, 0)\nscene.rootNode.addChildNode(person)\n`}</code></pre>\n    <p>{`For the actions, we can override the `}<inlineCode parentName=\"p\">{`touchesBegan()`}</inlineCode>{` function and apply some logic. Ensure that you create the appropriate global Booleans.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n`}</code></pre>\n    <p>{`After adjusting the constaint of what we want the camera to look at etc. we can now start using the camera to look our \"person\". The code up to the end of this section looks as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Person\n\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosgame-13-creating-a-path\"\n    }}>{`IOSGAME-1.3: Creating a Path`}</h2>\n    <p>{`Creating the function createBox(), we can use a new SCNNode dynamically generated along with a switch on `}<inlineCode parentName=\"p\">{`arc4random`}</inlineCode>{` in order to create new boxes.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }\n`}</code></pre>\n    <p>{`By the end of this stage, you will end up having a path to follow that has 6 boxes ahead for you to see, but it will not decide whether or not you are on the box.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController, SCNSceneRendererDelegate {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  var tempBox = SCNNode()\n\n  var prevBoxNumber = Int()\n  var boxNumber = Int()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  // used to ensure ball is on the path\n  func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {\n    let deleteBox = self.scene.rootNode.childNode(withName: \"\\\\(prevBoxNumber)\", recursively: true)\n\n    if (deleteBox?.position.x)! > person.position.x + 1 || (deleteBox?.position.z)! > person.position.z + 1 {\n      prevBoxNumber+=1\n\n      deleteBox?.removeFromParentNode()\n\n      createBox()\n    }\n  }\n\n  func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    prevBoxNumber = 0\n    boxNumber = 0\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n    sceneView.delegate = self\n    sceneView.scene = scene\n\n    // Create Person\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n    firstBox.name = \"\\\\(boxNumber)\"\n\n    for i in 0...6 {\n      createBox()\n    }\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosgame-14-keeping-a-person-on-the-path\"\n    }}>{`IOSGAME-1.4: Keeping a person on the path`}</h2>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}