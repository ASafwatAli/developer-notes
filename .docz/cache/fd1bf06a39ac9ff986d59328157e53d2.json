{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md","mtime":1552088380786},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiamF2YS1sYW1iZGEtZnVuY3MifSwiSmF2YSBMYW1iZGEgRnVuY3MiKSxtZHgoInAiLG51bGwsIlRoZSBiYXNpYyBnaXN0IGlzIHRvIGdlbmVyYXRlIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImludGVyZmFjZSIpLCIgd2l0aCB0aGUgbGFtYmRhIHNpZ25hdHVyZSwgdGhlbiBleHBsaWNpdGx5IGNyZWF0ZSBhIGZ1bmN0aW9uIHByZWZhY2UgYnkgdGhlIGludGVyZmFjZSB0eXBlLiIpLG1keCgicCIsbnVsbCwiVGhpcyB3aWxsIGFsbG93IHlvdSB0byBjYWxsIHRoZSBsYW1iZGEgZnVuY3Rpb24gYXMgYSBpbnN0YW5jZSBtZXRob2QuIiksbWR4KCJoMiIseyJpZCI6ImV4YW1wbGUifSwiRXhhbXBsZSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCIvLyBzcmMvbWFpbi9qYXZhL0xhbWJkYS5qYXZhXG5pbnRlcmZhY2UgQW5vbiB7XG4gICAgU3RyaW5nIGhlbGxvV29ybGQoKTtcbn1cblxuaW50ZXJmYWNlIEFub25JbnQge1xuICAgIGludCBzdW0oaW50IGEsIGludCBiKTtcbn1cblxuY2xhc3MgTGFtYmRhIHtcbiAgICBTdHJpbmcgaGVsbG8oKSB7XG4gICAgICAgIEFub24gYW5vbiA9ICgpIC0+IFwiSGVsbG8sIFdvcmxkIVwiO1xuICAgICAgICByZXR1cm4gYW5vbi5oZWxsb1dvcmxkKCk7XG4gICAgfVxuXG4gICAgaW50IHN1bU9uZVBsdXNUd28oKSB7XG4gICAgICAgIEFub25JbnQgYW5vbiA9IChpbnQgYSwgaW50IGIpIC0+IGEgKyBiO1xuICAgICAgICByZXR1cm4gYW5vbi5zdW0oMSwgMik7XG4gICAgfVxufVxuIikpLG1keCgicCIsbnVsbCwiQXMgZm9yIHRoZSB0ZXN0IGZpbGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSksIi8vIHNyYy90ZXN0cy9qYXZhL0xhbWJkYVRlc3QuamF2YVxuaW1wb3J0IG9yZy5qdW5pdC5JZ25vcmU7XG5pbXBvcnQgb3JnLmp1bml0LlRlc3Q7XG5cbmltcG9ydCBzdGF0aWMgb3JnLmp1bml0LkFzc2VydC5hc3NlcnRFcXVhbHM7XG5cbnB1YmxpYyBjbGFzcyBMYW1iZGFUZXN0IHtcbiAgICBAVGVzdFxuICAgIHB1YmxpYyB2b2lkIHRlc3RMYW1iZGEoKSB7XG4gICAgICAgIGFzc2VydEVxdWFscyhcIkhlbGxvLCBXb3JsZCFcIiwgbmV3IExhbWJkYSgpLmhlbGxvKCkpO1xuICAgIH1cblxuICAgIEBUZXN0XG4gICAgcHVibGljIHZvaWQgdGVzdExhbWJkYVN1bSgpIHtcbiAgICAgICAgYXNzZXJ0RXF1YWxzKDMsIG5ldyBMYW1iZGEoKS5zdW1PbmVQbHVzVHdvKCkpO1xuICAgIH1cbn1cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0phdmEvSmF2YS1MYW1iZGEtRnVuY3MubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,mBADA,CAAR,qBADK,CAIL,gDAAuC,kBAAY,UAAU,CAAC,GAAvB,cAAvC,gGAJK,CAKL,qFALK,CAML,SAAQ,CACN,KAAM,SADA,CAAR,WANK,CASL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,gYAAL,CATK,CAgCL,qCAhCK,CAiCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,2YAAL,CAjCK,CAAP,CAsDD,C,4QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java-lambda-funcs\"\n    }}>{`Java Lambda Funcs`}</h1>\n    <p>{`The basic gist is to generate a `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` with the lambda signature, then explicitly create a function preface by the interface type.`}</p>\n    <p>{`This will allow you to call the lambda function as a instance method.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Lambda.java\ninterface Anon {\n    String helloWorld();\n}\n\ninterface AnonInt {\n    int sum(int a, int b);\n}\n\nclass Lambda {\n    String hello() {\n        Anon anon = () -> \"Hello, World!\";\n        return anon.helloWorld();\n    }\n\n    int sumOnePlusTwo() {\n        AnonInt anon = (int a, int b) -> a + b;\n        return anon.sum(1, 2);\n    }\n}\n`}</code></pre>\n    <p>{`As for the test file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/tests/java/LambdaTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LambdaTest {\n    @Test\n    public void testLambda() {\n        assertEquals(\"Hello, World!\", new Lambda().hello());\n    }\n\n    @Test\n    public void testLambdaSum() {\n        assertEquals(3, new Lambda().sumOnePlusTwo());\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}