{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md","mtime":1566512524883},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJidWlsZGluZy1ydXN0LWNvbW1hbmQtbGluZS10b29scyJ9LCJCdWlsZGluZyBSdXN0IENvbW1hbmQgTGluZSBUb29scyIpLG1keCgicCIsbnVsbCwiSW5pdGlhbCBmaW5kaW5ncyBiYXNlZCBvZmYgYSB1c2VmdWwgYXJ0aWNsZSAiLG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vbWF0dGdhdGh1LmdpdGh1Yi5pby93cml0aW5nLWNsaS1hcHAtcnVzdC8ifSksImZvdW5kIGhlcmUiKSwiLiIpLG1keCgicCIsbnVsbCwiV2UncmUgdXNpbmcgdGhlICIsbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsYXAtcnMvY2xhcCJ9KSwiQ2xhcCIpLCIgY3JhdGUgdG8gaGVscCBib290c3RyYXAgQ0xJcy4iKSxtZHgoImgyIix7ImlkIjoidXNlZnVsLXRvb2xzLXRvLWNvbnNpZGVyIn0sIlVzZWZ1bCB0b29scyB0byBjb25zaWRlciIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9ydXN0LWNsaS9odW1hbi1wYW5pYyJ9KSwiaHR0cHM6Ly9naXRodWIuY29tL3J1c3QtY2xpL2h1bWFuLXBhbmljIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vaG5pa3NpYy9ydXN0LXN1YnByb2Nlc3MifSksImh0dHBzOi8vZ2l0aHViLmNvbS9obmlrc2ljL3J1c3Qtc3VicHJvY2VzcyIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL29jb25ub3I2NjMvZHVjdC5ycyJ9KSwiaHR0cHM6Ly9naXRodWIuY29tL29jb25ub3I2NjMvZHVjdC5ycyIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL2trYXdha2FtL3J1c3R5bGluZSJ9KSwiaHR0cHM6Ly9naXRodWIuY29tL2trYXdha2FtL3J1c3R5bGluZSIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL21pdHN1aGlrby9pbmRpY2F0aWYifSksImh0dHBzOi8vZ2l0aHViLmNvbS9taXRzdWhpa28vaW5kaWNhdGlmIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9KSksbWR4KCJoMiIseyJpZCI6InRsZHIifSwidGw7ZHIiKSxtZHgoInAiLG51bGwsIkluaXRpYWxpc2UgYW4gYXBwIHVzaW5nICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjYXJnbyBuZXcgYXBwX25hbWVfeW91X3dhbnQgLS1iaW4iKSwiLiIpLG1keCgicCIsbnVsbCwiVGhpcyBleGFtcGxlIGRpdmVyZ2VzIGZyb20gdGhlIGFib3ZlIGFydGljbGUgYnkgdXNpbmcgdGhlIFwiQ2xhcFwiIGNyYXRlIHdpdGggdGhlIFlBTUwgZmlsZSBjb25maWcuIiksbWR4KCJoMyIseyJpZCI6InNyY21haW5ycyJ9LCJzcmMvbWFpbi5ycyIpLG1keCgicCIsbnVsbCwiVXBkYXRlIHRoZSBmaWxlIHRvIHJlZmxlY3QgdGhlIGZvbGxvd2luZzoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSwiI1ttYWNyb191c2VdXG5leHRlcm4gY3JhdGUgY2xhcDtcbnVzZSBjbGFwOjpBcHA7XG5cbmZuIG1haW4oKSB7XG4gICAgbGV0IHlhbWwgPSBsb2FkX3lhbWwhKFwiY2xpLnltbFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IEFwcDo6ZnJvbV95YW1sKHlhbWwpLmdldF9tYXRjaGVzKCk7XG5cbiAgICAvLyBHZXRzIGEgdmFsdWUgZm9yIGNvbmZpZyBpZiBzdXBwbGllZCBieSB1c2VyLCBvciBkZWZhdWx0cyB0byBcImRlZmF1bHQuY29uZlwiXG4gICAgbGV0IGNvbmZpZyA9IG1hdGNoZXMudmFsdWVfb2YoXCJjb25maWdcIikudW53cmFwX29yKFwiZGVmYXVsdC5jb25mXCIpO1xuICAgIHByaW50bG4hKFwiVmFsdWUgZm9yIGNvbmZpZzoge31cIiwgY29uZmlnKTtcblxuICAgIC8vIENhbGxpbmcgLnVud3JhcCgpIGlzIHNhZmUgaGVyZSBiZWNhdXNlIFwiSU5QVVRcIiBpcyByZXF1aXJlZCAoaWYgXCJJTlBVVFwiIHdhc24ndFxuICAgIC8vIHJlcXVpcmVkIHdlIGNvdWxkIGhhdmUgdXNlZCBhbiAnaWYgbGV0JyB0byBjb25kaXRpb25hbGx5IGdldCB0aGUgdmFsdWUpXG4gICAgcHJpbnRsbiEoXCJVc2luZyBpbnB1dCBmaWxlOiB7fVwiLCBtYXRjaGVzLnZhbHVlX29mKFwiSU5QVVRcIikudW53cmFwKCkpO1xuXG4gICAgLy8gVmFyeSB0aGUgb3V0cHV0IGJhc2VkIG9uIGhvdyBtYW55IHRpbWVzIHRoZSB1c2VyIHVzZWQgdGhlIFwidmVyYm9zZVwiIGZsYWdcbiAgICAvLyAoaS5lLiAnbXlwcm9nIC12IC12IC12JyBvciAnbXlwcm9nIC12dnYnIHZzICdteXByb2cgLXYnXG4gICAgbWF0Y2ggbWF0Y2hlcy5vY2N1cnJlbmNlc19vZihcInZlcmJvc2VcIikge1xuICAgICAgICAwID0+IHByaW50bG4hKFwiTm8gdmVyYm9zZSBpbmZvXCIpLFxuICAgICAgICAxID0+IHByaW50bG4hKFwiU29tZSB2ZXJib3NlIGluZm9cIiksXG4gICAgICAgIDIgPT4gcHJpbnRsbiEoXCJUb25zIG9mIHZlcmJvc2UgaW5mb1wiKSxcbiAgICAgICAgMyB8IF8gPT4gcHJpbnRsbiEoXCJEb24ndCBiZSBjcmF6eVwiKSxcbiAgICB9XG5cbiAgICAvLyBZb3UgY2FuIGhhbmRsZSBpbmZvcm1hdGlvbiBhYm91dCBzdWJjb21tYW5kcyBieSByZXF1ZXN0aW5nIHRoZWlyIG1hdGNoZXMgYnkgbmFtZVxuICAgIC8vIChhcyBiZWxvdyksIHJlcXVlc3RpbmcganVzdCB0aGUgbmFtZSB1c2VkLCBvciBib3RoIGF0IHRoZSBzYW1lIHRpbWVcbiAgICBpZiBsZXQgU29tZShtYXRjaGVzKSA9IG1hdGNoZXMuc3ViY29tbWFuZF9tYXRjaGVzKFwidGVzdFwiKSB7XG4gICAgICAgIGlmIG1hdGNoZXMuaXNfcHJlc2VudChcImRlYnVnXCIpIHtcbiAgICAgICAgICAgIHByaW50bG4hKFwiUHJpbnRpbmcgZGVidWcgaW5mby4uLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByaW50bG4hKFwiUHJpbnRpbmcgbm9ybWFsbHkuLi5cIik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iKSksbWR4KCJoMyIseyJpZCI6InNyY2NsaXltbCJ9LCJzcmMvY2xpLnltbCIpLG1keCgicCIsbnVsbCwiRm9yIHRoZSBDTEkgYXJncywgc2V0IHRoZSBmb2xsb3dpbmc6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXltbCJ9KSwibmFtZTogamFtYWljYVxudmVyc2lvbjogXCIxLjBcIlxuYXV0aG9yOiBEZW5uaXMgTydLZWVmZmUgPGhlbGxvQGRlbm5pc29rZWVmZmUuY29tPlxuYWJvdXQ6IEJ1aWxkIGFnbm9zdGljIGFwcCBjb25maWdzXG5hcmdzOlxuICAgIC0gY29uZmlnOlxuICAgICAgICBzaG9ydDogY1xuICAgICAgICBsb25nOiBjb25maWdcbiAgICAgICAgdmFsdWVfbmFtZTogRklMRVxuICAgICAgICBoZWxwOiBTZXRzIGEgY3VzdG9tIGNvbmZpZyBmaWxlXG4gICAgICAgIHRha2VzX3ZhbHVlOiB0cnVlXG4gICAgLSBJTlBVVDpcbiAgICAgICAgaGVscDogU2V0cyB0aGUgaW5wdXQgZmlsZSB0byB1c2VcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgaW5kZXg6IDFcbiAgICAtIHZlcmJvc2U6XG4gICAgICAgIHNob3J0OiB2XG4gICAgICAgIG11bHRpcGxlOiB0cnVlXG4gICAgICAgIGhlbHA6IFNldHMgdGhlIGxldmVsIG9mIHZlcmJvc2l0eVxuc3ViY29tbWFuZHM6XG4gICAgLSB0ZXN0OlxuICAgICAgICBhYm91dDogY29udHJvbHMgdGVzdGluZyBmZWF0dXJlc1xuICAgICAgICB2ZXJzaW9uOiBcIjEuM1wiXG4gICAgICAgIGF1dGhvcjogU29tZW9uZSBFLiA8c29tZW9uZV9lbHNlQG90aGVyLmNvbT5cbiAgICAgICAgYXJnczpcbiAgICAgICAgICAgIC0gZGVidWc6XG4gICAgICAgICAgICAgICAgc2hvcnQ6IGRcbiAgICAgICAgICAgICAgICBoZWxwOiBwcmludCBkZWJ1ZyBpbmZvcm1hdGlvblxuIikpLG1keCgiaDMiLHsiaWQiOiJydW5uaW5nLXRoZS1hYm92ZS1jb25maWcifSwiUnVubmluZyB0aGUgYWJvdmUgY29uZmlnIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCJjYXJnbyBydW4gLS0gc3JjL21haW4ucnMgLS1jb25maWc9bWFkZS91cC9cbiMgLi4uIG9taXR0ZWQgUnVzdCBidWlsZCBvdXRwdXRcblZhbHVlIGZvciBjb25maWc6IG1hZGUvdXAvZmlsZVxuVXNpbmcgaW5wdXQgZmlsZTogc3JjL21haW4ucnNcbk5vIHZlcmJvc2UgaW5mb1xuXG5jYXJnbyBydW4gLS0gLS1oZWxwXG4jIHNob3dzIGhlbHAgb3V0cHV0OiBvbWl0dGVkIGZvciBub3dcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL1J1c3QvQnVpbGRpbmctUnVzdC1DTElzLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kCADA,CAAR,oCADK,CAIL,4DAAmD,uBAAG,UAAU,CAAC,GAAd,EAAsB,CACrE,OAAQ,mDAD6D,CAAtB,eAAnD,KAJK,CAOL,gCAAuB,uBAAG,UAAU,CAAC,GAAd,EAAsB,CACzC,OAAQ,iCADiC,CAAtB,SAAvB,kCAPK,CAUL,SAAQ,CACN,KAAM,0BADA,CAAR,4BAVK,CAaL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,yCAD+B,CAAvB,4CAApB,CADF,CAIE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,4CAD+B,CAAvB,+CAApB,CAJF,CAOE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,uCAD+B,CAAvB,0CAApB,CAPF,CAUE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,uCAD+B,CAAvB,0CAApB,CAVF,CAaE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,wCAD+B,CAAvB,2CAApB,CAbF,CAgBE,UAAI,UAAU,CAAC,IAAf,EAhBF,CAbK,CA+BL,SAAQ,CACN,KAAM,MADA,CAAR,SA/BK,CAkCL,wCAA+B,kBAAY,UAAU,CAAC,GAAvB,sCAA/B,KAlCK,CAmCL,mHAnCK,CAoCL,SAAQ,CACN,KAAM,WADA,CAAR,eApCK,CAuCL,yDAvCK,CAwCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,i6CAAL,CAxCK,CA8EL,SAAQ,CACN,KAAM,WADA,CAAR,eA9EK,CAiFL,oDAjFK,CAkFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,cADe,CAA3B,iuBAAL,CAlFK,CAiHL,SAAQ,CACN,KAAM,0BADA,CAAR,4BAjHK,CAoHL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,+NAAL,CApHK,CAAP,CAgID,C,6QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"building-rust-command-line-tools\"\n    }}>{`Building Rust Command Line Tools`}</h1>\n    <p>{`Initial findings based off a useful article `}<a parentName=\"p\" {...{\n        \"href\": \"https://mattgathu.github.io/writing-cli-app-rust/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`We're using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clap-rs/clap\"\n      }}>{`Clap`}</a>{` crate to help bootstrap CLIs.`}</p>\n    <h2 {...{\n      \"id\": \"useful-tools-to-consider\"\n    }}>{`Useful tools to consider`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rust-cli/human-panic\"\n        }}>{`https://github.com/rust-cli/human-panic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hniksic/rust-subprocess\"\n        }}>{`https://github.com/hniksic/rust-subprocess`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/oconnor663/duct.rs\"\n        }}>{`https://github.com/oconnor663/duct.rs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kkawakam/rustyline\"\n        }}>{`https://github.com/kkawakam/rustyline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mitsuhiko/indicatif\"\n        }}>{`https://github.com/mitsuhiko/indicatif`}</a></li>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Initialise an app using `}<inlineCode parentName=\"p\">{`cargo new app_name_you_want --bin`}</inlineCode>{`.`}</p>\n    <p>{`This example diverges from the above article by using the \"Clap\" crate with the YAML file config.`}</p>\n    <h3 {...{\n      \"id\": \"srcmainrs\"\n    }}>{`src/main.rs`}</h3>\n    <p>{`Update the file to reflect the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"srccliyml\"\n    }}>{`src/cli.yml`}</h3>\n    <p>{`For the CLI args, set the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-above-config\"\n    }}>{`Running the above config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}