{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Factory-Pattern.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Factory-Pattern.md","mtime":1562563032026},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9GYWN0b3J5LVBhdHRlcm4ubWQiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKLyogQGpzeCBtZHggKi8KaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCc7Ci8qIEBqc3ggbWR4ICovCgp2YXIgbWFrZVNob3J0Y29kZSA9IGZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSkgewogIHJldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7CiAgICBjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiICsgbmFtZSArICIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpOwogICAgcmV0dXJuIG1keCgiZGl2IiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgICAgX19zb3VyY2U6IHsKICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgIGxpbmVOdW1iZXI6IDkKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSk7CiAgfTsKfTsKCnZhciBsYXlvdXRQcm9wcyA9IHt9Owp2YXIgTURYTGF5b3V0ID0gIndyYXBwZXIiOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpIHsKICB2YXIgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50cywKICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyJjb21wb25lbnRzIl0pOwoKICByZXR1cm4gbWR4KE1EWExheW91dCwgT2JqZWN0LmFzc2lnbih7fSwgbGF5b3V0UHJvcHMsIHByb3BzLCB7CiAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLAogICAgbWR4VHlwZTogIk1EWExheW91dCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBtZHgoImgxIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZmFjdG9yeS1wYXR0ZXJuIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJGYWN0b3J5IFBhdHRlcm4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIEZhY3RvcnkgUGF0dGVyblxuLy8gZmlyc3QsIGNyZWF0ZSBvdXIgcHJvZHVjdHNcbmludGVyZmFjZSBDdXN0b21lciB7XG4gICAgYWRkUG9pbnRzKCk6IHZvaWQ7XG4gICAgYWRkRGlzY291bnQoKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIElHb2xkQ3VzdG9tZXIgZXh0ZW5kcyBDdXN0b21lciB7XG4gICAgZ29sZE9wZXJhdGlvbigpOiB2b2lkO1xufVxuXG5jbGFzcyBHb2xkQ3VzdG9tZXIgaW1wbGVtZW50cyBJR29sZEN1c3RvbWVyIHtcbiAgICBhZGRQb2ludHMoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdHb2xkIEN1c3RvbWVyIC0gUG9pbnRzIEFkZGVkJyk7XG4gICAgfVxuXG4gICAgYWRkRGlzY291bnQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdHb2xkIEN1c3RvbWVyIC0gRGlzY291bnQgQWRkZWQnKTtcbiAgICB9XG5cbiAgICBnb2xkT3BlcmF0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnU3BlY2lmaWMgR29sZCBDdXN0b21lciBvcGVyYXRpb24nKTtcbiAgICB9XG59XG5cbmludGVyZmFjZSBJU2lsdmVyQ3VzdG9tZXIgZXh0ZW5kcyBDdXN0b21lciB7XG4gICAgc2lsdmVyT3BlcmF0aW9uKCk6IHZvaWQ7XG59XG5cbmNsYXNzIFNpbHZlckN1c3RvbWVyIGltcGxlbWVudHMgSVNpbHZlckN1c3RvbWVyIHtcbiAgICBhZGRQb2ludHMoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdHb2xkIEN1c3RvbWVyIC0gUG9pbnRzIEFkZGVkJyk7XG4gICAgfVxuXG4gICAgYWRkRGlzY291bnQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdHb2xkIEN1c3RvbWVyIC0gRGlzY291bnQgQWRkZWQnKTtcbiAgICB9XG5cbiAgICBzaWx2ZXJPcGVyYXRpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTcGVjaWZpYyBTaWx2ZXIgQ3VzdG9tZXIgb3BlcmF0aW9uJyk7XG4gICAgfVxufVxuXG4vLyBidWlsZCBhIHNpbXBsZSBmYWN0b3J5XG4vLyBlbnN1cmUgd2UgdXNlIGEgZ2VuZXJpYyBmb3IgdHlwaW5nIG91ciBjcmVhdGVDdXN0b21lciBtZXRob2QgY29ycmVjdGx5XG5hYnN0cmFjdCBjbGFzcyBDdXN0b21lckZhY3Rvcnk8VCBleHRlbmRzIEN1c3RvbWVyPiB7XG4gICAgZ2V0Q3VzdG9tZXIoKSB7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyID0gdGhpcy5jcmVhdGVDdXN0b21lcigpO1xuICAgICAgICBjdXN0b21lci5hZGRQb2ludHMoKTtcbiAgICAgICAgY3VzdG9tZXIuYWRkRGlzY291bnQoKTtcbiAgICAgICAgcmV0dXJuIGN1c3RvbWVyO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGNyZWF0ZUN1c3RvbWVyKCk6IFQ7XG59XG5cbmNsYXNzIEdvbGRDdXN0b21lckZhY3RvcnkgZXh0ZW5kcyBDdXN0b21lckZhY3Rvcnk8SUdvbGRDdXN0b21lcj4ge1xuICAgIGNyZWF0ZUN1c3RvbWVyKCk6IEdvbGRDdXN0b21lciB7XG4gICAgICAgIHJldHVybiBuZXcgR29sZEN1c3RvbWVyKCk7XG4gICAgfVxufVxuXG5jbGFzcyBTaWx2ZXJDdXN0b21lckZhY3RvcnkgZXh0ZW5kcyBDdXN0b21lckZhY3Rvcnk8SVNpbHZlckN1c3RvbWVyPiB7XG4gICAgY3JlYXRlQ3VzdG9tZXIoKTogU2lsdmVyQ3VzdG9tZXIge1xuICAgICAgICByZXR1cm4gbmV3IFNpbHZlckN1c3RvbWVyKCk7XG4gICAgfVxufVxuXG4vLyBjb2RlIGluIGFjdGlvblxuY29uc3QgZ29sZEN1c3RvbWVyRmFjdG9yeTogR29sZEN1c3RvbWVyRmFjdG9yeSA9IG5ldyBHb2xkQ3VzdG9tZXJGYWN0b3J5KCk7XG5jb25zdCBnb2xkQ3VzdG9tZXIgPSBnb2xkQ3VzdG9tZXJGYWN0b3J5LmdldEN1c3RvbWVyKCk7XG5nb2xkQ3VzdG9tZXIuZ29sZE9wZXJhdGlvbigpO1xuXG5jb25zdCBzaWx2ZXJDdXN0b21lckZhY3RvcnkgPSBuZXcgU2lsdmVyQ3VzdG9tZXJGYWN0b3J5KCk7XG5jb25zdCBzaWx2ZXJDdXN0b21lciA9IHNpbHZlckN1c3RvbWVyRmFjdG9yeS5nZXRDdXN0b21lcigpO1xuc2lsdmVyQ3VzdG9tZXIuc2lsdmVyT3BlcmF0aW9uKCk7XG4iKSkpOwp9CgppZiAodHlwZW9mIE1EWENvbnRlbnQgIT09ICd1bmRlZmluZWQnICYmIE1EWENvbnRlbnQgJiYgTURYQ29udGVudCA9PT0gT2JqZWN0KE1EWENvbnRlbnQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIk1EWENvbnRlbnQiLAogICAgICBmaWxlbmFtZTogIm1hbnVhbC9EZXNpZ24tUGF0dGVybnMvRmFjdG9yeS1QYXR0ZXJuLm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9GYWN0b3J5LVBhdHRlcm4ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvRGVzaWduLVBhdHRlcm5zL0ZhY3RvcnktUGF0dGVybi5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWExheW91dCwgIk1EWExheW91dCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9GYWN0b3J5LVBhdHRlcm4ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9GYWN0b3J5LVBhdHRlcm4ubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Factory-Pattern.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,s5DAAL,CAJK,CAAP;AAoFD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAnGMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"factory-pattern\"\n    }}>{`Factory Pattern`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Factory Pattern\n// first, create our products\ninterface Customer {\n    addPoints(): void;\n    addDiscount(): void;\n}\n\ninterface IGoldCustomer extends Customer {\n    goldOperation(): void;\n}\n\nclass GoldCustomer implements IGoldCustomer {\n    addPoints() {\n        console.log('Gold Customer - Points Added');\n    }\n\n    addDiscount() {\n        console.log('Gold Customer - Discount Added');\n    }\n\n    goldOperation() {\n        console.log('Specific Gold Customer operation');\n    }\n}\n\ninterface ISilverCustomer extends Customer {\n    silverOperation(): void;\n}\n\nclass SilverCustomer implements ISilverCustomer {\n    addPoints() {\n        console.log('Gold Customer - Points Added');\n    }\n\n    addDiscount() {\n        console.log('Gold Customer - Discount Added');\n    }\n\n    silverOperation() {\n        console.log('Specific Silver Customer operation');\n    }\n}\n\n// build a simple factory\n// ensure we use a generic for typing our createCustomer method correctly\nabstract class CustomerFactory<T extends Customer> {\n    getCustomer() {\n        const customer = this.createCustomer();\n        customer.addPoints();\n        customer.addDiscount();\n        return customer;\n    }\n\n    abstract createCustomer(): T;\n}\n\nclass GoldCustomerFactory extends CustomerFactory<IGoldCustomer> {\n    createCustomer(): GoldCustomer {\n        return new GoldCustomer();\n    }\n}\n\nclass SilverCustomerFactory extends CustomerFactory<ISilverCustomer> {\n    createCustomer(): SilverCustomer {\n        return new SilverCustomer();\n    }\n}\n\n// code in action\nconst goldCustomerFactory: GoldCustomerFactory = new GoldCustomerFactory();\nconst goldCustomer = goldCustomerFactory.getCustomer();\ngoldCustomer.goldOperation();\n\nconst silverCustomerFactory = new SilverCustomerFactory();\nconst silverCustomer = silverCustomerFactory.getCustomer();\nsilverCustomer.silverOperation();\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}