{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md","mtime":1562563032035},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJlbG0tZ3VpZGUifSwiRWxtIEd1aWRlIiksbWR4KCJwIixudWxsLCJUaGlzIGlzIGEgYmFzaWMgRWxtIGd1aWRlIHRoYXQgZm9sbG93cyBvbiBmcm9tIHRoZSAiLG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vZ3VpZGUuZWxtLWxhbmcub3JnL2NvcmVfbGFuZ3VhZ2UuaHRtbCJ9KSwiY29yZSBsYW5ndWFnZSB0b3VyIiksIi4iKSxtZHgoImgyIix7ImlkIjoidmFsdWVzIn0sIlZhbHVlcyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksIi0tIEJvb2xlYW5cblRydWUgIDogQm9vbFxuRmFsc2UgOiBCb29sXG5cbjQyICAgIDogbnVtYmVyICAtLSBJbnQgb3IgRmxvYXQgZGVwZW5kaW5nIG9uIHVzYWdlXG4zLjE0ICA6IEZsb2F0XG5cbidhJyAgIDogQ2hhclxuXCJhYmNcIiA6IFN0cmluZ1xuXG4tLSBtdWx0aS1saW5lIFN0cmluZ1xuXCJcIlwiXG5UaGlzIGlzIHVzZWZ1bCBmb3IgaG9sZGluZyBKU09OIG9yIG90aGVyXG5jb250ZW50IHRoYXQgaGFzIFwicXVvdGF0aW9uIG1hcmtzXCIuXG5cIlwiXCJcbiIpKSxtZHgoImgyIix7ImlkIjoiY29tbWVudHMifSwiQ29tbWVudHMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZWxtIn0pLCItLSBhIHNpbmdsZSBsaW5lIGNvbW1lbnRcblxuey0gYSBtdWx0aWxpbmUgY29tbWVudFxuICAgey0gY2FuIGJlIG5lc3RlZCAtfVxuLX1cblxuLS0gcmVtb3ZlIHRoZSB9IGJlbG93IHRvIHRvZ2dsZSBvbi9vZmZcbnstLX1cbmFkZCB4IHkgPSB4ICsgeVxuLS19XG4iKSksbWR4KCJoMiIseyJpZCI6Imxpc3RzIn0sIkxpc3RzIiksbWR4KCJwIixudWxsLCJUaGUgZm9sbG93aW5nIGFyZSBlcXVpdm9jYWw6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWVsbSJ9KSwiWzEsMiwzLDRdXG4xIDo6IFsyLDMsNF1cbjEgOjogMiA6OiAzIDo6IDQgOjogW11cbiIpKSxtZHgoImgyIix7ImlkIjoiY29uZGl0aW9uYWxzIn0sIkNvbmRpdGlvbmFscyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksImlmIHBvd2VyTGV2ZWwgPiA5MDAwIHRoZW4gXCJPdmVyIDkwMDAhXCIgZWxzZSBcImRieiBqb2tlIG5vdCBhcHBsaWNhYmxlXCJcblxuLS0gbXVsdGlwbGUgY29uZGl0aW9uc1xuaWYga2V5ID09IDQwIHRoZW5cbiAgbiArIDFcbmVsc2UgaWYga2V5ID09IDM4IHRoZW5cbiAgbiAtIDFcbmVsc2VcbiAgblxuXG4tLSBjb25kaXRpb25hbHMgYmFzZWQgb24gc3RydWN0dXJlIG9mIGFsZ2VicmFpYyBkYXRhIHR5cGVzIGFuZCBsaXRlcmFsc1xuY2FzZSBtYXliZUxpc3Qgb2ZcbiAgSnVzdCB4cyAtPiB4c1xuICBOb3RoaW5nIC0+IFtdXG5cbmNhc2UgeHMgb2ZcbiAgW10gLT5cbiAgICBOb3RoaW5nXG4gIGZpcnN0IDo6IHJlc3QgLT5cbiAgICBKdXN0IChmaXJzdCwgcmVzdClcblxuY2FzZSBuIG9mXG4gIDAgLT4gMVxuICAxIC0+IDFcbiAgXyAtPiBmaWIgKG4tMSkgKyBmaWIgKG4tMilcbiIpKSxtZHgoImgyIix7ImlkIjoiZnVuY3Rpb25zIn0sIkZ1bmN0aW9ucyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksInNxdWFyZSBuID1cbiAgbl4yXG4iKSksbWR4KCJoMiIseyJpZCI6InJlY29yZHMifSwiUmVjb3JkcyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksIi0tIGNyZWF0ZSByZWNvcmRzXG5vcmlnaW4gPSB7IHggPSAwLCB5ID0gMCB9XG5wb2ludCA9IHsgeCA9IDMsIHkgPSA0IH1cblxuLS0gYWNjZXNzIGZpZWxkc1xub3JpZ2luLnggPT0gMFxucG9pbnQueCA9PSAzXG5cbi0tIGZpZWxkIGFjY2VzcyBmdW5jdGlvblxuTGlzdC5tYXAgLnggWyBvcmlnaW4sIHBvaW50IF0gPT0gWyAwLCAzIF1cblxuLS0gdXBkYXRlIGEgZmllbGRcbnsgcG9pbnQgfCB4ID0gNiB9ID09IHsgeCA9IDYsIHkgPSA0IH1cblxuLS0gdXBkYXRlIG1hbnkgZmllbGRzXG57IHBvaW50IHwgeCA9IHBvaW50LnggKyAxLCB5ID0gcG9pbnQueSArIDEgfVxuIikpLG1keCgiaDIiLHsiaWQiOiJwaXBlcyJ9LCJQaXBlcyIpLG1keCgicCIsbnVsbCwiTm90ZTogXCJQaXBlc1wiIGlzIG5vdCB0aGUgdGVjaG5pY2FsIHRlcm0gaW4gRWxtLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksInZpZXdOYW1lczEgbmFtZXMgPVxuICBTdHJpbmcuam9pbiBcIiwgXCIgKExpc3Quc29ydCBuYW1lcylcblxudmlld05hbWVzMiBuYW1lcyA9XG4gIG5hbWVzXG4gICAgfD4gTGlzdC5zb3J0XG4gICAgfD4gU3RyaW5nLmpvaW4gXCIsIFwiXG5cbi0tIChhcmcgfD4gZnVuYykgaXMgdGhlIHNhbWUgYXMgKGZ1bmMgYXJnKVxuLS0gSnVzdCBrZWVwIHJlcGVhdGluZyB0aGF0IHRyYW5zZm9ybWF0aW9uIVxuIikpLG1keCgiaDIiLHsiaWQiOiJsZXQtZXhwcmVzc2lvbnMifSwiTGV0IEV4cHJlc3Npb25zIiksbWR4KCJwIixudWxsLCJUaGlzIGlzIHVzZWZ1bCBvbmNlIGV4cHJlc3Npb25zIGdldCB0b28gYmlnLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksImxldFxuICB0d2VudHlGb3VyID1cbiAgICAzICogOFxuXG4gIHNpeHRlZW4gPVxuICAgIDQgXiAyXG5pblxudHdlbnR5Rm91ciArIHNpeHRlZW5cblxuLS0gYXBwbGljYXRpb24gd2l0aCBhIGh5cG90ZW51c2UgZnVuY3Rpb25cbmxldFxuICAoIHRocmVlLCBmb3VyICkgPVxuICAgICggMywgNCApXG5cbiAgaHlwb3RlbnVzZSBhIGIgPVxuICAgIHNxcnQgKGFeMiArIGJeMilcbmluXG5oeXBvdGVudXNlIHRocmVlIGZvdXJcblxuLS0gdHlwZSBhbm5vdGF0aW9ucyBpbiBcImxldFwiIGV4cHJlc3Npb25zXG5sZXRcbiAgbmFtZSA6IFN0cmluZ1xuICBuYW1lID1cbiAgICBcIkhlcm1hbm5cIlxuXG4gIGluY3JlbWVudCA6IEludCAtPiBJbnRcbiAgaW5jcmVtZW50IG4gPVxuICAgIG4gKyAxXG5pblxuaW5jcmVtZW50IDEwXG4iKSksbWR4KCJoMiIseyJpZCI6ImFwcGx5aW5nLWZ1bmN0aW9ucyJ9LCJBcHBseWluZyBGdW5jdGlvbnMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZWxtIn0pLCItLSBhbGlhcyBmb3IgYXBwZW5kaW5nIGxpc3RzIGFuZCB0d28gbGlzdHNcbmFwcGVuZCB4cyB5cyA9IHhzICsrIHlzXG54cyA9IFsxLDIsM11cbnlzID0gWzQsNSw2XVxuXG4tLSBBbGwgb2YgdGhlIGZvbGxvd2luZyBleHByZXNzaW9ucyBhcmUgZXF1aXZhbGVudDpcbmExID0gYXBwZW5kIHhzIHlzXG5hMiA9IHhzICsrIHlzXG5cbmIyID0gKCsrKSB4cyB5c1xuXG5jMSA9IChhcHBlbmQgeHMpIHlzXG5jMiA9ICgoKyspIHhzKSB5c1xuIikpLG1keCgiaDIiLHsiaWQiOiJlbG0tbW9kdWxlcyJ9LCJFbG0gTW9kdWxlcyIpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sIlF1YWxpZmllZCBpbXBvcnRzIGFyZSBwcmVmZXJyZWQuIE1vZHVsZSBuYW1lcyBtdXN0IG1hdGNoIHRoZWlyIGZpbGUgbmFtZSwgc28gbW9kdWxlIFBhcnNlci5VdGlscyBuZWVkcyB0byBiZSBpbiBmaWxlIFBhcnNlci9VdGlscy5lbG0uIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksIm1vZHVsZSBNeU1vZHVsZSBleHBvc2luZyAoLi4pXG5cbi0tIHF1YWxpZmllZCBpbXBvcnRzXG5pbXBvcnQgTGlzdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBMaXN0Lm1hcCwgTGlzdC5mb2xkbFxuaW1wb3J0IExpc3QgYXMgTCAgICAgICAgICAgICAgICAgICAgICAgLS0gTC5tYXAsIEwuZm9sZGxcblxuLS0gb3BlbiBpbXBvcnRzXG5pbXBvcnQgTGlzdCBleHBvc2luZyAoLi4pICAgICAgICAgICAgICAtLSBtYXAsIGZvbGRsLCBjb25jYXQsIC4uLlxuaW1wb3J0IExpc3QgZXhwb3NpbmcgKCBtYXAsIGZvbGRsICkgICAgLS0gbWFwLCBmb2xkbFxuXG5pbXBvcnQgTWF5YmUgZXhwb3NpbmcgKCBNYXliZSApICAgICAgICAtLSBNYXliZVxuaW1wb3J0IE1heWJlIGV4cG9zaW5nICggTWF5YmUoLi4pICkgICAgLS0gTWF5YmUsIEp1c3QsIE5vdGhpbmdcbiIpKSxtZHgoImgyIix7ImlkIjoidHlwZS1hbm5vdGF0aW9ucy0tYWxpYXNlcyJ9LCJUeXBlIEFubm90YXRpb25zICsgQWxpYXNlcyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksIi0tIGFubm90YXRpb25zXG5hbnN3ZXIgOiBJbnRcbmFuc3dlciA9XG4gIDQyXG5cbmZhY3RvcmlhbCA6IEludCAtPiBJbnRcbmZhY3RvcmlhbCBuID1cbiAgTGlzdC5wcm9kdWN0IChMaXN0LnJhbmdlIDEgbilcblxuZGlzdGFuY2UgOiB7IHggOiBGbG9hdCwgeSA6IEZsb2F0IH0gLT4gRmxvYXRcbmRpc3RhbmNlIHt4LHl9ID1cbiAgc3FydCAoeF4yICsgeV4yKVxuXG4tLSBhbGlhc2VzXG50eXBlIGFsaWFzIE5hbWUgPSBTdHJpbmdcbnR5cGUgYWxpYXMgQWdlID0gSW50XG5cbmluZm8gOiAoTmFtZSxBZ2UpXG5pbmZvID1cbiAgKFwiU3RldmVcIiwgMjgpXG5cbnR5cGUgYWxpYXMgUG9pbnQgPSB7IHg6RmxvYXQsIHk6RmxvYXQgfVxuXG5vcmlnaW4gOiBQb2ludFxub3JpZ2luID1cbiAgeyB4ID0gMCwgeSA9IDAgfVxuIikpLG1keCgiaDIiLHsiaWQiOiJjdXN0b20tdHlwZXMifSwiQ3VzdG9tIFR5cGVzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWVsbSJ9KSwidHlwZSBVc2VyXG4gID0gUmVndWxhciBTdHJpbmcgSW50XG4gIHwgVmlzaXRvciBTdHJpbmdcbiIpKSxtZHgoImgyIix7ImlkIjoiaW50ZXJvcGVyYWJpbGl0eS13aXRoLWpzLWFuZC1wb3J0aW5nIn0sIkludGVyb3BlcmFiaWxpdHkgd2l0aCBKUyBhbmQgUG9ydGluZyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbG0ifSksIi0tIGluY29taW5nIHZhbHVlc1xucG9ydCBwcmljZXMgOiAoRmxvYXQgLT4gbXNnKSAtPiBTdWIgbXNnXG5cbi0tIG91dGdvaW5nIHZhbHVlc1xucG9ydCB0aW1lIDogRmxvYXQgLT4gQ21kIG1zZ1xuIikpLG1keCgicCIsbnVsbCwiVG8gdXNlIHRoaXMgcG9ydCBmcm9tIEpTLCB5b3UgdXNlIHRoaXM6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmFzY3JpcHQifSksInZhciBhcHAgPSBFbG0uRXhhbXBsZS5pbml0KCk7XG5cbmFwcC5wb3J0cy5wcmljZXMuc2VuZCg0Mik7XG5hcHAucG9ydHMucHJpY2VzLnNlbmQoMTMpO1xuXG5hcHAucG9ydHMudGltZS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuYXBwLnBvcnRzLnRpbWUudW5zdWJzY3JpYmUoY2FsbGJhY2spO1xuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvRWxtL0VsbS1HdWlkZS5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elm-guide\"\n    }}>{`Elm Guide`}</h1>\n    <p>{`This is a basic Elm guide that follows on from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://guide.elm-lang.org/core_language.html\"\n      }}>{`core language tour`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n'a'   : Char\n\"abc\" : String\n\n-- multi-line String\n\"\"\"\nThis is useful for holding JSON or other\ncontent that has \"quotation marks\".\n\"\"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`The following are equivocal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditionals\"\n    }}>{`Conditionals`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`if powerLevel > 9000 then \"Over 9000!\" else \"dbz joke not applicable\"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`square n =\n  n^2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"records\"\n    }}>{`Records`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipes\"\n    }}>{`Pipes`}</h2>\n    <p>{`Note: \"Pipes\" is not the technical term in Elm.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`viewNames1 names =\n  String.join \", \" (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join \", \"\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-expressions\"\n    }}>{`Let Expressions`}</h2>\n    <p>{`This is useful once expressions get too big.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in \"let\" expressions\nlet\n  name : String\n  name =\n    \"Hermann\"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"applying-functions\"\n    }}>{`Applying Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elm-modules\"\n    }}>{`Elm Modules`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations--aliases\"\n    }}>{`Type Annotations + Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  (\"Steve\", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type User\n  = Regular String Int\n  | Visitor String\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interoperability-with-js-and-porting\"\n    }}>{`Interoperability with JS and Porting`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg\n`}</code></pre>\n    <p>{`To use this port from JS, you use this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}