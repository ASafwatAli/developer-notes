{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md","mtime":1570522531925},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Arrays-And-Lists.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-arrays-and-lists\"\n    }}>{`Kotlin Arrays And Lists`}</h1>\n    <h2 {...{\n      \"id\": \"creating-arrays\"\n    }}>{`Creating Arrays`}</h2>\n    <p>{`Easiest way is to use the `}<inlineCode parentName=\"p\">{`arrayOf`}</inlineCode>{` func. Kotlin will infer the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-of-primitives\"\n    }}>{`Array Of Primitives`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others.`}</p>\n    <p>{`Lists have the additional features of being `}<inlineCode parentName=\"p\">{`dynamically-sized`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val innerPlanets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"empty-lists\"\n    }}>{`Empty Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutable-lists\"\n    }}>{`Mutable Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val outerPlanets = mutableListOf(\"Jupiter\", \"Saturn\", \"Uranus\",\n\"Neptune\")\nval exoPlanets = mutableListOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"list-properties-and-methods\"\n    }}>{`List Properties and Methods`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val players = mutableListOf(\"Alice\", \"Bob\", \"Cindy\", \"Dan\")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println(\"We need at least two players!\")\n} else {\n  println(\"Let's start!\")\n}\n// > Let's start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println(\"$minPlayer will start\") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println(\"$maxPlayer is the MAX\") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln(\"First player is $firstPlayer\")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains(\"Alice\") // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-list-elements\"\n    }}>{`Adding List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`players.add(\"Eli\")\n// or\nplayers += \"Gina\"\n\nprintln(players.joinToString())\n// > \"Alice\", \"Bob\", \"Cindy\", \"Dan\", \"Eli\", \"Gina\"\n\n// inserting elements\nplayers.add(5, \"Frank\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-list-elements\"\n    }}>{`Removing List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val wasPlayerRemoved = players.remove(\"Gina\")\nprintln(\"It is $wasPlayerRemoved that Gina was removed\")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln(\"$removedPlayer was removed\") // > Cindy was removed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-through-a-list\"\n    }}>{`Iterating Through A List`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println(\"\\${index + 1}. $player\")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-lists\"\n    }}>{`Nullable Lists`}</h2>\n    <p>{`You can have nullable lists, a list of nullables or both.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-and-sets\"\n    }}>{`Maps and Sets`}</h2>\n    <p>{`A map is an unordered collection of pairs, where each pair is compised of a a key and value.`}</p>\n    <h2 {...{\n      \"id\": \"creating-maps\"\n    }}>{`Creating Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{` var yearOfBirth = mapOf(\"Anna\" to 1990, \"Brian\" to 1991, \"Craig\" to 1992,\n\"Donna\" to 1993)\nvar namesAndScores = mutableMapOf(\"Anna\" to 2, \"Brian\" to 2, \"Craig\" to\n8, \"Donna\" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-mutable-maps\"\n    }}>{`Mutating Mutable Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val bobData = mutableMapOf(\n  \"name\" to \"Bob\",\n  \"profession\" to \"CardPlayer\",\n  \"country\" to \"USA\")\nbobData.put(\"state\", \"CA\")\nbobData[\"city\"] = \"San Francisco\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-map-values\"\n    }}>{`Updating Map Values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.put(\"name\", \"Bobby\") // Bob\nbobData[\"profession\"] = \"Mailman\"\nval pair = \"nickname\" to \"Bobby D\"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removing-pairs\"\n    }}>{`Removing Pairs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.remove(\"city\")\nbobData.remove(\"state\", \"CA\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterating-through-maps\"\n    }}>{`Iterating through maps`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for ((player, score) in namesAndScores) {\n  println (\"$player - $score\")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print(\"$player, \") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,\n`}</code></pre>\n    <p>{`Note: For performance-critical code, `}<inlineCode parentName=\"p\">{`HashMap<K, V>`}</inlineCode>{` should be used via `}<inlineCode parentName=\"p\">{`hashMapOf()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`mapOf()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"sets\"\n    }}>{`Sets`}</h2>\n    <p>{`A set is an unordered collection of unique values of the same type. This can be useful for uniqueness.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val names = setOf(\"Anna\", \"Brian\", \"Craig\", \"Anna\")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sets-from-arrays\"\n    }}>{`Sets from Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-or-removing-elements\"\n    }}>{`Adding Or Removing Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}