{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/2-Process-Description-And-Control.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/2-Process-Description-And-Control.md","mtime":1562563032017},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/2-Process-Description-And-Control.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"process-description-and-control\"\n    }}>{`Process Description and Control`}</h1>\n    <h2 {...{\n      \"id\": \"objectives\"\n    }}>{`Objectives`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`How are processes represented and controlled by the OS`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Process states`}</inlineCode>{` which characterize the behaviour of processes`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Data structures`}</inlineCode>{` used to manage processes`}</li>\n      <li parentName=\"ul\">{`Ways in which the OS uses these data structures to control process execution`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"operating-system\"\n    }}>{`Operating System`}</h2>\n    <p>{`Program that controls the execution of application programs.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Interface between applications and hardware.`}</li>\n      <li parentName=\"ul\">{`Frequently relinquishes control and must depend on the processor to allow it to regain control – events driven`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"system-calls\"\n    }}>{`System Calls`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Typically high-level language (C or C++)`}</li>\n      <li parentName=\"ul\">{`Access of programs through API rather than direct system call use`}</li>\n      <li parentName=\"ul\">{`3 common APIs are Win32, POSIX and Java API for JVM`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"types-of-system-calls\"\n    }}>{`Types of system calls`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Process control`}</li>\n      <li parentName=\"ol\">{`File management`}</li>\n      <li parentName=\"ol\">{`Device management`}</li>\n      <li parentName=\"ol\">{`Information maintenance`}</li>\n      <li parentName=\"ol\">{`Communications`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"key-elements-of-an-os\"\n    }}>{`Key elements of an OS`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Service call Handler (<- service call to process)`}</li>\n      <li parentName=\"ul\">{`Interrupt Handler (<- interrupt from Process/IO)`}</li>\n      <li parentName=\"ul\">{`Short-Term Scheduler (-> Pass Control to Process)`}</li>\n      <li parentName=\"ul\">{`Long-Term, Short-Term and I/O Queues`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"system-call-implementation\"\n    }}>{`System Call Implementation`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Typically a number associated with each sys call - sys-call interface maintains table indexed accordingly`}</li>\n      <li parentName=\"ul\">{`Call invoked by interface in OS kernel and returns status of the system call and any return values`}</li>\n      <li parentName=\"ul\">{`Caller need no nothing about implementation of call`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"shell-strategy\"\n    }}>{`Shell Strategy`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Read keyboard`}</li>\n      <li parentName=\"ol\">{`Shell Process`}</li>\n      <li parentName=\"ol\">{`Fork a process`}</li>\n      <li parentName=\"ol\">{`Process to execute command`}</li>\n      <li parentName=\"ol\">{`f3 read file`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"process\"\n    }}>{`Process`}</h3>\n    <p>{`Fundamental to the structure of operating systems`}</p>\n    <p>{`A process can be defined as:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A program in execution`}</li>\n      <li parentName=\"ol\">{`An instance of a running program`}</li>\n      <li parentName=\"ol\">{`The entity that can be assigned to, and executed on, a processor`}</li>\n      <li parentName=\"ol\">{`Unit of activity characterized by a single sequential thread of execution, a current state and an associated set of system resources`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"uniprogramming\"\n    }}>{`Uniprogramming`}</h3>\n    <p>{`Processor must wait for I/O instruction to complete before proceeding.`}</p>\n    <h3 {...{\n      \"id\": \"multiprogramming\"\n    }}>{`Multiprogramming`}</h3>\n    <p>{`When one job needs to wait for I/O, the processor can switch to the other job.`}</p>\n    <h3 {...{\n      \"id\": \"time-sharing-systems\"\n    }}>{`Time Sharing Systems`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Using multiprogramming to handle multiple interactive jobs`}</li>\n      <li parentName=\"ul\">{`Multiple users simultaneously access system through terminal`}</li>\n      <li parentName=\"ul\">{`Processor's time shared among multiple users`}</li>\n      <li parentName=\"ul\">{`Timesharing (multitasking): CPU switches jobs so frequently that users can interact with each job while it is running, creating interactive computing - Response time < 1s - Each user has at least one program executing in memory -> `}<inlineCode parentName=\"li\">{`process`}</inlineCode>{` - If several jobs ready to run at the same time -> `}<inlineCode parentName=\"li\">{`CPU Scheduling`}</inlineCode>{` - To ensure orderly execution -> `}<inlineCode parentName=\"li\">{`Synchronization`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Communication`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`Virtual memory`}</inlineCode>{` allows execution of processes not completely in memory - Also need mechanisms for `}<inlineCode parentName=\"li\">{`Security and Protection`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"process-management\"\n    }}>{`Process Management`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`The fundamental task`}</inlineCode></li>\n      <li parentName=\"ul\">{`OS must... - Allocate resources to processes and protect the resources of each process from others - Interleave the execution of multiple processes - Enable proc. to share and exchange info - Enable sync. among processes`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"process-elements\"\n    }}>{`Process elements`}</h3>\n    <p>{`Process can be uniquely charactized by a number of attributes:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Identifier`}</li>\n      <li parentName=\"ol\">{`State`}</li>\n      <li parentName=\"ol\">{`Priority`}</li>\n      <li parentName=\"ol\">{`Program counter`}</li>\n      <li parentName=\"ol\">{`Memory pointers`}</li>\n      <li parentName=\"ol\">{`Context data`}</li>\n      <li parentName=\"ol\">{`I/O status info`}</li>\n      <li parentName=\"ol\">{`Accounting info`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"process-control-block\"\n    }}>{`Process control block`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Most important Data Structure in the OS`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"process-tables\"\n    }}>{`Process Tables`}</h2>\n    <p>{`OS tables must be linked or cross-referenced.`}</p>\n    <h3 {...{\n      \"id\": \"process-execution\"\n    }}>{`Process Execution`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Dispatcher`}</inlineCode>{` is a small program which switches the processor from one process to another`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"modes-of-execution\"\n    }}>{`Modes of Execution`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`User mode`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Less priviledge`}</li>\n          <li parentName=\"ul\">{`User programs typically execute in this mode`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`System (or kernel mode)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`More priviledges`}</li>\n          <li parentName=\"ul\">{`Kernel of the OS`}</li>\n        </ul></li>\n    </ol>\n    <h3 {...{\n      \"id\": \"two-state-process-model\"\n    }}>{`Two-State Process Model`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`State of a process may be defined by the current activity of that process - Used to describe the behaviour that we would like each process to exhibit`}</li>\n      <li parentName=\"ul\">{`Process may be `}<inlineCode parentName=\"li\">{`running`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`not-running`}</inlineCode></li>\n      <li parentName=\"ul\">{`Think of the `}<inlineCode parentName=\"li\">{`queuing diagram`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"five-state-process-model\"\n    }}>{`Five-State Process Model`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Uses two queues 1. Admit 2. Ready Queue -> Dispatch 3. Process `}{`[-> release, -> timeout, -> event wait]`}{` 4. (if event wait ->) Blocked queue -> Event Occurs 5. (if release ->) exit`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"multiple-blocked-queues\"\n    }}>{`Multiple Blocked Queues`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Multiple events queues - Event # wait -> Event # queue -> event # occurs`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"switching-processes\"\n    }}>{`Switching Processes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`What events trigger a process switch?`}</li>\n      <li parentName=\"ul\">{`What must the OS do to the various data structures under its control to achieve a process switch?`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"when-to-switch\"\n    }}>{`When to switch`}</h3>\n    <p>{`A process switch may occur any time that the OS has gained control from the currently running process. Possible events giving OS control are:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Mechanism`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Cause`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Interrupt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`External to exec of current instruction`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reaction to an asynchronous external event`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Trap`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Associated with exec of current instruction`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Handling of an error or an exception condition`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Supervisor call`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Explicit request`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Call to an operating system function`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"system-interrupts\"\n    }}>{`System Interrupts`}</h2>\n    <h3 {...{\n      \"id\": \"interrupt\"\n    }}>{`Interrupt`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Due to some sort of event external and independent of current running process - clock interrupt - I/O interrupt`}</li>\n      <li parentName=\"ul\">{`Time slice - the max amount of time that a process can execute before being interrupted`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"trap\"\n    }}>{`Trap`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`An error or exception condition generated within the currently running process`}</li>\n      <li parentName=\"ul\">{`OS determines if the condition is fatal - moved to the Exit state and a process switch occurs - action will depend on the nature of the error`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"change-of-process-state\"\n    }}>{`Change of process state`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Save context of processor`}</li>\n      <li parentName=\"ol\">{`Update process control block (PCB) of the process currently in `}<inlineCode parentName=\"li\">{`running`}</inlineCode>{` state`}</li>\n      <li parentName=\"ol\">{`Move PCB of process to appropraite queue`}</li>\n      <li parentName=\"ol\">{`Select another process to exec`}</li>\n      <li parentName=\"ol\">{`Update PCB of process selected`}</li>\n      <li parentName=\"ol\">{`Update mem management data structures`}</li>\n      <li parentName=\"ol\">{`Restore context of processor to that which existed at the time the selected process was last switched out`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"process-creation\"\n    }}>{`Process Creation`}</h2>\n    <p>{`Once the OS decides to create a new process:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Assigned a unique process identifier to the new process`}</li>\n      <li parentName=\"ol\">{`Allocates space for the process`}</li>\n      <li parentName=\"ol\">{`Initializes the process control block`}</li>\n      <li parentName=\"ol\">{`Sets the appropriate linkages`}</li>\n      <li parentName=\"ol\">{`Creates or expands other data structures`}</li>\n    </ol>\n    <p>{`Traditionally, OS created all processes - but it can be useful to let a running process create another`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Known as `}<inlineCode parentName=\"li\">{`process spawning`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`parent process`}</inlineCode>{` is the original, creating process - `}<inlineCode parentName=\"li\">{`child process`}</inlineCode>{` is the new process`}</li>\n      <li parentName=\"ul\">{`Parent process create children processes, which, in turn create other processes, forming a tree of processes`}</li>\n      <li parentName=\"ul\">{`Generally process identified and managed via a process identifier `}<inlineCode parentName=\"li\">{`pid`}</inlineCode></li>\n      <li parentName=\"ul\">{`Resource sharing - Parent and child share resources - Child shares subset of parent's resource - Parent and child share no resources`}</li>\n      <li parentName=\"ul\">{`Execution - Parent and children execute concurrently - Parent waits until children terminate`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"unix-process-creation\"\n    }}>{`UNIX Process Creation`}</h3>\n    <p>{`Process creation is by means of the kernel system call `}<inlineCode parentName=\"p\">{`fork()`}</inlineCode></p>\n    <p>{`This causes the OS in Kernel Mode to do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Allocate a slot in the process table for the new process.`}</li>\n      <li parentName=\"ol\">{`Assign a unique process ID to the child process.`}</li>\n      <li parentName=\"ol\">{`Copy of process image of the parent, with the exception of any shared memory.`}</li>\n      <li parentName=\"ol\">{`Increment the counters for any files owned by the parent, to reflect that an additional process now also owns those files.`}</li>\n      <li parentName=\"ol\">{`Assign the child process to the `}<inlineCode parentName=\"li\">{`Ready`}</inlineCode>{` state.`}</li>\n      <li parentName=\"ol\">{`Returns the ID number of the child to the parent process, and a 0 value to the child process.`}</li>\n    </ol>\n    <p>{`Post creation, the Kernel can do one of the following as part of the dispatcher routine:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stay in the parent process`}</li>\n      <li parentName=\"ul\">{`Transfer control to child`}</li>\n      <li parentName=\"ul\">{`Transfer control to another process`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`int main() {\n    pid_t pid;\n    /* fork another process */\n    pid = fork();\n\n    if (pid < 0) { /* error occurred */\n        fprintf(stderr, \"Fork Failed\");\n        exit(-1);\n    } else if (pid == 0) {\n        /* child process */\n        execlp(\"/bin/ls\", \"ls\", NULL);\n    } else {\n        /* parent process */\n        /* parent will wait for the child to complete */\n        wait (NULL);\n        printf (\"Child Complete\");\n        exit(0);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"process-termination\"\n    }}>{`Process Termination`}</h3>\n    <p>{`There must be some way that a process can indicate completion.`}</p>\n    <p>{`This indication may be:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A HALT instruction generating an interrupt alert to the OS.`}</li>\n      <li parentName=\"ol\">{`A user action (e.g. log off, quitting an application)`}</li>\n      <li parentName=\"ol\">{`A fault or error`}</li>\n      <li parentName=\"ol\">{`Parent process terminating`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"security-issues\"\n    }}>{`Security Issues`}</h3>\n    <p>{`An OS associates a set of priviledges with each process.`}</p>\n    <p>{`A key security issue in the design of any OS is to prevent anything (user or process) from gaining unauthorized priviledges on the system.`}</p>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`-The principal function of the OS is to create, manage, and terminate processes`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The most fundamental concept in a modern OS is the process`}</li>\n      <li parentName=\"ul\">{`Process control block contains all of the information that is required for the OS to manage the process, including its current state, resources allocated to it, priority, and other relevant data`}</li>\n      <li parentName=\"ul\">{`The most important states are Ready, Running and Blocked\n– The running process is the one that is currently being executed by the processor\n– A blocked process is waiting for the completion of some event\n– A running process is interrupted either by an interrupt or by executing a supervisor call to the OS`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}