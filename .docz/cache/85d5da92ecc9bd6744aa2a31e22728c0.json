{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Principles/Copy.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Principles/Copy.md","mtime":1548209344400},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"copy-json-naming-conventions\"}},\"Copy JSON naming conventions\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"img\",components:components,parentName:\"p\",props:{\"src\":\"https://res.cloudinary.com/gitgoodclub/image/upload/w_1228,h_2012/copy-structure.png\",\"alt\":\"Image structure\"}})),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"notes-on-the-schematic-design\"}},\"Notes on the schematic design\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The aim for this is the have consistent, repeatable rules for naming variables that are use for data.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"An example use case for this structure is to be able to take a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"copy.json\"),\" file and convert it in a CMS schema for something like DatoCMS quickly and reliably.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The import notes on this at the moment is that the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"maps\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"copy\"),\" type definitions are currently subjective.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"My current thought would be that the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"copy\"),\" variable names such as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"title\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"subtitle\"),\" etc should follow English literature structure, although I currently do not have a good grasp on whether or not I am missing a lot of depth of the use cases are not the best for the name I have given it. This is arguably the most flexible area since you will have things to name such as form titles etc. These are more just consistent guidelines for the main parts we define on components/sections/pages.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In the case of \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"maps\"),\", the issue is that I am going off the DatoCMS schema for the others but I have not confirmed if the DatoCMS schema for maps is using \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"lat\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"lon\"),\" as seperate strings or if they are part of a greater object.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Obviously there will be more use cases down the track that need to be defined, but being able to keep it consistent with \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"type definitions\"),\" as best as possible will mean that we can implement these types into other languages as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"typedefs\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"interfaces\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"protocols\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Other problems that may arise is when copy schematics do not match those of DatoCMS for the quick upload. In these cases, a further job down the track such as a GraphQL interim may fix this issue for us, but I have gone with DatoCMS as they follow the schema set at \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"http://json-schema.org/\"}},\"http://json-schema.org/\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Useful links for us to think about:\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"http://json-schema.org/\"}},\"http://json-schema.org/\"),React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://google.github.io/styleguide/jsoncstyleguide.xml\"}},\"https://google.github.io/styleguide/jsoncstyleguide.xml\")),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"schematic-levels\"}},\"Schematic levels\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The last requirement for the schematic is that I do not want to go further than three levels deep. The first level being the defining copy object factor for where the data relates too, the second being the naming conventions set below.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The obvious break to this rule is when we have an array of objects. When it comes to these arrays of objects, the thought of the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"one-to-many\"),\" relationship is to think of it from an entity relationship point of view and that these individual objects that form the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"many\"),\" will themselves end up their own type on a CMS.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Example a single component that refers to many users. Each of these users in a CMS will form its own entity and be defined as such.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Example: type ListPage in the CMS refers to many of type User in the CMS to form the one-to-many relationship.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"typed-definitions-below\"}},\"Typed definitions below\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"export default class CopyTypeDefs {\\n  // ! Array of objects\\n\\n  /**\\n   * @typedef {Object} Item Example item.\\n   * @property {Number} id Identifier for example.\\n   */\\n\\n  /**\\n   * ! items: Array<Object>\\n   * @type {Item[]} items Item Array.\\n   *\\n   * @memberof CopyTypeDefs\\n   */\\n  items = [\\n    {\\n      id: 1\\n    },\\n    {\\n      id: 2\\n    },\\n    {\\n      id: 3\\n    }\\n  ];\\n\\n  // ! Images + videos\\n\\n  /**\\n   * @typedef {Object} Media Media typedef.\\n   * @property {String} url The url to find the url.\\n   * @property {String} alt The alt string for the media.\\n   * @property {String} title The title for the media.\\n   */\\n\\n  /**\\n   * ! image\\n   * @type {Media} image Example image object.\\n   */\\n  image = {\\n    url: 'https://...',\\n    title: 'Unicorns gone wild',\\n    alt: 'Unicorns frolicking'\\n  };\\n\\n  /**\\n   * ! backgroundImage\\n   * @type {Media} backgroundImage Example properties for any background image.\\n   */\\n  backgroundImage = {\\n    url: 'https://...',\\n    title: 'Unicorns gone wild background image',\\n    alt: 'Unicorns frolicking in the background'\\n  };\\n\\n  /**\\n   * ! avatar\\n   * @type {Media} avatar Example avatar object for image avatars.\\n   */\\n  avatar = {\\n    url: 'https://...',\\n    title: 'Unicorns gone wild',\\n    alt: 'Unicorns frolicking'\\n  };\\n\\n  /**\\n   * ! logo\\n   * @type {Media} avatar Example logo image object.\\n   */\\n  logo = {\\n    url: 'https://...',\\n    title: 'Unicorns gone wild',\\n    alt: 'Unicorns frolicking'\\n  };\\n\\n  /**\\n   * ! video\\n   * @type {Media} video Example video object.\\n   */\\n  video = {\\n    url: 'https://...',\\n    title: 'Unicorns gone wild',\\n    alt: 'Unicorns frolicking'\\n  };\\n\\n  // ! Colours\\n  /**\\n   * ! color\\n   * @type {String} color Hex font color.\\n   */\\n  color = '#000FFF';\\n\\n  /**\\n   * ! backgroundColor\\n   * @type {String} backgroundColor Hex background color.\\n   */\\n  backgroundColor = '#000FFF';\\n\\n  // ! Copy\\n  /**\\n   * ! title\\n   * @type {String} title The main title for a component/section.\\n   */\\n  title = 'Systematic nobis';\\n\\n  /**\\n   * ! subtitle\\n   * @type {String} subtitle The second main heading for component/section.\\n   */\\n  subtitle =\\n    'Dolorum fuga nobis sit natus consequatur. Laboriosam sapiente. Natus quos ut.';\\n\\n  /**\\n   * ! body\\n   * @type {String} body The main body of text for a component/section.\\n   */\\n  body =\\n    'Nemo tempore natus non accusamus eos placeat nesciunt. et fugit ut odio nisi dol' +\\n    'ore non ... (long text)';\\n\\n  /**\\n   * ! description\\n   * @type {String} description The description of text for a component/section. Alternative is caption.\\n   */\\n  description =\\n    'Vel et rerum nostrum quia. Dolorum fuga nobis sit natus consequatur.';\\n\\n  //! Time\\n  /**\\n   * ! timestamp\\n   * @type {Date} timestamp A date object.\\n   */\\n  timestamp = new Date();\\n\\n  /**\\n   * ! time\\n   * @type {String} time A time string.\\n   */\\n  time = '03:08:02';\\n\\n  /**\\n   * ! date\\n   * @type {String} date A date string.\\n   */\\n  date = '2001-07-06';\\n\\n  // ! Credit Cards\\n  /**\\n   * ! cardData\\n   * @typedef {Object} Card cardData definition\\n   * @property {String} cardType The card type eg. Amex, VISA etc.\\n   * @property {String|Number} cardNumber The CC number.\\n   * @property {String} cardExpiry The expiry date for a card.\\n   * @property {String} [cardholderName] Optional name associated with the card.\\n   */\\n  /**\\n   * @type {Card} cardData The card data.\\n   */\\n  cardData = {\\n    cardType: 'American Express',\\n    cardNumber: '4716506247152101',\\n    cardExpiry: '03/04',\\n    cardholderName: 'D P O\\u2019KEEFFE'\\n  };\\n\\n  // ! Maps\\n  /**\\n   * ! lat\\n   * @type {Number} lat Latitude.\\n   */\\n  lat = -33.8688;\\n\\n  /**\\n   * ! lon\\n   * @type {Number} lon Longitude.\\n   */\\n  lon = 151.2093;\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"applying-this-to-copyjson\"}},\"Applying this to copy.json\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For each component that requires it's copy definition, define that into a schema with a unique name on the first level to know where to apply it and have the schema apply from the levels below:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-json\"}},\"{\\n  // onboarding = id for reference component\\n  \\\"onboarding\\\": {\\n    // second level = where our schema rules start to apply\\n    \\\"items\\\": [\\n      {\\n        \\\"title\\\": \\\"Name\\\",\\n        \\\"description\\\": \\\"Hello! Let's start with your name.\\\",\\n        \\\"value\\\": \\\"name\\\"\\n      },\\n      {\\n        \\\"title\\\": \\\"Email\\\",\\n        \\\"description\\\": \\\"Now we need your email to set a login.\\\",\\n        \\\"value\\\": \\\"email\\\"\\n      },\\n      {\\n        \\\"title\\\": \\\"Password\\\",\\n        \\\"description\\\": \\\"Lastly, let's set a password.\\\",\\n        \\\"value\\\": \\\"password\\\"\\n      }\\n    ]\\n  },\\n  \\\"loginPage\\\": {\\n    // second level = where our schema rules start to apply\\n    \\\"emailTitle\\\": \\\"Email\\\",\\n    \\\"emailPlaceholder\\\": \\\"you@example.com\\\",\\n    \\\"passwordTitle\\\": \\\"Password\\\",\\n    \\\"ctaButton\\\": \\\"Log in\\\",\\n    \\\"forgotPassword\\\": \\\"Forgot password?\\\",\\n    \\\"privacyPolicy\\\": \\\"Privacy policy\\\",\\n    \\\"backgroundImage\\\": {\\n      \\\"url\\\": \\\"https://res.cloudinary.com/gitgoodclub/image/upload/v1537942627/wtb9sg81buutng40ryty.jpg\\\",\\n      \\\"title\\\": \\\"Image\\\",\\n      \\\"alt\\\": \\\"Image\\\"\\n    },\\n    \\\"logo\\\": {\\n      \\\"url\\\": \\\"https://res.cloudinary.com/gitgoodclub/image/upload/v1537409347/ssv85yzk2echp7rcxe6f.png\\\",\\n      \\\"title\\\": \\\"Logo\\\",\\n      \\\"alt\\\": \\\"Logo\\\"\\n    }\\n  },\\n  \\\"landingPricing\\\": {\\n    // second level = where our schema rules start to apply\\n    \\\"title\\\": \\\"Quia ut\\\",\\n    \\\"subtitle\\\": \\\"Et perferendis numquam sed blanditiis omnis et.\\\",\\n    \\\"image\\\": {\\n      \\\"url\\\": \\\"https://res.cloudinary.com/gitgoodclub/image/upload/v1537409347/w5mohkx26mqihiammogk.png\\\",\\n      \\\"title\\\": \\\"at\\\",\\n      \\\"alt\\\": \\\"tenetur\\\"\\n    }\\n  }\\n}\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Principles/Copy.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"copy-json-naming-conventions\"}}>{`Copy JSON naming conventions`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://res.cloudinary.com/gitgoodclub/image/upload/w_1228,h_2012/copy-structure.png\",\"alt\":\"Image structure\"}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"notes-on-the-schematic-design\"}}>{`Notes on the schematic design`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The aim for this is the have consistent, repeatable rules for naming variables that are use for data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An example use case for this structure is to be able to take a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`copy.json`}</MDXTag>{` file and convert it in a CMS schema for something like DatoCMS quickly and reliably.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The import notes on this at the moment is that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`maps`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`copy`}</MDXTag>{` type definitions are currently subjective.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`My current thought would be that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`copy`}</MDXTag>{` variable names such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`title`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subtitle`}</MDXTag>{` etc should follow English literature structure, although I currently do not have a good grasp on whether or not I am missing a lot of depth of the use cases are not the best for the name I have given it. This is arguably the most flexible area since you will have things to name such as form titles etc. These are more just consistent guidelines for the main parts we define on components/sections/pages.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the case of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`maps`}</MDXTag>{`, the issue is that I am going off the DatoCMS schema for the others but I have not confirmed if the DatoCMS schema for maps is using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`lat`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`lon`}</MDXTag>{` as seperate strings or if they are part of a greater object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Obviously there will be more use cases down the track that need to be defined, but being able to keep it consistent with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`type definitions`}</MDXTag>{` as best as possible will mean that we can implement these types into other languages as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`typedefs`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`interfaces`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`protocols`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Other problems that may arise is when copy schematics do not match those of DatoCMS for the quick upload. In these cases, a further job down the track such as a GraphQL interim may fix this issue for us, but I have gone with DatoCMS as they follow the schema set at `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://json-schema.org/\"}}>{`http://json-schema.org/`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Useful links for us to think about:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://json-schema.org/\"}}>{`http://json-schema.org/`}</MDXTag>\n<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://google.github.io/styleguide/jsoncstyleguide.xml\"}}>{`https://google.github.io/styleguide/jsoncstyleguide.xml`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"schematic-levels\"}}>{`Schematic levels`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The last requirement for the schematic is that I do not want to go further than three levels deep. The first level being the defining copy object factor for where the data relates too, the second being the naming conventions set below.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The obvious break to this rule is when we have an array of objects. When it comes to these arrays of objects, the thought of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`one-to-many`}</MDXTag>{` relationship is to think of it from an entity relationship point of view and that these individual objects that form the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`many`}</MDXTag>{` will themselves end up their own type on a CMS.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example a single component that refers to many users. Each of these users in a CMS will form its own entity and be defined as such.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: type ListPage in the CMS refers to many of type User in the CMS to form the one-to-many relationship.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"typed-definitions-below\"}}>{`Typed definitions below`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`export default class CopyTypeDefs {\n  // ! Array of objects\n\n  /**\n   * @typedef {Object} Item Example item.\n   * @property {Number} id Identifier for example.\n   */\n\n  /**\n   * ! items: Array<Object>\n   * @type {Item[]} items Item Array.\n   *\n   * @memberof CopyTypeDefs\n   */\n  items = [\n    {\n      id: 1\n    },\n    {\n      id: 2\n    },\n    {\n      id: 3\n    }\n  ];\n\n  // ! Images + videos\n\n  /**\n   * @typedef {Object} Media Media typedef.\n   * @property {String} url The url to find the url.\n   * @property {String} alt The alt string for the media.\n   * @property {String} title The title for the media.\n   */\n\n  /**\n   * ! image\n   * @type {Media} image Example image object.\n   */\n  image = {\n    url: 'https://...',\n    title: 'Unicorns gone wild',\n    alt: 'Unicorns frolicking'\n  };\n\n  /**\n   * ! backgroundImage\n   * @type {Media} backgroundImage Example properties for any background image.\n   */\n  backgroundImage = {\n    url: 'https://...',\n    title: 'Unicorns gone wild background image',\n    alt: 'Unicorns frolicking in the background'\n  };\n\n  /**\n   * ! avatar\n   * @type {Media} avatar Example avatar object for image avatars.\n   */\n  avatar = {\n    url: 'https://...',\n    title: 'Unicorns gone wild',\n    alt: 'Unicorns frolicking'\n  };\n\n  /**\n   * ! logo\n   * @type {Media} avatar Example logo image object.\n   */\n  logo = {\n    url: 'https://...',\n    title: 'Unicorns gone wild',\n    alt: 'Unicorns frolicking'\n  };\n\n  /**\n   * ! video\n   * @type {Media} video Example video object.\n   */\n  video = {\n    url: 'https://...',\n    title: 'Unicorns gone wild',\n    alt: 'Unicorns frolicking'\n  };\n\n  // ! Colours\n  /**\n   * ! color\n   * @type {String} color Hex font color.\n   */\n  color = '#000FFF';\n\n  /**\n   * ! backgroundColor\n   * @type {String} backgroundColor Hex background color.\n   */\n  backgroundColor = '#000FFF';\n\n  // ! Copy\n  /**\n   * ! title\n   * @type {String} title The main title for a component/section.\n   */\n  title = 'Systematic nobis';\n\n  /**\n   * ! subtitle\n   * @type {String} subtitle The second main heading for component/section.\n   */\n  subtitle =\n    'Dolorum fuga nobis sit natus consequatur. Laboriosam sapiente. Natus quos ut.';\n\n  /**\n   * ! body\n   * @type {String} body The main body of text for a component/section.\n   */\n  body =\n    'Nemo tempore natus non accusamus eos placeat nesciunt. et fugit ut odio nisi dol' +\n    'ore non ... (long text)';\n\n  /**\n   * ! description\n   * @type {String} description The description of text for a component/section. Alternative is caption.\n   */\n  description =\n    'Vel et rerum nostrum quia. Dolorum fuga nobis sit natus consequatur.';\n\n  //! Time\n  /**\n   * ! timestamp\n   * @type {Date} timestamp A date object.\n   */\n  timestamp = new Date();\n\n  /**\n   * ! time\n   * @type {String} time A time string.\n   */\n  time = '03:08:02';\n\n  /**\n   * ! date\n   * @type {String} date A date string.\n   */\n  date = '2001-07-06';\n\n  // ! Credit Cards\n  /**\n   * ! cardData\n   * @typedef {Object} Card cardData definition\n   * @property {String} cardType The card type eg. Amex, VISA etc.\n   * @property {String|Number} cardNumber The CC number.\n   * @property {String} cardExpiry The expiry date for a card.\n   * @property {String} [cardholderName] Optional name associated with the card.\n   */\n  /**\n   * @type {Card} cardData The card data.\n   */\n  cardData = {\n    cardType: 'American Express',\n    cardNumber: '4716506247152101',\n    cardExpiry: '03/04',\n    cardholderName: 'D P O’KEEFFE'\n  };\n\n  // ! Maps\n  /**\n   * ! lat\n   * @type {Number} lat Latitude.\n   */\n  lat = -33.8688;\n\n  /**\n   * ! lon\n   * @type {Number} lon Longitude.\n   */\n  lon = 151.2093;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"applying-this-to-copyjson\"}}>{`Applying this to copy.json`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For each component that requires it's copy definition, define that into a schema with a unique name on the first level to know where to apply it and have the schema apply from the levels below:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-json\"}}>{`{\n  // onboarding = id for reference component\n  \"onboarding\": {\n    // second level = where our schema rules start to apply\n    \"items\": [\n      {\n        \"title\": \"Name\",\n        \"description\": \"Hello! Let's start with your name.\",\n        \"value\": \"name\"\n      },\n      {\n        \"title\": \"Email\",\n        \"description\": \"Now we need your email to set a login.\",\n        \"value\": \"email\"\n      },\n      {\n        \"title\": \"Password\",\n        \"description\": \"Lastly, let's set a password.\",\n        \"value\": \"password\"\n      }\n    ]\n  },\n  \"loginPage\": {\n    // second level = where our schema rules start to apply\n    \"emailTitle\": \"Email\",\n    \"emailPlaceholder\": \"you@example.com\",\n    \"passwordTitle\": \"Password\",\n    \"ctaButton\": \"Log in\",\n    \"forgotPassword\": \"Forgot password?\",\n    \"privacyPolicy\": \"Privacy policy\",\n    \"backgroundImage\": {\n      \"url\": \"https://res.cloudinary.com/gitgoodclub/image/upload/v1537942627/wtb9sg81buutng40ryty.jpg\",\n      \"title\": \"Image\",\n      \"alt\": \"Image\"\n    },\n    \"logo\": {\n      \"url\": \"https://res.cloudinary.com/gitgoodclub/image/upload/v1537409347/ssv85yzk2echp7rcxe6f.png\",\n      \"title\": \"Logo\",\n      \"alt\": \"Logo\"\n    }\n  },\n  \"landingPricing\": {\n    // second level = where our schema rules start to apply\n    \"title\": \"Quia ut\",\n    \"subtitle\": \"Et perferendis numquam sed blanditiis omnis et.\",\n    \"image\": {\n      \"url\": \"https://res.cloudinary.com/gitgoodclub/image/upload/v1537409347/w5mohkx26mqihiammogk.png\",\n      \"title\": \"at\",\n      \"alt\": \"tenetur\"\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}