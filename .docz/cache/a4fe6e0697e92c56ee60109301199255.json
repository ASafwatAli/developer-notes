{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Web/Web-Concepts.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Web/Web-Concepts.md","mtime":1562563032100},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Web/Web-Concepts.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"web-concepts\"\n    }}>{`Web Concepts`}</h1>\n    <h2 {...{\n      \"id\": \"headers\"\n    }}>{`Headers`}</h2>\n    <h3 {...{\n      \"id\": \"transfer-encoding\"\n    }}>{`Transfer Encoding`}</h3>\n    <p>{`The Transfer-Encoding header specifies the form of encoding used to safely transfer the entity to the user.`}</p>\n    <p>{`Transfer-Encoding is a hop-by-hop header, that is applied to a message between two nodes, not to a resource itself. Each segment of a multi-node connection can use different Transfer-Encoding values. If you want to compress data over the whole connection, use the end-to-end Content-Encoding header instead.`}</p>\n    <p>{`When present on a response to a HEAD request that has no body, it indicates the value that would have applied to the corresponding GET message.`}</p>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding`}</a></p>\n    <p>{`Usual headers include `}<inlineCode parentName=\"p\">{`Transfer-Encoding: gzip`}</inlineCode>{` - HTTP/2 does not support `}<inlineCode parentName=\"p\">{`chunked`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"etag\"\n    }}>{`ETag`}</h3>\n    <p>{`The ETag HTTP response header is an identifier for a specific version of a resource. It allows caches to be more efficient, and saves bandwidth, as a web server does not need to send a full response if the content has not changed. On the other side, if the content has changed, etags are useful to help prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").`}</p>\n    <p>{`If the resource at a given URL changes, a new Etag value must be generated. Etags are therefore similar to fingerprints and might also be used for tracking purposes by some servers. A comparison of them allows the determination of whether two representations of a resource are the same. They might also be set to persist indefinitely by a tracking server.`}</p>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag`}</a></p>\n    <h3 {...{\n      \"id\": \"x-frame-options\"\n    }}>{`X-Frame-Options`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options`}</a></p>\n    <p>{`Indicates whether or not a browser should be able to load in a `}<inlineCode parentName=\"p\">{`frame`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`iframe`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`embed`}</inlineCode>{` tag.`}</p>\n    <h3 {...{\n      \"id\": \"dnt\"\n    }}>{`DNT`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/DNT\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/DNT`}</a></p>\n    <p>{`Indicates if a user would prefer privacy over personalisation.`}</p>\n    <h2 {...{\n      \"id\": \"rpc-vs-rest\"\n    }}>{`RPC vs REST`}</h2>\n    <p>{`The tl;dr is that `}<inlineCode parentName=\"p\">{`REST enforces a client/server model, where the client is interested in gaining information and acting on a set of resources that are managed by the server. It doesn’t make sense to talk about RPC vs REST. In fact you can implement a RESTful service on top of any RPC implementation by creating methods that conform to the constraints of REST. You can even create an HTTP style REST implementation on top of an RPC implementation by creating methods for GET, POST, PUT, DELETE that take in some metadata that mirrors HTTP headers and return a string that mirrors the body of an HTTP request.`}</inlineCode></p>\n    <p>{`Best source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/\"\n      }}>{`https://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/`}</a></p>\n    <h2 {...{\n      \"id\": \"security\"\n    }}>{`Security`}</h2>\n    <h3 {...{\n      \"id\": \"same-origin-policy\"\n    }}>{`Same-Origin Policy`}</h3>\n    <p>{`The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin. It helps isolate potentially malicious documents, reducing possible attack vectors.`}</p>\n    <h3 {...{\n      \"id\": \"iframe\"\n    }}>{`iFrame`}</h3>\n    <p>{`On one side it’s a tag, but from the other side it’s a window-in-window.`}</p>\n    <h2 {...{\n      \"id\": \"web-performance\"\n    }}>{`Web Performance`}</h2>\n    <h3 {...{\n      \"id\": \"critical-rendering-path\"\n    }}>{`Critical Rendering Path`}</h3>\n    <p>{`Optimizing for performance is all about understanding what happens in these intermediate steps between receiving the HTML, CSS, and JavaScript bytes and the required processing to turn them into rendered pixels - that's the critical rendering path.`}</p>\n    <h3 {...{\n      \"id\": \"service-workers\"\n    }}>{`Service Workers`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/web/fundamentals/primers/service-workers/\"\n      }}>{`https://developers.google.com/web/fundamentals/primers/service-workers/`}</a></p>\n    <p>{`A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction. Today, they already include features like push notifications and background sync. In the future, service workers might support other things like periodic sync or geofencing. The core feature discussed in this tutorial is the ability to intercept and handle network requests, including programmatically managing a cache of responses.`}</p>\n    <p>{`The reason this is such an exciting API is that it allows you to support offline experiences, giving developers complete control over the experience.`}</p>\n    <p>{`Things to note about a service worker:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It's a JavaScript Worker, so it can't access the DOM directly. Instead, a service worker can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM if needed.`}</li>\n      <li parentName=\"ul\">{`Service worker is a programmable network proxy, allowing you to control how network requests from your page are handled.`}</li>\n      <li parentName=\"ul\">{`It's terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. If there is information that you need to persist and reuse across restarts, service workers do have access to the IndexedDB API.`}</li>\n      <li parentName=\"ul\">{`Service workers make extensive use of promises.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"preload-vs-prefetch\"\n    }}>{`Preload vs Prefetch`}</h3>\n    <p>{`Sources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf\"\n        }}>{`https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://yoavweiss.github.io/link_htmlspecial_16/#53\"\n        }}>{`http://yoavweiss.github.io/link_htmlspecial_16/#53`}</a></li>\n    </ul>\n    <p>{`Preload resources you have high-confidence will be used in the current page. Prefetch resources likely to be used for future navigations across multiple navigation boundaries.`}</p>\n    <p>{`Both preload and prefetched resources are stored in the HTTP cache.`}</p>\n    <p>{`Most `}<inlineCode parentName=\"p\">{`preload`}</inlineCode>{` cases are doing so to preload web fonts. Other sites are using it to asynchronously load CSS files.`}</p>\n    <h3 {...{\n      \"id\": \"server-push\"\n    }}>{`Server Push`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.smashingmagazine.com/2017/04/guide-http2-server-push/\"\n      }}>{`https://www.smashingmagazine.com/2017/04/guide-http2-server-push/`}</a></p>\n    <p>{`Server push lets the server preemptively \"push\" website assets to the client without the user having explicitly asked for them. When used with care, we can send what we know the user is going to need for the page they’re requesting.`}</p>\n    <h3 {...{\n      \"id\": \"browser-layout-vs-compositing-vs-painting\"\n    }}>{`Browser Layout vs Compositing vs Painting`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.quora.com/What-is-the-difference-between-layout-painting-and-compositing\"\n      }}>{`https://www.quora.com/What-is-the-difference-between-layout-painting-and-compositing`}</a></p>\n    <ol>\n      <li parentName=\"ol\">{`Layout: Browser will determine how much space each element takes up and where to place it.`}</li>\n      <li parentName=\"ol\">{`Painting: This is the process of filling in pixels. It involves drawing out elements.`}</li>\n      <li parentName=\"ol\">{`Compositing: Browser draws element to the screen in the correct order so the page renders correctly.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"reflows-and-when-to-promote-to-gpu\"\n    }}>{`Reflows and when to promote to GPU`}</h3>\n    <p>{`This refers to the re-calculation of positions and dimensions of all elements, which leads to re-rendering part or all of the document. Changing a single element can affect all children, ancestors, and siblings.`}</p>\n    <p>{`Reducing it can be done by:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Use Best-Practise Layout techniques`}</li>\n      <li parentName=\"ol\">{`Minimize CSS Rules`}</li>\n      <li parentName=\"ol\">{`Minimize DOM depth`}</li>\n      <li parentName=\"ol\">{`Update classes low on the tree`}</li>\n      <li parentName=\"ol\">{`Remove complex animations from the flow (position fixed/absolute)`}</li>\n      <li parentName=\"ol\">{`Modify hidden elements`}</li>\n      <li parentName=\"ol\">{`Update elements in batch`}</li>\n      <li parentName=\"ol\">{`Minimize elements updated`}</li>\n      <li parentName=\"ol\">{`Know that smoothness comprimises performance`}</li>\n      <li parentName=\"ol\">{`Use tools to analyze repaint issues`}</li>\n    </ol>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\"\n      }}>{`https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/`}</a></p>\n    <p>{`Note that the `}<inlineCode parentName=\"p\">{`transform`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`opacity`}</inlineCode>{` properties are guaranteed to neither affect nor be affected by the normal flow or DOM environment (that is, they won’t cause a reflow or repaint, so their animation can be completely offloaded to the GPU).`}</p>\n    <p>{`To get rid of implicit compositing issues and to reduce visual artifacts:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Try to keep animated objects as high as possible in the z-index. Ideally, these elements should be direct children of the body element. Of course, this is not always possible in the markup when an animated element is nested deep inside the DOM tree and depends on the normal flow. In such cases, you could clone the element and put it in the body for animation only.`}</li>\n      <li parentName=\"ol\">{`You can give browser a hint that you’re going to use compositing with the `}<inlineCode parentName=\"li\">{`will-change`}</inlineCode>{` CSS property. With this property set on an element, the browser will (but not always!) promote it to a compositing layer in advance, so that the animation can start and stop smoothly. But don’t misuse this property, or else you’ll end up with a tremendous increase in memory consumption!`}</li>\n    </ol>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css\"\n      }}>{`https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css`}</a></p>\n    <h2 {...{\n      \"id\": \"seperation-of-concerns\"\n    }}>{`Seperation of Concerns`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Model-View-Controller (MVC)`}</li>\n      <li parentName=\"ul\">{`Model-View-View-Model (MVVM)`}</li>\n      <li parentName=\"ul\">{`Model-View-Presenter (MVP) patterns`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"multi-device-support\"\n    }}>{`Multi-Device Support`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Mobile-first styles`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"asset-delivery\"\n    }}>{`Asset Delivery`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In large applications, it’s not uncommon to have independent teams owning their own codebases. These different codebases probably have dependencies on each other and each usually has their own pipeline to release changes to production. Your design should consider how assets are built with dependencies (code splitting), tested (unit and integration tests) and deployed. You should also think about how you will vend assets through a CDN or inline them to reduce network latency.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"async-flow\"\n    }}>{`Async Flow`}</h2>\n    <p>{`Your components may need to communicate in real-time with the server. The design you propose should consider XHR vs bidirectional calls. If your interviewer asks you to support older browsers, your design will need to choose between hidden iFrames, script tags or XHR for messaging. If not, you could propose using websockets or you might decide server-sent events (SSE) are better.`}</p>\n    <h2 {...{\n      \"id\": \"state-management\"\n    }}>{`State Management`}</h2>\n    <p>{`State management such as choosing between unidirectional data flow or two-way data binding. You should also think about if your design will follow a passive or reactive programming model, and how components related to each other for example Foo–> Bar or Foo –>Bar.`}</p>\n    <h2 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h2>\n    <p>{`Layout – if you’re designing a system used by multiple development teams, you need to think about building components and if you require teams to follow a consist markup to use said components.`}</p>\n    <h2 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h2>\n    <p>{`Rendering – client-side (CSR), server-side (SSR) and universal rendering.`}</p>\n    <h2 {...{\n      \"id\": \"cap-theory\"\n    }}>{`CAP Theory`}</h2>\n    <p>{`CAP Theorem is a concept that a distributed database system can only have 2 of the 3: Consistency, Availability and Partition Tolerance.`}</p>\n    <h2 {...{\n      \"id\": \"acid\"\n    }}>{`ACID`}</h2>\n    <p>{`In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc.`}</p>\n    <h2 {...{\n      \"id\": \"semantic-markup\"\n    }}>{`Semantic Markup`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`async`}</inlineCode>{`: When present, it specifies that the script will be executed asynchronously as soon as it is available.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defer`}</inlineCode>{`: When present, it specifies that the script is executed when the page has finished parsing.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`: A disabled input element is unusable and un-clickable.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data-*`}</inlineCode>{`: data-`}{`*`}{` attributes allow us to store extra information on standard, semantic HTML elements without other hacks such as non-standard attributes, extra properties on DOM, or Node.setUserData().`}</li>\n      <li parentName=\"ul\">{`Aria labels: Accessibility concerns, for example, making sure an input checkbox has a larger responding area (use label \"for\"). Also, role=\"button\", role=\"presentation\", etc.`}</li>\n    </ul>\n    <p>{`Also note extra source and info: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hongkiat.com/blog/html-5-semantics/\"\n      }}>{`https://www.hongkiat.com/blog/html-5-semantics/`}</a></p>\n    <h2 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h2>\n    <p>{`Sources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\n        }}>{`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"\n        }}>{`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"objectcall-vs-objectapply\"\n    }}>{`Object.call vs Object.apply`}</h3>\n    <p>{`While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Object.call\nfunction Product(name, price) {\n  this.name = name;\n  this.price = price;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\n\nconsole.log(new Food('cheese', 5).name);\n// expected output: \"cheese\"\n\n// Object.apply\nvar numbers = [5, 6, 2, 3, 7];\n\nvar max = Math.max.apply(null, numbers);\n\nconsole.log(max);\n// expected output: 7\n\nvar min = Math.min.apply(null, numbers);\n\nconsole.log(min);\n// expected output: 2\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"promises-vs-callbacks\"\n    }}>{`Promises vs Callbacks`}</h3>\n    <p>{`Promises are not callbacks. A promise represents the future result of an asynchronous operation.`}</p>\n    <h3 {...{\n      \"id\": \"identity--vs-equality--operator\"\n    }}>{`Identity (===) vs Equality (==) Operator`}</h3>\n    <p>{`The identity (===) operator behaves identically to the equality (==) operator except no type conversion is done, and the types must be the same to be considered equal.`}</p>\n    <h3 {...{\n      \"id\": \"hash-map\"\n    }}>{`Hash Map`}</h3>\n    <p>{`Requires:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Get`}</li>\n      <li parentName=\"ul\">{`Set`}</li>\n      <li parentName=\"ul\">{`Hash for key`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const hash = require('string-hash');\n\nclass DumbMap {\n  constructor() {\n    this.list = []\n  }\n\n  get(x) {\n    let i = hash(x)\n\n    if (!this.list[i]) {\n      return undefined\n    }\n\n    let result\n\n    this.list[i].forEach(pairs => {\n      if (pairs[0] === x) {\n        result = pairs[1]\n      }\n    })\n\n    return result\n  }\n\n  set(x, y) {\n    let i = hash(x)\n\n    if (!this.list[i]) {\n      this.list[i] = []\n    }\n\n    this.list[i].push([x, y])\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"context-and-process\"\n    }}>{`Context and Process`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/\"\n      }}>{`https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/`}</a></p>\n    <p>{`Context (which ECMA 5 breaks into LexicalEnvironment, VariableEnvironment and ThisBinding) and Process (a set of statements to be invoked in sequence).`}</p>\n    <p>{`Declarations contribute to the VariableEnvironment when the execution scope is entered. They are distinct from Statements (such as return) and are not subject to their rules of process.`}</p>\n    <h3 {...{\n      \"id\": \"hoisting\"\n    }}>{`Hoisting`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  var bar = function() {\n    return 3;\n  };\n  return bar();\n  var bar = function() {\n    return 8;\n  };\n}\nalert(foo());\n`}</code></pre>\n    <p>{`This when run becomes this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`//**Simulated processing sequence for Question 2**\nfunction foo() {\n  //a declaration for each function expression\n  var bar = undefined;\n  var bar = undefined;\n  //first Function Expression is executed\n  bar = function() {\n    return 3;\n  };\n  // Function created by first Function Expression is invoked\n  return bar();\n  // second Function Expression unreachable\n}\nalert(foo()); //3\n`}</code></pre>\n    <p>{`Hoisting of functions not assigned to variables is a little different:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  function bar() {\n    return 3;\n  }\n  return bar();\n  function bar() {\n    return 8;\n  }\n}\nalert(foo());\n`}</code></pre>\n    <p>{`...which becomes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  function bar() {\n    return 3;\n  }\n  function bar() {\n    return 8;\n  }\n  return bar();\n}\nalert(foo());\n`}</code></pre>\n    <p>{`In the case where the return occurs in a particular order, we can still return an `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  return bar();\n  var bar = function() {\n    return 3;\n  };\n  var bar = function() {\n    return 8;\n  };\n}\nalert(foo());\n`}</code></pre>\n    <p>{`This results in...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  //a declaration for each function expression\n  var bar = undefined;\n  var bar = undefined;\n  return bar();\n  bar = function() {\n    return 3;\n  };\n  bar = function() {\n    return 8;\n  };\n}\nalert(foo());\n`}</code></pre>\n    <p>{`Note that anything declared with `}<inlineCode parentName=\"p\">{`let`}</inlineCode>{` will not hoist and cause a reference error!`}</p>\n    <h3 {...{\n      \"id\": \"typeof-instanceof\"\n    }}>{`typeof, instanceof`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class A {\n  hello = () => 'hello';\n}\nconst a = new A();\nconsole.log(a instanceof A); // true\nconsole.log(typeof a === 'object'); // true\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-coercion\"\n    }}>{`Type Coercion`}</h2>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Type coercion`}</inlineCode>{` is the process of converting value from one type to another`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Implicit vs. Explicit`}</inlineCode>{` coercion`}</li>\n      <li parentName=\"ol\">{`Three types of conversions: to string, to boolean, to number`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// implicit\nconst a = 2;\nconst b = 2 + ''; // \"2\"\n\n// explicit\na.toString(); // \"2\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"browser-events-bubbling-capturing-and-delegation\"\n    }}>{`Browser events: bubbling, capturing, and delegation`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.meteor.com/browser-events-bubbling-capturing-and-delegation-14db28e924ae\"\n      }}>{`https://blog.meteor.com/browser-events-bubbling-capturing-and-delegation-14db28e924ae`}</a></p>\n    <p><inlineCode parentName=\"p\">{`<body> <p> <a><span>Hello</span></a> </p> </body>`}</inlineCode></p>\n    <p>{`If we add a \"click\" event listener to the A, we’d expect it to fire when the user clicks the SPAN. We’d also expect clicking on the SPAN to trigger listeners on the P and BODY. If we added listeners to every element — the SPAN, the A, the P, and the BODY — we’d expect them to all fire when the user clicks the SPAN.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The \"bubbling\" model achieves this by saying the event bubbles from bottom to top, visiting each handler in turn. First it visits the SPAN’s handler, and if that handler doesn’t cancel the event, it propagates up to the A, and so on.`}</li>\n      <li parentName=\"ul\">{`The \"capturing\" model says instead that event handlers are visited top-to-bottom. The BODY handler captures the event first, and if it doesn’t cancel the event, it propagates downwards to the P, and so on.`}</li>\n    </ul>\n    <p>{`Event delegation is not a browser feature, but a popular technique built into libraries like jQuery. Many blogs get confused talking about it or equate it with bubbling, but I hope the following description is clear.`}</p>\n    <h3 {...{\n      \"id\": \"mixins\"\n    }}>{`Mixins`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://javascript.info/mixins\"\n      }}>{`https://javascript.info/mixins`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// mixin\nlet sayHiMixin = {\n  sayHi() {\n    alert(\\`Hello \\${this.name}\\`);\n  },\n  sayBye() {\n    alert(\\`Bye \\${this.name}\\`);\n  }\n};\n\n// usage:\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// copy the methods\nObject.assign(User.prototype, sayHiMixin);\n\n// now User can say hi\nnew User('Dude').sayHi(); // Hello Dude!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"lexical-scope-closures--hoisting\"\n    }}>{`Lexical Scope, Closures + Hoisting`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@nickbalestra/javascripts-lexical-scope-hoisting-and-closures-without-mystery-c2324681d4be\"\n      }}>{`https://medium.com/@nickbalestra/javascripts-lexical-scope-hoisting-and-closures-without-mystery-c2324681d4be`}</a></p>\n    <p>{`Closure: Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n  // 'scope of foo' aka lexical scope for bar\n  var memory = 'hello closure';\n  return function bar() {\n    console.log(memory);\n  };\n}\n\nvar memory = null,\n  baz = foo();\nbaz(); // 'hello closure'\n`}</code></pre>\n    <p>{`Lexical scope: A lexical scope in Javascript means that a variable defined outside a function can be accessible inside another function defined after the variable declaration. But the opposite is not true, the variables defined inside a function will not be accessible outside that function.`}</p>\n    <h3 {...{\n      \"id\": \"binding\"\n    }}>{`Binding`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://javascript.info/bind\"\n      }}>{`https://javascript.info/bind`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let user = {\n  firstName: 'John',\n  sayHi() {\n    alert(\\`Hello, \\${this.firstName}!\\`);\n  }\n};\n\nsetTimeout(user.sayHi, 1000); // Hello, undefined!\n`}</code></pre>\n    <p>{`Solution 1:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let user = {\n  firstName: 'John',\n  sayHi() {\n    alert(\\`Hello, \\${this.firstName}!\\`);\n  }\n};\n\nsetTimeout(function() {\n  user.sayHi(); // Hello, John!\n}, 1000);\n\n// same, but shorter\nsetTimeout(() => user.sayHi(), 1000); // Hello, John!\n`}</code></pre>\n    <p>{`Solution 2: Bind`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let user = {\n  firstName: 'John',\n  sayHi() {\n    alert(\\`Hello, \\${this.firstName}!\\`);\n  }\n};\n\nlet sayHi = user.sayHi.bind(user); // (*)\n\nsayHi(); // Hello, John!\n\nsetTimeout(sayHi, 1000); // Hello, John!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"currying\"\n    }}>{`Currying`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function curry(f) {\n  // curry(f) does the currying transform\n  return function(a) {\n    return function(b) {\n      return f(a, b);\n    };\n  };\n}\n\n// usage\nfunction sum(a, b) {\n  return a + b;\n}\n\nlet carriedSum = curry(sum);\n\nalert(carriedSum(1)(2)); // 3\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prototypes\"\n    }}>{`Prototypes`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/backticks-tildes/javascript-prototypes-ee46810e4866\"\n      }}>{`https://medium.com/backticks-tildes/javascript-prototypes-ee46810e4866`}</a></p>\n    <p>{`Objects in JavaScript have an internal property known as prototype. It is simply a reference to another object and contains common attributes/properties across all instances of the object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let protoRabbit = function(color, word, type) {\n  this.color = color;\n  this.word = word;\n  this.type = type;\n};\nprotoRabbit.prototype.getColor = function() {\n  return this.color;\n};\nprotoRabbit.prototype.speak = function() {\n  console.log(\\`The \\${this.type} rabbit says \\${this.word}\\`);\n};\nlet killerRabbit = new protoRabbit('grey', 'SKREEEEE!', 'assassin');\nkillerRabbit.speak();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"composition\"\n    }}>{`Composition`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://alligator.io/js/class-composition/\"\n      }}>{`https://alligator.io/js/class-composition/`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Alligator extends Animal {}\n\nconst jack = new Alligator('jack');\n`}</code></pre>\n    <p>{`If you wish to be explicit...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Alligator extends Animal {\n  constructor(...args) {\n    super(...args);\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"higher-order-functions\"\n    }}>{`Higher Order Functions`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eloquentjavascript.net/05_higher_order.html\"\n      }}>{`https://eloquentjavascript.net/05_higher_order.html`}</a></p>\n    <p>{`Basic example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function greaterThan(n) {\n  return (m) => m > n;\n}\nlet greaterThan10 = greaterThan(10);\nconsole.log(greaterThan10(11));\n// true\n`}</code></pre>\n    <p>{`Example to show alternative control logic:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function unless(test, then) {\n  if (!test) then();\n}\n\nrepeat(3, (n) => {\n  unless(n % 2 == 1, () => {\n    console.log(n, 'is even');\n  });\n});\n//  0 is even\n//  2 is even\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dom\"\n    }}>{`DOM`}</h2>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.digitalocean.com/community/tutorials/how-to-make-changes-to-the-dom\"\n      }}>{`https://www.digitalocean.com/community/tutorials/how-to-make-changes-to-the-dom`}</a></p>\n    <ul>\n      <li parentName=\"ul\">{`Selecting or finding nodes using `}<inlineCode parentName=\"li\">{`document.querySelector`}</inlineCode>{` and in older browsers `}<inlineCode parentName=\"li\">{`document.getElementsByTagName`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Traversal up and down – `}<inlineCode parentName=\"li\">{`Node.parentNode`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`Node.firstChild`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`Node.lastChild`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Node.childNodes`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Traversal left and right – `}<inlineCode parentName=\"li\">{`Node.previousSibling`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Node.nextSibling`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Manipulation – add, remove, copy, and create nodes in the DOM tree. You should know operations such as how to change the text content of a node and toggle, remove or add a CSS classname (node.classList.add/remove).`}</li>\n      <li parentName=\"ul\">{`Performance – touching the DOM can be expensive when you have many nodes, you should at least know about document fragments and node caching.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"creating-nodes\"\n    }}>{`Creating Nodes`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property/Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`createElement()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Create a new element node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`createTextNode()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Create a new text node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.textContent`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get or set the text content of an element node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.innerHTML`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get or set the HTML content of an element`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"inserting-nodes\"\n    }}>{`Inserting Nodes`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property/Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.appendChild()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Add a node as the last child of a parent element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.insertBefore()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Insert a node into the parent element before a specified sibling node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.replaceChild()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Replace an existing node with a new node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"removal\"\n    }}>{`Removal`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.removeChild()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Remove child node`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.remove()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Remove node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"copy\"\n    }}>{`Copy`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`node.cloneNode()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clone node`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"document-fragment\"\n    }}>{`Document Fragment`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://davidwalsh.name/documentfragment\"\n      }}>{`https://davidwalsh.name/documentfragment`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Create the fragment\nvar frag = document.createDocumentFragment();\n\n// Create numerous list items, add to fragment\nfor(var x = 0; x < 10; x++) {\n    var li = document.createElement(\"li\");\n    li.innerHTML = \"List item \" + x;\n    frag.appendChild(li);\n}\n\n// Mass-add the fragment nodes to the list\nlistNode.appendChild(frag);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"node-cacheing\"\n    }}>{`Node Cacheing`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://codeburst.io/taming-huge-collections-of-dom-nodes-bebafdba332\"\n      }}>{`https://codeburst.io/taming-huge-collections-of-dom-nodes-bebafdba332`}</a></p>\n    <ul>\n      <li parentName=\"ul\">{`If you are looking for performance, don’t use frameworks. Period.`}</li>\n      <li parentName=\"ul\">{`At the end of the day, DOM is slow.`}</li>\n      <li parentName=\"ul\">{`Repaints and reflows are even slower.`}</li>\n      <li parentName=\"ul\">{`Whatever performance you get out of your app, repaints and reflows are still going to be the last remaining bottleneck.`}</li>\n      <li parentName=\"ul\">{`Keep the number of DOM nodes down.`}</li>\n      <li parentName=\"ul\">{`Cache created DOM nodes, and use them as a pool of pre-assembled elements you can put back in the page as needed.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"repaints-vs-reflows\"\n    }}>{`Repaints vs Reflows`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`repaint`}</inlineCode>{` occurs when changes are made to an elements skin that changes visibly, but do not affect its layout.`}</p>\n    <p>{`Examples of this include  outline, visibility, background, or color. According to Opera, repaint is expensive because the browser must verify the visibility of all other nodes in the DOM tree.`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`reflow`}</inlineCode>{` is even more critical to performance because it involves changes that affect the layout of a portion of the page (or the whole page).`}</p>\n    <p>{`Examples that cause reflows include: adding or removing content, explicitly or implicitly changing width, height, font-family, font-size and more.`}</p>\n    <h2 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h2>\n    <h3 {...{\n      \"id\": \"media-breakpoints\"\n    }}>{`Media Breakpoints`}</h3>\n    <p>{`Media Breakpoints: `}<a parentName=\"p\" {...{\n        \"href\": \"https://getflywheel.com/layout/css-breakpoints-responsive-design-how-to/\"\n      }}>{`https://getflywheel.com/layout/css-breakpoints-responsive-design-how-to/`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@media only screen and (min-width: 768px) and (max-width: 959px){\n    display: inline-block;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"css-animations\"\n    }}>{`CSS Animations`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://css-tricks.com/almanac/properties/a/animation/\"\n      }}>{`https://css-tricks.com/almanac/properties/a/animation/`}</a></p>\n    <p>{`Transitions`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.target {\n    opacity: 1;\n    transition: opacity 300ms ease-out;\n}\n\n@media (max-width: 667px) {\n    .target {\n        opacity: 0;\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"oocss-vs-acss-vs-bems-vs-smacss-v-rscss\"\n    }}>{`OOCSS vs ACSS vs BEMS vs SMACSS v RSCSS`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/\"\n      }}>{`https://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/`}</a></p>\n    <h4 {...{\n      \"id\": \"oocss-object-orientated-css\"\n    }}>{`OOCSS: Object Orientated CSS:`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Keep structure and skin separate`}</li>\n      <li parentName=\"ol\">{`Separate container and content`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"atomic-css\"\n    }}>{`Atomic CSS:`}</h4>\n    <p>{`Trashes everything you’ve know about CSS (pretty much). Premise being: only use reusable classes like. Just one declaration per selector. Essentially, putting the styling back to the markup, like we used to do in the early nineties.`}</p>\n    <h4 {...{\n      \"id\": \"block-element-modifier-bems\"\n    }}>{`Block, Element, Modifier (BEMS):`}</h4>\n    <p>{`Attemps to address the naming of things.`}</p>\n    <h4 {...{\n      \"id\": \"scalable-and-modular-architecture-for-css\"\n    }}>{`Scalable and Modular Architecture for CSS`}</h4>\n    <p>{`More of a styleguide for CSS conventions layout.`}</p>\n    <h4 {...{\n      \"id\": \"reasonable-system-for-css-stylesheet-structure\"\n    }}>{`Reasonable System for CSS Stylesheet Structure`}</h4>\n    <p>{`CSS file structure.`}</p>\n    <h3 {...{\n      \"id\": \"css-sprites\"\n    }}>{`CSS Sprites`}</h3>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://css-tricks.com/css-sprites/\"\n      }}>{`https://css-tricks.com/css-sprites/`}</a></p>\n    <p>{`Get the image once, and shift it around and only display parts of it. This reduces the overhead of having to fetch multiple images.`}</p>\n    <h3 {...{\n      \"id\": \"css-animation-property\"\n    }}>{`CSS animation property`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.element {\n  animation: pulse 5s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    background-color: #001F3F;\n  }\n  100% {\n    background-color: #FF4136;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"block-formatting-context-bfc\"\n    }}>{`Block Formatting Context (BFC)`}</h3>\n    <p>{`A BFC is an HTML box that satisfies at least one of the following conditions:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The value of float is not none.`}</li>\n      <li parentName=\"ol\">{`The value of position is neither static nor relative.`}</li>\n      <li parentName=\"ol\">{`The value of display is table-cell, table-caption, inline-block, flex, or inline-flex.`}</li>\n      <li parentName=\"ol\">{`The value of overflow is not visible.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"what-are-some-of-the-gotchas-for-writing-efficient-css\"\n    }}>{`What are some of the “gotchas” for writing efficient CSS?`}</h3>\n    <p>{`Firstly, understand that browsers match selectors from rightmost (key selector) to left. Browsers filter out elements in the DOM according to the key selector, and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector. Hence avoid key selectors that are tag and universal selectors. They match a large numbers of elements and browsers will have to do more work in determining if the parents do match.`}</p>\n    <p>{`BEM (Block Element Modifier) methodology recommends that everything has a single class, and, where you need hierarchy, that gets baked into the name of the class as well, this naturally makes the selector efficient and easy to override.`}</p>\n    <p>{`Be aware of which CSS properties trigger reflow, repaint and compositing. Avoid writing styles that change the layout (trigger reflow) where possible.`}</p>\n    <h3 {...{\n      \"id\": \"more-css-interview-qs\"\n    }}>{`More CSS Interview Qs`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codeburst.io/clearing-your-front-end-job-interview-css-95bdd82871f2\"\n      }}>{`https://codeburst.io/clearing-your-front-end-job-interview-css-95bdd82871f2`}</a></p>\n    <h2 {...{\n      \"id\": \"graceful-degradation-vs-progressive-enhancements\"\n    }}>{`Graceful Degradation vs Progressive Enhancements`}</h2>\n    <p>{`Graceful degradation means building an application with a baseline of full functionality available in modern browsers and then taking the layers off to ensure it works with older browsers. Basically, you downgrade/degrade the enhanced version (that why it’s called this way).`}</p>\n    <p>{`Progressive enhancement is the opposite of graceful degradation. Instead of developing all features from the start, a web page is built from a baseline of the features supported by all browsers (and browser versions). Then, more advanced features are added like layers, so the web page takes advantage of the functionality newer browsers have to offer. `}</p>\n    <h2 {...{\n      \"id\": \"explain-some-of-the-pros-and-cons-for-css-animations-versus-javascript-animations\"\n    }}>{`Explain some of the pros and cons for CSS animations versus JavaScript animations`}</h2>\n    <p>{`TL;DR`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use CSS animations for simpler \"one-shot\" transitions, like toggling UI element states.`}</li>\n      <li parentName=\"ul\">{`Use JavaScript animations when you want to have advanced effects like bouncing, stop, pause, rewind, or slow down.`}</li>\n      <li parentName=\"ul\">{`If you choose to animate with JavaScript, use the Web Animations API or a modern framework that you're comfortable with.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"difference-between-cookies-sessionstorage-and-localstorage\"\n    }}>{`Difference between cookies, sessionStorage and localStorage`}</h2>\n    <p>{`sessionStorage, localStorage and Cookies all are used to store data on the client side. Each one has its own storage and expiration limit.`}</p>\n    <p>{`localStorage: stores data with no expiration date, and gets cleared only through JavaScript, or clearing the Browser Cache / Locally Stored Data`}</p>\n    <p>{`sessionStorage: similar to localStorage but expires when the browser closed (not the tab).`}</p>\n    <p>{`Cookie: stores data that has to be sent back to the server with subsequent requests. Its expiration varies based on the type and the expiration duration can be set from either server-side or client-side (normally from server-side).`}</p>\n    <p>{`Cookies are primarily for server-side reading (can also be read on client-side), localStorage and sessionStorage can only be read on client-side.`}</p>\n    <h2 {...{\n      \"id\": \"describe-the-process-of-typing-in-a-url-to-when-a-website-loads-on-the-screen\"\n    }}>{`Describe the process of typing in a URL to when a website loads on the screen`}</h2>\n    <p>{`When I enter a website's URL, in the transport layer, it will ask a local DNS what is the IP of the provided URL. We know the IP of the local DNS server by the DHCP protocol, when a node connects to internet and gets an IP address.`}</p>\n    <p>{`After that, a browser will try to establish a TCP connection with a server having the retrieved IP by 3-way handshake. When it establish a TCP connection, the browser will form an HTTP request containing an HTTP header and body.`}</p>\n    <p>{`After the HTTP request is sent and the server responds with an HTTP response, the browser will parse the HTTP response header and body, and will render the website. If the document contains additional assets, the browser will create HTTP requests for the assets and send them like above.`}</p>\n    <h2 {...{\n      \"id\": \"event-loops\"\n    }}>{`Event Loops`}</h2>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://flaviocopes.com/javascript-event-loop/\"\n      }}>{`https://flaviocopes.com/javascript-event-loop/`}</a></p>\n    <p>{`In general, in most browsers there is an event loop for every browser tab, to make every process isolated and avoid a web page with infinite loops or heavy processing to block your entire browser.`}</p>\n    <p>{`The environment manages multiple concurrent event loops, to handle API calls for example. Web Workers run in their own event loop as well.`}</p>\n    <p>{`You mainly need to be concerned that your code will run on a single event loop, and write code with this thing in mind to avoid blocking it.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`JS is single-threaded and everything is based to be non-blocking. The event loop is given to each browser and if a function call doesn't return, it becomes blocked and unresponsive.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`call stack`}</inlineCode>{` is a LIFO queue that executes functionality.`}</li>\n      <li parentName=\"ul\">{`Events are put on a `}<inlineCode parentName=\"li\">{`message queue`}</inlineCode>{` and when the event runs, they are put on the back of the `}<inlineCode parentName=\"li\">{`call stack`}</inlineCode>{` line.`}</li>\n      <li parentName=\"ul\">{`Job queues used by Promises and introduced in ES6 are similar to the message queue with the except that they are fast-tracked to the front of the call stack when a promise resolves.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const bar = () => console.log('bar')\n\nconst baz = () => console.log('baz')\n\nconst foo = () => {\n  console.log('foo')\n  setTimeout(bar, 0)\n  new Promise((resolve, reject) =>\n    resolve('should be right after baz, before bar')\n  ).then(resolve => console.log(resolve))\n  baz()\n}\n\nfoo()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"host-vs-native-objects\"\n    }}>{`Host vs Native Objects`}</h2>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@rlynjb/js-interview-question-what-s-the-difference-between-host-objects-and-native-objects-b395f7c5fbf1\"\n      }}>{`https://medium.com/@rlynjb/js-interview-question-what-s-the-difference-between-host-objects-and-native-objects-b395f7c5fbf1`}</a></p>\n    <ul>\n      <li parentName=\"ul\">{`Host: Browser objects supplied`}</li>\n      <li parentName=\"ul\">{`Native: Native to JavaScript`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"whats-the-difference-between-feature-detection-feature-inference-and-using-the-ua-string\"\n    }}>{`What’s the difference between feature detection, feature inference, and using the UA string`}</h2>\n    <p>{`These 3 are just practices of determining if a certain web technology feature exists in a user’s browser or environment. Though features may vary with not just modern web technology but with programming languages as well.`}</p>\n    <h2 {...{\n      \"id\": \"more\"\n    }}>{`More`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.keycdn.com/support/prefetching\"\n        }}>{`What is Prefetching?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889\"\n        }}>{`Sorting algorithms (Python)`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/wangonya/sorting-algorithms-with-javascript-part-1-4aca\"\n        }}>{`Sorting algorithms (JS)`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://flaviocopes.com/javascript-event-loop/\"\n        }}>{`What is the event loop`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}