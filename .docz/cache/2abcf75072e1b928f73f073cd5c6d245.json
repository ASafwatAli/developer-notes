{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md","mtime":1562563032037},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Dev-Guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"the-complete-go-developer-guide\"\n    }}>{`The Complete Go Developer Guide`}</h1>\n    <h2 {...{\n      \"id\": \"intro-to-the-go-cli\"\n    }}>{`Intro to the Go CLI`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go build`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles go source files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go run`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and executes one or two files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go fmt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Formats all go code in current directory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go install`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and \"installs\" a package`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go get`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Downloads the raw source code of someone else's pacakge`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go test`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Runs any tests associated with the current project`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"hello-world\"\n    }}>{`Hello World`}</h2>\n    <p>{`Using the Go CLI, we can run a simple hello world as so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\n/**\n * Basic hello world.\n * Run using go -o\n */\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"go-packages\"\n    }}>{`Go Packages`}</h2>\n    <p>{`When you see lines like `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, that's like a workspace. `}</p>\n    <p>{`There are two types of packages in Golang: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Executable: Generates a file that we can run.`}</li>\n      <li parentName=\"ol\">{`Reuseable: Code used as \"helpers\" -- a good place to put reusable login.`}</li>\n    </ol>\n    <p>{`Take for example three files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n\n// support.go\npackage main\n\nfunc support() {\n  fmt.Println(\"Hi support!\")\n}\n\n// helper.go\npackage main\n\nfunc helper() {\n  fmt.Println(\"Hi helper!\")\n}\n`}</code></pre>\n    <p>{`How can we tell the difference between whether we are creating a `}<inlineCode parentName=\"p\">{`executable`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`reuseable`}</inlineCode>{` type of package? It actually depends on whether you use the name `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`. If you ran `}<inlineCode parentName=\"p\">{`go build`}</inlineCode>{` and you did not use `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, it will not spit out an executable file.`}</p>\n    <p>{`Any executable package also needs a func called `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"variable-declarations\"\n    }}>{`Variable Declarations`}</h2>\n    <p>{`Variables in Go can generally be inferred from the right hand side. Linters will generally help you out with this.`}</p>\n    <p>{`Shorthand declarations with initialisation can be done with `}<inlineCode parentName=\"p\">{`:=`}</inlineCode>{`, although it should be noted you can omit the `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` when declaring new values for variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nfunc main() {\n  var card string = \"Ace of spades\"\n  easierCard := \"Ace of hearts\"\n  easierCard = \"Five of Diamonds\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions-and-return-types\"\n    }}>{`Functions and Return Types`}</h2>\n    <p>{`The patter for declaring a return type is to name that return type after a func is called.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n  card := newCard()\n\n  fmt.Println(card)\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"slices-and-for-loops\"\n    }}>{`Slices and For Loops`}</h2>\n    <p>{`Go has two basic structures for handling lists: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Array: fixed length list of things`}</li>\n      <li parentName=\"ol\">{`Slice: an array that can grow or shrink`}</li>\n    </ol>\n    <p>{`Every slice must also be of the same type.`}</p>\n    <p>{`For a slice, we create it like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n  cards := []string{newCard()}\n  cards = append(cards, \"Six of Spades\")\n  \n  for i, card := range cards {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`Note that the cards variable is immutable and a new slice is returned when we use the `}<inlineCode parentName=\"p\">{`append`}</inlineCode>{` function to add to the slice.`}</p>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{` keyword to iterate over a slice.`}</p>\n    <h2 {...{\n      \"id\": \"object-oriented-approach-vs-go-approach\"\n    }}>{`Object Oriented approach vs Go approach`}</h2>\n    <p>{`Note that there are no classes in Go.`}</p>\n    <p>{`In Go, what we do is declare a new type and then create `}<inlineCode parentName=\"p\">{`functions with a receiver`}</inlineCode>{`. This is a common pattern that repeats throughout Go courses.`}</p>\n    <p>{`In practice, we can update the `}<inlineCode parentName=\"p\">{`main.go`}</inlineCode>{` file with a new type we create:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := deck{newCard()}\n  cards = append(cards, \"Six of Spades\")\n\n  cards.print()\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n\n// deck.go\npackage main\n\nimport \"fmt\"\n\n// Create a new type of 'deck'\n// which is a slice of strings\ntype deck []string\n\n// Creating a receiver function\nfunc (d deck) print() {\n  for i, card := range d {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`It is important to note that if your other `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{` files are not in the `}<inlineCode parentName=\"p\">{`$GOPATH`}</inlineCode>{` that you need to include them during your run state ie `}<inlineCode parentName=\"p\">{`go run main.go deck.go`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"slice-range-syntax\"\n    }}>{`Slice range syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// [StartingAt : UpToButNotInclusive]\nslice := [\"one\", \"two\", \"three\"]\n// Get \"one\", \"two\"\nsliceRange := slice[0:2]\n// Same as...\nsliceRangeTwo  := [:2]\n// Get just the last\nsliceRangeThree := [2:]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returning-multiple-values\"\n    }}>{`Returning multiple values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc main() {\n  cards := newDeck()\n\n  // init and assign return values\n  hand, remainingDeck := deal(cards, 5)\n  hand.print()\n  remainingDeck.print()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"converting-to-bite-slices-type-conversion\"\n    }}>{`Converting to bite slices (type conversion)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`byteSlice := []byte(\"Hi there\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-to-file\"\n    }}>{`Writing to file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := newDeck()\n  cards.saveToFile(\"my_cards\")\n}\n\n// deck.go\n\n// omit newDeck()\nfunc (d deck) saveToFile(filename string) error {\n   return ioutil.WriteFile(filename, []byte(d.toString()), 0666)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-from-hard-drive\"\n    }}>{`Reading from hard drive`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\n// main.go\npackage main\n\nfunc main() {\n  cards := newDeckFromFile(\"my_cards\")\n  cards.print()\n}\n\n// deck.go\nfunc newDeckFromFile(filename string) deck {\n    // bs = byteSlice\n    bs, err := ioutil.ReadFile(filename)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        os.Exit(1)\n    }\n\n    s := strings.Split(string(bs), \",\")\n    return deck(s)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shuffling-a-deck\"\n    }}>{`Shuffling a Deck`}</h2>\n    <p>{`There is no inbuilt function to randomise a slice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\nimport (\n  \"math/rand\"\n  \"time\"\n)\n\n// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc (d deck) shuffle() {\n  source := rand.NewSource(time.Now().UnixNano())\n  r := rand.New(source)\n\n  for i := range d {\n    newPosition := r.Intn(len(d) - 1)\n\n    // fancy one line swap\n    d[i], d[newPosition] = d[newPosition], d[i]\n  }\n}\n\nfunc main() {\n   func main() {\n     cards := newDeck()\n\n     // init and assign return values\n     cards.shuffle()\n     cards.print()\n   }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing-with-go\"\n    }}>{`Testing with Go`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"asserting-elements\"\n    }}>{`Asserting Elements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clean-up-for-file-writing\"\n    }}>{`Clean up for file writing`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport (\n  \"testing\"\n  \"os\"\n)\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n\n// although long name, the test \nfunc TestSaveToDeckAndNewDeckFromFile(t *testing.T) {\n  os.Remove(\"_decktesting\")\n\n  d := new Deck()\n  d.saveToFile(\"_decktesting\")\n\n  loadedDeck := newDeckFromFile(\"_decktesting\")\n\n  if len(loadedDeck) != 16 {\n    t.Errorf(\"Expected 16 cards in deck, got %v\", len(loadedDeck))\n  }\n\n  os.Remove(\"_decktesting\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-in-go\"\n    }}>{`Structs in Go`}</h2>\n    <p>{`Structs are a collection of different properties linked with a particular purpose.`}</p>\n    <p>{`If we want to convert the string \"Ace of Spaces\" to become more flexible and as a structure, we could create a struct:`}</p>\n    <p>{`If you init a struct with no values, the zero values are assigned as the following:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Zero Value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type card struct {\n  house string\n  value string\n}\n\n// usage\nfunc main() {\n  card := card{\"Spaces\", \"Ace\"}\n  // being more definitive\n  cardTwo := card{house: \"Spaces\", value: \"Ace\"}\n  fmt.Println(card)\n\n  // non-init - sets the zero value\n  // %+v will print out all field names and values\n  var cardThree card\n  fmt.Printf(\"%+v\", cardThree)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"embedding-structs\"\n    }}>{`Embedding Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type contactInfo struct {\n  email string\n  zipCode int\n}\n\ntype person struct {\n  firstName string\n  lastName string\n  contactInfo\n}\n\nfunc main() {\n  jim := person{\n    firstName: \"Jim\",\n    lastName: \"Party\",\n    contactInfo: contactInfo{\n      email: \"jim@gmail.com\",\n      zipCode: 94000\n    }\n  }\n\n  fmt.Printf(\"%+v\", jim)\n  // same as\n  jim.print()\n\n  // Update name\n  jim.updateNameIncorrect(\"jimmy\")\n  jim.print() // still shows jim instead of jimmy\n\n  // Correct\n  jimPointer := &jim\n  jimPointer.updateName(\"jimmy\")\n  jim.print() // prints jimmy\n\n  // Also works - shortcut for the receiver\n  jim.updatename(\"jimmy\")\n  jim.print()\n}\n\nfunc (p person) print() {\n  fmt.Printf(\"%+v\", p)\n}\n\n// updateName without a pointer\nfunc (p person) updateNameIncorrect(newFirstName string) {\n  p.firstName = newFirstname\n}\n\n// updateName correctly\n// note that taking *type means we're working with a pointer\n// *variable means we want to manipulate the value it is pointing at\nfunc (p *person) updateName(newFirstName string) {\n  (*p).firstName = newFirstname\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-operations\"\n    }}>{`Pointer operations`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`*address`}</inlineCode></li>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`&value`}</inlineCode></li>\n      <li parentName=\"ul\">{`Note that with slices vs structs, you can manipulate the slice directly without having to use a pointer, unlike structs.`}</li>\n      <li parentName=\"ul\">{`Slices with the underlying array get copied, but the array points to the same addresses.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reference-vs-value-types\"\n    }}>{`Reference vs Value Types`}</h3>\n    <p>{`Use pointers for value types, don't worry about it for reference types.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value types`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference types`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`slices`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maps`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`channels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pointers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`structs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`functions`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h2>\n    <p>{`Maps are similar to structs, but have some differences. These are basically `}<inlineCode parentName=\"p\">{`key:value`}</inlineCode>{` pairs.`}</p>\n    <p>{`These are comparable to `}<inlineCode parentName=\"p\">{`hash`}</inlineCode>{` in Ruby, `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` in JavaScript or `}<inlineCode parentName=\"p\">{`Dict`}</inlineCode>{` in Python.`}</p>\n    <p>{`For a map, the keys all need to be the same type, and the values all need to be the same type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\n)\n\nfunc main() {\n  // map: declare new map\n  // [string]: keys are type string\n  // string: values are type string\n  colors := map[string]string {\n    \"red\": \"#ff0000\",\n    \"green\": \"#4b9000\"\n  }\n\n  fmt.Println(colors)\n}\n`}</code></pre>\n    <p>{`Creating a zero value map can be done basically in two ways:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`var colors map[string]string\ncolorsEq = make(map[string]string)\n\n// adding in values\ncolorsEq[\"white\"] = \"#ffffff\"\n`}</code></pre>\n    <p>{`We MUST use square braces to access map values, NOT dot notation.`}</p>\n    <h2 {...{\n      \"id\": \"iterating-over-maps\"\n    }}>{`Iterating Over Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`colors := map[string]string {\n  \"red\": \"#ff0000\",\n  \"green\": \"#4b9000\"\n}\n\n\nfunc printMap(c map[string]string) {\n  for color, hex := range c {\n    fmt.Println(\"Hex code for\", color, \"is\", hex)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-vs-structs\"\n    }}>{`Maps Vs Structs`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Maps`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Structs`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All keys must be same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values can be different types`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a collection of related properties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Need to know all the different fields at compile time`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All values must be the same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys don't support indexing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Don't need to know all keys at compile time`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a `}<inlineCode parentName=\"td\">{`thing`}</inlineCode>{` with a lot of properties`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys are indexed - can iterate over them`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value type!`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference type !`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`The following example shows similar types but returning different values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\ntype englishBot struct {}\ntype spanishBot struct {}\n\n//\ntype bot interface {\n  getGreeting() string\n}\n\nfunc main() {\n  eb := englishBot()\n  sb := spanishBot()\n\n  printGreeting(eb)\n  printGreeting(sb)\n}\n\nfunc (eb englishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hi There!\"\n}\n\nfunc (sb spanishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hola!\"\n}\n\n// any type that implements getGreeting is now an \"honorary\" member of type bot\nfunc printGreet(b bot) {\n  fmt.Println(b.getGreeting())\n}\n`}</code></pre>\n    <p>{`More complex interfaces in Go might have signatures like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n}\n`}</code></pre>\n    <p>{`If you want to set more \"qualifiers\" to conform to the interface, you can add more methods to the signature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n  getBotVersion() float64\n  respondToUser(user) string\n}\n`}</code></pre>\n    <p>{`You can only create values out of the concrete types and not interface types.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Interfaces are not generic types (other langs have them, Go famously does not).`}</li>\n      <li parentName=\"ul\">{`Interfaces are \"implicit\", we don't have to say a custom type satisfies some interface.`}</li>\n      <li parentName=\"ul\">{`Interfaces are a contract to help us manage types.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"http-package\"\n    }}>{`HTTP Package`}</h2>\n    <p>{`Using http and getting a body response back and helping us understanding how structs work a little better.`}</p>\n    <p><img alt=\"Diagram of how to access return body\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550201024/developer-notes/Screen_Shot_2019-02-15_at_2.22.59_pm.png\" /></p>\n    <p>{`If we use an interface as a property of a struct, we can add any property there as long as it conforms to the interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type example interface {\n  Reader\n}\n\ntype resp struct {\n  propOne example\n}\n`}</code></pre>\n    <p>{`We can also assemble multiple interfaces together to create another interface where all requirements need to be satisfied:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type reader interface {}\ntype closer interface {}\n\ntype readCloser interface {\n  reader\n  closer\n}\n`}</code></pre>\n    <p>{`For an application of this in action with the http.Get func:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Note: Reader interface manipulates byte slice -- it doesn't return it. Go also has easier help functions to simply reading responses.\n  bs := make([]byte, 99999)\n  resp.Body.Read(bs)\n  fmt.Println(string(bs))\n}\n`}</code></pre>\n    <p>{`In order to prevent ourselves from having to manually create a byte slice each time, we can use the `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` function instead. The method signature for this requires a destination that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface and a source that implements the `}<inlineCode parentName=\"p\">{`Reader`}</inlineCode>{` interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(os.Stdout, resp.Body)\n}\n`}</code></pre>\n    <p>{`With everything that we have learned so far about how `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` works, let's create something that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\ntype logWriter struct {}\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  lw := logWriter{}\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(lw, resp.Body)\n}\n\nfunc (logWriter) Write(bs []byte) (int, error) {\n  fmt.Println(string(bs))\n  fmt.Println(\"Just wrote this many bytes\", len(bs))\n  return len(bs), nil\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channels-and-go-routines\"\n    }}>{`Channels and Go Routines`}</h2>\n    <p>{`Both channels and go routines are used for cocurrency programming.`}</p>\n    <p>{`The project for this particular example will use a status checker.`}</p>\n    <p><img alt=\"Project layout\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533610/developer-notes/Screen_Shot_2019-02-19_at_9.59.38_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\"http://google.com\", \"http://amazon.com\", \"http://facebook.com\"}\n\n  for _, link := range ws {\n    checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <p>{`If we think of the main function as the `}<inlineCode parentName=\"p\">{`main go routine`}</inlineCode>{`, we can start to imagine the above working sequentially as a result. In order to create new go routines, we can use the keyword `}<inlineCode parentName=\"p\">{`go`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  for _, link := range ws {\n    // creates new Go routine\n    go checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"go-scheduler-behind-the-scenes\"\n    }}>{`Go Scheduler Behind The Scenes`}</h3>\n    <p><img alt=\"Go scheduler\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533611/developer-notes/Screen_Shot_2019-02-19_at_10.46.20_am.png\" /></p>\n    <p>{`Not that with one CPU, the Go scheduler runs `}<inlineCode parentName=\"p\">{`one`}</inlineCode>{` routine until finished or hits a blocking call. If a blocking call is hit, the scheduler pausing execution on a routine and starts the next one.`}</p>\n    <p>{`If we insteads have multiple cores, the scheduler runs one thread on each \"logical\" core. This then truly runs multiple routines at the same time.`}</p>\n    <p>{`By default, Go tries to use one core.`}</p>\n    <p>{`In Go, you will constantly see `}<inlineCode parentName=\"p\">{`concurrency is not parallelism`}</inlineCode>{`. Concurrency is the case of multiple threads executing code. `}</p>\n    <p>{`If one thread blocks, another one is picked up and worked out. Parallelism is the use of multiple physical CPU cores at the same time.`}</p>\n    <h3 {...{\n      \"id\": \"returning-from-go-routines\"\n    }}>{`Returning from Go routines`}</h3>\n    <p>{`In order to get back to the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` routine from child routines, we need to update the code to handle channels for communication.`}</p>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`channel`}</inlineCode>{` communicates with a particular type - something incredibly important.`}</p>\n    <h3 {...{\n      \"id\": \"sending-data-with-channels\"\n    }}>{`Sending Data with Channels`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Syntax`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`channel <- 5`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Send value 5 into this channel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`myNumber <- channel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into the channel. When we get one, assign the value to 'myNumber'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fmt.Println(<- channel)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into channel. When we get one, log it out immediately`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`One of the challenging concepts with channels is that each message coming back from a channel is also `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` code. This means that for every iteration that uses a channel, it is important to have the appropriate amount of receivers ready on the main routine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  for {\n    go checkLink(<-c, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alternative-loop-syntax\"\n    }}>{`Alternative loop syntax`}</h3>\n    <p>{`So we don't want to continually ping a request, we can update the control loop with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    go checkLink(l, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sleeping-a-routine\"\n    }}>{`Sleeping a routine`}</h3>\n    <p>{`We sleep a routine in order to generate a pause.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n  \"time\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    // invoke function literal\n    // ensure to pass the argument to have a copy in memory\n    go func(link string) {\n      time.Sleep(5*time.Second)\n      checkLink(link, c)\n    }(l)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}