{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Slim-Stripe-Configuration.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Slim-Stripe-Configuration.md","mtime":1578808556528},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Slim-Stripe-Configuration.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"configuring-stripe-for-php-and-slim\"\n    }}>{`Configuring Stripe for PHP and Slim`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://getcomposer.org/download/\"\n        }}>{`Composer installation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.slimframework.com/docs/v4/start/installation.html\"\n        }}>{`Getting started with Slim`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.slimframework.com/docs/v4/objects/request.html\"\n        }}>{`Request Object - Slim`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.php.net/manual/en/language.exceptions.php\"\n        }}>{`PHP Exceptions`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://akrabat.com/receiving-input-into-a-slim-4-application/\"\n        }}>{`Receiving input into a Slim 4 application`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/vlucas/phpdotenv\"\n        }}>{`PHP Dotenv`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-php\"\n        }}>{`Stripe PHP Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/api\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://hotexamples.com/examples/slim.http/Request/getParsedBody/php-request-getparsedbody-method-examples.html\"\n        }}>{`getParsedBody Slim`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"get-started\"\n    }}>{`Get Started`}</h2>\n    <p>{`Ensure `}<inlineCode parentName=\"p\">{`composer`}</inlineCode>{` is installed correctly and run the following. Note that you need to ensure that the downloaded `}<inlineCode parentName=\"p\">{`composer.phar`}</inlineCode>{` file from the installation instructions must be in your `}<inlineCode parentName=\"p\">{`$PATH`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`composer`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir slim-stripe && cd slim-stripe\ncomposer require slim/slim:\"4.*\"\n# required to enable App::Run() etc without manual ServerRequest\ncomposer require slim/psr7\n# installing for Stripe\ncomposer require stripe/stripe-php\n# required to read dotenv vars\ncomposer require vlucas/phpdotenv\nmkdir -p src/public\ntouch src/public/index.php\ntouch .env\n`}</code></pre>\n    <p>{`To check Slim is up and working, add this to `}<inlineCode parentName=\"p\">{`src/public/index.php`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Psr\\\\Http\\\\Message\\\\ResponseInterface as Response;\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface as Request;\nuse Slim\\\\Factory\\\\AppFactory;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function (Request $request, Response $response, $args) {\n    $response->getBody()->write(\"Hello world!\");\n    return $response;\n});\n\n$app->run();\n`}</code></pre>\n    <p>{`Once completed, change into `}<inlineCode parentName=\"p\">{`src/public`}</inlineCode>{` and run `}<inlineCode parentName=\"p\">{`php -S localhost:8080`}</inlineCode>{`.`}</p>\n    <p>{`If we now ping `}<inlineCode parentName=\"p\">{`curl localhost:8080`}</inlineCode>{` we will see our `}<inlineCode parentName=\"p\">{`Hello world!`}</inlineCode>{` response.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-env\"\n    }}>{`Setting up .env`}</h2>\n    <p>{`Our `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file should contain our keys for development. Get these from your Stripe Developer dashboard.`}</p>\n    <p>{`Add the following to the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file in the root of your project directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY= sk_test...\nPK_TEST_KEY=pk_test...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-simple-charge-with-stripe-api\"\n    }}>{`Making a simple charge with Stripe API`}</h2>\n    <p>{`Let us update `}<inlineCode parentName=\"p\">{`src/public/index.php`}</inlineCode>{` to take a simple request to make a charge to our Stripe account.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Psr\\\\Http\\\\Message\\\\ResponseInterface as Response;\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface as Request;\nuse Slim\\\\Factory\\\\AppFactory;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\n$dotenv = Dotenv\\\\Dotenv::createImmutable(__DIR__ . '/../..');\n$dotenv->load();\n\n$stripeKey = getenv('SK_TEST_KEY');\n\\\\Stripe\\\\Stripe::setApiKey($stripeKey);\n\n$app = AppFactory::create();\n\n// Parse json, form data and xml\n$app->addBodyParsingMiddleware();\n$app->addRoutingMiddleware();\n$app->addErrorMiddleware(true, true, true);\n\n$app->get('/', function (Request $request, Response $response, $args) {\n    $response->getBody()->write(\"Hello world!\");\n    return $response;\n});\n\n$app->post('/api/charge', function (Request $request, Response $response, $args) {\n  try {\n    $data = $request->getParsedBody();\n\n    // parse attributes from JSON\n    $receiptEmail = $data['receiptEmail'];\n    $amount = $data['amount'];\n\n    // create the charge\n    $charge = \\\\Stripe\\\\Charge::create([\n      'amount' => $amount,\n      'currency' => 'usd',\n      'source' => 'tok_visa',\n      'receipt_email' => $receiptEmail\n    ]);\n\n    $response->getBody()->write('Successful charge');\n    $response->withStatus(201);\n    return $response;\n  } catch (Exception $e) {\n    $response->getBody()->write('Failed charge');\n    $response->withStatus(500);\n    return $response;\n  }\n});\n\n$app->run();\n`}</code></pre>\n    <p>{`Note that in the above example we are loading keys from `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`, setting the Stripe API key, then using Slim 4's body parsing middleware to help us with parsing the request body from JSON.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) from the console, we will get our `}<inlineCode parentName=\"p\">{`Successful charge`}</inlineCode>{` message back.`}</p>\n    <p>{`We can head to our dashboard on Stripe and head to `}<inlineCode parentName=\"p\">{`Developers > Events`}</inlineCode>{` to see the log of our successful charge for `}<inlineCode parentName=\"p\">{`US$5.00`}</inlineCode>{`. Hooray!`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}