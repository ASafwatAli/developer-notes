{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md","mtime":1568159731568},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJlbmhhbmNpbmctbm9kZWpzLXBlcmZvcm1hbmNlIn0sIkVuaGFuY2luZyBOb2RlanMgUGVyZm9ybWFuY2UiKSxtZHgoInAiLG51bGwsIldlJ3JlIGdvaW5nIHRvIGxvb2sgYXQgdHdvIHdheXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZToiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJVc2luZyBOb2RlIGluICdDbHVzdGVyJyBNb2RlIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlVzaW5nIFdvcmtlciBUaHJlYWRzIikpLG1keCgicCIsbnVsbCwiVGhlIHJlY29tbWVuZGVkIGFwcHJvYWNoIHdvdWxkIGJlIHVzaW5nICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjbHVzdGVyIiksIiBtb2RlLCB3aGVyZWFzIHdvcmtlciB0aHJlYWRzIGFyZSB3YXkgbW9yZSBleHBlcmltZW50YWwuIiksbWR4KCJoMiIseyJpZCI6InRlc3QtYXBwIn0sIlRlc3QgQXBwIiksbWR4KCJwIixudWxsLCJXZSdsbCB1c2UgYSB0aW55IGV4cHJlc3Mgc2VydmVyIGZvciBwbGF5aW5nIGFyb3VuZC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiLy8gYXBwLmpzXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5mdW5jdGlvbiBkb1dvcmsoZHVyYXRpb24pIHtcbiAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZS5ub3coKTtcbiAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydCA8IGR1cmF0aW9uKSB7XG4gICAgLy8gZG8gbm90aGluZyBlbHNlXG4gIH1cbn1cblxuYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xuICBkb1dvcmsoNTAwMCk7XG4gIHJlcy5zZW5kKCdIZWxsbycpO1xufSk7XG5cbmFwcC5saXN0ZW4oMzAwMCk7XG4iKSksbWR4KCJwIixudWxsLCJUaGlzIGFwcCB3aWxsIGJlIGNvbnRpbnVhbGx5IHVwZGF0ZWQgdG8gc2hvdyB0aGUgcGVyZm9ybWFuY2UgdXBkYXRlcy4iKSxtZHgoImgyIix7ImlkIjoiYmxvY2tpbmctdGhlLWV2ZW50LWxvb3AifSwiQmxvY2tpbmcgdGhlIEV2ZW50IExvb3AiKSxtZHgoInAiLG51bGwsIktlZXAgaW4gbWluZDoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc2hlbGwifSksIltTaW5nbGUgVGhyZWFkXVxuUmVxdWVzdCA9PiBOb2RlIFNlcnZlciA9PiBSZXNwb25zZVxuIikpLG1keCgicCIsbnVsbCwiV2Ugc3RhcnQgdG8gcnVuIGludG8gaXNzdWVzIGhlcmUgd2hlbiBvdXIgcmVxdWVzdCByZXF1aXJlcyBhIGxvdCBvZiBwcm9jZXNzaW5nIHBvd2VyIChpbiB0aGUgZXhhbXBsZSBhcHAsIHRoaXMgd2lsbCBiZSB0aGUgZnVuY3Rpb24gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImRvV29yayIpLCIpLiIpLG1keCgicCIsbnVsbCwiTm90ZSB0aGF0IHdpdGggdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkb1dvcmsiKSwiIGZ1bmN0aW9uIGNhbGwsIHdlIGFyZSBibG9ja2luZyB0aGUgZW50aXJlIGV2ZW50IGxvb3AuICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlRoaXMgYmxvY2tzIHRoZSBlbnRpcmUgc2VydmVyIGZyb20gaGFuZGxpbmcgb3RoZXIgcmVxdWVzdHMuIikpLG1keCgiaDIiLHsiaWQiOiJjbHVzdGVyaW5nLWluLXRoZW9yeSJ9LCJDbHVzdGVyaW5nIGluIFRoZW9yeSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1zaGVsbCJ9KSwiQ2x1c3RlciBNYW5hZ2VyXG4gID0+IFNpbmdsZSBUaHJlYWRlZCBOb2RlIFNlcnZlclxuICA9PiBTaW5nbGUgVGhyZWFkZWQgTm9kZSBTZXJ2ZXJcbiAgPT4gU2luZ2xlIFRocmVhZGVkIE5vZGUgU2VydmVyXG4iKSksbWR4KCJwIixudWxsLCJUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNsdXN0ZXIgbWFuYWdlciIpLCIgaXMgb25seSByZXNwb25zaWJsZSBmb3IgbW9uaXRvcmluZyB0aGUgaGVhbHRoIG9mIGluZGl2aWR1YWwgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIm5vZGUgc2VydmVyIiksIiBpbnN0YW5jZXMuIEl0IHdpbGwgc3RpbGwgYmUgdXAgdG8gdGhlIGluc3RhbmNlcyB0byBoYW5kbGUgdGhlIHJlcXVlc3QgaGFuZGxpbmcgYW5kIHByb2Nlc3NpbmcuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCIjIFJVTiBub2RlIGFwcC5qc1xuXHUyNTE0XHUyNTAwXHUyNTAwIGFwcC5qcyAgPT09PT09PT09PT09PT09PT09PT4gV29ya2VyIEluc3RhbmNlXG4gICAgXHUyNTE0XHUyNTAwXHUyNTAwICBDbHVzdGVyIE1hbmFnZXJcbiAgICAgICAgXHUyNTE0XHUyNTAwXHUyNTAwIGNsdXN0ZXIuZm9yaygpICMgZm9ya3MgYXBwLmpzXG4iKSksbWR4KCJoMiIseyJpZCI6ImZvcmtpbmctY2hpbGRyZW4td2l0aC1jbHVzdGVyIn0sIkZvcmtpbmcgQ2hpbGRyZW4gV2l0aCBDbHVzdGVyIiksbWR4KCJwIixudWxsLCJXaGVuIHJ1bm5pbmcgdGhlIG1hbmFnZXIsIG5vdGUgdGhhdCBOb2RlIHdpbGwgZmlyc3QgcnVuIGFsbCB0aGUgSmF2YVNjcmlwdCBjb2RlIGluIHRoZSBmaWxlIGFuZCB0aGVuIHN0YXJ0dXAgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJDbHVzdGVyIE1hbmFnZXIiKSwiLiBXZSB3YW50IHRvIGVuc3VyZSB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgc2NlbmFyaW8gd2l0aCB0aGUgZm9ya2VkIGFwcCBydW5uaW5nIGFzIGV4cGVjdGVkLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhc2NyaXB0In0pLCIvLyBhcHAuanNcbmNvbnN0IGNsdXN0ZXIgPSByZXF1aXJlKCdjbHVzdGVyJyk7XG4vLyBJcyBmaWxlIGV4ZWN1dGVkIGluIHRoZSBtYXN0ZXIgbW9kZT9cbmlmIChjbHVzdGVyLmlzTWFzdGVyKSB7XG4gIC8vIENhdXNlIGFwcC5qcyB0byBiZSBleGVjdXRlZCBhZ2FpbiBidXQgaW4gY2hpbGQgbW9kZVxuICBjbHVzdGVyLmZvcmsoKTtcbn0gZWxzZSB7XG4gIC8vIENoaWxkIC0gb3BlcmF0ZSBhcyBub3JtYWwgc2VydmVyXG4gIGNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuICBmdW5jdGlvbiBkb1dvcmsoZHVyYXRpb24pIHtcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnQgPCBkdXJhdGlvbikge1xuICAgICAgLy8gZG8gbm90aGluZyBlbHNlXG4gICAgfVxuICB9XG5cbiAgYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xuICAgIGRvV29yayg1MDAwKTtcbiAgICByZXMuc2VuZCgnSGVsbG8nKTtcbiAgfSk7XG5cbiAgYXBwLmxpc3RlbigzMDAwKTtcbn07XG4iKSksbWR4KCJwIixudWxsLCJJZiB3ZSBhZGQgbXVsdGlwbGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNsdXN0ZXIuZm9yaygpIiksIiBjYWxscywgd2UgY2FuIGhhdmUgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoZSBzZXJ2ZXIgcmVhZHkgdG8gcnVuLiIpLG1keCgiaDIiLHsiaWQiOiJiZW5jaG1hcmtpbmctc2VydmVyLXBlcmZvcm1hbmNlIn0sIkJlbmNobWFya2luZyBTZXJ2ZXIgUGVyZm9ybWFuY2UiKSxtZHgoInAiLG51bGwsIkZvciBiZW5jaG1hcmtpbmcsIHdlIHdpbGwgdXNlIGEgcHJvZ3JhbSBjYWxsZWQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImFiIiksIi4gKEF2YWlsYWJsZSBmb3IgTWFjT1MpIiksbWR4KCJwIixudWxsLCJVc2FnZTogIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImFiIC1jIDUwIC1uIDUwMCBsb2NhbGhvc3Q6MzAwMC9mYXN0IiksIiB3aGVyZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiLWMiKSwiIGlzIDUwIGNvbmN1cnJlbnQgcmVxdWVzdHMgYW5kICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCItbiIpLCIgaW5kaWNhdGVzIDUwMCByZXF1ZXN0cy4iKSxtZHgoInAiLG51bGwsIkluIHRoZSBib3R0b20gY29kZSwgd2UncmUgZ29pbmcgc2hvdyBob3cgeW91IGNhbiBnZXQgZGltaW5pc2hpbmcgcmV0dXJucyBieSBhZGRpbmcgbW9yZSBjaGlsZHJlbi4gSXQgaXMgaW1wb3J0YW50IHRoYXQgd2Uga2VlcCBhIHRocmVhZHBvb2wgc2l6ZSBvZiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiMSIpLCIgZm9yIHRoaXMgZXhhbXBsZS4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiLy8gYXBwLmpzXG5wcm9jZXNzLmVudi5VVl9USFJFQURQT09MX1NJWkUgPSAxOyAvLyBqdXN0IGZvciBiZW5jaG1hcmtpbmcgcHVycG9zZXNcbmNvbnN0IGNsdXN0ZXIgPSByZXF1aXJlKCdjbHVzdGVyJyk7XG4vLyBJcyBmaWxlIGV4ZWN1dGVkIGluIHRoZSBtYXN0ZXIgbW9kZT9cbmlmIChjbHVzdGVyLmlzTWFzdGVyKSB7XG4gIC8vIENhdXNlIGFwcC5qcyB0byBiZSBleGVjdXRlZCBhZ2FpbiBidXQgaW4gY2hpbGQgbW9kZVxuICBjbHVzdGVyLmZvcmsoKTtcbn0gZWxzZSB7XG4gIC8vIENoaWxkIC0gb3BlcmF0ZSBhcyBub3JtYWwgc2VydmVyXG4gIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICBjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIFxuICBhcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgY3J5cHRvLnBia2RmMignYScsICdiJywgMTAwMDAwLCA1MTIsICdzaGE1MTInLCAoKSA9PiB7XG4gICAgICByZXMuc2VuZCgnSGVsbG8nKTtcbiAgICB9KVxufSk7XG5cbiAgYXBwLmxpc3RlbigzMDAwKTtcbn07XG4iKSksbWR4KCJwIixudWxsLCJJZiB3ZSBydW4gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImFiIC1jIDEgLW4gMSBsb2NhbGhvc3Q6MzAwMC8iKSwiIHdlIHdpbGwgc2VlIHRoYXQgd2UgZ2V0IGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIlRpbWUgdGFrZW4gZm9yIHRlc3RzIiksIiB0byBiZSB+MTAwMG1zLiIpLG1keCgicCIsbnVsbCwiV2UgY2FuIHNlZSB0aGUgdGltaW5nIG9mIHRoaXMgaXMgc2ltaWxhciB0byB0aGUgZXhhbXBsZSBmb3IgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNyeXB0byIpLCIgd2UgaGFkIGluICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJOb2RlanMvTm9kZSBJbnRlcmFscyIpLCIgd2hlbiBkZW1vaW5nIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY3J5cHRvIiksIiBtb2R1bGUuIiksbWR4KCJwIixudWxsLCJJZiB3ZSBydW4gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImFiIC1jIDIgLW4gMiBsb2NhbGhvc3Q6MzAwMC8iKSwiLCB3ZSBzZWUgdGhhdCBvbmUgcmVxdWVzdHMgdG9vayAxcywgd2hpbGUgdGhlIG90aGVyIHRvb2sgMnMuIFRoaXMgaXMgc2ltaWxhciB0byB3aGF0IHdlIHNhdyBpbiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiTm9kZSBJbnRlcm5hbHMiKSwiLiBHaXZlbiB0aGUgb25lIHRocmVhZCwgd2Ugc2VlIHRoYXQgdGhlIHNlY29uZCByZXF1ZXN0IG5lZWRzIHRvIHdhaXQgZm9yIHRoZSBmaXJzdCByZXF1ZXN0IHRvIGJlIHJlbGVhc2VkIGZyb20gdGhlIHRocmVhZHBvb2wuIiksbWR4KCJwIixudWxsLCJJZiB3ZSB1cGRhdGUgb3VyIGNvZGUgdG8gYWRkIGFub3RoZXIgY2hpbGQgcHJvY2VzcyB1c2luZyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY2x1c3Rlci5mb3JrKCk7IiksIiwgd2Ugd2lsbCBub3RpY2UgdGhhdCBib3RoIHRoZSByZXF1ZXN0cyBub3cgZ2V0IHByb2Nlc3NlZCBpbiB0aGUgdHdvIGNoaWxkIHByb2Nlc3NlcyAoU1RJTEwgVVNJTkcgT05FIFRIUkVBRCkgYW5kIGhhdmUgY29tZSBiYWNrIHdpdGggdGhlIGV4cGVjdGVkIHRpbWUgfjEwMDBtcy4iKSxtZHgoImgzIix7ImlkIjoid2hhdC1oYXBwZW5zLXdpdGgtdG9vLW1hbnktY2hpbGRyZW4ifSwiV2hhdCBoYXBwZW5zIHdpdGggdG9vIG1hbnkgY2hpbGRyZW4/IiksbWR4KCJwIixudWxsLCJJZiB3ZSBmb3JrZWQgc2l4IHByb2Nlc3NlcyBhbmQgcmFuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJhYiAtYyA2IC1uIDYgbG9jYWxob3N0OjMwMDAvIiksIiB3ZSB3aWxsIHNlZSB0aGF0IGZvciBzb21lIHJlYXNvbiwgd2UgYXJlIG5vdyB0YWtpbmcgMy41IHNlY29uZHMgZm9yIGVhY2ggb2YgdGhlIDYgcmVxdWVzdHMgYWNyb3NzIHRoZSBib2FyZC4iKSxtZHgoInAiLG51bGwsIldoeSBpcyB0aGlzPyBJdCBkZXBlbmRzIG9uIHRoZSBraW5kIG9mIGNvbXB1dGVyIHRoYXQgeW91IGhhdmUuIE5vdGUgdGhhdCBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsIGl0IHdhcyBydW4gb24gYSBkdWFsLWNvcmUgQ1BVLiBUaGF0J3MgYmVjYXVzZSB0aGUgQ1BVIGlzIG5vdyB0cnlpbmcgdG8gZG8gYSBsaXR0bGUgYml0IG9mIHdvcmsgb24gYWxsIDYgdGhyZWFkcy4gU28gYWx0aG91Z2ggd2UgY291bGQgbm93IHByb2Nlc3MgdGhlIGNoaWxkcmVuIGluIHBhcmFsbGVsLCB3ZSBoYXZlIG92ZXJhbGxvY2F0ZWQgb3VyIHJlc291cmNlcy4iKSxtZHgoInAiLG51bGwsIklmIHdlIG5vdyByZWR1Y2VkIHRoZSBmb3JrZWQgcHJvY2Vzc2VzIHRvIDIgYW5kIHN0aWxsIHJhbiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiYWIgLWMgNiAtbiA2IGxvY2FsaG9zdDozMDAwLyIpLCIsIHdlIHdpbGwgbm90aWNlIHRoYXQgdGhlIHNsb3dlc3QgcmVxdWVzdCBpcyBzdGlsbCBhcm91bmQgMy40cywgd2hpbGUgb3VyIGZhc3Rlc3QgcmVxdWVzdCBpcyBub3cgfjFzLiBUaGlzIGlzIGJlY2F1c2UgYXQgYSBjbHVzdGVyIHdpdGggdHdvIGNoaWxkcmVuLCB3ZSBrbm93IHRoYXQgd2UgY2FuIGF0IG1vc3QgaGFuZGxlIHR3byByZXF1ZXN0cyBhdCB0aGUgc2FtZSB0aW1lLiAiKSxtZHgoInAiLG51bGwsIkVzc2VudGlhbGx5LCB0aGUgZmlyc3QgdHdvIHJlcXVlc3RzIGFyZSBwcm9jZXNzZWQgaW4gdGhlIGZpcnN0IHNlY29uZCwgdGhlIG5leHQgdHdvIGluIHRoZSBzZWNvbmQsIHRoZSBsYXN0IHR3byBpbiB0aGUgdGhpcmQgLSB0aGlzIG1ha2VzIHBlcmZlY3Qgc2Vuc2UuIFRoaXMgbWVhbnMgdGhhdCB3ZSBoYXZlIGVuZGVkIHdpdGggYSBmYXIgYmV0dGVyIHBlcmZvcm1hbmNlIHByb2ZpbGUuIiksbWR4KCJoMiIseyJpZCI6InBtMi1jb25maWd1cmF0aW9uIn0sIlBNMiBDb25maWd1cmF0aW9uIiksbWR4KCJwIixudWxsLCJQTTIgY2FuIHN1cGVyY2hhcmdlIG91ciBjbHVzdGVyaW5nIHNldHVwLiBQTTIgbWFrZXMgY2x1c3RlciBtYW5hZ2VtZW50IHN1cGVyIGVhc3kgZm9yIE5vZGVqcy4gSXQgY2FuIGJlIGluc3RhbGxlZCB0aHJvdWdoICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJucG0iKSwiIGdsb2JhbGx5IHVzaW5nICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJucG0gaSAtZyBwbTIiKSwiLiIpLG1keCgicCIsbnVsbCwiVG8gcnVuIHRoZSBzY3JpcHQgaW4gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInBtMiIpLCIsIHdlIG5lZWQgdG8gdXBkYXRlIG91ciBhcHAgb25jZSBhZ2Fpbi4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiLy8gYXBwLmpzXG5cbi8vIENoaWxkIC0gb3BlcmF0ZSBhcyBub3JtYWwgc2VydmVyXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcbiBjcnlwdG8ucGJrZGYyKCdhJywgJ2InLCAxMDAwMDAsIDUxMiwgJ3NoYTUxMicsICgpID0+IHtcbiAgIHJlcy5zZW5kKCdIZWxsbycpO1xuIH0pXG59KTtcblxuYXBwLmxpc3RlbigzMDAwKTtcbiIpKSxtZHgoInAiLG51bGwsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJwbTIgc3RhcnQgaW5kZXguanMgLWkgMCIpLCIgd2lsbCB0ZWxsIHBtMiB0byBhdXRvLWNvbmZpZ3VyZSBob3cgbWFueSBpbnN0YW5jZXMgdG8gc2V0dXAgYmFzZWQgb24gdGhlIGFtb3VudCBvZiBsb2dpY2FsIGNvcmVzIChwaHlzaWNhbCAqIHZpcnR1YWwgY29yZXMpIGFyZSBhdmFpbGFibGUuIiksbWR4KCJ0YWJsZSIsbnVsbCxtZHgoInRoZWFkIix7cGFyZW50TmFtZToidGFibGUifSxtZHgoInRyIix7cGFyZW50TmFtZToidGhlYWQifSxtZHgoInRoIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiQ2FsbCIpLG1keCgidGgiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6bnVsbH0pLCJEZWZpbml0aW9uIikpKSxtZHgoInRib2R5Iix7cGFyZW50TmFtZToidGFibGUifSxtZHgoInRyIix7cGFyZW50TmFtZToidGJvZHkifSxtZHgoInRkIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwicG0yIG1vbml0IiksbWR4KCJ0ZCIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksIlNob3cgcG0yIG1vbml0b3IiKSksbWR4KCJ0ciIse3BhcmVudE5hbWU6InRib2R5In0sbWR4KCJ0ZCIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksInBtMiBsaXN0IiksbWR4KCJ0ZCIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksIkxpc3QgYWxsIHBtMiBwcm9jZXNzZXMiKSksbWR4KCJ0ciIse3BhcmVudE5hbWU6InRib2R5In0sbWR4KCJ0ZCIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksInBtMiBzdGFydCBpbmRleC5qcyAtaSAwIiksbWR4KCJ0ZCIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksIlN0YXJ0IGluZGV4LmpzIHdpdGggYXV0by1jb25maWd1cmVkIGluc3RhbmNlcyIpKSxtZHgoInRyIix7cGFyZW50TmFtZToidGJvZHkifSxtZHgoInRkIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwicG0yIGRlbGV0ZSBpbmRleCIpLG1keCgidGQiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6bnVsbH0pLCJEZWxldGUgYWxsIGluZGV4IGNoaWxkcmVuIikpKSksbWR4KCJwIixudWxsLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicG0yIiksIiBpcyBnZW5lcmFsbHkgdXNlZCBpbiBwcm9kdWN0aW9uIGVudmlyb25tZW50cyBvbmx5LiIpLG1keCgiaDIiLHsiaWQiOiJ3ZWItd29ya2VyLXRocmVhZHMifSwiV2ViIFdvcmtlciBUaHJlYWRzIiksbWR4KCJwIixudWxsLCJBdCB0aGUgdGltZSBvZiB3cml0aW5nIC0gdGhlc2Ugd2VyZSBpbiBleHBlcmltZW50YWwgcGhhc2UuIiksbWR4KCJwIixudWxsLCJJbiB0aGlzIGV4YW1wbGUsIHdlIGFyZSB1c2luZyB0aGUgbW9kdWxlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJ3ZWJ3b3JrZXItdGhyZWFkcyIpLCIuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCJPdXIgQXBwXG5cdTI1MTRcdTI1MDBcdTI1MDAgV29ya2VyIEludGVyZmFjZSAoY29tbXVuaWNhdGVzIHdpdGggV29ya2VyKVxuICAgIFx1MjUxNFx1MjUwMFx1MjUwMCBwb3N0TWVzc2FnZSA8PT09PiBvbm1lc3NhZ2UgKFdvcmtlcilcbiAgICBcdTI1MTRcdTI1MDBcdTI1MDAgb25tZXNzYWdlIDw9PT0+IHBvc3RNZXNzYWdlIChXb3JrZXIpXG4iKSksbWR4KCJwIixudWxsLCJUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIldvcmtlciIpLCIgaXRzZWxmIGlzIHdvcmtpbmcgb24gaXRzIG93biB0aHJlYWQuIFJlbWVtYmVyOiBhIGxvdCBvZiB0aGUgTm9kZWpzIHN0YW5kYXJkIGxpYiBmdW5jdGlvbnMgQUxSRUFEWSB3b3JrIG9uIHRoZWlyIG93biB0aHJlYWQuIFlvdSBvbmx5IHJlYWxseSB3YW50IHRvIHVzZSBpdCBmb3IgeW91ciBvd24gaGVhdnktZHV0eSBidXNpbmVzcyBsb2dpYy4iKSxtZHgoInAiLG51bGwsIk5vdGU6IGFueSBmdW5jdGlvbiBwYXNzZWQgdG8gdGhlIHdvcmtlciBjYW5ub3QgYWNjZXNzIHRoZSBwYXJlbnQgc2NvcGVkIHZhcmlhYmxlcy4gSXQgaXMgYWxzbyBpbXBvcnRhbnQgdG8gdXNlIHRoZSBmdW5jdGlvbiBrZXl3b3JkIG9uIHB1cnBvc2UuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmFzY3JpcHQifSksIi8vIGFwcC5qc1xuY29uc3QgV29ya2VyID0gcmVxdWlyZSgnd2Vid29ya2VyLXRocmVhZHMnKS5Xb3JrZXI7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIoZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGVtdWxhdGUgaGVhdnkgd29ya1xuICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgd2hpbHRlIChjb3VudGVyIDwgMWU5KSB7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICAgIH1cblxuICAgICAgcG9zdE1lc3NhZ2UoY291bnRlcik7XG4gICAgfVxuICB9KTtcblxuICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oY291bnRlcikge1xuICAgIGNvbnNvbGUubG9nKGNvdW50ZXIpO1xuICAgIHJlcy5zZW5kKCcnICsgbWVzc2FnZS5kYXRhKTsgLy8gY2FzdGluZyBhcyBzZW5kIHJlcXVpcmVzIHN0cmluZ1xuICB9XG5cbiAgd29ya2VyLnBvc3RNZXNzYWdlKCk7XG59KTtcblxuYXBwLmxpc3RlbigzMDAwKTtcbiIpKSxtZHgoInAiLG51bGwsIkZvciBiZW5jaG1hcmtpbmcgdGhlc2Ugd29ya2Vycywgd2UgY2FuIGFnYWluIHVzZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiYWIiKSwiLiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiYWIgLWMgMSAtbiAxIGxvY2FsaG9zdDozMDAwLyIpLCIgYW5kICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJhYiAtYyAyIC1uIDIgbG9jYWxob3N0OjMwMDAvIiksIiBzaG91bGQgcnVuIHdpdGggc2ltaWxhciByZXN1bHRzIG9uIGEgZHVhbC1jb3JlIE1hYy4gIikpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9Ob2RlanMvRW5oYW5jaW5nLU5vZGUtUGVyZm9ybWFuY2UubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"enhancing-nodejs-performance\"\n    }}>{`Enhancing Nodejs Performance`}</h1>\n    <p>{`We're going to look at two ways to improve performance:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Using Node in 'Cluster' Mode`}</li>\n      <li parentName=\"ol\">{`Using Worker Threads`}</li>\n    </ol>\n    <p>{`The recommended approach would be using `}<inlineCode parentName=\"p\">{`cluster`}</inlineCode>{` mode, whereas worker threads are way more experimental.`}</p>\n    <h2 {...{\n      \"id\": \"test-app\"\n    }}>{`Test App`}</h2>\n    <p>{`We'll use a tiny express server for playing around.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst express = require('express');\nconst app = express();\n\nfunction doWork(duration) {\n  const start = new Date.now();\n  while (Date.now() - start < duration) {\n    // do nothing else\n  }\n}\n\napp.get('/', (req, res) => {\n  doWork(5000);\n  res.send('Hello');\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`This app will be continually updated to show the performance updates.`}</p>\n    <h2 {...{\n      \"id\": \"blocking-the-event-loop\"\n    }}>{`Blocking the Event Loop`}</h2>\n    <p>{`Keep in mind:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[Single Thread]\nRequest => Node Server => Response\n`}</code></pre>\n    <p>{`We start to run into issues here when our request requires a lot of processing power (in the example app, this will be the function `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{`).`}</p>\n    <p>{`Note that with the `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{` function call, we are blocking the entire event loop. `}<strong parentName=\"p\">{`This blocks the entire server from handling other requests.`}</strong></p>\n    <h2 {...{\n      \"id\": \"clustering-in-theory\"\n    }}>{`Clustering in Theory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Cluster Manager\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster manager`}</inlineCode>{` is only responsible for monitoring the health of individual `}<inlineCode parentName=\"p\">{`node server`}</inlineCode>{` instances. It will still be up to the instances to handle the request handling and processing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# RUN node app.js\n└── app.js  ===================> Worker Instance\n    └──  Cluster Manager\n        └── cluster.fork() # forks app.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forking-children-with-cluster\"\n    }}>{`Forking Children With Cluster`}</h2>\n    <p>{`When running the manager, note that Node will first run all the JavaScript code in the file and then startup the `}<inlineCode parentName=\"p\">{`Cluster Manager`}</inlineCode>{`. We want to ensure there is at least one scenario with the forked app running as expected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const express = require('express');\n  const app = express();\n\n  function doWork(duration) {\n    const start = new Date.now();\n    while (Date.now() - start < duration) {\n      // do nothing else\n    }\n  }\n\n  app.get('/', (req, res) => {\n    doWork(5000);\n    res.send('Hello');\n  });\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we add multiple `}<inlineCode parentName=\"p\">{`cluster.fork()`}</inlineCode>{` calls, we can have multiple instances of the server ready to run.`}</p>\n    <h2 {...{\n      \"id\": \"benchmarking-server-performance\"\n    }}>{`Benchmarking Server Performance`}</h2>\n    <p>{`For benchmarking, we will use a program called `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. (Available for MacOS)`}</p>\n    <p>{`Usage: `}<inlineCode parentName=\"p\">{`ab -c 50 -n 500 localhost:3000/fast`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`-c`}</inlineCode>{` is 50 concurrent requests and `}<inlineCode parentName=\"p\">{`-n`}</inlineCode>{` indicates 500 requests.`}</p>\n    <p>{`In the bottom code, we're going show how you can get diminishing returns by adding more children. It is important that we keep a threadpool size of `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` for this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nprocess.env.UV_THREADPOOL_SIZE = 1; // just for benchmarking purposes\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const crypto = require('crypto');\n  const express = require('express');\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n      res.send('Hello');\n    })\n});\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` we will see that we get a `}<inlineCode parentName=\"p\">{`Time taken for tests`}</inlineCode>{` to be ~1000ms.`}</p>\n    <p>{`We can see the timing of this is similar to the example for `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` we had in `}<inlineCode parentName=\"p\">{`Nodejs/Node Interals`}</inlineCode>{` when demoing the `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` module.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{`, we see that one requests took 1s, while the other took 2s. This is similar to what we saw in `}<inlineCode parentName=\"p\">{`Node Internals`}</inlineCode>{`. Given the one thread, we see that the second request needs to wait for the first request to be released from the threadpool.`}</p>\n    <p>{`If we update our code to add another child process using `}<inlineCode parentName=\"p\">{`cluster.fork();`}</inlineCode>{`, we will notice that both the requests now get processed in the two child processes (STILL USING ONE THREAD) and have come back with the expected time ~1000ms.`}</p>\n    <h3 {...{\n      \"id\": \"what-happens-with-too-many-children\"\n    }}>{`What happens with too many children?`}</h3>\n    <p>{`If we forked six processes and ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{` we will see that for some reason, we are now taking 3.5 seconds for each of the 6 requests across the board.`}</p>\n    <p>{`Why is this? It depends on the kind of computer that you have. Note that for the example above, it was run on a dual-core CPU. That's because the CPU is now trying to do a little bit of work on all 6 threads. So although we could now process the children in parallel, we have overallocated our resources.`}</p>\n    <p>{`If we now reduced the forked processes to 2 and still ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{`, we will notice that the slowest request is still around 3.4s, while our fastest request is now ~1s. This is because at a cluster with two children, we know that we can at most handle two requests at the same time. `}</p>\n    <p>{`Essentially, the first two requests are processed in the first second, the next two in the second, the last two in the third - this makes perfect sense. This means that we have ended with a far better performance profile.`}</p>\n    <h2 {...{\n      \"id\": \"pm2-configuration\"\n    }}>{`PM2 Configuration`}</h2>\n    <p>{`PM2 can supercharge our clustering setup. PM2 makes cluster management super easy for Nodejs. It can be installed through `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` globally using `}<inlineCode parentName=\"p\">{`npm i -g pm2`}</inlineCode>{`.`}</p>\n    <p>{`To run the script in `}<inlineCode parentName=\"p\">{`pm2`}</inlineCode>{`, we need to update our app once again.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\n\n// Child - operate as normal server\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n   res.send('Hello');\n })\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`pm2 start index.js -i 0`}</inlineCode>{` will tell pm2 to auto-configure how many instances to setup based on the amount of logical cores (physical * virtual cores) are available.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Call`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 monit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Show pm2 monitor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List all pm2 processes`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 start index.js -i 0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Start index.js with auto-configured instances`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 delete index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Delete all index children`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`pm2`}</inlineCode>{` is generally used in production environments only.`}</p>\n    <h2 {...{\n      \"id\": \"web-worker-threads\"\n    }}>{`Web Worker Threads`}</h2>\n    <p>{`At the time of writing - these were in experimental phase.`}</p>\n    <p>{`In this example, we are using the module `}<inlineCode parentName=\"p\">{`webworker-threads`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Our App\n└── Worker Interface (communicates with Worker)\n    └── postMessage <===> onmessage (Worker)\n    └── onmessage <===> postMessage (Worker)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Worker`}</inlineCode>{` itself is working on its own thread. Remember: a lot of the Nodejs standard lib functions ALREADY work on their own thread. You only really want to use it for your own heavy-duty business logic.`}</p>\n    <p>{`Note: any function passed to the worker cannot access the parent scoped variables. It is also important to use the function keyword on purpose.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst Worker = require('webworker-threads').Worker;\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const worker = new Worker(function() {\n    this.onmessage = function() {\n      // emulate heavy work\n      let counter = 0;\n      whilte (counter < 1e9) {\n        counter++;\n      }\n\n      postMessage(counter);\n    }\n  });\n\n  worker.onmessage = function(counter) {\n    console.log(counter);\n    res.send('' + message.data); // casting as send requires string\n  }\n\n  worker.postMessage();\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`For benchmarking these workers, we can again use `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{` should run with similar results on a dual-core Mac. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}