{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Lambdas.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Lambdas.md","mtime":1570524265626},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJrb3RsaW4tbGFtYmRhcyJ9LCJLb3RsaW4gTGFtYmRhcyIpLG1keCgicCIsbnVsbCwiQWxzbyBrbm93biBhcyBhbm9ueW1vdXMgZnVuY3Rpb25zIC0gbmFtZSBkZXJpdmluZyBmcm9tIGxhbWJkYSBjYWxjdWx1cyBvZiBBbG9uem8gQ2h1cmNoIHdoZXJlIGFsbCBmdW5jdGlvbnMgYXJlIGFub255bW91cy4iKSxtZHgoInAiLG51bGwsIkFsc28gc3lub255bW91cyB3aXRoIGNsb3N1cmVzLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1rb3RsaW4ifSksIi8vIGRlY2xhcmF0aW9uIG9mIGEgdmFyIHRoYXQgY2FuIGhvbGQgYSBsYW1iZGFcbnZhciBtdWx0aXBseUxhbWJkYTogKEludCwgSW50KSAtPiBJbnRcblxubXVsdGlwbHlMYW1iZGEgPSB7IGE6IEludCwgYjogSW50IC0+IEludFxuICBhKmJcbn1cblxudmFsIGxhbWJkYVJlc3VsdCA9IG11bHRpcGx5TGFtYmRhKDQsIDIpIC8vIDhcbiIpKSxtZHgoImgyIix7ImlkIjoic2hvcnRoYW5kLXN5bnRheCJ9LCJTaG9ydGhhbmQgU3ludGF4IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWtvdGxpbiJ9KSwibXVsdGlwbHlMYW1iZGEgPSB7IGEsIGIgLT5cbiAgYSpiXG59XG5cbi8vIHVzaW5nIGl0IGtleXdvcmQgZm9yIGFyZ3VtZW50XG52YXIgZG91YmxlTGFtYmRhID0geyBhOiBJbnQgLT5cbiAgMiphXG59XG5kb3VibGVMYW1iZGEgPSB7IDIgKiBpdCB9XG5cbi8vIGluIGRlY2xhcmF0aW9uXG52YWwgc3F1YXJlOiAoSW50KSAtPiBJbnQgPSB7IGl0ICogaXQgfVxuIikpLG1keCgiaDIiLHsiaWQiOiJsYW1iZGFzLWFzLWFyZ3VtZW50cyJ9LCJMYW1iZGFzIEFzIEFyZ3VtZW50cyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1rb3RsaW4ifSksImZ1biBvcGVyYXRlT25OdW1iZXJzKGE6IEludCwgYjogSW50LCBvcGVyYXRpb246IChJbnQsIEludCkgLT4gSW50KTogSW50IHtcbiAgdmFsIHJlc3VsdCA9IG9wZXJhdGlvbihhLCBiKVxuICBwcmludGxuKHJlc3VsdClcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyBpbiB1c2VcbnZhbCBhZGRMYW1iZGEgPSB7IGE6IEludCwgYjogSW50IC0+XG5hK2IgfVxub3BlcmF0ZU9uTnVtYmVycyg0LCAyLCBvcGVyYXRpb24gPSBhZGRMYW1iZGEpIC8vIDZcblxuLy8gbW9yZSB1c3VhbFxuZnVuIGFkZEZ1bmN0aW9uKGE6IEludCwgYjpJbnQpID0gYSArIGJcbm9wZXJhdGVPbk51bWJlcnMoNCwgMiwgb3BlcmF0aW9uID0gOjphZGRGdW5jdGlvbikgLy8gNlxuXG4vLyBvciBldmVuXG5vcGVyYXRlT25OdW1iZXJzKDQsIDIsIG9wZXJhdGlvbiA9IHsgYTogSW50LCBiOiBJbnQgLT5cbiAgYStiXG59KVxuIikpLG1keCgiaDIiLHsiaWQiOiJsYW1iZGFzLXdpdGgtbm8tbWVhbmluZ2Z1bC1yZXR1cm4ifSwiTGFtYmRhcyB3aXRoIG5vIG1lYW5pbmdmdWwgcmV0dXJuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWtvdGxpbiJ9KSwidmFyIHVuaXRMYW1iZGE6ICgpIC0+IFVuaXQgPSB7XG4gIHByaW50bG4oXCJLb3RsaW4gQXBwcmVudGljZSBpcyBhd2Vzb21lIVwiKVxufVxudW5pdExhbWJkYSgpXG4iKSksbWR4KCJwIixudWxsLCJJZiB5b3UgbGl0ZXJhbGx5IHdhbnQgbm8gdmFsdWUgcmV0dXJuZWRtIHlvdSBuZWVkIHRvIHVzZSB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIk5vdGhpbmciKSwiIHR5cGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWtvdGxpbiJ9KSwidmFyIG5vdGhpbmdMYW1iZGE6ICgpIC0+IE5vdGhpbmcgPSB7IHRocm93IE51bGxQb2ludGVyRXhjZXB0aW9uKCkgfVxuIikpLG1keCgiaDIiLHsiaWQiOiJpdGVyYXRpbmctb3Zlci1jb2xsZWN0aW9ucy13aXRoLWxhbWJkYXMifSwiSXRlcmF0aW5nIG92ZXIgY29sbGVjdGlvbnMgd2l0aCBsYW1iZGFzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWtvdGxpbiJ9KSwidmFsIHZhbHVlcyA9IGxpc3RPZigxLCAyLCAzLCA0LCA1LCA2KVxudmFsdWVzLmZvckVhY2gge1xuICBwcmludGxuKFwiJGl0OiAke2l0ICogaXR9XCIpXG59XG4vLyA+IDE6IDFcbi8vID4gMjogNFxuLy8gPiAzOiA5XG4vLyA+IDQ6IDE2XG4vLyA+IDU6IDI1XG4vLyA+IDY6IDM2XG4iKSksbWR4KCJwIixudWxsLCJUbyBmaWx0ZXIgc29tZSBvZiB0aGVzZSBvdXQ6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWtvdGxpbiJ9KSwidmFyIHByaWNlcyA9IGxpc3RPZigxLjUsIDEwLjAsIDQuOTksIDIuMzAsIDguMTkpXG52YWwgbGFyZ2VQcmljZXMgPSBwcmljZXMuZmlsdGVyIHtcbiAgaXQgPiA1LjBcbn1cblxuLy8gdGhlIGFib3ZlIGZ1bmN0aW9uIGxvb2tzIGxpa2Ugc29cbnB1YmxpYyBpbmxpbmUgZnVuIDxUPiBJdGVyYWJsZTxUPi5maWx0ZXIocHJlZGljYXRlOiAoVCkgLT4gQm9vbGVhbik6XG5MaXN0PFQ+XG5cbnZhbCB1c2VySW5wdXQgPSBsaXN0T2YoXCIwXCIsIFwiMTFcIiwgXCJoYWhhXCIsIFwiNDJcIilcbnZhbCBudW1iZXJzID0gdXNlcklucHV0Lm1hcCB7XG4gIGl0LnRvSW50T3JOdWxsKClcbn1cbnByaW50bG4obnVtYmVycykgLy8gPiBbMCwgMTEsIG51bGwsIDQyXVxuXG4vLyBhcnJheSBbMSwyLDMsNF1cbnN1bSA9IHByaWNlcy5yZWR1Y2UgeyBhLCBiIC0+XG4gIGEgKyBiXG59XG5wcmludGxuKHN1bSkgLy8gMTBcblxuLy8gc2ltaWxhciBidXQgdGFrZXMgaW5pdGlhbCB2YWx1ZVxudmFyIHN1bSA9IHByaWNlcy5mb2xkKDAuMCkgeyBhLCBiIC0+IGEgKyBiIH1cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0tvdGxpbi9Lb3RsaW4tTGFtYmRhcy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Lambdas.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,gBADA,CAAR,kBADK,CAIL,0IAJK,CAKL,8CALK,CAML,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,kMAAL,CANK,CAiBL,SAAQ,CACN,KAAM,kBADA,CAAR,oBAjBK,CAoBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,iNAAL,CApBK,CAmCL,SAAQ,CACN,KAAM,sBADA,CAAR,wBAnCK,CAsCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,scAAL,CAtCK,CA4DL,SAAQ,CACN,KAAM,mCADA,CAAR,qCA5DK,CA+DL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,oGAAL,CA/DK,CAsEL,6EAAoE,kBAAY,UAAU,CAAC,GAAvB,YAApE,UAtEK,CAuEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,0EAAL,CAvEK,CA2EL,SAAQ,CACN,KAAM,yCADA,CAAR,2CA3EK,CA8EL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,sKAAL,CA9EK,CA2FL,4CA3FK,CA4FL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,kiBAAL,CA5FK,CAAP,CAuHD,C,2QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-lambdas\"\n    }}>{`Kotlin Lambdas`}</h1>\n    <p>{`Also known as anonymous functions - name deriving from lambda calculus of Alonzo Church where all functions are anonymous.`}</p>\n    <p>{`Also synonymous with closures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// declaration of a var that can hold a lambda\nvar multiplyLambda: (Int, Int) -> Int\n\nmultiplyLambda = { a: Int, b: Int -> Int\n  a*b\n}\n\nval lambdaResult = multiplyLambda(4, 2) // 8\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shorthand-syntax\"\n    }}>{`Shorthand Syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`multiplyLambda = { a, b ->\n  a*b\n}\n\n// using it keyword for argument\nvar doubleLambda = { a: Int ->\n  2*a\n}\ndoubleLambda = { 2 * it }\n\n// in declaration\nval square: (Int) -> Int = { it * it }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-as-arguments\"\n    }}>{`Lambdas As Arguments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): Int {\n  val result = operation(a, b)\n  println(result)\n  return result\n}\n\n// in use\nval addLambda = { a: Int, b: Int ->\na+b }\noperateOnNumbers(4, 2, operation = addLambda) // 6\n\n// more usual\nfun addFunction(a: Int, b:Int) = a + b\noperateOnNumbers(4, 2, operation = ::addFunction) // 6\n\n// or even\noperateOnNumbers(4, 2, operation = { a: Int, b: Int ->\n  a+b\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-with-no-meaningful-return\"\n    }}>{`Lambdas with no meaningful return`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var unitLambda: () -> Unit = {\n  println(\"Kotlin Apprentice is awesome!\")\n}\nunitLambda()\n`}</code></pre>\n    <p>{`If you literally want no value returnedm you need to use the `}<inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nothingLambda: () -> Nothing = { throw NullPointerException() }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-over-collections-with-lambdas\"\n    }}>{`Iterating over collections with lambdas`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val values = listOf(1, 2, 3, 4, 5, 6)\nvalues.forEach {\n  println(\"$it: \\${it * it}\")\n}\n// > 1: 1\n// > 2: 4\n// > 3: 9\n// > 4: 16\n// > 5: 25\n// > 6: 36\n`}</code></pre>\n    <p>{`To filter some of these out:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var prices = listOf(1.5, 10.0, 4.99, 2.30, 8.19)\nval largePrices = prices.filter {\n  it > 5.0\n}\n\n// the above function looks like so\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean):\nList<T>\n\nval userInput = listOf(\"0\", \"11\", \"haha\", \"42\")\nval numbers = userInput.map {\n  it.toIntOrNull()\n}\nprintln(numbers) // > [0, 11, null, 42]\n\n// array [1,2,3,4]\nsum = prices.reduce { a, b ->\n  a + b\n}\nprintln(sum) // 10\n\n// similar but takes initial value\nvar sum = prices.fold(0.0) { a, b -> a + b }\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}