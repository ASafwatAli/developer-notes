{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md","mtime":1562563032042},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJqYXZhLWxhbWJkYS1mdW5jcyJ9LCJKYXZhIExhbWJkYSBGdW5jcyIpLG1keCgicCIsbnVsbCwiVGhlIGJhc2ljIGdpc3QgaXMgdG8gZ2VuZXJhdGUgYSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiaW50ZXJmYWNlIiksIiB3aXRoIHRoZSBsYW1iZGEgc2lnbmF0dXJlLCB0aGVuIGV4cGxpY2l0bHkgY3JlYXRlIGEgZnVuY3Rpb24gcHJlZmFjZSBieSB0aGUgaW50ZXJmYWNlIHR5cGUuIiksbWR4KCJwIixudWxsLCJUaGlzIHdpbGwgYWxsb3cgeW91IHRvIGNhbGwgdGhlIGxhbWJkYSBmdW5jdGlvbiBhcyBhIGluc3RhbmNlIG1ldGhvZC4iKSxtZHgoImgyIix7ImlkIjoiZXhhbXBsZSJ9LCJFeGFtcGxlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSksIi8vIHNyYy9tYWluL2phdmEvTGFtYmRhLmphdmFcbmludGVyZmFjZSBBbm9uIHtcbiAgICBTdHJpbmcgaGVsbG9Xb3JsZCgpO1xufVxuXG5pbnRlcmZhY2UgQW5vbkludCB7XG4gICAgaW50IHN1bShpbnQgYSwgaW50IGIpO1xufVxuXG5jbGFzcyBMYW1iZGEge1xuICAgIFN0cmluZyBoZWxsbygpIHtcbiAgICAgICAgQW5vbiBhbm9uID0gKCkgLT4gXCJIZWxsbywgV29ybGQhXCI7XG4gICAgICAgIHJldHVybiBhbm9uLmhlbGxvV29ybGQoKTtcbiAgICB9XG5cbiAgICBpbnQgc3VtT25lUGx1c1R3bygpIHtcbiAgICAgICAgQW5vbkludCBhbm9uID0gKGludCBhLCBpbnQgYikgLT4gYSArIGI7XG4gICAgICAgIHJldHVybiBhbm9uLnN1bSgxLCAyKTtcbiAgICB9XG59XG4iKSksbWR4KCJwIixudWxsLCJBcyBmb3IgdGhlIHRlc3QgZmlsZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9KSwiLy8gc3JjL3Rlc3RzL2phdmEvTGFtYmRhVGVzdC5qYXZhXG5pbXBvcnQgb3JnLmp1bml0Lklnbm9yZTtcbmltcG9ydCBvcmcuanVuaXQuVGVzdDtcblxuaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEVxdWFscztcblxucHVibGljIGNsYXNzIExhbWJkYVRlc3Qge1xuICAgIEBUZXN0XG4gICAgcHVibGljIHZvaWQgdGVzdExhbWJkYSgpIHtcbiAgICAgICAgYXNzZXJ0RXF1YWxzKFwiSGVsbG8sIFdvcmxkIVwiLCBuZXcgTGFtYmRhKCkuaGVsbG8oKSk7XG4gICAgfVxuXG4gICAgQFRlc3RcbiAgICBwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhU3VtKCkge1xuICAgICAgICBhc3NlcnRFcXVhbHMoMywgbmV3IExhbWJkYSgpLnN1bU9uZVBsdXNUd28oKSk7XG4gICAgfVxufVxuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvSmF2YS9KYXZhLUxhbWJkYS1GdW5jcy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,mBADA,CAAR,qBADK,CAIL,gDAAuC,kBAAY,UAAU,CAAC,GAAvB,cAAvC,gGAJK,CAKL,qFALK,CAML,SAAQ,CACN,KAAM,SADA,CAAR,WANK,CASL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,gYAAL,CATK,CAgCL,qCAhCK,CAiCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,2YAAL,CAjCK,CAAP,CAsDD,C,4QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java-lambda-funcs\"\n    }}>{`Java Lambda Funcs`}</h1>\n    <p>{`The basic gist is to generate a `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` with the lambda signature, then explicitly create a function preface by the interface type.`}</p>\n    <p>{`This will allow you to call the lambda function as a instance method.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Lambda.java\ninterface Anon {\n    String helloWorld();\n}\n\ninterface AnonInt {\n    int sum(int a, int b);\n}\n\nclass Lambda {\n    String hello() {\n        Anon anon = () -> \"Hello, World!\";\n        return anon.helloWorld();\n    }\n\n    int sumOnePlusTwo() {\n        AnonInt anon = (int a, int b) -> a + b;\n        return anon.sum(1, 2);\n    }\n}\n`}</code></pre>\n    <p>{`As for the test file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/tests/java/LambdaTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LambdaTest {\n    @Test\n    public void testLambda() {\n        assertEquals(\"Hello, World!\", new Lambda().hello());\n    }\n\n    @Test\n    public void testLambdaSum() {\n        assertEquals(3, new Lambda().sumOnePlusTwo());\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}