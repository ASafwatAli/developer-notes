{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Protocols.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Protocols.md","mtime":1579078174092},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-Protocols.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"swift-3-protocols\"\n    }}>{`Swift 3 Protocols`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-protocols\"\n        }}>{`Swift 3 Protocols`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#protocols\"\n            }}>{`Protocols`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-functions\"\n                }}>{`---- Protocol functions`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----initialiser-requirements\"\n                }}>{`---- Initialiser Requirements`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-delegation\"\n                }}>{`---- Protocol Delegation`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-conformance\"\n                }}>{`---- Protocol Conformance`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-inheritance\"\n                }}>{`---- Protocol Inheritance`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-composition\"\n                }}>{`---- Protocol Composition`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-conformance-1\"\n                }}>{`---- Protocol Conformance`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"protocols\"\n    }}>{`Protocols`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`protocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed {\n    var fullName: String\n}\nlet john = Person(fullName: \"John Appleseed\")\n// john.fullName is \"John Appleseed\"\n\nclass Starship: FullyNamed {\n    var prefix: String?\n    var name: String\n    init(name: String, prefix: String? = nil) {\n        self.name = name\n        self.prefix = prefix\n    }\n    var fullName: String {\n        return (prefix != nil ? prefix! + \" \" : \"\") + name\n    }\n}\nvar ncc1701 = Starship(name: \"Enterprise\", prefix: \"USS\")\n// ncc1701.fullName is \"USS Enterprise\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-functions\"\n    }}>{`Protocol functions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nprotocol Togglable {\n    mutating func toggle()\n}\n\nenum OnOffSwitch: Togglable {\n    case off, on\n    mutating func toggle() {\n        switch self {\n        case .off:\n            self = .on\n        case .on:\n            self = .off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n// lightSwitch is now equal to .on\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"initialiser-requirements\"\n    }}>{`Initialiser Requirements`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol SomeProtocol {\n    init(someParameter: Int)\n}\n\nclass SomeClass: SomeProtocol {\n    required init(someParameter: Int) {\n        // initializer implementation goes here\n    }\n}\n`}</code></pre>\n    <p>{`There are also required overrides.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol SomeProtocol {\n    init()\n}\n\nclass SomeSuperClass {\n    init() {\n        // initializer implementation goes here\n    }\n}\n\nclass SomeSubClass: SomeSuperClass, SomeProtocol {\n    // \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass\n    required override init() {\n        // initializer implementation goes here\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-delegation\"\n    }}>{`Protocol Delegation`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol DiceGame {\n    var dice: Dice { get }\n    func play()\n}\n\nprotocol DiceGameDelegate {\n    func gameDidStart(_ game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(_ game: DiceGame)\n}\n\nclass SnakesAndLadders: DiceGame {\n    let finalSquare = 25\n    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())\n    var square = 0\n    var board: [Int]\n    init() {\n        board = Array(repeating: 0, count: finalSquare + 1)\n        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02\n        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08\n    }\n    var delegate: DiceGameDelegate?\n    func play() {\n        square = 0\n        delegate?.gameDidStart(self)\n        gameLoop: while square != finalSquare {\n            let diceRoll = dice.roll()\n            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\n            switch square + diceRoll {\n            case finalSquare:\n                break gameLoop\n            case let newSquare where newSquare > finalSquare:\n                continue gameLoop\n            default:\n                square += diceRoll\n                square += board[square]\n            }\n        }\n        delegate?.gameDidEnd(self)\n    }\n}\n\nclass DiceGameTracker: DiceGameDelegate {\n    var numberOfTurns = 0\n    func gameDidStart(_ game: DiceGame) {\n        numberOfTurns = 0\n        if game is SnakesAndLadders {\n            print(\"Started a new game of Snakes and Ladders\")\n        }\n        print(\"The game is using a \\\\(game.dice.sides)-sided dice\")\n    }\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {\n        numberOfTurns += 1\n        print(\"Rolled a \\\\(diceRoll)\")\n    }\n    func gameDidEnd(_ game: DiceGame) {\n        print(\"The game lasted for \\\\(numberOfTurns) turns\")\n    }\n}\n\nlet tracker = DiceGameTracker()\nlet game = SnakesAndLadders()\ngame.delegate = tracker\ngame.play()\n// Started a new game of Snakes and Ladders\n// The game is using a 6-sided dice\n// Rolled a 3\n// Rolled a 5\n// Rolled a 4\n// Rolled a 5\n// The game lasted for 4 turns\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-conformance\"\n    }}>{`Protocol Conformance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol TextRepresentable {\n    var textualDescription: String { get }\n}\n\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\\\(sides)-sided dice\"\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Declaring Protocol Adoption with an Extension`}</strong></p>\n    <p>{`If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\\\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n\n// Instances of Hamster can now be used wherever TextRepresentable is the required type:\n\nlet simonTheHamster = Hamster(name: \"Simon\")\nlet somethingTextRepresentable: TextRepresentable = simonTheHamster\nprint(somethingTextRepresentable.textualDescription)\n// Prints \"A hamster named Simon\"\n`}</code></pre>\n    <p>{`You can also create Collections of Protocol Types:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let things: [TextRepresentable] = [game, d12, simonTheHamster]\n\nfor thing in things {\n    print(thing.textualDescription)\n}\n// A game of Snakes and Ladders with 25 squares\n// A 12-sided dice\n// A hamster named Simon\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-inheritance\"\n    }}>{`Protocol Inheritance`}</h2>\n    <p>{`A protocol can inherit one or more other protocols and can add further requirements on top of the requirements it inherits. The syntax for protocol inheritance is similar to the syntax for class inheritance, but with the option to list multiple inherited protocols, separated by commas:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // protocol definition goes here\n}\n\nprotocol PrettyTextRepresentable: TextRepresentable {\n    var prettyTextualDescription: String { get }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-composition\"\n    }}>{`Protocol Composition`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol Named {\n    var name: String { get }\n}\nprotocol Aged {\n    var age: Int { get }\n}\nstruct Person: Named, Aged {\n    var name: String\n    var age: Int\n}\nfunc wishHappyBirthday(to celebrator: Named & Aged) {\n    print(\"Happy birthday, \\\\(celebrator.name), you're \\\\(celebrator.age)!\")\n}\nlet birthdayPerson = Person(name: \"Malcolm\", age: 21)\nwishHappyBirthday(to: birthdayPerson)\n// Prints \"Happy birthday, Malcolm, you're 21!\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-conformance-1\"\n    }}>{`Protocol Conformance`}</h2>\n    <p>{`How to check if a class conforms?`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol HasArea {\n    var area: Double { get }\n}\n\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\n\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    if let objectWithArea = object as? HasArea {\n        print(\"Area is \\\\(objectWithArea.area)\")\n    } else {\n        print(\"Something that doesn't have an area\")\n    }\n}\n// Area is 12.5663708\n// Area is 243610.0\n// Something that doesn't have an area\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}