{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Basics.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Basics.md","mtime":1570486140841},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Basics.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-basics\"\n    }}>{`Kotlin Basics`}</h1>\n    <p>{`This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc.`}</p>\n    <h2 {...{\n      \"id\": \"kotlin-repl\"\n    }}>{`Kotlin REPL`}</h2>\n    <p>{`Brew install `}<inlineCode parentName=\"p\">{`kotlin`}</inlineCode>{` and then you'll have access to the REPL.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`kotlinc`}</inlineCode>{` with no arguments to enter the REPL.`}</p>\n    <p>{`To compile and run code from the command line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hello-kotlin\"\n    }}>{`Hello, Kotlin`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun main(args: Array<String>) {\n  println(\"Hello, Kotlin!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift-operators\"\n    }}>{`Shift Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`1 shl 3 // shift left\n32 shr 2 // shift right\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"math-functions\"\n    }}>{`Math Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-conversion\"\n    }}>{`Type Conversion`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer\n`}</code></pre>\n    <p>{`To do implicit conversion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chars-vs-strings\"\n    }}>{`Chars Vs Strings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes\n`}</code></pre>\n    <p>{`String interpolation happens with `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var name = \"Dick\"\nvar message = \"Hello my name is $name!\" // \"Hello my name is Dick!\"\n`}</code></pre>\n    <p>{`Multiline strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`let bigString = \"\"\"\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  \"\"\".trimMargin()\nprintln(bigString)\n`}</code></pre>\n    <p>{`The above will print:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`You can have a string\nthat contains multiple\nlines\nby\ndoing this.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pair--triples\"\n    }}>{`Pair + Triples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number-types\"\n    }}>{`Number types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"any-unit-and-nothing\"\n    }}>{`Any, Unit, and Nothing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val anyNum: Any = 1\nval anyString: Any = \"Yo\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes.`}</p>\n    <p>{`This can occur if a function either causes the program to stop completely by throwing an `}<inlineCode parentName=\"p\">{`Exception`}</inlineCode>{` or if it simply goes on forever without ever finishing.`}</p>\n    <h2 {...{\n      \"id\": \"control-logic\"\n    }}>{`Control Logic`}</h2>\n    <p>{`Worth noting if/else can be single line ie `}<inlineCode parentName=\"p\">{`val min = if (a < b) a else b`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"range\"\n    }}>{`Range`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"repeat\"\n    }}>{`Repeat`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stepping\"\n    }}>{`Stepping`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}\n`}</code></pre>\n    <p>{`You could even `}<inlineCode parentName=\"p\">{`downTo`}</inlineCode>{` step:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"labelled-statements\"\n    }}>{`Labelled Statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"when-expressions\"\n    }}>{`When Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number = 10\nwhen (number) {\n  0 -> println(\"Zero\")\n  else -> println(\"Non-zero\")\n}\n\n// multi-valued whens\nval string = \"Dog\"\nwhen (string) {\n  \"Cat\", \"Dog\" -> println(\"Animal is a house pet.\")\n  else -> println(\"Animal is not a house pet.\")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> \"Early morning\"\n  in 6..11 -> \"Morning\"\n  in 12..16 -> \"Afternoon\"\n  in 17..19 -> \"Evening\"\n  in 20..23 -> \"Late evening\"\n  else -> \"INVALID HOUR!\"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println(\"Origin\")\n  y == 0 && z == 0 -> println(\"On the x-axis at x = $x\")\n  x == 0 && z == 0 -> println(\"On the y-axis at y = $y\")\n  x == 0 && y == 0 -> println(\"On the z-axis at z = $z\")\n  else -> println(\"Somewhere in space at x = $x, y = $y, z = $z\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`Note that parameters are constants by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun printMyName() {\n  println(\"My name is Dick Lucas.\")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println(\"$value * 5 = \\${value * 5}\")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println(\"$multiplier * $andValue = \\${multiplier * andValue}\")\n}\nprintMultipleOf(4, 2)\n`}</code></pre>\n    <p>{`If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overloading\"\n    }}>{`Overloading`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return \"The value is $value\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-as-variables\"\n    }}>{`Functions As Variables`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}