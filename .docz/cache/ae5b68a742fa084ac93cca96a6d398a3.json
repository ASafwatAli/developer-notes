{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md","mtime":1578818658563},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJnb2xhbmctZ2luLXN0cmlwZS1jb25maWd1cmF0aW9uIn0sIkdvbGFuZyBHaW4gU3RyaXBlIENvbmZpZ3VyYXRpb24iKSxtZHgoInAiLG51bGwsIlRoaXMgaXMgYSBzbWFsbCBcIkhlbGxvLCBXb3JsZCFcIiB0byBzaG93IGEgY2hhcmdlIGJlaW5nIG1hZGUgZm9yIEdvbGFuZyArIEdpbiB3ZWIgc2VydmVyLiIpLG1keCgiaDIiLHsiaWQiOiJyZXNvdXJjZXMifSwiUmVzb3VyY2VzIiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9nb2RvYy5vcmcvZ2l0aHViLmNvbS9zdHJpcGUvc3RyaXBlLWdvI0NhcmRQYXJhbXMifSksIkdvIERvY3MgU3RyaXBlIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL2dvZG9jLm9yZy9naXRodWIuY29tL3N0cmlwZS9zdHJpcGUtZ28jQ2FyZFBhcmFtcyJ9KSwiU3RyaXBlIEFQSSIpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvdGVzdGluZyNjYXJkcyJ9KSwiU3RyaXBlIFRlc3RpbmcgQ2FyZHMiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9zdHJpcGUvc3RyaXBlLWdvL2Jsb2IvbWFzdGVyL2NoYXJnZS9jbGllbnRfdGVzdC5nbyJ9KSwiR2l0aHViIFN0cmlwZSBHbyBDaGFyZ2UgVGVzdGluZyIpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL2dpbi1nb25pYy9naW4ifSksIkdpbiBHaXRodWIiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJhIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9qb2hvL2dvZG90ZW52In0pLCJHb2xhbmcgRG90ZW52IEdpdGh1YiIpKSksbWR4KCJoMiIseyJpZCI6InNldHRpbmctdXAifSwiU2V0dGluZyB1cCIpLG1keCgicCIsbnVsbCwiV2UgbmVlZCBhIGZldyBsaWJzIHRvIGdldCB0aGlzIGFsbCBnb2luZy4gUnVuIHRoZSBmb2xsb3dpbmcgdG8gZmV0Y2ggcHJlcmVxdWlzaXRlIHBhY2thZ2VzOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1zaGVsbCJ9KSwiIyBHaW4gc2VydmVyIGxpYlxuZ28gZ2V0IC11IGdpdGh1Yi5jb20vZ2luLWdvbmljL2dpblxuIyBTdHJpcGUgR28gQVBJXG5nbyBnZXQgZ2l0aHViLmNvbS9zdHJpcGUvc3RyaXBlLWdvXG4jIERvdGVudiBwYWNrYWdlIGZvciBHb2xhbmdcbmdvIGdldCBnaXRodWIuY29tL2pvaG8vZ29kb3RlbnZcbiIpKSxtZHgoImgyIix7ImlkIjoic2V0dGluZy11cC1tYWluZ28ifSwiU2V0dGluZyB1cCBtYWluLmdvIiksbWR4KCJwIixudWxsLCJUaGUgR29sYW5nIEFQSSAoaW4gbXkgb3BpbmlvbikgaGFzIHNvbWUgbW9yZSBjb21wbGV4aXR5IGFzIG9wcG9zZWQgdG8gb3RoZXJzIGZvciBzZXR0aW5nIHVwIGEgYmFzaWMgY2hhcmdlLiIpLG1keCgicCIsbnVsbCwiUmVhZGluZyBvdmVyIHRoZWlyIHRlc3RzIChsaWtlIHJlc291cmNlICIsIls0XSIsIikgaXMgdGhlIHBlcmZlY3Qgd2F5IHRvIHNlZSBob3cgdG8gY29uZm9ybSBhbmQgYWRoZXJlIHRvIHRoZSB0eXBlcyAtLSBwYXJ0aWN1bGFybHkgZm9yIG91ciBiYXNpYyBleGFtcGxlLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwicGFja2FnZSBtYWluXG5cbmltcG9ydCAoXG4gICAgICAgIFwibG9nXCJcbiAgICAgICAgXCJuZXQvaHR0cFwiXG4gICAgICAgIFwib3NcIlxuXG4gICAgICAgIFwiZ2l0aHViLmNvbS9naW4tZ29uaWMvZ2luXCJcbiAgICAgICAgXCJnaXRodWIuY29tL2pvaG8vZ29kb3RlbnZcIlxuICAgICAgICBcImdpdGh1Yi5jb20vc3RyaXBlL3N0cmlwZS1nb1wiXG4gICAgICAgIFwiZ2l0aHViLmNvbS9zdHJpcGUvc3RyaXBlLWdvL2NoYXJnZVwiXG4pXG5cbi8vIENoYXJnZUpTT04gaW5jb21pbmcgZGF0YSBmb3IgU3RyaXBlIEFQSVxudHlwZSBDaGFyZ2VKU09OIHN0cnVjdCB7XG4gICAgICAgIEFtb3VudCAgICAgICBpbnQ2NCAgYGpzb246XCJhbW91bnRcImBcbiAgICAgICAgUmVjZWlwdEVtYWlsIHN0cmluZyBganNvbjpcInJlY2VpcHRFbWFpbFwiYFxufVxuXG5mdW5jIG1haW4oKSB7XG4gIC8vIGxvYWQgLmVudiBmaWxlXG4gIGVyciA6PSBnb2RvdGVudi5Mb2FkKClcbiAgaWYgZXJyICE9IG5pbCB7XG4gICAgbG9nLkZhdGFsKFwiRXJyb3IgbG9hZGluZyAuZW52IGZpbGVcIilcbiAgfVxuXG4gIC8vIHNldCB1cCBzZXJ2ZXJcbiAgciA6PSBnaW4uRGVmYXVsdCgpXG5cbiAgLy8gYmFzaWMgaGVsbG8gd29ybGQgR0VUIHJvdXRlXG4gIHIuR0VUKFwiL1wiLCBmdW5jKGMgKmdpbi5Db250ZXh0KSB7XG4gICAgYy5KU09OKDIwMCwgZ2luLkh7XG4gICAgICAgICAgICBcIm1lc3NhZ2VcIjogXCJIZWxsbywgV29ybGQhXCIsXG4gICAgfSlcbiAgfSlcblxuICAvLyBvdXIgYmFzaWMgY2hhcmdlIEFQSSByb3V0ZVxuICByLlBPU1QoXCIvYXBpL2NoYXJnZVwiLCBmdW5jKGMgKmdpbi5Db250ZXh0KSB7XG4gICAgLy8gd2Ugd2lsbCBiaW5kIG91ciBKU09OIGJvZHkgdG8gdGhlIGBqc29uYCB2YXJcbiAgICB2YXIganNvbiBDaGFyZ2VKU09OXG4gICAgYy5CaW5kSlNPTigmanNvbilcblxuICAgIC8vIFNldCBTdHJpcGUgQVBJIGtleVxuICAgIGFwaUtleSA6PSBvcy5HZXRlbnYoXCJTS19URVNUX0tFWVwiKVxuICAgIHN0cmlwZS5LZXkgPSBhcGlLZXlcblxuICAgIC8vIEF0dGVtcHQgdG8gbWFrZSB0aGUgY2hhcmdlLlxuICAgIC8vIFdlIGFyZSBzZXR0aW5nIHRoZSBjaGFyZ2UgcmVzcG9uc2UgdG8gX1xuICAgIC8vIGFzIHdlIGFyZSBub3QgdXNpbmcgaXQuXG4gICAgXywgZXJyIDo9IGNoYXJnZS5OZXcoJnN0cmlwZS5DaGFyZ2VQYXJhbXN7XG4gICAgICBBbW91bnQ6ICAgICAgIHN0cmlwZS5JbnQ2NChqc29uLkFtb3VudCksXG4gICAgICBDdXJyZW5jeTogICAgIHN0cmlwZS5TdHJpbmcoc3RyaW5nKHN0cmlwZS5DdXJyZW5jeVVTRCkpLFxuICAgICAgU291cmNlOiAgICAgICAmc3RyaXBlLlNvdXJjZVBhcmFtc3tUb2tlbjogc3RyaXBlLlN0cmluZyhcInRva192aXNhXCIpfSwgLy8gdGhpcyBzaG91bGQgY29tZSBmcm9tIGNsaWVudHNpZGVcbiAgICAgIFJlY2VpcHRFbWFpbDogc3RyaXBlLlN0cmluZyhqc29uLlJlY2VpcHRFbWFpbCl9KVxuXG4gICAgaWYgZXJyICE9IG5pbCB7XG4gICAgICAvLyBIYW5kbGUgYW55IGVycm9ycyBmcm9tIGF0dGVtcHQgdG8gY2hhcmdlXG4gICAgICBjLlN0cmluZyhodHRwLlN0YXR1c0JhZFJlcXVlc3QsIFwiUmVxdWVzdCBmYWlsZWRcIilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGMuU3RyaW5nKGh0dHAuU3RhdHVzQ3JlYXRlZCwgXCJTdWNjZXNzZnVsbHkgY2hhcmdlZFwiKVxuICB9KVxuXG4gIHIuUnVuKFwiOjgwODBcIilcbn1cbiIpKSxtZHgoImgyIix7ImlkIjoibWFraW5nLWEtdGVzdC1jaGFyZ2UifSwiTWFraW5nIEEgVGVzdCBDaGFyZ2UiKSxtZHgoInAiLG51bGwsIldlIGNhbiBydW4gb3VyIHNlcnZlciB3aXRoIHRoZSBmb2xsb3dpbmc6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCJnbyBydW4gbWFpbi5nb1xuIikpLG1keCgicCIsbnVsbCwiSW4gYW5vdGhlciB0ZXJtaW5hbCwgcnVuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJodHRwIFBPU1QgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9jaGFyZ2UgYW1vdW50Oj01MDAgcmVjZWlwdEVtYWlsPWhlbGxvQGV4YW1wbGUuY29tIiksIiAodXNpbmcgSFRUUGllKSBhbmQgd2Ugd2lsbCBnZXQgYmFjayAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiU3VjY2Vzc2Z1bGx5IGNoYXJnZWQiKSwiISBIb29yYXkhIFdlIG1hZGUgaXQuIikpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9TdHJpcGUvR2luLVN0cmlwZS1Db25maWd1cmF0aW9uLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,iCADA,CAAR,mCADK,CAIL,0GAJK,CAKL,SAAQ,CACN,KAAM,WADA,CAAR,aALK,CAQL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,0DAD+B,CAAvB,mBAApB,CADF,CAIE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,0DAD+B,CAAvB,eAApB,CAJF,CAOE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,uCAD+B,CAAvB,yBAApB,CAPF,CAUE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,uEAD+B,CAAvB,oCAApB,CAVF,CAaE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,kCAD+B,CAAvB,eAApB,CAbF,CAgBE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,kCAD+B,CAAvB,yBAApB,CAhBF,CARK,CA4BL,SAAQ,CACN,KAAM,YADA,CAAR,cA5BK,CA+BL,2GA/BK,CAgCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,8KAAL,CAhCK,CAyCL,SAAQ,CACN,KAAM,mBADA,CAAR,sBAzCK,CA4CL,2HA5CK,CA6CL,0KA7CK,CA8CL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,+sDAAL,CA9CK,CAmHL,SAAQ,CACN,KAAM,sBADA,CAAR,wBAnHK,CAsHL,yDAtHK,CAuHL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,qBAAL,CAvHK,CA2HL,yCAAgC,kBAAY,UAAU,CAAC,GAAvB,0FAAhC,yCAA0M,kBAAY,UAAU,CAAC,GAAvB,yBAA1M,yBA3HK,CAAP,CA6HD,C,qRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"golang-gin-stripe-configuration\"\n    }}>{`Golang Gin Stripe Configuration`}</h1>\n    <p>{`This is a small \"Hello, World!\" to show a charge being made for Golang + Gin web server.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Go Docs Stripe`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/testing#cards\"\n        }}>{`Stripe Testing Cards`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-go/blob/master/charge/client_test.go\"\n        }}>{`Github Stripe Go Charge Testing`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gin-gonic/gin\"\n        }}>{`Gin Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/joho/godotenv\"\n        }}>{`Golang Dotenv Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`We need a few libs to get this all going. Run the following to fetch prerequisite packages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# Gin server lib\ngo get -u github.com/gin-gonic/gin\n# Stripe Go API\ngo get github.com/stripe/stripe-go\n# Dotenv package for Golang\ngo get github.com/joho/godotenv\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-maingo\"\n    }}>{`Setting up main.go`}</h2>\n    <p>{`The Golang API (in my opinion) has some more complexity as opposed to others for setting up a basic charge.`}</p>\n    <p>{`Reading over their tests (like resource `}{`[4]`}{`) is the perfect way to see how to conform and adhere to the types -- particularly for our basic example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/gin-gonic/gin\"\n        \"github.com/joho/godotenv\"\n        \"github.com/stripe/stripe-go\"\n        \"github.com/stripe/stripe-go/charge\"\n)\n\n// ChargeJSON incoming data for Stripe API\ntype ChargeJSON struct {\n        Amount       int64  \\`json:\"amount\"\\`\n        ReceiptEmail string \\`json:\"receiptEmail\"\\`\n}\n\nfunc main() {\n  // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\n  // basic hello world GET route\n  r.GET(\"/\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n            \"message\": \"Hello, World!\",\n    })\n  })\n\n  // our basic charge API route\n  r.POST(\"/api/charge\", func(c *gin.Context) {\n    // we will bind our JSON body to the \\`json\\` var\n    var json ChargeJSON\n    c.BindJSON(&json)\n\n    // Set Stripe API key\n    apiKey := os.Getenv(\"SK_TEST_KEY\")\n    stripe.Key = apiKey\n\n    // Attempt to make the charge.\n    // We are setting the charge response to _\n    // as we are not using it.\n    _, err := charge.New(&stripe.ChargeParams{\n      Amount:       stripe.Int64(json.Amount),\n      Currency:     stripe.String(string(stripe.CurrencyUSD)),\n      Source:       &stripe.SourceParams{Token: stripe.String(\"tok_visa\")}, // this should come from clientside\n      ReceiptEmail: stripe.String(json.ReceiptEmail)})\n\n    if err != nil {\n      // Handle any errors from attempt to charge\n      c.String(http.StatusBadRequest, \"Request failed\")\n      return\n    }\n\n    c.String(http.StatusCreated, \"Successfully charged\")\n  })\n\n  r.Run(\":8080\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-test-charge\"\n    }}>{`Making A Test Charge`}</h2>\n    <p>{`We can run our server with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run main.go\n`}</code></pre>\n    <p>{`In another terminal, run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) and we will get back `}<inlineCode parentName=\"p\">{`Successfully charged`}</inlineCode>{`! Hooray! We made it.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}