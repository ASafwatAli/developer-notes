{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md","mtime":1562563032086},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJydWJ5LWFycmF5cyJ9LCJSdWJ5IEFycmF5cyIpLG1keCgiaDIiLHsiaWQiOiJtYXAifSwiTWFwIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksIiMgbWFwLnJiXG5jbGFzcyBNYXBcbiAgICBkZWYgc2VsZi51cGRhdGVzVmFyKGFycilcbiAgICAgICAgYXJyLm1hcCEge3x4fCB4ICsgXCIhXCJ9XG4gICAgICAgIHJldHVybiBhcnJcbiAgICBlbmRcblxuICAgIGRlZiBzZWxmLmRvZXNOb3RVcGRhdGVWYXIoYXJyKVxuICAgICAgICBiID0gYXJyLm1hcCB7fHh8IHggKyBcIiFcIn1cbiAgICAgICAgcmV0dXJuIGFyclxuICAgIGVuZFxuXG4gICAgZGVmIHNlbGYucmV0dXJuc05ld0FycihhcnIpXG4gICAgICAgIGIgPSBhcnIubWFwIHt8eHwgeCArIFwiIVwifVxuICAgICAgICByZXR1cm4gYlxuICAgIGVuZFxuZW5kXG5cbiMgbWFwX3Rlc3QucmJcbmJlZ2luXG4gIGdlbSAnbWluaXRlc3QnLCAnPj0gNS4wLjAnXG4gIHJlcXVpcmUgJ21pbml0ZXN0L2F1dG9ydW4nXG4gIHJlcXVpcmVfcmVsYXRpdmUgJ2FycmF5cydcbnJlc2N1ZSBHZW06OkxvYWRFcnJvciA9PiBlXG4gIHB1dHMgXCJcXG5NaXNzaW5nIERlcGVuZGVuY3k6XFxuI3tlLmJhY2t0cmFjZS5maXJzdH0gI3tlLm1lc3NhZ2V9XCJcbiAgcHV0cyAnTWluaXRlc3QgNS4wIGdlbSBtdXN0IGJlIGluc3RhbGxlZCBmb3IgdGhlIFJ1YnkgdHJhY2suJ1xucmVzY3VlIExvYWRFcnJvciA9PiBlXG4gIHB1dHMgXCJcXG5FcnJvcjpcXG4je2UuYmFja3RyYWNlLmZpcnN0fSAje2UubWVzc2FnZX1cIlxuICBwdXRzIERBVEEucmVhZFxuICBleGl0IDFcbmVuZFxuXG4jIENvbW1vbiB0ZXN0IGRhdGEgdmVyc2lvbjogMS4xLjAgYmUzYWU2NlxuY2xhc3MgTWFwVGVzdCA8IE1pbml0ZXN0OjpUZXN0XG4gIGRlZiB0ZXN0X21hcF91cGRhdGVzX3ZhclxuICAgICMgc2tpcFxuICAgIGFyciA9IFtcImFcIixcImJcIixcImNcIixcImRcIl1cbiAgICBleHBlY3RlZCA9IFtcImEhXCIsXCJiIVwiLFwiYyFcIixcImQhXCJdXG4gICAgYXNzZXJ0X2VxdWFsIGV4cGVjdGVkLCBNYXAudXBkYXRlc1ZhcihhcnIpXG4gIGVuZFxuXG4gIGRlZiB0ZXN0X21hcF9kb2VzX25vdF91cGRhdGVfdmFyXG4gICAgIyBza2lwXG4gICAgYXJyID0gW1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXVxuICAgIGV4cGVjdGVkID0gW1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXVxuICAgIGFzc2VydF9lcXVhbCBleHBlY3RlZCwgTWFwLmRvZXNOb3RVcGRhdGVWYXIoYXJyKVxuICBlbmRcblxuICBkZWYgdGVzdF9tYXBfcmV0dXJuc19uZXdfYXJyXG4gICAgIyBza2lwXG4gICAgYXJyID0gW1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXVxuICAgIGV4cGVjdGVkID0gW1wiYSFcIixcImIhXCIsXCJjIVwiLFwiZCFcIl1cbiAgICBhc3NlcnRfZXF1YWwgZXhwZWN0ZWQsIE1hcC5yZXR1cm5zTmV3QXJyKGFycilcbiAgZW5kXG5lbmRcblxuX19FTkRfX1xuIikpLG1keCgiaDIiLHsiaWQiOiJvdGhlci1pbXBvcnRhbnQtZnVuY3Rpb25zIn0sIk90aGVyIGltcG9ydGFudCBmdW5jdGlvbnMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVieSJ9KSwiYSA9IFtcImFcIixcImJcIixcImNcIl1cbiMgPT4gW1wiYVwiLCBcImJcIiwgXCJjXCJdXG5hLm1hcCEge3x4fCB4ICsgXCIhXCJ9XG4jID0+IFtcImEhXCIsIFwiYiFcIiwgXCJjIVwiXVxubnVtID0gWzEsIDIsIDMsIDRdXG5udW0ubWFwISAmLT4gKHgpIHsgeCArIDIgfSAjIG1hcHBpbmcgYXMgbGFtYmRhXG4jID0+IFszLCA0LCA1LCA2XVxuYSA9IGEuam9pbignLCAnKVxuIyA9PiBcImEhLCBiISwgYyFcIlxuYSA9IGEuc3BsaXQoJywgJylcbiMgPT4gW1wiYSFcIiwgXCJiIVwiLCBcImMhXCJdXG5hID0gYS5yZXZlcnNlKClcbiMgPT4gW1wiYyFcIiwgXCJiIVwiLCBcImEhXCJdXG5iID0gYS5maXJzdCgpICMgYVswXVxuIyA9PiBbXCJhIVwiXVxuYSArPSBiXG4jID0+IFtcImEhXCIsIFwiYiFcIiwgXCJjIVwiLCBcImEhXCJdXG5maXJzdCwgKnJlc3QgPSBhXG4jIGZpcnN0ID0gW1wiYSFcIl0sIHJlc3QgPSBbXCJiIVwiLCBcImMhXCIsIFwiYSFcIl1cbmEudGFrZSgxKVxuIyA9PiBbXCJhIVwiXVxuYS5kcm9wKDEpXG4jID0+IFtcImIhXCIsIFwiYyFcIiwgXCJhIVwiXVxuYS5zZWxlY3R7fHh8IHggIT0gXCJhIVwifVxuIyA9PiBbXCJiIVwiLCBcImMhXCJdXG5hLnNlbGVjdHt8eHwgIXguaW5jbHVkZT8gXCJhXCJ9XG4jID0+IFtcImIhXCIsIFwiYyFcIl1cbm51bSA9IFsxLCAyLCAzLCA0XVxubnVtLm1hcCEgJi0+ICh4KSB7IHggPiAzIH1cbiMgPT4gWzRdXG5jID0gbnVtLnJlZHVjZSgwKSB7fHgseXwgeCArIHl9XG4jID0+IDEwXG5udW0gPSBbNCwgMywgMiwgMV1cbm51bS5zb3J0IVxuIyA9PiBbMSwgMiwgMywgNF1cbm51bS5zaXplKClcbiMgPT4gNFxubnVtLnB1c2goNSlcbiMgPT4gWzEsIDIsIDMsIDQsIDVdXG5udW0ucG9wKClcbiMgPT4gNVxubnVtLnVuc2hpZnQoNSlcbiMgPT4gWzUsIDEsIDIsIDMsIDRdXG5udW0uc2hpZnQoKVxuIyA9PiA1XG5udW0ubWluKClcbiMgPT4gMVxubnVtLm1heCgpXG4jID0+IDRcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL1J1YnkvUnVieS1BcnJheXMubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-Arrays.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,aADA,CAAR,eADK,CAIL,SAAQ,CACN,KAAM,KADA,CAAR,OAJK,CAOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,s1CAAL,CAPK,CAmEL,SAAQ,CACN,KAAM,2BADA,CAAR,6BAnEK,CAsEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,29BAAL,CAtEK,CAAP,CA2HD,C,sQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-arrays\"\n    }}>{`Ruby Arrays`}</h1>\n    <h2 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# map.rb\nclass Map\n    def self.updatesVar(arr)\n        arr.map! {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.doesNotUpdateVar(arr)\n        b = arr.map {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.returnsNewArr(arr)\n        b = arr.map {|x| x + \"!\"}\n        return b\n    end\nend\n\n# map_test.rb\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'arrays'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass MapTest < Minitest::Test\n  def test_map_updates_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.updatesVar(arr)\n  end\n\n  def test_map_does_not_update_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a\",\"b\",\"c\",\"d\"]\n    assert_equal expected, Map.doesNotUpdateVar(arr)\n  end\n\n  def test_map_returns_new_arr\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.returnsNewArr(arr)\n  end\nend\n\n__END__\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-important-functions\"\n    }}>{`Other important functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`a = [\"a\",\"b\",\"c\"]\n# => [\"a\", \"b\", \"c\"]\na.map! {|x| x + \"!\"}\n# => [\"a!\", \"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x + 2 } # mapping as lambda\n# => [3, 4, 5, 6]\na = a.join(', ')\n# => \"a!, b!, c!\"\na = a.split(', ')\n# => [\"a!\", \"b!\", \"c!\"]\na = a.reverse()\n# => [\"c!\", \"b!\", \"a!\"]\nb = a.first() # a[0]\n# => [\"a!\"]\na += b\n# => [\"a!\", \"b!\", \"c!\", \"a!\"]\nfirst, *rest = a\n# first = [\"a!\"], rest = [\"b!\", \"c!\", \"a!\"]\na.take(1)\n# => [\"a!\"]\na.drop(1)\n# => [\"b!\", \"c!\", \"a!\"]\na.select{|x| x != \"a!\"}\n# => [\"b!\", \"c!\"]\na.select{|x| !x.include? \"a\"}\n# => [\"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x > 3 }\n# => [4]\nc = num.reduce(0) {|x,y| x + y}\n# => 10\nnum = [4, 3, 2, 1]\nnum.sort!\n# => [1, 2, 3, 4]\nnum.size()\n# => 4\nnum.push(5)\n# => [1, 2, 3, 4, 5]\nnum.pop()\n# => 5\nnum.unshift(5)\n# => [5, 1, 2, 3, 4]\nnum.shift()\n# => 5\nnum.min()\n# => 1\nnum.max()\n# => 4\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}