{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Lang-Overview.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Lang-Overview.md","mtime":1562563032038},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Lang-Overview.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"go-language-overview\"\n    }}>{`Go Language Overview`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#go-language-overview\"\n        }}>{`Go Language Overview`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#types\"\n            }}>{`Types`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#packages---public-and-private-variables\"\n            }}>{`Packages - public and private variables`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#variables\"\n            }}>{`Variables`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#variable-declarations-and-assigning\"\n                }}>{`Variable declarations and assigning`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#functions\"\n            }}>{`Functions`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#multiple-return-values\"\n                }}>{`Multiple return values`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#the-go-formatting-tool\"\n                }}>{`The Go Formatting Tool`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#control-structures\"\n            }}>{`Control Structures`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#for-loops\"\n                }}>{`For loops`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#if-statements\"\n                }}>{`If statements`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#switch-statement\"\n                }}>{`Switch statement`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#data-structures\"\n            }}>{`Data Structures`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#pointers\"\n                }}>{`Pointers`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#arrays\"\n                }}>{`Arrays`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#slices\"\n                }}>{`Slices`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#maps\"\n                }}>{`Maps`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#custom-types\"\n            }}>{`Custom Types`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#methods\"\n                }}>{`Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#structs\"\n                }}>{`Structs`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#interfaces\"\n                }}>{`Interfaces`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#challenge\"\n                    }}>{`Challenge`}</a></li>\n                </ul></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#concurrency\"\n            }}>{`Concurrency`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#channels\"\n                }}>{`Channels`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#challenge-1\"\n                    }}>{`Challenge`}</a></li>\n                </ul></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#summary\"\n            }}>{`Summary`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`int, int8 etc`}</li>\n      <li parentName=\"ul\">{`bool`}</li>\n      <li parentName=\"ul\">{`string`}</li>\n      <li parentName=\"ul\">{`float32, float64 (64 by default)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"packages---public-and-private-variables\"\n    }}>{`Packages - public and private variables`}</h2>\n    <p>{`When it comes to declaring variables, to have them available to other files when the package is imported, declare the variable with a capital letter.`}</p>\n    <p>{`Lowercase variables are private.`}</p>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// outside of func\nvar greeting = \"hello\"\n\nfunc main() {\n    // inside of func\n    greeting := \"Hello from Go\"\n    fmt.Println(test)\n    fmt.Println(greeting)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"variable-declarations-and-assigning\"\n    }}>{`Variable declarations and assigning`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    var a int\n    a = 2\n    var b, c int\n    b = 2\n    c = 3\n    d := 5  // same as var d = 5\n    var e = 10 // type is inferred\n\n    // you'll need to use all the above variables\n    // otherwise there will be a declaration err\n    // thrown\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Variable names must start with a letter`}</li>\n      <li parentName=\"ul\">{`Uppercase variables and funcs can be used outside of the package`}</li>\n      <li parentName=\"ul\">{`Lowercase cannot`}</li>\n      <li parentName=\"ul\">{`Declaring type can come after the variable name eg `}<inlineCode parentName=\"li\">{`var floating float64 = 1.4`}</inlineCode></li>\n      <li parentName=\"ul\">{`Casting `}<inlineCode parentName=\"li\">{`float64(variable)`}</inlineCode></li>\n      <li parentName=\"ul\">{`Errors are thrown for mismatched types`}</li>\n      <li parentName=\"ul\">{`For scope, you are able to declare blocks by themselves - Each package is a implicit block`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// not available outside the package\nfunc main() {\n    myFunction()\n}\n\nfunc myFunction() {\n    fmt.Println(\"Running myFunction\")\n}\n\nfunc MyPublicFunction() {\n    fmt.Println(\"Running MyPublicFunction\")\n}\n`}</code></pre>\n    <p>{`You can enforce type safety for parameters by adding the type expected to the function `}<inlineCode parentName=\"p\">{`func myFunc(test string, number int) {}`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`Go doesn't allow default parameter values`}</li>\n      <li parentName=\"ul\">{`No named values`}</li>\n      <li parentName=\"ul\">{`No method overloading`}</li>\n    </ul>\n    <p>{`For returning a certain value, you can enfore this by the following`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func myFunc(test string, number int) int {}\nfunc myFuncTwo(numberOne int, number int) (sum int) {\n    return number + numberOne;\n}\nfunc myFuncThree(number int) (difference int) {\n    difference = number + 4;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiple-return-values\"\n    }}>{`Multiple return values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\",\n    \"math\",\n    \"log\"\n)\n\nfunc main() {\n    squareRoot, err := squareRoot(-1)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(squareRoot)\n}\n\nfunc squareRoot(x float64) (float64, error) {\n    x < 0 {\n        return 0, fmt.Errorf(\"Can't take a negative number\")\n    }\n    return math.Sqrt(x), nil\n}\n`}</code></pre>\n    <p>{`As for errors`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\",\n    \"os\"\n)\n\n// panic errors - no good!\nfunc mainBad() {\n    fileInfo, _ := os.Stat(\"existent.txt\")\n    fmt.Println(fileInfo.Size())\n    fileInfo, _ := os.Stat(\"nonexistent.txt\")\n    fmt.Println(fileInfo.Size())\n}\n\n// instead, do this\nfunc main() {\n    fileInfo, error := os.Stat(\"existent.txt\")\n    if error != nil {\n        fmt.Println(error)\n    } else {\n        fmt.Println(fileInfo.Size())\n    }\n    fileInfo, error := os.Stat(\"nonexistent.txt\")\n    if error != nil {\n        fmt.Println(error)\n    } else {\n        fmt.Println(fileInfo.Size())\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-go-formatting-tool\"\n    }}>{`The Go Formatting Tool`}</h3>\n    <p><inlineCode parentName=\"p\">{`go fmt <filename>`}</inlineCode>{` will update the file itself and it will nicely format it.`}</p>\n    <h2 {...{\n      \"id\": \"control-structures\"\n    }}>{`Control Structures`}</h2>\n    <h3 {...{\n      \"id\": \"for-loops\"\n    }}>{`For loops`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`for i := 1; i <= 3; i++ {\n    fmt.Println(i)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-statements\"\n    }}>{`If statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`if true {\n    fmt.Println(\"You'll come here\")\n} else if false {\n    // ...\n} else {\n    // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"switch-statement\"\n    }}>{`Switch statement`}</h3>\n    <p>{`Switch statements look like they do not need a break.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`switch doorNumber {\n    case 1:\n        fmt.Println(\"new car \")\n    case 2:\n        // ...\n    default:\n        // ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"data-structures\"\n    }}>{`Data Structures`}</h2>\n    <h3 {...{\n      \"id\": \"pointers\"\n    }}>{`Pointers`}</h3>\n    <p>{`You can create a pointer to a variable too.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aValue float64 = 1.23\n    var aPointer *float64 = &aValue\n    fmt.Println(\"aPointer\", aPointer)\n    fmt.Println(\"*aPointer\", *aPointer)\n}\n\n/*\n    Prints\n    aPointer 0xc42000a3b8\n    *aPointer 1.23\n */\n`}</code></pre>\n    <p>{`There are situations where the pointer is better to use than using a value directly.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Functions that need to affect their argument. Args in funcs are always passed by value. The function recieves a copy of the value.`}</li>\n      <li parentName=\"ol\">{`Passing a complex value to a function - example a complex struct`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Example\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n    num := 8.2\n    halve(num)\n    fmt.Println(num)\n}\n\nfunc halve(number float64) {\n    number = number / 2;\n    fmt.Println(number)\n}\n\n// Using the pointer\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n    num := 8.2\n    halve(&num)\n    fmt.Println(num)\n}\n\nfunc halve(number *float64) {\n    *number = *number / 2\n    fmt.Println(*number)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h3>\n    <p>{`Slices are used more commonly used than arrays, but given they are built on arrays, we'll explore arrays first.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    var months [3]string // array of three strings\n    months[0] = \"Jan\"\n    months[1] = \"Feb\"\n    months[2] = \"Mar\"\n    fmt.Println(months[0])\n    // also could be months := [3]string{\"Jan\", \"Feb\", \"Mar\"}\n\n    for i := 0; i < len(months); i++ {\n        fmt.Println(months[i])\n    }\n\n    // another way to loop through the array\n    for i, month := range months {\n        fmt.Println(month)\n    }\n\n    // omit the index\n    for _, month := range months {\n        fmt.Println(month)\n    }\n}\n`}</code></pre>\n    <p>{`The main limitation arrays are used are because you cannot assign values to an array larger than it's initial allocated memory size.`}</p>\n    <h3 {...{\n      \"id\": \"slices\"\n    }}>{`Slices`}</h3>\n    <p>{`Slices also represent an array. Slices are easier to work with.`}</p>\n    <p>{`While `}<inlineCode parentName=\"p\">{`len`}</inlineCode>{` shows the length, `}<inlineCode parentName=\"p\">{`cap`}</inlineCode>{` shows the capacity of how it can grow.`}</p>\n    <p><inlineCode parentName=\"p\">{`append`}</inlineCode>{` can be used to append to a slice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    a := [5]int{0,1,2,3,4}\n    s1 := a[0:3]\n    s2 := a[2:5]\n    fmt.Println(a, s1, s2)\n    // prints [0 1 2 3 4] [0 1 2] [2 3 4]\n    a[2] = 88\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88] [2 3 88]\n    s1 = s1[0:4]\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88 3] [88 3 4]\n    s2 = s2[0:4] // throws an error\n    s2 = append(s2, 5) // returns a new slice\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88 3] [88 3 4 5]\n    s2[0] = 999\n    // prints [0 1 88 3 4] [0 1 88 3] [999 3 4 5]\n\n    // Declaring an array on its own\n    s3 := []int{1, 2, 3}\n    fmt.Println(s3) // prints [1 2 3]\n    s3 = append(s3, 4, 5)\n    fmt.Println(s3) // [1 2 3 4 5]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h3>\n    <p>{`Slices are good for storing collections, but the only way to get elements back is by the index.`}</p>\n    <p>{`While in most collections you have dictionaries, hashes, hash maps, Go refers to these data structures as `}<inlineCode parentName=\"p\">{`Maps`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    ages := map[string]float64{}\n    ages[\"Alice\"] = 12\n    ages[\"Bob\"] = 9\n    fmt.Println(ages) // prints map[Alice:12 Bob:9]\n}\n`}</code></pre>\n    <p>{`Similar to arrays or slices, we can use a literal to prefill the values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    ages := map[string]float64{\"Alice\":12, \"Bob\":9}\n    fmt.Println(ages) // prints map[Alice:12 Bob:9]\n    for name, age := range ages {\n        fmt.Println(name, age)\n    }\n\n    for _, age := range ages {\n        fmt.Println(age)\n    }\n\n    for name := range ages {\n        fmt.Println(name)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` keyword to define a type and it's underlying type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\ntype Minutes int\ntype Hours int\n\nfunc main() {\n    minutes := Minutes(37)\n    hours := Hours(37)\n\n    fmt.Println(minutes, hours)\n}\n`}</code></pre>\n    <p>{`We can also compare custom types to their underlying type. However two custom types with the same underlying type cannot be compared.`}</p>\n    <p>{`The more commonly used aggregate type is a Struct which is how we can base custom types on them.`}</p>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <p>{`Define new behaviours for types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\ntype Title string\n\n// the following has an extra reciever arg t\nfunc (t Title) FixCase() string {\n    return strings.Title(string(t))\n}\n\nfunc main() {\n    name := Title(\"the matrix\")\n    fixed := name.FixCase()\n    fmt.Println(fixed)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n)\n\ntype Hours int\n\nfunc (h *Hours) Increment() Hours {\n  *h = (*h + 1) % 24\n  return *h\n}\n\nfunc main() {\n  hours := Hours(23)\n  hours.Increment()\n  fmt.Println(hours) // Prints \"0\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"structs\"\n    }}>{`Structs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\ntype Monitor struct {\n    Resolution  string\n    Connector   string\n    Value       float64 // fields with a name and a type\n}\n\nfunc main() {\n    monitor := Monitor{}\n    monitor.Resolution = \"1080p\"\n    monitor.Connector = \"HDMI\"\n    monitor.Value = 249.99\n    fmt.Println(monitor.Resolution, monitor.Connector, monitor.Value)\n\n    // could also go monitor := Monitor{\"1080p\", \"HDMI\", 249.99}\n}\n`}</code></pre>\n    <p>{`If you init and allocate a struct, it will initialise with some default values.`}</p>\n    <p>{`You can also add a \"exported\" get and set method to help enforce the concept of private variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n)\n\ntype Clock struct {\n  Hours int\n  Minutes int\n}\n\n// DEFINE A \"Noon\" FUNCTION HERE\nfunc Noon(hours int, min int) Clock {\n  c := Clock{}\n  c.Hours = 12\n  c.Minutes = 0\n\n  return c\n}\n\nfunc main() {\n  c := Noon(12, 10)\n  fmt.Println(c)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h3>\n    <p>{`When you have a concrete type, you know what it is and what it can do. An interface is defining what something is but not what it can do.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type FourLegged interface {\n    Walk()\n    Sit()\n}\n`}</code></pre>\n    <p>{`Implementation in practise`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type Part interface {\n    Specs() string\n    Price() string\n}\n\nfunc Summary(part Part) string {\n    return part.Specs() + \"/n\" + part.Price()\n}\n`}</code></pre>\n    <p>{`If we create slice with that type as well, then we can use that slice for anything that satisfies the interface. This could allow us to slice, append to the slice and use the range to iterate through.`}</p>\n    <h4 {...{\n      \"id\": \"challenge\"\n    }}>{`Challenge`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// calendar.go\npackage calendar\n\nimport \"fmt\"\n\ntype Calendar struct {\n  Year int\n  Month int\n  Day int\n}\n\nfunc (c Calendar) Display() {\n  fmt.Printf(\"%04d-%02d-%02d\", c.Year, c.Month, c.Day)\n}\n\n// clock.go\npackage clock\n\nimport \"fmt\"\n\ntype Clock struct {\n    Hours int\n    Minutes int\n}\n\nfunc (c Clock) Display() {\n    fmt.Printf(\"%02d:%02d\", c.Hours, c.Minutes)\n}\n\n// schedule.go\npackage schedule\n\n// DECLARE A Displayable INTERFACE HERE\ntype Displayable interface {\n    Display()\n}\n// DECLARE A Print FUNCTION HERE\nfunc Print(display Displayable) {\n    display.Display()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"concurrency\"\n    }}>{`Concurrency`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc longTask() {\n    fmt.Println(\"Starting long task\")\n    time.Sleep(3 * time.Second)\n    fmt.Println(\"Long task finished\")\n}\n\nfunc main() {\n    go longTask()\n    go longTask()\n    go longTask()\n    time.Sleep(4 * time.Second) // just for show - we can use channels instead\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"channels\"\n    }}>{`Channels`}</h3>\n    <p>{`We can't simply try to use the time.Sleep with the keyword go given that the go routine doesn't give a value right away.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc longTask() int {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    return delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    time := longTask()\n    fmt.Println(\"Took\", time, \"seconds\")\n}\n`}</code></pre>\n    <p>{`What we can do instead is use a channel to pass a message back to the main go routine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\n// notice we get rid of the int return value\nfunc longTask(channel chan int) {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    channel <- delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    channel := make(chan int)\n    for i := 1; i <= 3; i++ {\n        go longTask(channel)\n    }\n    // uses the arrow prefix\n    for i := 1; i <= 3; i++ {\n        fmt.Println(\"Took\", <-channel, \"seconds\")\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"challenge-1\"\n    }}>{`Challenge`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`package channels\n\nfunc readFromChannel() string {\n    // CREATE A CHANNEL FOR string VALUES HERE\n    channel := make(chan string)\n    // HERE, CALL writeToChannel AS A GOROUTINE, AND PASS IT YOUR CHANNEL\n    go writeToChannel(channel)\n    // HERE, READ A STRING FROM YOUR CHANNEL AND RETURN IT\n    return <-channel\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`In the course, we've looked at:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Packages`}</li>\n      <li parentName=\"ul\">{`Type`}</li>\n      <li parentName=\"ul\">{`Functions`}</li>\n      <li parentName=\"ul\">{`Go format tool`}</li>\n      <li parentName=\"ul\">{`Arrays, Slices and Maps`}</li>\n      <li parentName=\"ul\">{`Structs for field aggregation - Adding methods - Interfaces`}</li>\n      <li parentName=\"ul\">{`Using Go routines and Channels`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}