{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md","mtime":1578818658563},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Gin-Stripe-Configuration.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"golang-gin-stripe-configuration\"\n    }}>{`Golang Gin Stripe Configuration`}</h1>\n    <p>{`This is a small \"Hello, World!\" to show a charge being made for Golang + Gin web server.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Go Docs Stripe`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/testing#cards\"\n        }}>{`Stripe Testing Cards`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-go/blob/master/charge/client_test.go\"\n        }}>{`Github Stripe Go Charge Testing`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gin-gonic/gin\"\n        }}>{`Gin Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/joho/godotenv\"\n        }}>{`Golang Dotenv Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`We need a few libs to get this all going. Run the following to fetch prerequisite packages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# Gin server lib\ngo get -u github.com/gin-gonic/gin\n# Stripe Go API\ngo get github.com/stripe/stripe-go\n# Dotenv package for Golang\ngo get github.com/joho/godotenv\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-maingo\"\n    }}>{`Setting up main.go`}</h2>\n    <p>{`The Golang API (in my opinion) has some more complexity as opposed to others for setting up a basic charge.`}</p>\n    <p>{`Reading over their tests (like resource `}{`[4]`}{`) is the perfect way to see how to conform and adhere to the types -- particularly for our basic example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/gin-gonic/gin\"\n        \"github.com/joho/godotenv\"\n        \"github.com/stripe/stripe-go\"\n        \"github.com/stripe/stripe-go/charge\"\n)\n\n// ChargeJSON incoming data for Stripe API\ntype ChargeJSON struct {\n        Amount       int64  \\`json:\"amount\"\\`\n        ReceiptEmail string \\`json:\"receiptEmail\"\\`\n}\n\nfunc main() {\n  // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\n  // basic hello world GET route\n  r.GET(\"/\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n            \"message\": \"Hello, World!\",\n    })\n  })\n\n  // our basic charge API route\n  r.POST(\"/api/charge\", func(c *gin.Context) {\n    // we will bind our JSON body to the \\`json\\` var\n    var json ChargeJSON\n    c.BindJSON(&json)\n\n    // Set Stripe API key\n    apiKey := os.Getenv(\"SK_TEST_KEY\")\n    stripe.Key = apiKey\n\n    // Attempt to make the charge.\n    // We are setting the charge response to _\n    // as we are not using it.\n    _, err := charge.New(&stripe.ChargeParams{\n      Amount:       stripe.Int64(json.Amount),\n      Currency:     stripe.String(string(stripe.CurrencyUSD)),\n      Source:       &stripe.SourceParams{Token: stripe.String(\"tok_visa\")}, // this should come from clientside\n      ReceiptEmail: stripe.String(json.ReceiptEmail)})\n\n    if err != nil {\n      // Handle any errors from attempt to charge\n      c.String(http.StatusBadRequest, \"Request failed\")\n      return\n    }\n\n    c.String(http.StatusCreated, \"Successfully charged\")\n  })\n\n  r.Run(\":8080\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-test-charge\"\n    }}>{`Making A Test Charge`}</h2>\n    <p>{`We can run our server with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run main.go\n`}</code></pre>\n    <p>{`In another terminal, run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) and we will get back `}<inlineCode parentName=\"p\">{`Successfully charged`}</inlineCode>{`! Hooray! We made it.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}