{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Data-Structures/Go.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Data-Structures/Go.md","mtime":1550543253831},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiZ28tZGF0YS1zdHJ1Y3R1cmVzIn0sIkdvIERhdGEgU3RydWN0dXJlcyIpLG1keCgiaDIiLHsiaWQiOiJmaXp6YnV6eiJ9LCJGaXp6YnV6eiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwiZnVuYyBmaXp6QnV6eihpIGludCkgc3RyaW5nIHtcbiAgc3dpdGNoIHRydWUge1xuICAgIGNhc2UgaSUzID09IDAgJiYgaSU1ID09IDA6XG4gICAgICAgIHJldHVybiBcImZpenpidXp6XCJcbiAgICBjYXNlIGklMyA9PSAwOlxuICAgICAgICByZXR1cm4gXCJmaXp6XCJcbiAgICBjYXNlIGklNSA9PSAwOlxuICAgICAgICByZXR1cm4gXCJidXp6XCJcbiAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RyY29udi5JdG9hKGkpXG4gIH1cbn1cbiIpKSxtZHgoImgyIix7ImlkIjoiY2h1bmtlZC1hcnJheXMifSwiQ2h1bmtlZCBBcnJheXMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZ28ifSksImZ1bmMgYXJyYXlDaHVuayhhcnIgW11pbnQsIHNpemUgaW50KSBbXVtdaW50IHtcbiAgICBpZiBsZW4oYXJyKSA8PSAwIHtcbiAgICAgICAgcmV0dXJuIG5pbFxuICAgIH1cblxuICAgIHZhciB0bXAgW11pbnRcbiAgICB2YXIgY2h1bmtlZEFyciBbXVtdaW50XG4gICAgZm9yIGksIGl0ZW0gOj0gcmFuZ2UgYXJyIHtcbiAgICAgICAgdG1wID0gYXBwZW5kKHRtcCwgaXRlbSlcblxuICAgICAgICBpc0ZpbmFsIDo9IGxlbihhcnIpLTEgPT0gaVxuICAgICAgICBpZiBpJXNpemUgPT0gc2l6ZS0xIHx8IGlzRmluYWwge1xuICAgICAgICAgICAgZm10LlByaW50ZihcIiV2XCIsIHRtcClcbiAgICAgICAgICAgIGNodW5rZWRBcnIgPSBhcHBlbmQoY2h1bmtlZEFyciwgdG1wKVxuICAgICAgICAgICAgdG1wID0gbmlsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2h1bmtlZEFyclxufVxuIikpLG1keCgiaDIiLHsiaWQiOiJwYWxpbmRyb21lcyJ9LCJQYWxpbmRyb21lcyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1nbyJ9KSwicGFja2FnZSBtYWluXG5cbi8vIHJldHVybiB3aGV0aGVyIGl0IGlzIGEgcGFsaW5kcm9tZSBvciBub3RcbmZ1bmMgbWFpbigpIHtcbiAgICByZXR1cm5cbn1cblxuLy8gU3RyaW5nIGNvbnZlcnRzIHN0cmluZyBzdHJ1Y3QgZXhwZWN0aW5nIHBhbGluZHJvbWVzXG50eXBlIFN0cmluZyBzdHJ1Y3Qge1xuICAgIHN0ciBzdHJpbmdcbn1cblxuZnVuYyBuZXdQYWxpbmRyb21lKHMgc3RyaW5nKSBTdHJpbmcge1xuICAgIHJldHVybiBTdHJpbmd7c31cbn1cblxuZnVuYyAocyBTdHJpbmcpIGlzUGFsaW5kcm9tZSgpIGJvb2wge1xuICAgIHIgOj0gW11ydW5lKHMuc3RyKVxuICAgIGZvciBpLCBqIDo9IDAsIGxlbihyKS0xOyBpIDwgbGVuKHIpLzI7IGksIGogPSBpKzEsIGotMSB7XG4gICAgICAgIGlmIHJbaV0gIT0gcltqXSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG59XG4iKSkpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9EYXRhLVN0cnVjdHVyZXMvR28ubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Data-Structures/Go.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,oBADA,CAAR,sBADK,CAIL,SAAQ,CACN,KAAM,UADA,CAAR,YAJK,CAOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,kQAAL,CAPK,CAsBL,SAAQ,CACN,KAAM,gBADA,CAAR,kBAtBK,CAyBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,scAAL,CAzBK,CAgDL,SAAQ,CACN,KAAM,aADA,CAAR,eAhDK,CAmDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,aADe,CAA3B,ieAAL,CAnDK,CAAP,CAiFD,C,wQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"go-data-structures\"\n    }}>{`Go Data Structures`}</h1>\n    <h2 {...{\n      \"id\": \"fizzbuzz\"\n    }}>{`Fizzbuzz`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func fizzBuzz(i int) string {\n  switch true {\n    case i%3 == 0 && i%5 == 0:\n        return \"fizzbuzz\"\n    case i%3 == 0:\n        return \"fizz\"\n    case i%5 == 0:\n        return \"buzz\"\n    default:\n        return strconv.Itoa(i)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chunked-arrays\"\n    }}>{`Chunked Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func arrayChunk(arr []int, size int) [][]int {\n    if len(arr) <= 0 {\n        return nil\n    }\n\n    var tmp []int\n    var chunkedArr [][]int\n    for i, item := range arr {\n        tmp = append(tmp, item)\n\n        isFinal := len(arr)-1 == i\n        if i%size == size-1 || isFinal {\n            fmt.Printf(\"%v\", tmp)\n            chunkedArr = append(chunkedArr, tmp)\n            tmp = nil\n        }\n    }\n\n    return chunkedArr\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\n// return whether it is a palindrome or not\nfunc main() {\n    return\n}\n\n// String converts string struct expecting palindromes\ntype String struct {\n    str string\n}\n\nfunc newPalindrome(s string) String {\n    return String{s}\n}\n\nfunc (s String) isPalindrome() bool {\n    r := []rune(s.str)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        if r[i] != r[j] {\n            return false\n        }\n    }\n\n    return true\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}