{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Native/React-Native-Redux.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Native/React-Native-Redux.md","mtime":1579078174072},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1JlYWN0LU5hdGl2ZS9SZWFjdC1OYXRpdmUtUmVkdXgubWQiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKLyogQGpzeCBtZHggKi8KaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCc7Ci8qIEBqc3ggbWR4ICovCgp2YXIgbWFrZVNob3J0Y29kZSA9IGZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSkgewogIHJldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7CiAgICBjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiICsgbmFtZSArICIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpOwogICAgcmV0dXJuIG1keCgiZGl2IiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgICAgX19zb3VyY2U6IHsKICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgIGxpbmVOdW1iZXI6IDkKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSk7CiAgfTsKfTsKCnZhciBsYXlvdXRQcm9wcyA9IHt9Owp2YXIgTURYTGF5b3V0ID0gIndyYXBwZXIiOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpIHsKICB2YXIgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50cywKICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyJjb21wb25lbnRzIl0pOwoKICByZXR1cm4gbWR4KE1EWExheW91dCwgT2JqZWN0LmFzc2lnbih7fSwgbGF5b3V0UHJvcHMsIHByb3BzLCB7CiAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLAogICAgbWR4VHlwZTogIk1EWExheW91dCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBtZHgoImgxIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAicmVhY3QtbmF0aXZlLXdpdGgtcmVkdXgiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlJlYWN0IE5hdGl2ZSB3aXRoIFJlZHV4IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk5vdyB0aGF0IFJlZHV4VGh1bmsgaXMgc2V0IHVwLCB3ZSBjYW4gdXNlIGl0IGluc2lkZSBhbiBhY3Rpb24gY3JlYXRvci4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7fSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIEFjdGlvbiBDcmVhdG9yc1xuZXhwb3J0IGNvbnN0IHNlbGVjdEFjdGlvbiA9ICh7IGVtYWlsLCBwYXNzd29yZCB9KSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaCkgLT4ge1xuICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4odXNlciA9PiBjb25zb2xlLmxvZyh1c2VyKSlcbiAgICB9O1xufTtcbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiU28sIHdoYXQgaXMgUmVkdXhUaHVuayBkb2luZyBmb3IgdXM/IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk5vdyB0aGF0IHdlIGhhdmUgUmVkdXhUaHVuaywgaXQgd2lsbCBjaGFuZ2UgaG93IHdlIGNhbGwgdGhlIGFjdGlvbiBjcmVhdG9yLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUaGUgQWN0aW9uIENyZWF0b3IgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiV0lMTCBOT1cgUkVUVVJOIEEgRlVOQ1RJT04iKSwgIi4gSWYgUmVkdXhUaHVuayBzZWVzIGEgZnVuY3Rpb24gcmV0dXJuZWQsIGl0IHdpbGwgc2VuZCBvZmYgYW4gYWN0aW9uIHdpdGggYSBkaXNwYXRjaGVyIGFuZCBpbW1lZGlhdGVseSBjYWxsIHRoYXQgZnVuY3Rpb24uIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlRoaXMgd2lsbCB0aGVuIHN0YXJ0IG91ciBsb2dpbiByZXF1ZXN0LiBUaGUgYXBwIHdpbGwgd2FpdCBhbmQgdGhlIC50aGVuIHdpbGwgYXV0b21hdGljYWxseSBydW4gYW5kIHdlIHdpbGwgdGhlbiBkaXNwYXRjaCBvdXIgYWN0aW9uLiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHt9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gQWN0aW9uIENyZWF0b3JzXG5leHBvcnQgY29uc3Qgc2VsZWN0QWN0aW9uID0gKHsgZW1haWwsIHBhc3N3b3JkIH0pID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoKSAtPiB7XG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpXG4gICAgICAgICAgICAudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdMT0dJTl9VU0VSX1NVQ0NFU1MnLCBwYXlsb2FkOiB1c2VyIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbn07XG4iKSksIG1keCgiaHIiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZGVhbGluZy13aXRoLW5hdmlnYXRpb24iCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkRlYWxpbmcgd2l0aCBOYXZpZ2F0aW9uIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkFzIG9wcG9zZWQgdG8gUmVhY3Qgd2l0aCAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJSZWFjdC1Sb3V0ZXIiKSwgIiwgUmVhY3QgTmF0aXZlIGRvZXNuJ3QgbmVjZXNzYXJpbHkgaGF2ZSBvbmUuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDUyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkluIHRoaXMgY2FzZSwgd2UnbGwgYmUgdXNpbmcgdGhlIHNvbHV0aW9uIGNhbGxlZCAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJSZWFjdC1OYXRpdmUtUm91dGVyLUZsdXgiKSwgIiB0byBoZWxwIHdpdGggbmF2aWdhdGlvbi4iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiSG93IGRvZXMgaXQgd29yaz8iKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiSW1hZ2luZSBhbiBhcHAgdGhhdCByZXF1aXJlcyBhdXRoZW50aWNhdGlvbi4gV2UgY291bGQgdGhlbiBoYXZlIGFub3RoZXIgc2NlbmUgd2hlcmUgdGhlIGlzIGEgTWFzdGVyLURldGFpbCByZWxhdGlvbnNoaXAuIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIldlIGVzc2VudGlhbGx5IGRlZmluZSBhICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlNjZW5lIiksICIgZm9yIGVhY2ggZGlzdGluY3Qgc2NyZWVucy4gRm9yIGV4YW1wbGUuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwge30sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICI8U2NlbmUga2V5PVwibG9naW5cIiBjb21wb25lbnQ9e0xvZ2luRm9ybX0gLz5cbjxTY2VuZSBrZXk9XCJlbXBsb3llZUxpc3RcIiBjb21wb25lbnQ9e0VtcGxveWVlTGlzdH0gLz5cbjxTY2VuZSBrZXk9XCJlbXBsb3llZURldGFpbFwiIGNvbXBvbmVudD17RW1wbG95ZWVEZXRhaWx9IC8+XG5cbi8vIEFsbCB0aGUgcHJvcHMgeW91IGNhbiBwYXNzIHRvIHRoZSBzY2VuZVxuXG48U2NlbmVcbiAgICBrZXk9XCJsb2dpblwiICAgICAgICAgICAgICAgICAvLyBjYWxsIEFjdGlvbnMubG9naW4oKSB0byBzaG93IHRoaXMgc2NyZWVuXG4gICAgY29tcG9uZW50PXtMb2dpbkZvcm19ICAgICAgIC8vIGNvbXBvbmVudCB0byBzaG93XG4gICAgdGl0bGU9XCJMb2dpblwiICAgICAgICAgICAgICAgLy8gbWFrZSBuYXYgYmFyIGFuZCBnaXZlIGl0IGEgdGl0bGUgLSB0aGlzIGlzIGJ1aWx0IGluXG4gICAgaW5pdGlhbCAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZmlyc3Qgc2NyZWVuIHRvIHNob3dcbi8+XG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJuYXZpZ2F0aW9uLWluLXRoZS1yb3V0ZXIiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIk5hdmlnYXRpb24gaW4gdGhlIFJvdXRlciIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDcyCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHt9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA3MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gQ3JlYXRlIGEgcm91dGVyLmpzXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTY2VuZSwgUm91dGVyIH0gZnJvbSAncmVhY3QtbmF0aXZlLXJvdXRlci1mbHV4JztcblxuLy8gc2NlbmUtdGFyZ2V0XG5pbXBvcnQgRXhhbXBsZUNvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvZXhhbXBsZWNvbXBvbmVudC9FeGFtcGxlQ29tcG9uZW50JztcbmltcG9ydCBUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvdGFibGUvVGFibGUnO1xuXG5jb25zdCBSb3V0ZXJDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICAgIDxTY2VuZSBrZXk9XCJleGFtcGxlXCIgY29tcG9uZW50PXtFeGFtcGxlQ29tcG9uZW50fSB0aXRsZT1cIkFwcFwiIC8+XG4gICAgICAgICAgICA8U2NlbmUga2V5PVwidGFibGVcIiBjb21wb25lbnQ9e1RhYmxlfSB0aXRsZT1cIlRhYmxlXCIgaW5pdGlhbCAvPlxuICAgICAgICA8L1JvdXRlcj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyQ29tcG9uZW50O1xuXG4vLyBpbiBhcHAuanNcblxuLi4uXG5pbXBvcnQgUm91dGVyIGZyb20gJy4vcm91dGVyJztcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2Vycywge30sIGFwcGx5TWlkZGxld2FyZShSZWR1eFRodW5rKSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgICAgIDxSb3V0ZXIgLz5cbiAgICAgICAgPC9Qcm92aWRlcj5cbiAgICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iKSksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJTbyBob3cgZG8gd2UgbW92ZSBiZXR3ZWVuIHRoZXNlIHNjZW5lcz8iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogIm5hdmlnYXRpbmctYmV0d2Vlbi1yb3V0ZXMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTExCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJOYXZpZ2F0aW5nIGJldHdlZW4gcm91dGVzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJOYXZpZ2F0aW9uIHdpbGwgaGFwcGVuIGZyb20gYW4gYWN0aW9uLiIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7fSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTE1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIvLyBpbXBvcnQgYWN0aW9uc1xuaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1yb3V0ZXItZmx1eCc7XG5cbi8vIEFjdGlvbiBDcmVhdG9yc1xuZXhwb3J0IGNvbnN0IGxvZ2luVXNlclN1Y2Nlc3MgPSAoZGlzcGF0Y2gsIHVzZXIpID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IExPR0lOX1VTRVJfU1VDQ0VTUyxcbiAgICAgICAgcGF5bG9hZDogdXNlclxuICAgIH0pO1xuXG4gICAgQWN0aW9ucy5lbXBsb3llZUxpc3QoKTsgLy8gdGhpcyBtZXRob2QgY29tZXMgZnJvbSB0aGUga2V5IHByb3BlcnR5XG59O1xuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiZ3JvdXBpbmctc2NlbmVzLXdpdGgtYnVja2V0cyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMjgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkdyb3VwaW5nIFNjZW5lcyB3aXRoICdCdWNrZXRzJyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiTWFraW5nIGRlY2lzaW9ucyBvbiBob3cgdGhlIGhlYWRlciBzaG91bGQgcmVuZGVyLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiV2UgY2FuIGRvICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEzMgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJzY2VuZSBuZXN0aW5nIiksICIgdG8gZ3JvdXAgdGhlc2Ugc2NyZWVucy4gVGhlcmUgaXMgb25lICdnb3RjaGEnIHRob3VnaC4gTm93IGZvciB0aGUgYWN0aW9ucywgd2UgbmVlZCB0byBhY3R1YWxseSB1c2UgQWN0aW9ucy5tYWluKCkuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTMzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHt9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIHJvdXRlci5qc1xuXG5jb25zdCBSb3V0ZXJDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICAgIDxTY2VuZSBrZXk9XCJhdXRoXCI+XG4gICAgICAgICAgICAgICAgPFNjZW5lIGtleT1cImxvZ2luXCIgY29tcG9uZW50PXtMb2dpbn0gdGl0bGU9XCJMb2dpblwiIC8+XG4gICAgICAgICAgICA8L1NjZW5lPlxuICAgICAgICAgICAgPFNjZW5lIGtleT1cImZsb3dcIj5cbiAgICAgICAgICAgICAgICA8U2NlbmUga2V5PVwiZXhhbXBsZVwiIGNvbXBvbmVudD17RXhhbXBsZUNvbXBvbmVudH0gdGl0bGU9XCJBcHBcIiAvPlxuICAgICAgICAgICAgICAgIDxTY2VuZVxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgYWN0aW9uLCB5b3Ugbm9ybWFsbHkgY2FsbCBBY3Rpb25zLmtleSgpXG4gICAgICAgICAgICAgICAgICAgIG9uUmlnaHQ9eygpID0+IGNvbnNvbGUubG9nKCdyaWdodCEhIScpfVxuICAgICAgICAgICAgICAgICAgICByaWdodFRpdGxlPVwiQWRkXCJcbiAgICAgICAgICAgICAgICAgICAga2V5PVwidGFibGVcIlxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e1RhYmxlfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlRhYmxlXCJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1NjZW5lPlxuICAgICAgICA8L1JvdXRlcj5cbiAgICApO1xufTtcbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIldlIGNhbiB1c2UgdGhlICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE1NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJpbml0aWFsIiksICIgcHJvcCB3aXRoaW4gdGhlc2UgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImJ1Y2tldHMiKSwgIiB0byBsZXQgd2hpY2ggY29tcG9uZW50IHdpdGhpbiBhIGJ1Y2tldCB0byBoYXZlIGFuIGluaXRpYWwgcHJvcCIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiYWN0aW9ucy10by1uYXZpZ2F0ZS1iZXR3ZWVuLWJ1Y2tldHMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTU4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJBY3Rpb25zIHRvIG5hdmlnYXRlIGJldHdlZW4gYnVja2V0cyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhlc2UgYWN0aW9ucyBjYW4gYmUgYWRkZWQgdXNpbmciKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNjIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwge30sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE2MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1yb3V0ZXItZmx1eCc7XG5cbi8vIEFjdGlvbiBDcmVhdG9ycyAtIGV4YW1tcGxlIHRodW5rIGFjdGlvbiBjcmVhdG9yXG5jb25zdCBsb2dpblVzZXJTdWNjZXNzID0gKGRpc3BhdGNoLCB1c2VyKSA9PiB7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBMT0dJTl9VU0VSX1NVQ0NFU1MsXG4gICAgICAgIHBheWxvYWQ6IHVzZXJcbiAgICB9KTtcblxuICAgIEFjdGlvbnMuZW1wbG95ZWVMaXN0KCk7XG59XG4iKSksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJmb3JtLXVwZGF0ZXMtYXQtYS1yZWR1Y2VyLWxldmVsLS1keW5hbWljLXByb3BlcnR5LXVwZGF0ZXMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTc0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJGb3JtIHVwZGF0ZXMgYXQgYSByZWR1Y2VyIGxldmVsIC8gRHluYW1pYyBQcm9wZXJ0eSB1cGRhdGVzIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE3NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJFeGFtcGxlIHJlZHVjZXIgZnVuY3Rpb24gd2l0aCBFUzYgZHluYW1pYyBjaGFuZ2UuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTc4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJjb2RlIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicHJlIgogIH0sIHt9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNzgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IElOSVRJQUxfU1RBVEUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBFTVBMT1lFRV9VUERBVEU6XG4gICAgICAgICAgICByZXR1cm4gey4uLnN0YXRlLCBbYWN0aW9uLnBheWxvYWQucHJvcF06IGFjdGlvbi5wYXlsb2FkLnZhbHVlfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59XG4iKSkpOwp9CgppZiAodHlwZW9mIE1EWENvbnRlbnQgIT09ICd1bmRlZmluZWQnICYmIE1EWENvbnRlbnQgJiYgTURYQ29udGVudCA9PT0gT2JqZWN0KE1EWENvbnRlbnQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIk1EWENvbnRlbnQiLAogICAgICBmaWxlbmFtZTogIm1hbnVhbC9SZWFjdC1OYXRpdmUvUmVhY3QtTmF0aXZlLVJlZHV4Lm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1JlYWN0LU5hdGl2ZS9SZWFjdC1OYXRpdmUtUmVkdXgubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvUmVhY3QtTmF0aXZlL1JlYWN0LU5hdGl2ZS1SZWR1eC5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWExheW91dCwgIk1EWExheW91dCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1JlYWN0LU5hdGl2ZS9SZWFjdC1OYXRpdmUtUmVkdXgubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1JlYWN0LU5hdGl2ZS9SZWFjdC1OYXRpdmUtUmVkdXgubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Native/React-Native-Redux.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-native-with-redux\"\n    }}>{`React Native with Redux`}</h1>\n    <p>{`Now that ReduxThunk is set up, we can use it inside an action creator.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => console.log(user))\n    };\n};\n`}</code></pre>\n    <p>{`So, what is ReduxThunk doing for us?`}</p>\n    <p>{`Now that we have ReduxThunk, it will change how we call the action creator.`}</p>\n    <p>{`The Action Creator `}<inlineCode parentName=\"p\">{`WILL NOW RETURN A FUNCTION`}</inlineCode>{`. If ReduxThunk sees a function returned, it will send off an action with a dispatcher and immediately call that function.`}</p>\n    <p>{`This will then start our login request. The app will wait and the .then will automatically run and we will then dispatch our action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => {\n                dispatch({ type: 'LOGIN_USER_SUCCESS', payload: user });\n            });\n    };\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dealing-with-navigation\"\n    }}>{`Dealing with Navigation`}</h2>\n    <p>{`As opposed to React with `}<inlineCode parentName=\"p\">{`React-Router`}</inlineCode>{`, React Native doesn't necessarily have one.`}</p>\n    <p>{`In this case, we'll be using the solution called `}<inlineCode parentName=\"p\">{`React-Native-Router-Flux`}</inlineCode>{` to help with navigation.`}</p>\n    <p>{`How does it work?`}</p>\n    <p>{`Imagine an app that requires authentication. We could then have another scene where the is a Master-Detail relationship.`}</p>\n    <p>{`We essentially define a `}<inlineCode parentName=\"p\">{`Scene`}</inlineCode>{` for each distinct screens. For example.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<Scene key=\"login\" component={LoginForm} />\n<Scene key=\"employeeList\" component={EmployeeList} />\n<Scene key=\"employeeDetail\" component={EmployeeDetail} />\n\n// All the props you can pass to the scene\n\n<Scene\n    key=\"login\"                 // call Actions.login() to show this screen\n    component={LoginForm}       // component to show\n    title=\"Login\"               // make nav bar and give it a title - this is built in\n    initial                     // define the first screen to show\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"navigation-in-the-router\"\n    }}>{`Navigation in the Router`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// Create a router.js\n\nimport React from 'react';\nimport { Scene, Router } from 'react-native-router-flux';\n\n// scene-target\nimport ExampleComponent from './components/examplecomponent/ExampleComponent';\nimport Table from './components/table/Table';\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n            <Scene key=\"table\" component={Table} title=\"Table\" initial />\n        </Router>\n    );\n};\n\nexport default RouterComponent;\n\n// in app.js\n\n...\nimport Router from './router';\n\nconst App = () => {\n\n    const store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n    return (\n        <Provider store={store}>\n            <Router />\n        </Provider>\n    );\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`So how do we move between these scenes?`}</p>\n    <h2 {...{\n      \"id\": \"navigating-between-routes\"\n    }}>{`Navigating between routes`}</h2>\n    <p>{`Navigation will happen from an action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// import actions\nimport { Actions } from 'react-native-router-flux';\n\n// Action Creators\nexport const loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList(); // this method comes from the key property\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"grouping-scenes-with-buckets\"\n    }}>{`Grouping Scenes with 'Buckets'`}</h2>\n    <p>{`Making decisions on how the header should render.`}</p>\n    <p>{`We can do `}<inlineCode parentName=\"p\">{`scene nesting`}</inlineCode>{` to group these screens. There is one 'gotcha' though. Now for the actions, we need to actually use Actions.main().`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// router.js\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"auth\">\n                <Scene key=\"login\" component={Login} title=\"Login\" />\n            </Scene>\n            <Scene key=\"flow\">\n                <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n                <Scene\n                    // for action, you normally call Actions.key()\n                    onRight={() => console.log('right!!!')}\n                    rightTitle=\"Add\"\n                    key=\"table\"\n                    component={Table}\n                    title=\"Table\"\n                    initial\n                />\n            </Scene>\n        </Router>\n    );\n};\n`}</code></pre>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`initial`}</inlineCode>{` prop within these `}<inlineCode parentName=\"p\">{`buckets`}</inlineCode>{` to let which component within a bucket to have an initial prop`}</p>\n    <h2 {...{\n      \"id\": \"actions-to-navigate-between-buckets\"\n    }}>{`Actions to navigate between buckets`}</h2>\n    <p>{`These actions can be added using`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { Actions } from 'react-native-router-flux';\n\n// Action Creators - exammple thunk action creator\nconst loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList();\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"form-updates-at-a-reducer-level--dynamic-property-updates\"\n    }}>{`Form updates at a reducer level / Dynamic Property updates`}</h2>\n    <p>{`Example reducer function with ES6 dynamic change.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case EMPLOYEE_UPDATE:\n            return {...state, [action.payload.prop]: action.payload.value};\n        default:\n            return state;\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}