{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/3-Threads.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/3-Threads.md","mtime":1562563032017},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3520-OS/3-Threads.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"week-3---threads\"\n    }}>{`Week 3 - Threads`}</h1>\n    <h2 {...{\n      \"id\": \"processes-and-threads\"\n    }}>{`Processes and Threads`}</h2>\n    <p>{`Processes have two characteristics:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Resource Ownership `}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`process includes a virtual address space to hold the process image `}</li>\n          <li parentName=\"ul\">{`the OS performs a protection function to prevent unwanted interference between processes with respect to resources`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Scheduling/Execution`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`follows an execution path that may be interleaved with other processes `}</li>\n          <li parentName=\"ul\">{`a process has an execution state (Running, Ready, etc.) and a dispatching priority and is scheduled and dispatched by the OS`}</li>\n        </ul></li>\n    </ol>\n    <p>{`These two characteristics are treated independently by modern operating systems:\n- the unit of dispatching is referred to as a `}<inlineCode parentName=\"p\">{`thread`}</inlineCode>{` or lightweight process\n- the unit of resource ownership is referred to as a `}<inlineCode parentName=\"p\">{`process`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`task`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"multithreading\"\n    }}>{`Multithreading`}</h2>\n    <p>{`The ability of an OS to support multiple, concurrect paths of execution within a single process`}</p>\n    <h2 {...{\n      \"id\": \"process\"\n    }}>{`Process`}</h2>\n    <p>{`The unit of resource allocation and a unit of protection.`}</p>\n    <p>{`A process is associated with: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`A virtual address space which holds the process image `}</li>\n      <li parentName=\"ul\">{`Protected access to\n- Processors\n- Other processes\n- Files\n- I/O resources `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"multiple-threads-in-process\"\n    }}>{`Multiple threads in Process`}</h2>\n    <p>{`Each thread has:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Access to the memory and resources of its process (all threads of a process share this)`}</li>\n      <li parentName=\"ul\">{`An execution state (running, ready, etc.)`}</li>\n      <li parentName=\"ul\">{`Saved thread context when not running `}</li>\n      <li parentName=\"ul\">{`An execution stack `}</li>\n      <li parentName=\"ul\">{`Some per-thread static storage for local variables`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"single-threaded-vs-multi-threaded\"\n    }}>{`Single-Threaded vs multi threaded`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Both have `}<inlineCode parentName=\"li\">{`Process Control Block`}</inlineCode></li>\n      <li parentName=\"ul\">{`Both have `}<inlineCode parentName=\"li\">{`User Address Space`}</inlineCode></li>\n      <li parentName=\"ul\">{`Single thread has a `}<inlineCode parentName=\"li\">{`User Stack`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Kernel Stack`}</inlineCode></li>\n      <li parentName=\"ul\">{`Multithread process has a `}<inlineCode parentName=\"li\">{`User Stack`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`Kernel Stack`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`Thread Control Block`}</inlineCode>{` within each thread`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"threads\"\n    }}>{`Threads`}</h2>\n    <p>{`In OS that supports threads: scheduling and dispatching done on thread basis `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Most of the state info dealing with execution is maintained in thread-level data structures `}</li>\n      <li parentName=\"ul\">{`Several actions that affect all of the threads in a process and that the OS must manage at the process level\n- Suspending process means all threads of a process\n- Terminates a process terminates all threads within the process `}</li>\n      <li parentName=\"ul\">{`Similar to processes, threads have execution states and may synchronize with one another.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"thread-execution-states\"\n    }}>{`Thread Execution States`}</h2>\n    <p>{`Three basic states`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Running `}</li>\n      <li parentName=\"ol\">{`Ready `}</li>\n      <li parentName=\"ol\">{`Blocked `}</li>\n    </ol>\n    <p>{`Operations associated with a change in thread state `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Spawn (another thread)\n- allocate register context and stacks `}</li>\n      <li parentName=\"ul\">{`Block\n- move to an event queue waiting for the event\n- issue: will blocking a thread block other, or all, threads within the same process?`}</li>\n      <li parentName=\"ul\">{`Unblock\n- moved the the `}<inlineCode parentName=\"li\">{`Ready`}</inlineCode>{` queue for execution`}</li>\n      <li parentName=\"ul\">{`Finish (thread)\n- de-allocate register context and stacks `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"thread-synchronization\"\n    }}>{`Thread Synchronization`}</h2>\n    <p>{`Necessity to sync activities of all threads and prevent interference between each other.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`all threads of a process share the same address space and other resources `}</li>\n      <li parentName=\"ul\">{`any alteration of a resource by one thread affects the other threads in the same process `}</li>\n    </ul>\n    <p>{`In general, the techniques used for thread sync are the same as those for process sync.`}</p>\n    <h2 {...{\n      \"id\": \"types-of-threads\"\n    }}>{`Types of Threads`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`User Level Thread (ULT)`}</li>\n      <li parentName=\"ol\">{`Kernel Level Thread (KLT) `}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`also called kernel-supported threads or lightweight threads`}</li>\n        </ul></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"user-level-threads\"\n    }}>{`User-Level Threads`}</h2>\n    <p>{`Thread management all done by application.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Multithreading is managed by a runtime threads lib `}</li>\n    </ul>\n    <p>{`The kernel is not aware of the existence of threads `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Only schedule the process as a unit and assigns a single execution state to that process `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"disadvantages-of-ult\"\n    }}>{`Disadvantages of ULT`}</h2>\n    <p>{`In a typical OS many system calls are blocking `}</p>\n    <ul>\n      <li parentName=\"ul\">{`as a result, when a ULT executes a system call, not only is the thread blocked, but all within the process are blocked `}</li>\n    </ul>\n    <p>{`In a pure ULT strategy, multithreaded applications cannot take advantage of multiprocessing.`}</p>\n    <h2 {...{\n      \"id\": \"kernel-level-threads\"\n    }}>{`Kernel-Level Threads`}</h2>\n    <p>{`Kernel maintains context information for the process and the threads. `}</p>\n    <ul>\n      <li parentName=\"ul\">{`No thread management done by application `}</li>\n    </ul>\n    <p>{`Scheduling is done on a thread basis.`}</p>\n    <p>{`Windows is an example of this approach.`}</p>\n    <h2 {...{\n      \"id\": \"advantages-of-klt\"\n    }}>{`Advantages of KLT`}</h2>\n    <p>{`The kernel can simultaneously schedule multiple threads from the same process on multiple processors.`}</p>\n    <p>{`If one thread is blocked, the kernel schedules another thread of the same process.`}</p>\n    <p>{`Kernel routines themselves can be multithreaded.`}</p>\n    <h2 {...{\n      \"id\": \"multicore--multithreading\"\n    }}>{`Multicore & Multithreading`}</h2>\n    <p>{`Achieves concurrency without the overhead of using multiple processes.`}</p>\n    <p>{`Threads within the same process can exchange information through their common address space and have access to the shared resources of the process.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Threads of any process can run on any processor`}</li>\n      <li parentName=\"ul\">{`Soft affinity:\n- dispatcher tries to assign a ready thread to the same processor it last ran on\n- helps reuse data still in that processor's memory caches from the previous execution of the thread `}</li>\n      <li parentName=\"ul\">{`Hard affinity:\n- an application restricts thread execution to certain processors`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"multicore-challenges\"\n    }}>{`Multicore Challenges`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Dividing activities `}</li>\n      <li parentName=\"ul\">{`Balance `}</li>\n      <li parentName=\"ul\">{`Data splitting `}</li>\n      <li parentName=\"ul\">{`Data dependency `}</li>\n      <li parentName=\"ul\">{`Testing and debugging `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"linux-threads\"\n    }}>{`Linux Threads`}</h2>\n    <p>{`Linux uses the same internal representation for processes and threads; a thread is simply a new process (or task) that happens to share the same address space as its parent.`}</p>\n    <p>{`A distinction is only made when a new thread is created by the `}<inlineCode parentName=\"p\">{`clone`}</inlineCode>{` system call\n- `}<inlineCode parentName=\"p\">{`fork`}</inlineCode>{` creates a new process with its own entirely new process context\n- `}<inlineCode parentName=\"p\">{`clone`}</inlineCode>{` creates a new process with its own identity, but that is allowed to share the data structures of its parent`}</p>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`clone`}</inlineCode>{` gives the application fine-grained control over exactly what is shared between two threads.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`flag`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`meaning`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`CLONE_FS`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File-system info is shared`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`CLONE_VM`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The same mem space is shared`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`CLONE_SIGHAND`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Signal handlers are shared`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`CLONE_FILES`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The set of open files are shared`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"windows-threads\"\n    }}>{`Windows Threads`}</h2>\n    <p>{`Processes and servies provided by the Windows Kernel are relatively simple and general purpose.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`implemented as objects `}</li>\n      <li parentName=\"ul\">{`created as new process or a copy of an existing process `}</li>\n      <li parentName=\"ul\">{`exec proc may contain one or more threads `}</li>\n      <li parentName=\"ul\">{`both procs and thread objects have built-in sync capabilities`}</li>\n    </ul>\n    <p>{`Windows makes use of two types of process-related objects:`}</p>\n    <p><strong parentName=\"p\">{`Processes`}</strong>{`\n– an entity corresponding to a user job or application that owns resources`}</p>\n    <p><strong parentName=\"p\">{`Threads`}</strong>{`\n– a dispatchable unit of work that executes sequentially and is interruptible`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}