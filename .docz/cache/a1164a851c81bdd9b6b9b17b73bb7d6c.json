{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md","mtime":1562563032041},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJiYXNpYy1qYXZhLWltcG9ydGluZyJ9LCJCYXNpYyBKYXZhIEltcG9ydGluZyIpLG1keCgicCIsbnVsbCwiVGhpcyBpcyBhIGJhc2ljIHJlbWluZGVyIG9uIGhvdyB0byBkZWNsYXJlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJwYWNrYWdlcyIpLCIgYW5kIGltcG9ydCB0aG9zZSBwYWNrYWdlcyB3aGVuIHJ1bm5pbmcgR3JhZGxlIHRlc3RzLiIpLG1keCgiaDIiLHsiaWQiOiJsYXlvdXQifSwiTGF5b3V0IiksbWR4KCJwIixudWxsLCJHaXZlbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgdG8gdGVzdCBhICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJMaW5rZWQgTGlzdCIpLCIgSmF2YSBjbGFzcywgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGxheW91dCBmb3IgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIuamF2YSIpLCIgYW5kIHRlc3QgZmlsZXM6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXNoZWxsIn0pLCJcdTI1MTRcdTI1MDBcdTI1MDAgc3JjXG4gICAgXHUyNTFDXHUyNTAwXHUyNTAwIG1haW5cbiAgICBcdTI1MDJceEEwXHhBMCBcdTI1MTRcdTI1MDBcdTI1MDAgamF2YVxuICAgIFx1MjUwMlx4QTBceEEwICAgICBcdTI1MUNcdTI1MDBcdTI1MDAgTGlua2VkTGlzdC5qYXZhXG4gICAgXHUyNTAyXHhBMFx4QTAgICAgIFx1MjUxNFx1MjUwMFx1MjUwMCBOb2RlLmphdmFcbiAgICBcdTI1MTRcdTI1MDBcdTI1MDAgdGVzdFxuICAgICAgICBcdTI1MTRcdTI1MDBcdTI1MDAgamF2YVxuICAgICAgICAgICAgXHUyNTE0XHUyNTAwXHUyNTAwIExpbmtlZExpc3RUZXN0LmphdmFcbiIpKSxtZHgoImgyIix7ImlkIjoiZmlsZS0xLXNyY21haW5qYXZhbGlua2VkbGlzdGphdmEifSwiRmlsZSAxOiBzcmMvbWFpbi9qYXZhL0xpbmtlZExpc3QuamF2YSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0pLCJpbXBvcnQgbWFpbi5qYXZhLk5vZGU7XG5cbmNsYXNzIExpbmtlZExpc3Qge1xuICAgIEludGVnZXIgc2l6ZTtcbiAgICBOb2RlIGhlYWQ7XG5cbiAgICBwdWJsaWMgTGlua2VkTGlzdCgpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgTGlua2VkTGlzdChOb2RlIGhlYWQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMTtcbiAgICAgICAgdGhpcy5oZWFkID0gaGVhZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgSW50ZWdlciBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBOb2RlIGdldEZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkO1xuICAgIH1cbn1cbiIpKSxtZHgoImgyIix7ImlkIjoiZmlsZS0yLXNyY21haW5qYXZhbm9kZWphdmEifSwiRmlsZSAyOiBzcmMvbWFpbi9qYXZhL05vZGUuamF2YSIpLG1keCgicCIsbnVsbCwiTm90aWNlIGhlcmUgdGhhdCB0aGUgcGFja2FnZSBpdHNlbGYgaXMgaGFzIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicHVibGljIiksIiBtb2RpZmllciBhbmQgaGFzIHRoZSBwYWNrYWdlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJtYWluLmphdmEiKSwiIGl0c2VsZiBkZWNsYXJlZC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9KSwicGFja2FnZSBtYWluLmphdmE7XG5cbnB1YmxpYyBjbGFzcyBOb2RlIHtcbiAgICBwcml2YXRlIEludGVnZXIgZGF0YTtcbiAgICBwcml2YXRlIE5vZGUgbmV4dDtcblxuICAgIHB1YmxpYyBOb2RlKEludGVnZXIgZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBOb2RlKEludGVnZXIgZGF0YSwgTm9kZSBuZXh0KSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHZvaWQgc2V0TmV4dChOb2RlIG5leHQpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gbmV4dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgTm9kZSBnZXROZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgIH1cblxuICAgIHB1YmxpYyB2b2lkIHNldERhdGEoSW50ZWdlciBkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgcHVibGljIEludGVnZXIgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9XG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImZpbGUtMy1zcmN0ZXN0amF2YWxpbmtlZGxpc3R0ZXN0amF2YSJ9LCJGaWxlIDM6IHNyYy90ZXN0L2phdmEvTGlua2VkTGlzdFRlc3QuamF2YSIpLG1keCgicCIsbnVsbCwiRm9yIHRoaXMgcGFydGljdWxhciB0ZXN0LCB3ZSBhbHNvIG5lZWQgdG8gaW1wb3J0IHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiTm9kZSIpLCIgcGFja2FnZSB0byBlbnN1cmUgd2UgY2FuIGNyZWF0ZSBub2RlcyBmb3IgdGhlIExpbmtlZExpc3QuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSksImltcG9ydCBvcmcuanVuaXQuSWdub3JlO1xuaW1wb3J0IG9yZy5qdW5pdC5UZXN0O1xuXG5pbXBvcnQgc3RhdGljIG9yZy5qdW5pdC5Bc3NlcnQuYXNzZXJ0RXF1YWxzO1xuaW1wb3J0IG1haW4uamF2YS5Ob2RlO1xuXG5wdWJsaWMgY2xhc3MgTGlua2VkTGlzdFRlc3Qge1xuICAgIEBUZXN0XG4gICAgcHVibGljIHZvaWQgdGVzdEdldEZpcnN0KCkge1xuICAgICAgICBOb2RlIG4xID0gbmV3IE5vZGUoMik7XG4gICAgICAgIExpbmtlZExpc3QgbGwgPSBuZXcgTGlua2VkTGlzdChuMSk7XG4gICAgICAgIGFzc2VydEVxdWFscyhsbC5nZXRGaXJzdCgpLCBuMSk7XG4gICAgfVxufVxuIikpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvSmF2YS9CYXNpYy1JbXBvcnRzLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Basic-Imports.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,sBADA,CAAR,wBADK,CAIL,2DAAkD,kBAAY,UAAU,CAAC,GAAvB,aAAlD,yDAJK,CAKL,SAAQ,CACN,KAAM,QADA,CAAR,UALK,CAQL,sDAA6C,kBAAY,UAAU,CAAC,GAAvB,gBAA7C,sDAA0J,kBAAY,UAAU,CAAC,GAAvB,UAA1J,oBARK,CASL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,gBADe,CAA3B,wUAAL,CATK,CAoBL,SAAQ,CACN,KAAM,kCADA,CAAR,yCApBK,CAuBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,sZAAL,CAvBK,CAkDL,SAAQ,CACN,KAAM,4BADA,CAAR,mCAlDK,CAqDL,+DAAsD,kBAAY,UAAU,CAAC,GAAvB,WAAtD,kCAA0I,kBAAY,UAAU,CAAC,GAAvB,cAA1I,qBArDK,CAsDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,6kBAAL,CAtDK,CAyFL,SAAQ,CACN,KAAM,sCADA,CAAR,6CAzFK,CA4FL,qEAA4D,kBAAY,UAAU,CAAC,GAAvB,SAA5D,8DA5FK,CA6FL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,eADe,CAA3B,8UAAL,CA7FK,CAAP,CA+GD,C,wQAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-java-importing\"\n    }}>{`Basic Java Importing`}</h1>\n    <p>{`This is a basic reminder on how to declare `}<inlineCode parentName=\"p\">{`packages`}</inlineCode>{` and import those packages when running Gradle tests.`}</p>\n    <h2 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h2>\n    <p>{`Given the following example to test a `}<inlineCode parentName=\"p\">{`Linked List`}</inlineCode>{` Java class, we have the following layout for the `}<inlineCode parentName=\"p\">{`.java`}</inlineCode>{` and test files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`└── src\n    ├── main\n    │   └── java\n    │       ├── LinkedList.java\n    │       └── Node.java\n    └── test\n        └── java\n            └── LinkedListTest.java\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-1-srcmainjavalinkedlistjava\"\n    }}>{`File 1: src/main/java/LinkedList.java`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import main.java.Node;\n\nclass LinkedList {\n    Integer size;\n    Node head;\n\n    public LinkedList() {\n        this.size = 0;\n        this.head = null;\n    }\n\n    public LinkedList(Node head) {\n        this.size = 1;\n        this.head = head;\n    }\n\n    public Integer getSize() {\n        return this.size;\n    }\n\n    public Node getFirst() {\n        return this.head;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-2-srcmainjavanodejava\"\n    }}>{`File 2: src/main/java/Node.java`}</h2>\n    <p>{`Notice here that the package itself is has the `}<inlineCode parentName=\"p\">{`public`}</inlineCode>{` modifier and has the package `}<inlineCode parentName=\"p\">{`main.java`}</inlineCode>{` itself declared.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package main.java;\n\npublic class Node {\n    private Integer data;\n    private Node next;\n\n    public Node(Integer data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    public Node(Integer data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    public Node getNext() {\n        return this.next;\n    }\n\n    public void setData(Integer data) {\n        this.data = data;\n    }\n\n    public Integer getData() {\n        return this.data;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-3-srctestjavalinkedlisttestjava\"\n    }}>{`File 3: src/test/java/LinkedListTest.java`}</h2>\n    <p>{`For this particular test, we also need to import the `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` package to ensure we can create nodes for the LinkedList.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class LinkedListTest {\n    @Test\n    public void testGetFirst() {\n        Node n1 = new Node(2);\n        LinkedList ll = new LinkedList(n1);\n        assertEquals(ll.getFirst(), n1);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}