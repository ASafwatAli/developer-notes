{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Quick-Start.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Quick-Start.md","mtime":1562563032032},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/Docker-Quick-Start.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"docker-quickstart\"\n    }}>{`Docker Quickstart`}</h1>\n    <hr></hr>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-quickstart\"\n        }}>{`Docker Quickstart`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#basic-commands\"\n            }}>{`Basic commands`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#running-the-whalesay-container\"\n            }}>{`Running the whalesay container`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#inspecting-docker-images\"\n            }}>{`Inspecting Docker images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#container-lifecycle\"\n            }}>{`Container Lifecycle`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#image-and-container-management\"\n            }}>{`Image and Container Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redirection---ports-and-volumes\"\n            }}>{`Redirection - Ports and Volumes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#the-dockerfile\"\n            }}>{`The Dockerfile`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"basic-commands\"\n    }}>{`Basic commands`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container, image or task\n    kill      Kill one or more running containers\n    load      Load an image from a tar archive or STDIN\n    login     Log in to a Docker registry.\n    logout    Log out from a Docker registry.\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    node      Manage Docker Swarm nodes\n    pause     Pause all processes within one or more containers\n    port      List port mappings or a specific mapping for the container\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\n    search    Search the Docker Hub for images\n    service   Manage Docker services\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop one or more running containers\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within one or more containers\n    update    Update configuration of one or more containers\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-the-whalesay-container\"\n    }}>{`Running the whalesay container`}</h2>\n    <p>{`Pull the image, run the image!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker pull docker/whalesay:latest\ndocker images\n\n### lists the images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\n\ndocker run docker/whalesay cowsay ayyyyyy mate\n ___________\n< ayyy mate >\n -----------\n    \\\\\n     \\\\\n      \\\\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\\\______ o          __/\n        \\\\    \\\\        __/\n          \\\\____\\\\______/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inspecting-docker-images\"\n    }}>{`Inspecting Docker images`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker inspect whalesay\n[\n    {\n        \"Id\": \"sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4\",\n        \"RepoTags\": [\n            \"docker/whalesay:latest\"\n        ],\n        \"RepoDigests\": [\n            \"docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2015-05-25T22:04:23.303454458Z\",\n        \"Container\": \"5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"DockerVersion\": \"1.6.0\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 247049019,\n        \"VirtualSize\": 247049019,\n        \"GraphDriver\": {\n            \"Name\": \"aufs\",\n            \"Data\": null\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a\",\n                \"sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd\",\n                \"sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d\",\n                \"sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d\",\n                \"sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n            ]\n        }\n    }\n]\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"container-lifecycle\"\n    }}>{`Container Lifecycle`}</h2>\n    <p>{`There is a lifecycle associated with starting, stopping, restarting etc.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d --name LifeCycle1 nginx:latest\ndocker attach LifeCycle1\n\n// exec if the container started indirectly\ndocker exec -it LifeCycle1 /bin/bash\n`}</code></pre>\n    <p>{`We don't have to attach to the container with the `}<inlineCode parentName=\"p\">{`exec`}</inlineCode>{` command. We can just connect to is just to execute a command - like a `}<inlineCode parentName=\"p\">{`ssh`}</inlineCode>{` prompt!`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"image-and-container-management\"\n    }}>{`Image and Container Management`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# remove the image\ndocker rmi image-name\n\n# remove all containers\ndocker rm \\`docker ps -a -q\\`\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"redirection---ports-and-volumes\"\n    }}>{`Redirection - Ports and Volumes`}</h2>\n    <p><strong parentName=\"p\">{`Ports`}</strong></p>\n    <p>{`Ports are exposed in a container so that you can connect via the container IP but must be exposed via the `}<inlineCode parentName=\"p\">{`dockerfile`}</inlineCode>{`.`}</p>\n    <p>{`We can direct the port for a http container to a port on the underlying host.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker run -d -P --name:webserver nginx:latest`}</inlineCode></p>\n    <p>{`To find all the address redirection, we can write `}<inlineCode parentName=\"p\">{`docker port WebServer1 $CONTAINERPORT`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`okeeffe_d@dok ~$ docker port WebServer1 $CONTAINERPORT\n\n443/tcp -> 0.0.0.0:32768\n80/tcp -> 0.0.0.0:32769\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`docker run -d -p 8080:80 --name=webserver nginx:latest`}</inlineCode>{` is also useful for a variety of reasons.`}</p>\n    <p>{`We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing.`}</p>\n    <p>{`No we can pass stuff to the host without having to copy it.`}</p>\n    <p>{`This means we can mount underlying directories.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data\n`}</code></pre>\n    <p>{`Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration.`}</p>\n    <p>{`// 15 min mark`}</p>\n    <p>{`If we create a basic file and create a HTML page, we could then run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\n\n// this will mount the file and mount it to that directory. We can push multiple mounts!\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"the-dockerfile\"\n    }}>{`The Dockerfile`}</h2>\n    <p>{`Very few times will you start with a generic list of packages for a base image and creating it from nothing.`}</p>\n    <p>{`You'll base on it on things like `}<inlineCode parentName=\"p\">{`debian, ubuntu`}</inlineCode>{` etc.`}</p>\n    <p>{`The Dockerfile is an easy to read, easy to write script to build an image following instructions.`}</p>\n    <p>{`You can name it whatever, but will probably just be stored in `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` anyway.`}</p>\n    <p>{`Note, things will cache if they've already been done!`}</p>\n    <p>{`Example Dockerfile:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n`}</code></pre>\n    <p>{`Then docker run!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it dockerhubid/myapache:latest /bin/bash\n\n> echo MYVALUE\nmy-value\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Exposing or preventing exposing ports`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n\nEXPOSE 80\nEXPOSE 22\n\nCMD [\"/usr/sbin/apache2tl\",\"-D\",\"FOREGROUND\"]\n`}</code></pre>\n    <p>{`Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}