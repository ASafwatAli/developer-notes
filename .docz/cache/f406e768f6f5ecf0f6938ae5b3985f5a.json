{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md","mtime":1562563032035},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elm-guide\"\n    }}>{`Elm Guide`}</h1>\n    <p>{`This is a basic Elm guide that follows on from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://guide.elm-lang.org/core_language.html\"\n      }}>{`core language tour`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n'a'   : Char\n\"abc\" : String\n\n-- multi-line String\n\"\"\"\nThis is useful for holding JSON or other\ncontent that has \"quotation marks\".\n\"\"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`The following are equivocal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditionals\"\n    }}>{`Conditionals`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`if powerLevel > 9000 then \"Over 9000!\" else \"dbz joke not applicable\"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`square n =\n  n^2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"records\"\n    }}>{`Records`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipes\"\n    }}>{`Pipes`}</h2>\n    <p>{`Note: \"Pipes\" is not the technical term in Elm.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`viewNames1 names =\n  String.join \", \" (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join \", \"\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-expressions\"\n    }}>{`Let Expressions`}</h2>\n    <p>{`This is useful once expressions get too big.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in \"let\" expressions\nlet\n  name : String\n  name =\n    \"Hermann\"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"applying-functions\"\n    }}>{`Applying Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elm-modules\"\n    }}>{`Elm Modules`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations--aliases\"\n    }}>{`Type Annotations + Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  (\"Steve\", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type User\n  = Regular String Int\n  | Visitor String\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interoperability-with-js-and-porting\"\n    }}>{`Interoperability with JS and Porting`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg\n`}</code></pre>\n    <p>{`To use this port from JS, you use this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}