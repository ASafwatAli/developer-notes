{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/JS-Unit-Testing-Mocha-Chai.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/JS-Unit-Testing-Mocha-Chai.md","mtime":1579078174095},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/JavaScript/JS-Unit-Testing-Mocha-Chai.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`BDD - Behaviour Driven Development `}</p>\n    <p>{`We want to put the test code in a file separate from the other code.`}</p>\n    <p>{`After install the dev dependency of mocha and chai, you can write a test.js file and then run \\`mocha test.js' and it will simply run the test!`}</p>\n    <p>{`To start making these tests, we `}<strong parentName=\"p\">{`NEED`}</strong>{` to make a `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` file in the same directory as `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"building-a-test-suite\"\n    }}>{`Building a test suite`}</h2>\n    <p>{`Write a test that will run the test using the npm task `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` and just reply an assertion to be true.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const expect = require('chai').expect;\n\n// Test suite\ndescribe('Mocha', () => {\n\n    // Test spec (unit test)\n    it('should run our test using npm', () => {\n        expect(true).to.be.ok;\n    });\n\n});\n`}</code></pre>\n    <p>{`A `}<inlineCode parentName=\"p\">{`spec`}</inlineCode>{` looks very similar to a `}<inlineCode parentName=\"p\">{`suite`}</inlineCode>{`. It takes 2 arguments.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A string describing the desired behaviour.`}</li>\n      <li parentName=\"ol\">{`A function that wraps all the expectations together.`}</li>\n    </ol>\n    <p>{`It's important to start guessing what the function might expect etc.`}</p>\n    <p>{`We do a lot of the guess work for setting the spec itself. It may feel awkward at the start, but it will help get some bearings.`}</p>\n    <p>{`Once the spec is written, if we actually get `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` returned, that is likely because the function hasn't been written and/or does not return anything.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let expect = require('chai').expect;\n\ndescribe('checkForShip', () => {\n    const checkForShip = require('../path/to/src').checkForShip;\n    \n    // this is the test spec\n    it('should correctly report no ship at a given player's coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n});\n`}</code></pre>\n    <p>{`// example in the /src/js/ship_methods.js`}</p>\n    <p>{`function checkForShip (player, coordinates) {`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`var shipPresent, ship;\n\nfor (var i = 0; i < player.ships.length; i++) {\n    ship = player.ships[i];\n\n    shipPresent = ship.locations.filter( (actualCoordinate) => {\n        return (actualCoordinate[0] === coordinates[0]) && (actualCoordinate[1] === coordinates[1]);\n    })[0];\n\n    if (!shipPresent) {\n        return false;\n    }\n}\n`}</code></pre>\n    <p>{`}`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}