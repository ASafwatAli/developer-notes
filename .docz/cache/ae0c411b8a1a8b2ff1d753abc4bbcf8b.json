{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-On-Rails.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-On-Rails.md","mtime":1578866551704},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Ruby/Ruby-On-Rails.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAApB,CADF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAApB,CAJF,EAOE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAApB,CAPF,CAPK,EAkBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yeAAL,CArBK,EAiCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjCK,EAoCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApB,WAA0F;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA1F,CAHF,CApCK,EAyCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAzCK,EA4CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAH,CA5CK,EA6CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAc;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAd,UAAqE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAArE,6DA7CK,EA8CL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA9CK,EAiDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJAAL,CAjDK,EAwDL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxDK,EA2DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FAAL,CA3DK,EAiEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAqD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAArD,sBAAgI;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAhI,WAjEK,EAkEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sWAAL,CAlEK,EAiFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAjFK,EAkFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAlFK,EAqFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAAL,CArFK,EAyFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAzFK,EA4FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAAL,CA5FK,EAkGL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAlGK,EAqGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,UAAU,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,EAOE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF,CADF,EAcE;AAAO,IAAA,UAAU,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAOE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,CADF,EAYE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAOE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAPF,CAZF,EAuBE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAOE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAPF,CAvBF,EAkCE;AAAI,IAAA,UAAU,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAOE;AAAI,IAAA,UAAU,EAAC;AAAf,KAAwB;AACtB,aAAS;AADa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAPF,CAlCF,CAdF,CArGK,EAkKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAlKK,EAqKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qNAAL,CArKK,EA8KL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA9KK,EAiLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAAL,CAjLK,EA+LL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAX,2EAAiJ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAjJ,MA/LK,EAgML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhMK,EAmML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAnMK,EAoML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kPAAL,CApMK,EAgNL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAhNK,EAmNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0wBAAL,CAnNK,EAyOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAA0D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA1D,WAAmH;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAnH,MAzOK,EA0OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAmC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnC,yDAAiJ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAjJ,MA1OK,EA2OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAqC;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAArC,MA3OK,EA4OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAA6E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA7E,WA5OK,EA6OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIAAL,CA7OK,EAqPL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CArPK,EAwPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAA4D;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAA5D,MAxPK,EAyPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GAAL,CAzPK,EAmQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJAAkJ;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAlJ,+DAAgR;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAhR,iCAA6W;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA7W,uCAnQK,EAoQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAjB,wFApQK,EAqQL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCArQK,EAwQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAqB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAArB,sCAAwH;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAxH,iDAA0N;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA1N,MAxQK,EAyQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGAAL,CAzQK,EAgRL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAhRK,EAmRL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAlB,6CAA8G;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA9G,WAnRK,EAoRL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAL,CApRK,EAwRL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAAyD;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAzD,mBAA4H;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5H,MAxRK,EAyRL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAzRK,EA4RL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEA5RK,EA6RL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAAL,CA7RK,EAiSL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAjSK,EAoSL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAA2F;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAA3F,kBApSK,EAqSL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yZAAL,CArSK,EAsTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAlB,qDAtTK,EAuTL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAvTK,EA0TL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA0B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA1B,sBAA8F;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA9F,4BA1TK,EA2TL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mSAAL,CA3TK,CAAP;AAoUD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAnVMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ruby-on-rails\"\n    }}>{`Ruby On Rails`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://guides.rubyonrails.org/getting_started.html\"\n        }}>{`Getting Start with Rails`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://thoughtbot.com/blog/back-to-basics-http-requests\"\n        }}>{`HTTP Requests in Rails Apps`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://guides.rubyonrails.org/v5.2/action_controller_overview.html\"\n        }}>{`Action Controlller Overview`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails new [app] # scaffold new app\nrails server # serve on 3000\nbundle install --without production # install dev deps\nrails generate scaffold User name:string email:string # generate basic User schema\nrails generate controller Welcome index # generate new Welcome page\nrails destroy model User # rollback created User\nrails db:migrate # migrate database\nrails db:rollback # undo previous db command\nrails db:migrate VERSION=0 # migrate all the way back to the beginning\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"rake\"\n    }}>{`Rake`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`rake = Ruby Make`}</li>\n      <li parentName=\"ul\">{`rake used extensively before Rails 5`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rails db:migrate`}</inlineCode>{` === `}<inlineCode parentName=\"li\">{`bundle exec rake db:migrate`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <p><inlineCode parentName=\"p\">{`sudo gem install rails (-v 2.3.8)`}</inlineCode></p>\n    <p>{`Or use `}<inlineCode parentName=\"p\">{`rvm`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`asdf`}</inlineCode>{`. Follow those instructions from their respective sites.`}</p>\n    <h3 {...{\n      \"id\": \"up-and-running\"\n    }}>{`Up and Running`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails new [project-name]\ncd [project-name]\nbundle install # may need to \\`bundle update\\`\nrails server # start the server on port 3000\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hello-world\"\n    }}>{`Hello World`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails new hello-world\ncd hello-world\nrails server # start server on port 3000\n`}</code></pre>\n    <p>{`To change our default page, we can update the `}<inlineCode parentName=\"p\">{`application`}</inlineCode>{` controller and `}<inlineCode parentName=\"p\">{`config/routes.rb`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# app/controllers/application_controller\nclass ApplicationController < ActionController::Base\n  def hello\n    render html: \"Hello, world!\"\n  end\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\n  root 'application#hello'\nend\n`}</code></pre>\n    <p>{`Now if we refresh the page, we should get a basic \"Hello, world!\" string!`}</p>\n    <h2 {...{\n      \"id\": \"generating-a-schema\"\n    }}>{`Generating A Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails generate scaffold User name:string email:string # generate basic User schema\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"migrating-new-schemas-to-a-database\"\n    }}>{`Migrating New Schemas To A Database`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails db:migrate\n# for older versions\nbundle exec rake db:migrate\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"crud-operations-for-the-records\"\n    }}>{`CRUD Operations For The Records`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`URL`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Purpose`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List all users`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`show`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Page to show user with ID 1`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/new`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`new`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Page to make a new user`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/1/edit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`edit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Page to edit user with ID 1`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"setting-users-to-root\"\n    }}>{`Setting /users to root`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# config/routes.rb\nRails.application.routes.draw do\n  resources :users\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\n  root 'users#index'\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"a-generated-controller\"\n    }}>{`A Generated Controller`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class UsersController < ApplicationController\n  # ...\n\n  # GET /users\n  # GET /users.json\n  def index\n    @users = User.all\n  end\n\n  # ...\nend\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@users = User.all`}</inlineCode>{` fetches all users from the database and stores them in the variable `}<inlineCode parentName=\"p\">{`@users`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"models\"\n    }}>{`Models`}</h2>\n    <p>{`Using the generated data models, we can set validations and relationships.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Micropost < ApplicationRecord\n  validates :content, length: {maximum: 140}, presence: true\n  belongs_to :user\nend\n\nclass User < ApplicationRecord\n  has_many :microposts\n  validates :content, length: {maximum: 140}\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"building-static-pages\"\n    }}>{`Building Static Pages`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`> rails generate controller StaticPages home help\nRunning via Spring preloader in process 53372\n      create  app/controllers/static_pages_controller.rb\n       route  get 'static_pages/home'\nget 'static_pages/help'\n      invoke  erb\n      create    app/views/static_pages\n      create    app/views/static_pages/home.html.erb\n      create    app/views/static_pages/help.html.erb\n      invoke  test_unit\n      create    test/controllers/static_pages_controller_test.rb\n      invoke  helper\n      create    app/helpers/static_pages_helper.rb\n      invoke    test_unit\n      invoke  assets\n      invoke    coffee\n      create      app/assets/javascripts/static_pages.coffee\n      invoke    scss\n      create      app/assets/stylesheets/static_pages.scss\n`}</code></pre>\n    <p>{`This will build a StaticPages controller and pages `}<inlineCode parentName=\"p\">{`home`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`help`}</inlineCode>{`.`}</p>\n    <p>{`Build that controller using `}<inlineCode parentName=\"p\">{`StaticPages`}</inlineCode>{` would also work if we used the snake case version `}<inlineCode parentName=\"p\">{`static_pages`}</inlineCode>{`.`}</p>\n    <p>{`We can undo things by running `}<inlineCode parentName=\"p\">{`rails destroy controller StaticPages home help`}</inlineCode>{`.`}</p>\n    <p>{`After the pages are generated, we can see it has been added to to our `}<inlineCode parentName=\"p\">{`config/routes.db`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`Rails.application.routes.draw do\n  get 'static_pages/home'\n  get 'static_pages/help'\n  # ... rest omitted for brevity\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"understanding-how-static-pages-work\"\n    }}>{`Understanding How Static Pages Work`}</h3>\n    <p>{`We can find the logic for our controller coming from `}<inlineCode parentName=\"p\">{`app/controllers/static_pages_controller.rb`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class StaticPagesController < ApplicationController\n  def home\n  end\n\n  def help\n  end\nend\n`}</code></pre>\n    <p>{`While these methods in Ruby wouldn't do much, the story is different for Rails. First of all, notice that our Controller inherits from the `}<inlineCode parentName=\"p\">{`ApplicationController`}</inlineCode>{`. Rails looks in the Static Pages controller for the URL `}<inlineCode parentName=\"p\">{`/static_pages/home`}</inlineCode>{`, executes the code in the `}<inlineCode parentName=\"p\">{`home`}</inlineCode>{` method and then renders the view.`}</p>\n    <p>{`Given the `}<inlineCode parentName=\"p\">{`home`}</inlineCode>{` action is empty, all the visit to the URL mentioned prior does is render the view.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-test-helper\"\n    }}>{`Updating The Test Helper`}</h2>\n    <p>{`If you update `}<inlineCode parentName=\"p\">{`test/test_helper.rb`}</inlineCode>{` and update the lines post-last `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` to include the following, you can use the `}<inlineCode parentName=\"p\">{`Minitest Reporter`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# ... omitted\nrequire \"minitest/reporters\"\nMinitest::Reporters.use!\n# ... omitted\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"automating-the-running-of-tests\"\n    }}>{`Automating The Running Of Tests`}</h3>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`Guard`}</inlineCode>{` to do this for us in an equivalent to `}<inlineCode parentName=\"p\">{`watch`}</inlineCode>{` mode!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`bundle exec guard init\n`}</code></pre>\n    <p>{`For the sake of Git, it is recommended to add the `}<inlineCode parentName=\"p\">{`guard/`}</inlineCode>{` folder into `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"model-relationships\"\n    }}>{`Model Relationships`}</h2>\n    <p>{`In Ruby, we can model relationships using the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rails generate model Relationship follower_id:integer followed_id:integer\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-an-index-to-db-schemas\"\n    }}>{`Adding An Index To DB Schemas`}</h2>\n    <p>{`Assuming we created the relationship in the above section, we could update the file `}<inlineCode parentName=\"p\">{`db/migrate/[timestamp]_create_relationships.rb`}</inlineCode>{` for indexes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class CreateRelationships < ActiveRecord::Migration[5.0]\n  def change\n    create_table :relationships do |t|\n      t.integer :follower_id\n      t.integer :followed_id\n      t.timestamps\n    end\n\n    # For the indexes\n    add_index :relationships, :follower_id\n    add_index :relationships, :followed_id\n    add_index :relationships, [:follower_id, :followed_id], unique: true\n  end\nend\n`}</code></pre>\n    <p>{`Re-running `}<inlineCode parentName=\"p\">{`rails db:migrate`}</inlineCode>{` will update the relationships for the database.`}</p>\n    <h3 {...{\n      \"id\": \"implementing-the-has-many-relationship\"\n    }}>{`Implementing The Has-Many Relationship`}</h3>\n    <p>{`For the example of `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{`, we can update `}<inlineCode parentName=\"p\">{`app/models/user.rb`}</inlineCode>{` to have the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# Note: dependent: :destory will remove relationships when the entity is destroyed\nclass User < ApplicationRecord\n  has_many :microposts, dependent: :destroy\n  has_many :active_relationships, class_name: \"Relationships\", foreign_key: \"follower_id\", dependent: :destroy\nend\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}