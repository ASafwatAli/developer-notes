{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md","mtime":1548282824832},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Docker/Docker-Deep-Dive.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"docker-deep-dive\"\n    }}>{`Docker Deep Dive`}</h2>\n    <hr></hr>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-deep-dive\"\n        }}>{`Docker Deep Dive`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-basics\"\n        }}>{`Docker Basics`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----working-with-multiple-images\"\n            }}>{`---- Working with Multiple Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----packaging-a-customized-container\"\n            }}>{`---- Packaging A Customized Container`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----container-commands\"\n            }}>{`---- Container Commands`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----exposing-ports\"\n            }}>{`---- Exposing ports`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#the-dockerfile-builds-and-network-configuration\"\n        }}>{`The Dockerfile, Builds and Network Configuration`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----user-and-run\"\n            }}>{`---- USER and RUN`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----env\"\n            }}>{`---- ENV`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----cmd-vs-run\"\n            }}>{`---- CMD vs RUN`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----entrypoint\"\n            }}>{`---- ENTRYPOINT`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----expose\"\n            }}>{`---- EXPOSE`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----container-volume-management\"\n            }}>{`---- Container Volume Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-network-list-and-inspect\"\n            }}>{`---- Docker Network: List and Inspect`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-network-assign-to-containers\"\n            }}>{`---- Docker Network: Assign to Containers`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-commands-and-structures\"\n        }}>{`Docker commands and structures`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----inspect-container-processes\"\n            }}>{`---- Inspect Container Processes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----previous-container-management\"\n            }}>{`---- Previous Container Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----controlling-port-exposure-on-containers\"\n            }}>{`---- Controlling Port Exposure on Containers`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----naming-containers\"\n            }}>{`---- Naming Containers`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----docker-events\"\n            }}>{`---- Docker Events`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----managing-and-removing-base-images\"\n            }}>{`---- Managing and Removing Base Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----saving-and-loading-docker-images\"\n            }}>{`---- Saving and Loading Docker Images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----image-history\"\n            }}>{`---- Image History`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----take-control-of-our-tags\"\n            }}>{`---- Take Control of Our Tags`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----pushing-to-docker-hub\"\n            }}>{`---- Pushing to Docker Hub`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#integration-and-use-cases\"\n        }}>{`Integration and Use Cases`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#-----building-a-web-farm-for-development-and-testing\"\n            }}>{`---- Building a Web Farm for Development and Testing`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"docker-basics\"\n    }}>{`Docker Basics`}</h2>\n    <h3 {...{\n      \"id\": \"-----working-with-multiple-images\"\n    }}>{`---- Working with Multiple Images`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`# i: interactive, t: tty, d: daemon mode\ndocker run -i -t -d ubuntu:latest /bin/bash\n\n# to attach to the container and edit the container\ndocker attach container_name\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"-----packaging-a-customized-container\"\n    }}>{`---- Packaging A Customized Container`}</h3>\n    <p>{`Once you are attached to a container, anytime you create files, it is now part of that container!`}</p>\n    <p>{`You can do all of your updates etc.`}</p>\n    <p>{`From here, we can commit to create a base image.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker commit -m \"This is a new image\" -a \"dennis@presentcompany.co\" dok/ubusshd:v1\n`}</code></pre>\n    <p>{`Once this is commited, it is now put to a base container! Yay!`}</p>\n    <p>{`Let's create a simple Dockerfile to give some info about us.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile - example Ubuntu example with SSH already installed\nFROM ubuntu:latest\nMAINTAINER okeeffed <dennis@presentcompany.co>\nRUN apt-get update\nRUN apt-get -y install telnet openssh-server\n`}</code></pre>\n    <p>{`For building:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# build a Dockerfile from the current location\ndocker build -t=\"dok/ubusshdonly:v2\" .\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----container-commands\"\n    }}>{`---- Container Commands`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`top # shows the processes\ndocker logs container_name #shows history for container\ndocker exec container name /bin/cat /etc/profile\n\ndocker run container name /bin/bash -c \"while true; do echo HELLO; sleep 1; done\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----exposing-ports\"\n    }}>{`---- Exposing ports`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 80:80 nginx:latest\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-dockerfile-builds-and-network-configuration\"\n    }}>{`The Dockerfile, Builds and Network Configuration`}</h2>\n    <h3 {...{\n      \"id\": \"-----user-and-run\"\n    }}>{`---- USER and RUN`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\nUSER user\n`}</code></pre>\n    <p>{`To connect as the root, you just need to start the container and run `}<inlineCode parentName=\"p\">{`docker exec -u 0 -it sleepy_allen /bin/bash`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Order of Execution`}</strong></p>\n    <p>{`We had to run a super user command to add the User. Now let's say we want to run another command.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n\nUSER user\n\n# below will give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----env\"\n    }}>{`---- ENV`}</h3>\n    <p>{`Example, let's install Java through the Dockerfile!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n\nRUN yum update -y\nRUN yum install -y net-tools wget\n\nRUN cd ~ && wget --no-cookies --no-check-certificate --header \"url\"\n\nRUN yum localinstall -y ~/java_file.rpm\n\nUSER user\n\nRUN cd ~ && echo \"export JAVA_HOME=/usr/java/jdk1.8.0/jre\" >> /home/user/.bashrc\n\n# generates env variable for everyone\nENV JAVA_BIN /usr/java/jdk1.8.0/jre/bin\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----cmd-vs-run\"\n    }}>{`---- CMD vs RUN`}</h3>\n    <p>{`Command generally sets the default command to run when there is nothing specified when container starts up.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\nCMD 'echo' 'This is a custom container message'\n\nUSER user\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----entrypoint\"\n    }}>{`---- ENTRYPOINT`}</h3>\n    <p>{`The entrypoint itself will ALWAYS be the concrete default application everytime that the container is created.`}</p>\n    <p><inlineCode parentName=\"p\">{`CMD`}</inlineCode>{` will only run when there is no argument, whereas `}<inlineCode parentName=\"p\">{`ENTRYPOINT`}</inlineCode>{` will always run.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN useradd -ms /bin/bash user\n\nENTRYPOINT echo \"This command will display this message on EVERY container that is run from it\"\n\nUSER user\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----expose\"\n    }}>{`---- EXPOSE`}</h3>\n    <p>{`EXPOSE will allow us to expose our ports.`}</p>\n    <p>{`The follow image will allow us to build a webserver and run it from basics.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo \"This is a custom index file built during the image creation\" > /var/www/html/index.html\n\nENTRYPOINT apachectl \"-DFOREGROUND\"\n`}</code></pre>\n    <p>{`However, if we don't expose any ports, then using `}<inlineCode parentName=\"p\">{`-P`}</inlineCode>{` won't automatically expose those ports. We can still forcably expose ports using \\`docker run --name apacheweb -d -p 8080:80 container`}</p>\n    <p>{`To auto-expose, we can do this...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo \"This is a custom index file built during the image creation\" > /var/www/html/index.html\n\nEXPOSE 80\n\nENTRYPOINT apachectl \"-DFOREGROUND\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----container-volume-management\"\n    }}>{`---- Container Volume Management`}</h3>\n    <p>{`How do we work with mounts and file systems?`}</p>\n    <p>{`We can mount using `}<inlineCode parentName=\"p\">{`-v`}</inlineCode>{` for mounting volumes.`}</p>\n    <p>{`Scenario One: Create a directory at launchtime called `}<inlineCode parentName=\"p\">{`mydata`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it --name voltest1 -v /mydata centos:latest /bin/bash\n# once logged in\ndf -h # shows that there is a mounted file\n\n# back from host OS terminal\ncd /var/lib/docker # will show us the volumes folder\n\n# if we docker inspect the container\n# it will show us the volume and the source\n`}</code></pre>\n    <p>{`Once we have things that are mounted, we can access them from the container and anything that we edit in the underlying host, we can see in the container!`}</p>\n    <p>{`We can't do this from the Dockerfile, because the base image is designed to be portable.`}</p>\n    <h3 {...{\n      \"id\": \"-----docker-network-list-and-inspect\"\n    }}>{`---- Docker Network: List and Inspect`}</h3>\n    <p>{`Thanks to Docker Swarm and Kubernetes, it has become easier to manage the Docker Network.`}</p>\n    <p>{`When you run a docker instance, it will auto pull the next available address.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# this will list all of the associated networks with the current host\ndocker network ls\n\ndocker network ls --no-trunc # to see the full address\n\ndocker network inspect bridge\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Creating Docker network configs`}</strong></p>\n    <p>{`To see things like a `}<inlineCode parentName=\"p\">{`man`}</inlineCode>{` page for docker, you essential just put dashes between multi-word commands.`}</p>\n    <p><inlineCode parentName=\"p\">{`man docker-network-create`}</inlineCode>{` will bring up the network create manual.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01 # /24 is everything in that network\n\ndocker network ls\n# the new bridge adapter is now there\n\n# to remove the bridge\ndocker network rm mybridge01\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-----docker-network-assign-to-containers\"\n    }}>{`---- Docker Network: Assign to Containers`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`# subnet itself can be 10.1.[1-254].[1-254] while ip-range is 10.1.4.[1-254]\n# that is class b and class c respectively\ndocker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range=10.1.4.0/24 --driver=bridge --label=host4network bridge04\n`}</code></pre>\n    <p>{`If you then inspect the new above network config, it will have those settings within that inspect config.`}</p>\n    <p>{`So how do we now use this new network?`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it --name nettest1 --net bridge04 --ip 10.1.4.100 centos:latest /bin/bash\n\n# if we docker inspect nettest1 | grep IP we can see the address set at 10.1.4.100\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"docker-commands-and-structures\"\n    }}>{`Docker commands and structures`}</h2>\n    <h3 {...{\n      \"id\": \"-----inspect-container-processes\"\n    }}>{`---- Inspect Container Processes`}</h3>\n    <p>{`From the outside, we can run `}<inlineCode parentName=\"p\">{`docker exec`}</inlineCode>{` to get some more details about the container itself.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker exec container_name /bin/ps aux | grep bash`}</inlineCode></p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`docker top`}</inlineCode>{` to see the top command run on a container.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker top container_name`}</inlineCode></p>\n    <p>{`Let's execute a command to install `}<inlineCode parentName=\"p\">{`sshd`}</inlineCode>{`. We could attach to container and do so, but we have a few options. Instead of attaching, we could do the following:`}</p>\n    <p><inlineCode parentName=\"p\">{`docker exec -i -t container_name /bin/bash`}</inlineCode></p>\n    <p>{`This will ensure that the container doesn't stop, but will actually run two instances of `}<inlineCode parentName=\"p\">{`bash`}</inlineCode>{`. We can verify this by looking at the container processes.`}</p>\n    <p>{`So far, this can give us a momentary snap shot.`}</p>\n    <p><strong parentName=\"p\">{`See the history of previous processes and performances`}</strong></p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`docker stats`}</inlineCode>{` to see a live set of information for that container.`}</p>\n    <p><inlineCode parentName=\"p\">{`dock stats container_name`}</inlineCode></p>\n    <p>{`This will keep a view that is constantly updated to see what is going on.`}</p>\n    <h3 {...{\n      \"id\": \"-----previous-container-management\"\n    }}>{`---- Previous Container Management`}</h3>\n    <p>{`Just to see the previous containers not running with just their ids, we can run `}<inlineCode parentName=\"p\">{`docker ps -a -q`}</inlineCode></p>\n    <p>{`Of course, for removing older containers, we can `}<inlineCode parentName=\"p\">{`docker rm`}</inlineCode>{` previous containers.`}</p>\n    <p>{`We can also remove containers from the `}<inlineCode parentName=\"p\">{`/var/lib/docker`}</inlineCode>{` folder as the super user. If you do it this way, you want to ensure that you have `}<inlineCode parentName=\"p\">{`systemctl stop/restart docker`}</inlineCode>{` to ensure that there aren't any issues with Docker.`}</p>\n    <h3 {...{\n      \"id\": \"-----controlling-port-exposure-on-containers\"\n    }}>{`---- Controlling Port Exposure on Containers`}</h3>\n    <p>{`In this example, start up a nginx container in daemon mode without remapping the ports.`}</p>\n    <p>{`Again, we can inspect this container to find the IP etc. We know that we can get anything remapped to the localhost currently because there is no remapping.`}</p>\n    <p>{`In contrast, we can use `}<inlineCode parentName=\"p\">{`-P`}</inlineCode>{` to expose the ports and it will auto remap to high port value.`}</p>\n    <p><inlineCode parentName=\"p\">{`-p 8080:80`}</inlineCode>{` will be use defining the port that we want to expose it to.`}</p>\n    <p>{`If we want to define a certain interface eg. localhost...`}</p>\n    <p><inlineCode parentName=\"p\">{`docker run -itd -p 127.0.01:8081:80 nginx:latest`}</inlineCode>{` would ONLY allow localhost to access this site.`}</p>\n    <h3 {...{\n      \"id\": \"-----naming-containers\"\n    }}>{`---- Naming Containers`}</h3>\n    <p>{`To rename containers, we can run `}<inlineCode parentName=\"p\">{`docker rename currentname newname`}</inlineCode>{` - you can even rename container IDs, although there is likely no point.`}</p>\n    <p>{`You can also rename running containers!`}</p>\n    <h3 {...{\n      \"id\": \"-----docker-events\"\n    }}>{`---- Docker Events`}</h3>\n    <p>{`How can we monitor certain events?`}</p>\n    <p>{`Startup a few containers.`}</p>\n    <p>{`When we interact with them, certain events are generated.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`docker events`}</inlineCode>{`, it will begin a program to wait and register certain events.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`docker events --since '1h'`}</inlineCode>{`, we can then see all the events that have happened in the last hour.`}</p>\n    <p>{`If we run just `}<inlineCode parentName=\"p\">{`docker events`}</inlineCode>{` and run a `}<inlineCode parentName=\"p\">{`dok exec -it mycontainerid /bin/bash`}</inlineCode>{` command, we will then see those events registered. This is useful for debugging and monitoring the entire host.`}</p>\n    <p>{`We may not care about every event though. What happens if we just care about an attachment?`}</p>\n    <p><inlineCode parentName=\"p\">{`docker events --filter <keyword>`}</inlineCode>{` can then be used to filter for events we care about.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker events --filter event=attach`}</inlineCode></p>\n    <p>{`We can also filter for multiple events with multiple `}<inlineCode parentName=\"p\">{`--filter event=<event>`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"-----managing-and-removing-base-images\"\n    }}>{`---- Managing and Removing Base Images`}</h3>\n    <p>{`If you remove an image by name, then if there is a double up of the same ID, it will just remove the named image - however an ID removal will warn you if they share the ID. They only way to remove all of them is to use the force `}<inlineCode parentName=\"p\">{`-f`}</inlineCode>{` flag.`}</p>\n    <h3 {...{\n      \"id\": \"-----saving-and-loading-docker-images\"\n    }}>{`---- Saving and Loading Docker Images`}</h3>\n    <p><strong parentName=\"p\">{`Saving`}</strong></p>\n    <p>{`When we pull images, we can pull from local or from Docker Hub. You will use base of an official release usually etc.`}</p>\n    <p>{`How can we manage our custom images? We can `}<inlineCode parentName=\"p\">{`tar`}</inlineCode>{` any file and migrate it to another compute etc.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker commit containername centos:mine`}</inlineCode></p>\n    <p>{`This will allow us to save the image but remove the containers!`}</p>\n    <p>{`We can use`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker save --output centos.latest.tar centos:latest\n`}</code></pre>\n    <p>{`If you `}<inlineCode parentName=\"p\">{`ls`}</inlineCode>{` the tar file, it will give you details about the image/container.`}</p>\n    <p><strong parentName=\"p\">{`Restoring`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`docker load --input centos.latest.tar`}</inlineCode></p>\n    <p>{`If we have `}<inlineCode parentName=\"p\">{`gzip`}</inlineCode>{` a tar file, we can also load it directly from the `}<inlineCode parentName=\"p\">{`.tar.gz`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"-----image-history\"\n    }}>{`---- Image History`}</h3>\n    <p>{`How can we get the history of the base image?`}</p>\n    <p><inlineCode parentName=\"p\">{`docker history imagename`}</inlineCode></p>\n    <p>{`This will give us a list of commands etc.`}</p>\n    <h3 {...{\n      \"id\": \"-----take-control-of-our-tags\"\n    }}>{`---- Take Control of Our Tags`}</h3>\n    <p>{`Changes in the container is what is kept in storage layering.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker tag imageid mine/centos:v1.0`}</inlineCode>{` - this will create a new image with the repo tag.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker tag mine/centos:v1.0 dok.example.com/centos:v1.0b`}</inlineCode>{` will do the same.`}</p>\n    <h3 {...{\n      \"id\": \"-----pushing-to-docker-hub\"\n    }}>{`---- Pushing to Docker Hub`}</h3>\n    <p><inlineCode parentName=\"p\">{`docker login --username=name`}</inlineCode>{` throw in the password and you'll be authenticated.`}</p>\n    <p>{`One authenticated, `}<inlineCode parentName=\"p\">{`docker push image`}</inlineCode></p>\n    <p>{`Of course, to bring it back down, you will hit `}<inlineCode parentName=\"p\">{`docker pull name`}</inlineCode></p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"integration-and-use-cases\"\n    }}>{`Integration and Use Cases`}</h2>\n    <h3 {...{\n      \"id\": \"-----building-a-web-farm-for-development-and-testing\"\n    }}>{`---- Building a Web Farm for Development and Testing`}</h3>\n    <p><em parentName=\"p\">{`Prerequisites`}</em></p>\n    <p>{`So far, we have not had a specific purpose for Docker containers. These following examples are for real world use cases.`}</p>\n    <p>{`Set up a web farm with two Apache web nodes on port 80 - both sharing one or more file systems.`}</p>\n    <p><em parentName=\"p\">{`Part One`}</em></p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}