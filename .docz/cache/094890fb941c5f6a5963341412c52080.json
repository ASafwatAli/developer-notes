{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md","mtime":1548209344332},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"reading-the-d3-documentation\"}},\"Reading the D3 Documentation\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"- [Reading the D3 Documentation](#reading-the-d3-documentation)\\n- [map() and filter() methods](#map-and-filter-methods)\\n- [d3 methods](#d3-methods)\\n- [Programmatic SVGs](#programmatic-svgs)\\n- [Scaling Data](#scaling-data)\\n- [Styling with CSS](#styling-with-css)\\n- [Adding Text to the chart](#adding-text-to-the-chart)\\n- [Using SVG groups](#using-svg-groups)\\n\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#section-4-making-a-complex-chart\"}},\"Section 4: Making a Complex Chart\"),React.createElement(MDXTag,{name:\"ul\",components:components,parentName:\"li\"},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#working-with-arrays-of-objects\"}},\"Working with Arrays of Objects\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#creating-an-ordinal-scale\"}},\"Creating an Ordinal Scale\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#setting-colour-with-colour-scales\"}},\"Setting colour with colour scales\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#adding-x-and-y-axis\"}},\"Adding X and Y axis\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#flipping-the-axes\"}},\"Flipping the axes\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#adding-gridlines\"}},\"Adding Gridlines\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#rotating-the-x-axis-titles\"}},\"Rotating the X axis titles\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#adding-axis-labels\"}},\"Adding axis labels\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#updating-the-plot-function-with-best-practises\"}},\"Updating the plot function with best practises\")))),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"#secontion-5-making-the-chart-interactive\"}},\"Secontion 5: Making the Chart Interactive\"))),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"API Documentation is a great link to bookmark\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"map-and-filter-methods\"}},\"map() and filter() methods\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [123, 52, 46, 30, 4];\\n\\nconst results = data.filter((entry) => {\\n    return entry > 50;\\n});\\n\\nconst mapping = data.map((entry) => {\\n    console.log(entry.key);\\n    console.log(entry.value);\\n});\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"d3-methods\"}},\"d3 methods\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"const example = d3.min(data);\\nconsole.log(example);       // values returned\\n\\nconst dataLoHiValue = d3.extent(data);  // return min/max as array\\n\\nvar dictMinValue = d3.min(dounts, (d, i) {\\n    return d.value;\\n});\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"programmatic-svgs\"}},\"Programmatic SVGs\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [132,71,337,93,78,43,20,16,30,8,17,21];\\nlet svg = d3.select('body').append('svg')\\n                .attr('id', 'chart')\\n                .attr('height', 450)\\n                .attr('width', 800);\\n\\n// creating the bars\\n// vertical bar graph\\nsvg.selectAll('.bar')\\n    .data(data)\\n    .enter()                // enter phase\\n    .append('rect')\\n    .attr('class', 'bar')   // for future selections\\n    .attr('x', 0)\\n    .attr('y', (d i) => {\\n        return i * 20;\\n    })\\n    .attr('width', (d, i) => {\\n        return d;\\n    })\\n    .attr('height', 19);\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"scaling-data\"}},\"Scaling Data\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Creating scaling functions for both x and y.\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, w]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, h]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\n// creating the bars\\n// vertical bar graph\\nsvg\\n    .selectAll('.bar')\\n    .data(data)\\n    .enter() // enter phase\\n    .append('rect')\\n    .attr('class', 'bar') // for future selections\\n    .attr('x', 0)\\n    .attr('y', (d, i) => {\\n        return y(i);\\n    })\\n    .attr('width', (d, i) => {\\n        return x(d); // x() does the scaling\\n    })\\n    .attr('height', (d, i) => {\\n        return y(1) - 1;\\n    });\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"styling-with-css\"}},\"Styling with CSS\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Getting rid of the aliasing\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-css\"}},\".bar {\\n    fill: purple;\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Not that \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"attr('class', 'bar')\"),\" will manually reset the class value, so you can also use \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\".classed('bar', true)\"),\" - true to add the class, false to remove.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"adding-text-to-the-chart\"}},\"Adding Text to the chart\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Creating scaling functions for both x and y.\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, w]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, h]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d;\\n        });\\n}\\n\\n// first arg will be what is referenced by \\\"this\\\"\\nplot.call(svg, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"using-svg-groups\"}},\"Using SVG groups\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"SVG groups are like a div that are a convenience element to allow children to be moved and affected together.\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, width]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, height]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\nlet chart = svg\\n    .append('g')\\n    .classed('display', true)\\n    .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d;\\n        });\\n}\\n\\n// first arg will be what is referenced by \\\"this\\\"\\nplot.call(chart, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"section-4-making-a-complex-chart\"}},\"Section 4: Making a Complex Chart\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"working-with-arrays-of-objects\"}},\"Working with Arrays of Objects\"),React.createElement(MDXTag,{name:\"p\",components:components},\"If working with a dict, we need an accessor function!\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"var data = [\\n    { key: 'Glazed', value: 132 },\\n    { key: 'Jelly', value: 71 },\\n    { key: 'Holes', value: 337 },\\n    { key: 'Sprinkles', value: 93 },\\n    { key: 'Crumb', value: 78 },\\n    { key: 'Chocolate', value: 43 },\\n    { key: 'Coconut', value: 20 },\\n    { key: 'Cream', value: 16 },\\n    { key: 'Cruller', value: 30 },\\n    { key: '\\xC9clair', value: 8 },\\n    { key: 'Fritter', value: 17 },\\n    { key: 'Bearclaw', value: 21 }\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale\\n    .linear()\\n    .domain([\\n        0,\\n        d3.max(data, (d) => {\\n            return d.value;\\n        })\\n    ])\\n    .range([0, width]);\\n\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, height]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('width', 800)\\n    .attr('height', 420)\\n    .attr('id', 'chart');\\nlet chart = svg\\n    .append('g')\\n    .classed('display', true)\\n    .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"creating-an-ordinal-scale\"}},\"Creating an Ordinal Scale\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n    })])\\n        .range([0, width]);\\nvar y = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"setting-colour-with-colour-scales\"}},\"Setting colour with colour scales\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n    })])\\n        .range([0, width]);\\nvar y = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\n// alter colours using linear scale\\nlet linearColorScale = d3.scale.linear()\\n                        .domain([0, data.length])\\n                        .range(['#572500', '#F68026']);\\n\\n// ordinal for distinct colours\\nlet ordinalColorScale = d3.scale.category20();\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"adding-x-and-y-axis\"}},\"Adding X and Y axis\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// after the colour scales\\n\\nlet xAxis = d3.svg.axis()           // svg portion of the d3 library\\n                .scale(x)\\n                .orient('bottom');\\n\\nlet yAxis = d3.svg.axis()\\n                .scale(y)\\n                .orient('left');\\n\\n...\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n    this.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis);\\n    this.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"flipping-the-axes\"}},\"Flipping the axes\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How to create a column chart?\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"height needs to take an offset\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"other values essentially invert\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"text anchor will be \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"middle\"),\" in css\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\nlet y = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n        })])\\n        .range([height, 0]);    // IMPORTANT CHANGE FROM [0, width]\\n\\n// alter colours using linear scale\\nlet linearColorScale = d3.scale.linear()\\n                        .domain([0, data.length])\\n                        .range(['#572500', '#F68026']);\\n\\n// ordinal for distinct colours\\nlet ordinalColorScale = d3.scale.category20();\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', (d, i) => {\\n            return x(d.key);\\n        })\\n        .attr('y', (d, i) => {\\n            return y(d.value);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return x.rangeBand();\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n\\n        this.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis);\\n        this.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"adding-gridlines\"}},\"Adding Gridlines\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"var yGridlines = d3.svg.axis()              // create another \\\"axis\\\"\\n                    .scale(y)\\n                    .tickSize(-width, 0, 0)             // used to adjust the axis\\n                    .tickFormat('')\\n                    .orient('left');\\n\\n// add these grid lines with the call function at the start of the plot function\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The grid lines also need to be styled! Hit up the CSS file to do this.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\".gridline path,\\n.gridline line {\\n    fill: none;\\n    color: blue;\\n    shape-rendering: crispEdges;\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"rotating-the-x-axis-titles\"}},\"Rotating the X axis titles\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"...\\nthis.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis)\\n                .selectAll('text')\\n                    .style('text-anchor', 'end')\\n                    .attr('dx', -8)\\n                    .attr('dy', 8)\\n                    .attr('transform', 'translate(0,0), rotate(-45)');\\nthis.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n...\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"adding-axis-labels\"}},\"Adding axis labels\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// within the plot function at the bottom\\n\\nthis.select('.y.axis')\\n    .append('text')\\n    .attr('x', 0)\\n    .attr('y', 0)\\n    .style('text-anchor', 'middle')\\n    .attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\\n    .text('Units sold');\\n\\nthis.select('.x.axis')\\n    .append('text')\\n    .attr('x', 0)\\n    .attr('y', 0)\\n    .style('text-anchor', 'middle')\\n    .attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\\n    .text('Donut Type');\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"updating-the-plot-function-with-best-practises\"}},\"Updating the plot function with best practises\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Add new parameter entries.\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"plot.call(chart, {\\n    data: data,\\n    axis: {\\n        x: xAxis,\\n        y: yAxis\\n    },\\n    gridlines: yGridlines\\n}\\n})\\n\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"secontion-5-making-the-chart-interactive\"}},\"Secontion 5: Making the Chart Interactive\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Sorting data using things like buttons.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Similary to jquery, with have d3 methods like \\\"on\\\"\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Using the '+' prefix will convert the string to a number\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"To show updated \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"data\"),\" changes, we need to know about the phases // enter(), update(), exit()\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"you must update the domains when you update data!\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// do for all elements we wish to remove\\nthis.selectAll('.bar')\\n    .data(params.data)\\n    .exit()\\n    .remove();\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"reading-the-d3-documentation\"}}>{`Reading the D3 Documentation`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`- [Reading the D3 Documentation](#reading-the-d3-documentation)\n- [map() and filter() methods](#map-and-filter-methods)\n- [d3 methods](#d3-methods)\n- [Programmatic SVGs](#programmatic-svgs)\n- [Scaling Data](#scaling-data)\n- [Styling with CSS](#styling-with-css)\n- [Adding Text to the chart](#adding-text-to-the-chart)\n- [Using SVG groups](#using-svg-groups)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#section-4-making-a-complex-chart\"}}>{`Section 4: Making a Complex Chart`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#working-with-arrays-of-objects\"}}>{`Working with Arrays of Objects`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#creating-an-ordinal-scale\"}}>{`Creating an Ordinal Scale`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#setting-colour-with-colour-scales\"}}>{`Setting colour with colour scales`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-x-and-y-axis\"}}>{`Adding X and Y axis`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#flipping-the-axes\"}}>{`Flipping the axes`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-gridlines\"}}>{`Adding Gridlines`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#rotating-the-x-axis-titles\"}}>{`Rotating the X axis titles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-axis-labels\"}}>{`Adding axis labels`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#updating-the-plot-function-with-best-practises\"}}>{`Updating the plot function with best practises`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#secontion-5-making-the-chart-interactive\"}}>{`Secontion 5: Making the Chart Interactive`}</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`API Documentation is a great link to bookmark`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"map-and-filter-methods\"}}>{`map() and filter() methods`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [123, 52, 46, 30, 4];\n\nconst results = data.filter((entry) => {\n    return entry > 50;\n});\n\nconst mapping = data.map((entry) => {\n    console.log(entry.key);\n    console.log(entry.value);\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"d3-methods\"}}>{`d3 methods`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const example = d3.min(data);\nconsole.log(example);       // values returned\n\nconst dataLoHiValue = d3.extent(data);  // return min/max as array\n\nvar dictMinValue = d3.min(dounts, (d, i) {\n    return d.value;\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"programmatic-svgs\"}}>{`Programmatic SVGs`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132,71,337,93,78,43,20,16,30,8,17,21];\nlet svg = d3.select('body').append('svg')\n                .attr('id', 'chart')\n                .attr('height', 450)\n                .attr('width', 800);\n\n// creating the bars\n// vertical bar graph\nsvg.selectAll('.bar')\n    .data(data)\n    .enter()                // enter phase\n    .append('rect')\n    .attr('class', 'bar')   // for future selections\n    .attr('x', 0)\n    .attr('y', (d i) => {\n        return i * 20;\n    })\n    .attr('width', (d, i) => {\n        return d;\n    })\n    .attr('height', 19);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"scaling-data\"}}>{`Scaling Data`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Creating scaling functions for both x and y.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\n// creating the bars\n// vertical bar graph\nsvg\n    .selectAll('.bar')\n    .data(data)\n    .enter() // enter phase\n    .append('rect')\n    .attr('class', 'bar') // for future selections\n    .attr('x', 0)\n    .attr('y', (d, i) => {\n        return y(i);\n    })\n    .attr('width', (d, i) => {\n        return x(d); // x() does the scaling\n    })\n    .attr('height', (d, i) => {\n        return y(1) - 1;\n    });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"styling-with-css\"}}>{`Styling with CSS`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Getting rid of the aliasing`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-css\"}}>{`.bar {\n    fill: purple;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Not that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`attr('class', 'bar')`}</MDXTag>{` will manually reset the class value, so you can also use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.classed('bar', true)`}</MDXTag>{` - true to add the class, false to remove.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-text-to-the-chart\"}}>{`Adding Text to the chart`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Creating scaling functions for both x and y.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(svg, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"using-svg-groups\"}}>{`Using SVG groups`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`SVG groups are like a div that are a convenience element to allow children to be moved and affected together.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, width]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"section-4-making-a-complex-chart\"}}>{`Section 4: Making a Complex Chart`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"working-with-arrays-of-objects\"}}>{`Working with Arrays of Objects`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If working with a dict, we need an accessor function!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [\n    { key: 'Glazed', value: 132 },\n    { key: 'Jelly', value: 71 },\n    { key: 'Holes', value: 337 },\n    { key: 'Sprinkles', value: 93 },\n    { key: 'Crumb', value: 78 },\n    { key: 'Chocolate', value: 43 },\n    { key: 'Coconut', value: 20 },\n    { key: 'Cream', value: 16 },\n    { key: 'Cruller', value: 30 },\n    { key: 'Éclair', value: 8 },\n    { key: 'Fritter', value: 17 },\n    { key: 'Bearclaw', value: 21 }\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([\n        0,\n        d3.max(data, (d) => {\n            return d.value;\n        })\n    ])\n    .range([0, width]);\n\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('width', 800)\n    .attr('height', 420)\n    .attr('id', 'chart');\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-an-ordinal-scale\"}}>{`Creating an Ordinal Scale`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"setting-colour-with-colour-scales\"}}>{`Setting colour with colour scales`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-x-and-y-axis\"}}>{`Adding X and Y axis`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// after the colour scales\n\nlet xAxis = d3.svg.axis()           // svg portion of the d3 library\n                .scale(x)\n                .orient('bottom');\n\nlet yAxis = d3.svg.axis()\n                .scale(y)\n                .orient('left');\n\n...\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n    this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n    this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"flipping-the-axes\"}}>{`Flipping the axes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How to create a column chart?`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`height needs to take an offset`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`other values essentially invert`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`text anchor will be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`middle`}</MDXTag>{` in css`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet y = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n        })])\n        .range([height, 0]);    // IMPORTANT CHANGE FROM [0, width]\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', (d, i) => {\n            return x(d.key);\n        })\n        .attr('y', (d, i) => {\n            return y(d.value);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return x.rangeBand();\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n\n        this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n        this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-gridlines\"}}>{`Adding Gridlines`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var yGridlines = d3.svg.axis()              // create another \"axis\"\n                    .scale(y)\n                    .tickSize(-width, 0, 0)             // used to adjust the axis\n                    .tickFormat('')\n                    .orient('left');\n\n// add these grid lines with the call function at the start of the plot function\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The grid lines also need to be styled! Hit up the CSS file to do this.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`.gridline path,\n.gridline line {\n    fill: none;\n    color: blue;\n    shape-rendering: crispEdges;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"rotating-the-x-axis-titles\"}}>{`Rotating the X axis titles`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`...\nthis.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis)\n                .selectAll('text')\n                    .style('text-anchor', 'end')\n                    .attr('dx', -8)\n                    .attr('dy', 8)\n                    .attr('transform', 'translate(0,0), rotate(-45)');\nthis.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n...\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-axis-labels\"}}>{`Adding axis labels`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// within the plot function at the bottom\n\nthis.select('.y.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\n    .text('Units sold');\n\nthis.select('.x.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\n    .text('Donut Type');\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"updating-the-plot-function-with-best-practises\"}}>{`Updating the plot function with best practises`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Add new parameter entries.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`plot.call(chart, {\n    data: data,\n    axis: {\n        x: xAxis,\n        y: yAxis\n    },\n    gridlines: yGridlines\n}\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"secontion-5-making-the-chart-interactive\"}}>{`Secontion 5: Making the Chart Interactive`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Sorting data using things like buttons.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Similary to jquery, with have d3 methods like \"on\"`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Using the '+' prefix will convert the string to a number`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`To show updated `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`data`}</MDXTag>{` changes, we need to know about the phases // enter(), update(), exit()`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`you must update the domains when you update data!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// do for all elements we wish to remove\nthis.selectAll('.bar')\n    .data(params.data)\n    .exit()\n    .remove();\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}