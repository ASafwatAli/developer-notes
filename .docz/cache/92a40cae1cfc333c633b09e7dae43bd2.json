{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md","mtime":1562563032061},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJyYW5kb20tZm9yZXN0LXJlZ3Jlc3Npb24ifSwiUmFuZG9tIEZvcmVzdCBSZWdyZXNzaW9uIiksbWR4KCJoMiIseyJpZCI6ImludHVpdGlvbiJ9LCJJbnR1aXRpb24iKSxtZHgoInAiLG51bGwsIlJhbmRvbSBmb3Jlc3QgaXMgYSB2ZXJzaW9uIG9mIGVuc2VtYmxlIGxlYXJuaW5nLiIpLG1keCgicCIsbnVsbCwiSXQncyB3aGVuIHlvdSB0YWtlIHRoZSBzYW1lIGFsZ29yaXRobSBtdWx0aXBsZSB0aW1lcyBhbmQgY3JlYXRlIHNvbWV0aGluZyBtb3JlIHBvd2VyZnVsLiIpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiU3RlcHMiKSksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUGljayBhdCByYW5kb20gSyBkYXRhIHBvaW50cyBmcm9tIHRoZSBUcmFpbmluZyBTZXQuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkJ1aWxkIHRoZSBEZWNpc2lvbiBUcmVlIGFzc29jaWF0ZWQgdG8gdGhlc2UgSyBkYXRhIHBvaW50cy4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ2hvb3NlIHRoZSBudW1iZXIgTnRyZWUgb2YgdHJlZXMgeW91IHdhbnQgdG8gYnVpbGQgYW5kIHJlcGVhdCBzdGVwcyAxIGFuZCAyLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJGb3IgYSBuZXcgZGF0YSBwb2ludCwgbWFrZSBlYWNoIG9uZSBvZiB5b3VyIE50cmVlIHRyZWVzIHByZWRpY3QgdGhlIHZhbHVlIG9mICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiWSIpLCIgZm9yIHRoZSBkYXRhIHBvaW50IGluIHF1ZXN0aW9uLCBhbmQgYXNzaWduIHRoZSBuZXcgZGF0YSBwb2ludCB0aGUgYXZlcmFnZSBhY3Jvc3MgYWxsIHRoZSBwcmVkaWN0ZWQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJZIiksIiB2YWx1ZXMuIikpLG1keCgicCIsbnVsbCwiRG9pbmcgdGhpcyBhbGxvd3MgeW91IHRvIGltcHJvdmUgdGhlIGFjY3VyYWN5IG9mIHlvdXIgcHJlZGljdGlvbi4iKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIkV4YW1wbGUiKSksbWR4KCJwIixudWxsLCJIb3cgbWFueSBsb2xsaWVzIGluIGEgamFyPyBJbWFnaW5lIHRha2luZyBub3RlcyBvZiBldmVyeSBndWVzcyAtIGdldHRpbmcgYXJvdW5kIDEwMDAgYW5kIHRoZW4gYmVnaW5uaW5nIHRvIGF2ZXJhZ2UgdGhlbSBvdXQgb3IgdGFrZSB0aGUgbWVkaWFuLiBTdGF0aXN0aWNhbGx5IHNwZWFraW5nLCB5b3UgaGF2ZSBhIGhpZ2hseSBsaWtlbGlob29kIG9mIGJlaW5nIGNsb3NlciB0byB0aGUgdHJ1dGguIiksbWR4KCJwIixudWxsLCJPbmNlIHlvdSBoaXQgdGhlIG1pZGRsZSBvZiB0aGUgbm9ybWFsIGRpc3RyaWJ1dGlvbiwgeW91IGFyZSBtb3JlIGxpa2VseSB0byBiZSBvbiB0aGUgbW9uZXkgZm9yIHRoZSBndWVzcy4iKSxtZHgoImgyIix7ImlkIjoicHl0aG9uIn0sIlBZVEhPTiIpLG1keCgicCIsbnVsbCwiVGhpcyBpcyB0aGUgbGFzdCByZWdyZXNzaW9uIG1vZGVsLiBJZiB5b3UgdW5kZXJzdGFuZCBkZWNpc2lvbiB0cmVlIHJlZ3Jlc3Npb24sIHlvdSdsbCB1bmRlcnN0YW5kIHJhbmRvbSBmb3Jlc3QuIiksbWR4KCJwIixudWxsLCJGcm9tIGRlY2lzaW9uIHRyZWUsIHdlIGtub3cgdGhhdCB3ZSB3aWxsIG5lZWQgdGhlIHZpc3VhbGlzYXRpb24gdXNpbmcgdGhlIG5vbi1jb250aW51b3VzIHJlc3VsdC4iKSxtZHgoInAiLG51bGwsIkZvciB0aGUgcmVncmVzc29yLCB3ZSB1c2UgUmFuZG9tRm9yZXN0UmVncmVzc29yIGxpYnJhcnkuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5dGhvbiJ9KSwiIyBQcmVkaWNpdGluZyB0aGUgUmFuZG9tIEZvcmVzdCByZXN1bHRzXG4jIENyZWF0ZSB0aGUgUmVncmVzc29yXG5mcm9tIHNrbGVhcm4uZW5zZW1ibGUgaW1wb3J0IFJhbmRvbUZvcmVzdFJlZ3Jlc3NvclxucmVncmVzc29yID0gUmFuZG9tRm9yZXN0UmVncmVzc29yKHJhbmRvbV9zdGF0ZT0wKVxucmVncmVzc29yLmZpdChYLCB5KVxuIikpLG1keCgicCIsbnVsbCwiU2ltcGx5LCB3aXRoIHRoZXNlIGxpbmVzLCB3ZSBjYW4gYWxyZWFkeSBkZXRlcm1pbmUgdGhhdCB0aGUgZ3JhcGggaXMgbm8gbG9uZ2VyIGNvbnRpbnVvdXMuIiksbWR4KCJwIixudWxsLCJCeSBoYXZpbmcgc2V2ZXJhbCBkZWNpc2lvbiB0cmVlcywgd2UgZW5kIHVwIHdpdGggYSBsb3QgbW9yZSBcInN0ZXBzXCIgdGhhbiB3ZSBoYWQgd2l0aCBqdXN0IG9uZSBkZWNpc2lvbiB0cmVlLiIpLG1keCgicCIsbnVsbCwiTW9yZSB0cmVlICE9PSBtb3JlIHN0ZXBzLiBUaGUgbW9yZSB0cmVlcyB5b3UgaGF2ZSwgdGhlIG1vcmUgdGhlIGF2ZXJhZ2Ugd2lsbCBjb252ZXJnZSB0b3dhcmRzIHRoZSBzYW1lIGF2ZXJhZ2UuIiksbWR4KCJwIixudWxsLCJHZW5lcmFsbHkgdGhlIHN0ZXBzIHdpbGwgYmVjb21lIGJldHRlciBwbGFjZWQgZGVwZW5kaW5nIG9uIHRoZSBhdmVyYWdlLiIpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvTWFjaGluZS1MZWFybmluZy9NTC1SYW5kb20tRm9yZXN0LVJlZ3Jlc3Npb24ubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Machine-Learning/ML-Random-Forest-Regression.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,0BADA,CAAR,4BADK,CAIL,SAAQ,CACN,KAAM,WADA,CAAR,aAJK,CAOL,gEAPK,CAQL,wGARK,CASL,aAAG,cAAQ,UAAU,CAAC,GAAnB,UAAH,CATK,CAUL,cACE,UAAI,UAAU,CAAC,IAAf,wDADF,CAEE,UAAI,UAAU,CAAC,IAAf,+DAFF,CAGE,UAAI,UAAU,CAAC,IAAf,iFAHF,CAIE,UAAI,UAAU,CAAC,IAAf,kFAAqG,kBAAY,UAAU,CAAC,IAAvB,MAArG,wGAA2P,kBAAY,UAAU,CAAC,IAAvB,MAA3P,YAJF,CAVK,CAgBL,iFAhBK,CAiBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,YAAH,CAjBK,CAkBL,kPAlBK,CAmBL,yHAnBK,CAoBL,SAAQ,CACN,KAAM,QADA,CAAR,UApBK,CAuBL,+HAvBK,CAwBL,gHAxBK,CAyBL,wEAzBK,CA0BL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,kMAAL,CA1BK,CAkCL,0GAlCK,CAmCL,8HAnCK,CAoCL,+HApCK,CAqCL,uFArCK,CAAP,CAuCD,C,kSAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"random-forest-regression\"\n    }}>{`Random Forest Regression`}</h1>\n    <h2 {...{\n      \"id\": \"intuition\"\n    }}>{`Intuition`}</h2>\n    <p>{`Random forest is a version of ensemble learning.`}</p>\n    <p>{`It's when you take the same algorithm multiple times and create something more powerful.`}</p>\n    <p><strong parentName=\"p\">{`Steps`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Pick at random K data points from the Training Set.`}</li>\n      <li parentName=\"ol\">{`Build the Decision Tree associated to these K data points.`}</li>\n      <li parentName=\"ol\">{`Choose the number Ntree of trees you want to build and repeat steps 1 and 2.`}</li>\n      <li parentName=\"ol\">{`For a new data point, make each one of your Ntree trees predict the value of `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` for the data point in question, and assign the new data point the average across all the predicted `}<inlineCode parentName=\"li\">{`Y`}</inlineCode>{` values.`}</li>\n    </ol>\n    <p>{`Doing this allows you to improve the accuracy of your prediction.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <p>{`How many lollies in a jar? Imagine taking notes of every guess - getting around 1000 and then beginning to average them out or take the median. Statistically speaking, you have a highly likelihood of being closer to the truth.`}</p>\n    <p>{`Once you hit the middle of the normal distribution, you are more likely to be on the money for the guess.`}</p>\n    <h2 {...{\n      \"id\": \"python\"\n    }}>{`PYTHON`}</h2>\n    <p>{`This is the last regression model. If you understand decision tree regression, you'll understand random forest.`}</p>\n    <p>{`From decision tree, we know that we will need the visualisation using the non-continuous result.`}</p>\n    <p>{`For the regressor, we use RandomForestRegressor library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Prediciting the Random Forest results\n# Create the Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(random_state=0)\nregressor.fit(X, y)\n`}</code></pre>\n    <p>{`Simply, with these lines, we can already determine that the graph is no longer continuous.`}</p>\n    <p>{`By having several decision trees, we end up with a lot more \"steps\" than we had with just one decision tree.`}</p>\n    <p>{`More tree !== more steps. The more trees you have, the more the average will converge towards the same average.`}</p>\n    <p>{`Generally the steps will become better placed depending on the average.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}