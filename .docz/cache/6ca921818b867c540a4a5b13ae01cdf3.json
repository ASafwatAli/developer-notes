{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Python/Examples.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Python/Examples.md","mtime":1580448686782},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1B5dGhvbi9FeGFtcGxlcy5tZCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgovKiBAanN4IG1keCAqLwppbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnOwppbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0JzsKLyogQGpzeCBtZHggKi8KCnZhciBtYWtlU2hvcnRjb2RlID0gZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHsKICAgIGNvbnNvbGUud2FybigiQ29tcG9uZW50ICIgKyBuYW1lICsgIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7CiAgICByZXR1cm4gbWR4KCJkaXYiLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogOQogICAgICB9LAogICAgICBfX3NlbGY6IHRoaXMKICAgIH0pKTsKICB9Owp9OwoKdmFyIGxheW91dFByb3BzID0ge307CnZhciBNRFhMYXlvdXQgPSAid3JhcHBlciI7CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZikgewogIHZhciBjb21wb25lbnRzID0gX3JlZi5jb21wb25lbnRzLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImNvbXBvbmVudHMiXSk7CgogIHJldHVybiBtZHgoTURYTGF5b3V0LCBPYmplY3QuYXNzaWduKHt9LCBsYXlvdXRQcm9wcywgcHJvcHMsIHsKICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsCiAgICBtZHhUeXBlOiAiTURYTGF5b3V0IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksIG1keCgiaDEiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJweXRob24tZXhhbXBsZXMiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlB5dGhvbiBFeGFtcGxlcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUaGlzIHNlY3Rpb24gaXMganVzdCBhIGNvbGxlY3RvbiBvZiBpbnRlcmVzdGluZyByZWFsIHdvcmxkIHNjcmlwdHMgdGhhdCB3ZXJlIHVzZWQgZm9yIG9uZSByZWFzb24gZm9yIGFub3RoZXIuIiksIG1keCgiaDIiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJzZW50cnktc2NyaXB0LXctZGF0ZXRpbWUtcmVxdWVzdHMtY3N2LW11bHRpcHJvY2Vzc2luZy1hbmQtdGhyZWFkaW5nIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJTZW50cnkgU2NyaXB0IHcvIGRhdGV0aW1lLCByZXF1ZXN0cywgY3N2LCBtdWx0aXByb2Nlc3NpbmcgYW5kIHRocmVhZGluZyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJBIHNjcmlwdCB1c2VkIHRvIGZldGNoIDkyayBldmVudHMgZnJvbSBTZW50cnkgdXNpbmcgYWxsIE9TIGNvcmVzIGFuZCBtdWx0aXRocmVhZGluZy4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLXB5dGhvbiIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiXCJcIlwiXG5SZWFkIGFsbCB0aGUgaXNzdWUgSURzIHNhdmVkLCB0aGVuIGl0ZXJhdGUgdGhyb3VnaCwgZmluZCBhbGwgdGhlaXIgaXNzdWVzIGFuZCBwYWdpbmF0ZSB0aHJvdWdoIGFsbFxuXCJcIlwiXG5pbXBvcnQgcmVxdWVzdHNcbmltcG9ydCBjc3ZcbmltcG9ydCBvc1xuaW1wb3J0IHN5c1xuaW1wb3J0IHVybGxpYi5yZXF1ZXN0XG5pbXBvcnQgZGF0ZXRpbWVcblxuZnJvbSBtdWx0aXByb2Nlc3NpbmcgaW1wb3J0IFBvb2xcbmltcG9ydCB0aHJlYWRpbmdcbmNzdl93cml0ZXJfbG9jayA9IHRocmVhZGluZy5Mb2NrKClcbnRvdGFsX2V2ZW50c19sb2NrID0gdGhyZWFkaW5nLkxvY2soKVxucmVjb3JkX2xvZyA9IFRydWVcblxuIyBmb3IgbG9nZ2luZ1xuaWYgcmVjb3JkX2xvZzpcbiAgICBvbGRfc3Rkb3V0ID0gc3lzLnN0ZG91dFxuICAgIGxvZ19maWxlID0gb3BlbihcImZldGNoX2V2ZW50c19ieV9pc3N1ZS5sb2dcIixcIndcIilcbiAgICBzeXMuc3Rkb3V0ID0gbG9nX2ZpbGVcblxuXG5vcmdhbml6YXRpb25fc2x1ZyA9IFwiUkVEQUNURURcIlxucHJvamVjdF9zbHVnID0gXCJSRURBQ1RFRFwiXG5iYXNlX3VybCA9IFwiaHR0cHM6Ly9zZW50cnkuaW8vYXBpLzBcIlxuXG5oZWFkZXJzID0ge1xuICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciBSRURBQ1RFRCdcbn1cblxuXG5jdXJzb3IgPSAwXG5cbmRlZiBwb3N0X3RvX3NsYWNrKG1lc3NhZ2UpOlxuICAgIGRhdGEgPSAne1widGV4dFwiOlwiJyArIG1lc3NhZ2UgKyAnXCJ9J1xuICAgIHVybCA9ICdodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9SRURBQ1RFRC9SRURBQ1RFRC9SRURBQ1RFRCdcbiAgICByZXEgPSB1cmxsaWIucmVxdWVzdC5SZXF1ZXN0KHVybCwgZGF0YS5lbmNvZGUoJ3V0Zi04JyksIHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSlcbiAgICByZXMgPSB1cmxsaWIucmVxdWVzdC51cmxvcGVuKHJlcSlcblxuXG4jIG5vdCB0aGUgYmVzdCBpZGVhIGJ1dCB3aGF0ZXZlclxudG90YWxfZXZlbnRzX3dpdGhfY29uc29sZV9sb2dzID0gMFxuYnJlYWRjcnVtYnMgPSBGYWxzZVxuZGVmIGhhbmRsZV9ldmVudChldmVudCk6XG4gICAgdHJ5OlxuICAgICAgICBnbG9iYWwgdG90YWxfZXZlbnRzX3dpdGhfY29uc29sZV9sb2dzXG4gICAgICAgIGdsb2JhbCBicmVhZGNydW1ic1xuXG4gICAgICAgIGV2ZW50X2hhc19jb25zb2xlX2JyZWFkY3J1bWJzID0gRmFsc2VcbiAgICAgICAgIyBnZXQgc2luZ2xlIGV2ZW50IGZyb20gdGhlIEFQSVxuICAgICAgICBldmVudF9pZCA9IGV2ZW50LmdldChcImV2ZW50SURcIilcbiAgICAgICAgaXNzdWVfaWQgPSBldmVudC5nZXQoXCJncm91cElEXCIpXG4gICAgICAgIHByaW50KFwiRm91bmQgYSBzaW5nbGUgZXZlbnQgd2l0aCBJRDogXCIgKyBldmVudF9pZClcbiAgICAgICAgc2luZ2xlX2V2ZW50X3VybCA9IGJhc2VfdXJsICsgXCIvcHJvamVjdHMvXCIgKyBvcmdhbml6YXRpb25fc2x1ZyArIFwiL1wiICsgcHJvamVjdF9zbHVnICsgXCIvZXZlbnRzL1wiICsgZXZlbnRfaWQgKyBcIi9cIlxuICAgICAgICBldmVudF9yZXNwb25zZSA9IHJlcXVlc3RzLmdldChzaW5nbGVfZXZlbnRfdXJsLCBoZWFkZXJzPWhlYWRlcnMpXG5cbiAgICAgICAgcm93X2RpY3QgPSB7XG4gICAgICAgICAgICAnaXNzdWVfaWQnOiBpc3N1ZV9pZCxcbiAgICAgICAgICAgICdldmVudF9pZCc6IGV2ZW50X2lkLFxuICAgICAgICAgICAgJ2NvbnNvbGVfb3V0cHV0JzogJydcbiAgICAgICAgfVxuICAgICAgICAjIHJldHJlaXZlIHRoZSBtZXRhZGF0YVxuICAgICAgICBwcmludChmJ1t7ZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCl9XSAgVHJ5aW5nIHRvIGZpbmQgYnJlYWRjcnVtYnMgZm9yIGV2ZW50IElEOiB7ZXZlbnRfaWR9JylcbiAgICAgICAgZXZlbnRfZGF0YSA9IGV2ZW50X3Jlc3BvbnNlLmpzb24oKVxuXG4gICAgICAgIGZvciBlbnRyeSBpbiBldmVudF9kYXRhWydlbnRyaWVzJ106XG4gICAgICAgICAgICBpZiBlbnRyeVsndHlwZSddID09ICdicmVhZGNydW1icyc6XG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYnMgPSBlbnRyeS5nZXQoJ2RhdGEnLCB7fSkuZ2V0KCd2YWx1ZXMnLCB7fSlcbiAgICAgICAgaWYgYnJlYWRjcnVtYnMgYW5kIGxlbihicmVhZGNydW1icykgPiAwOlxuICAgICAgICAgICAgZm9yIGNydW1iIGluIGJyZWFkY3J1bWJzOlxuICAgICAgICAgICAgICAgIGlmIGNydW1iWydjYXRlZ29yeSddID09ICdjb25zb2xlJzpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfaGFzX2NvbnNvbGVfYnJlYWRjcnVtYnMgPSBUcnVlXG4gICAgICAgICAgICAgICAgICAgIHByaW50KGYnW3tkYXRldGltZS5kYXRldGltZS5ub3coKX1dIEZvdW5kIGEgY29uc29sZSBicmVhZGNydW1iIScpXG4gICAgICAgICAgICAgICAgICAgIHJvd19kaWN0Wydjb25zb2xlX291dHB1dCddID0gY3J1bWJcbiAgICAgICAgICAgICAgICAgICAgd2l0aCBjc3Zfd3JpdGVyX2xvY2s6XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVyb3cocm93X2RpY3QpXG5cbiAgICAgICAgaWYgZXZlbnRfaGFzX2NvbnNvbGVfYnJlYWRjcnVtYnM6XG4gICAgICAgICAgICB3aXRoIHRvdGFsX2V2ZW50c19sb2NrOlxuICAgICAgICAgICAgICAgIHRyeTpcbiAgICAgICAgICAgICAgICAgICAgdG90YWxfZXZlbnRzX3dpdGhfY29uc29sZV9sb2dzICs9IDFcbiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICAgICAgICAgIHByaW50KGYnW3tkYXRldGltZS5kYXRldGltZS5ub3coKX1dIEZhaWxlZCB0byBhcHBlbmQgdG8gdG90YWxfZXZlbnRzX3dpdGhfY29uc29sZV9sb2dzJylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHByaW50KGYnW3tkYXRldGltZS5kYXRldGltZS5ub3coKX1dICBEaWQgbm90IGZpbmQgYW55IGJyZWFkY3J1bWJzLicpXG4gICAgICAgICAgICByb3dfZGljdFsnY29uc29sZV9vdXRwdXQnXSA9ICdObyBjb25zb2xlIG91dHB1dCEnXG4gICAgICAgICAgICB3aXRoIGNzdl93cml0ZXJfbG9jazpcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVyb3cocm93X2RpY3QpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBwcmludChmJ0ZhaWxlZCBmb3Ige2V2ZW50LmdldChcImV2ZW50SURcIil9JywgZS5tZXNzYWdlKVxuXG5cbmRlZiBoYW5kbGVfaXNzdWUoaXNzdWVfaWQpOlxuICAgIFwiXCJcIlxuICAgIEZvciBpc3N1ZSBJRCwgY29udGludWFsbHkgZmV0Y2ggYWxsIGV2ZW50cyBhbmQgcGFnaW5hdGUgdW50aWwgdGhlcmUgYXJlIG5vbmUuXG5cbiAgICBXaXRoIGVhY2ggZXZlbnQsIGhhbmRsZSBpdCBzdWNoIHRoYXQgaXQgZmV0Y2hlcyBhbmQgYXBwZW5kcyB0aGUgcmVxdWlyZWQgZGF0YS5cbiAgICBcIlwiXCJcbiAgICAjIHdyaXRlci53cml0ZWhlYWRlcigpXG4gICAgbGlzdF9ldmVudHNfdXJsID0gZid7YmFzZV91cmx9L2lzc3Vlcy97aXNzdWVfaWR9L2V2ZW50cy8nXG4gICAgYXR0ZW1wdCA9IDFcbiAgICB3aGlsZSBsaXN0X2V2ZW50c191cmwgaXMgbm90IE5vbmU6XG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIGF0dGVtcHQgPiA1OlxuICAgICAgICAgICAgICAgIHBvc3RfdG9fc2xhY2soZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfSBGQUlMRURdOiBSZWFjaGVkIDUgYXR0ZW1wdHMgZm9yIHtsaXN0X2V2ZW50c191cmx9JylcbiAgICAgICAgICAgICAgICBsaXN0X2V2ZW50c191cmwgPSBOb25lXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICMgZ2V0IHRoZSBldmVudHNcbiAgICAgICAgICAgIHByaW50KGYnW3tkYXRldGltZS5kYXRldGltZS5ub3coKX1dIE5FWFRdIEdldHRpbmcgcGFnZSBvZiByZXN1bHRzOiB7bGlzdF9ldmVudHNfdXJsfScpXG4gICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChsaXN0X2V2ZW50c191cmwsIGhlYWRlcnM9aGVhZGVycylcbiAgICAgICAgICAgICMgZGF0YSBpcyBhbiBhcnJheSBvZiBldmVudHNcbiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgIGZvciBldmVudCBpbiBkYXRhOlxuICAgICAgICAgICAgICAgIGhhbmRsZV9ldmVudChldmVudClcbiAgICAgICAgICAgICMgaXMgdGhlcmUgYW5vdGhlciBwYWdlIG9mIGV2ZW50cz9cbiAgICAgICAgICAgIGxpbmsgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIkxpbmtcIilcbiAgICAgICAgICAgICMgcmVzZXQgYXR0ZW1wdCBpZiBzdWNjZXNzZnVsXG4gICAgICAgICAgICBhdHRlbXB0ID0gMVxuICAgICAgICAgICAgaWYgbGluayBhbmQgJ3JlbD1cIm5leHRcIjsgcmVzdWx0cz1cInRydWVcIicgaW4gbGluazpcbiAgICAgICAgICAgICAgICBwb3N0X3RvX3NsYWNrKGYnW3tkYXRldGltZS5kYXRldGltZS5ub3coKX0gU1VDQ0VTU106IEZpbmlzaGVkIHJlc3VsdHMgZm9yIHtsaXN0X2V2ZW50c191cmx9JylcbiAgICAgICAgICAgICAgICBsaXN0X2V2ZW50c191cmwgPSBsaW5rLnNwbGl0KClbNF1bMTotMl1cbiAgICAgICAgICAgICAgICBwcmludChmJ1t7ZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCl9IE5FWFRdOiBHZXR0aW5nIGFub3RoZXIgcGFnZSBvZiBldmVudCBmcm9tIGlzc3VlX2lkIHtpc3N1ZV9pZH0gLSBVUkwge2xpbmt9LicpXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHBvc3RfdG9fc2xhY2soZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfSBTVUNDRVNTXTogRmluaXNoZWQgcmVzdWx0cyBmb3Ige2xpc3RfZXZlbnRzX3VybH0nKVxuICAgICAgICAgICAgICAgIGxpc3RfZXZlbnRzX3VybCA9IE5vbmVcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICAgICAgcHJpbnQoZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfSBXQVJOSU5HXUZldGNoIGF0dGVtcHQge2F0dGVtcHR9IGZhaWxlZDoge2xpc3RfZXZlbnRzX3VybH0nLCBlKVxuICAgICAgICAgICAgcG9zdF90b19zbGFja1xuICAgICAgICAgICAgYXR0ZW1wdCArPSAxXG5cbnRyeTpcbiAgICB3aXRoIG9wZW4oJy4vZmV0Y2hfZXZlbnRzX2J5X2lzc3VlLmNzdicsICd3JykgYXMgb3V0cHV0X2ZpbGU6XG4gICAgICAgIGZpZWxkbmFtZXMgPSBbJ2lzc3VlX2lkJywgJ2V2ZW50X2lkJywgJ2NvbnNvbGVfb3V0cHV0J11cbiAgICAgICAgd3JpdGVyID0gY3N2LkRpY3RXcml0ZXIob3V0cHV0X2ZpbGUsIGZpZWxkbmFtZXM9ZmllbGRuYW1lcylcbiAgICAgICAgcHJpbnQoZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfVdyaXRpbmcgaGVhZGVycyBmb3IgY3N2JylcbiAgICAgICAgd2l0aCBvcGVuKCcuL3Byb2plY3RfaXNzdWVzLmNzdicsICdyJykgYXMgZmlsZTpcbiAgICAgICAgICAgIGRhdGEgPSBmaWxlLnJlYWQoKS5zcGxpdGxpbmVzKClcbiAgICAgICAgICAgICMgdXNlIGF0dGVtcHRzIHRvIGdpdmUgdXAgYWZ0ZXIgdHJ5aW5nIDEwIHRpbWVzIG9uIHRoZSBzYW1lIFVSTFxuICAgICAgICAgICAgY2h1bmtzaXplID0gMVxuICAgICAgICAgICAgcHJvY19jb3VudCA9IG9zLmNwdV9jb3VudCgpXG4gICAgICAgICAgICB3aXRoIFBvb2wocHJvY2Vzc2VzPXByb2NfY291bnQpIGFzIHBvb2w6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcG9vbC5tYXAoaGFuZGxlX2lzc3VlLCBkYXRhLCBjaHVua3NpemUpXG5cblxuZXhjZXB0OlxuICAgIHBvc3RfdG9fc2xhY2soZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfSBGQUlMRURdOiBTY3JpcHQgY3Jhc2hlZCcpXG5maW5hbGx5OlxuICAgIHBvc3RfdG9fc2xhY2soZidbe2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpfSBDT01QTEVURURdOiBTY3JpcHQgZmluaXNoZWQnKVxuICAgIGlmIHJlY29yZF9sb2c6XG4gICAgICAgIHN5cy5zdGRvdXQgPSBvbGRfc3Rkb3V0XG4gICAgICAgIGxvZ19maWxlLmNsb3NlKClcbiIpKSk7Cn0KCmlmICh0eXBlb2YgTURYQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgTURYQ29udGVudCAmJiBNRFhDb250ZW50ID09PSBPYmplY3QoTURYQ29udGVudCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTURYQ29udGVudCIsCiAgICAgIGZpbGVuYW1lOiAibWFudWFsL1B5dGhvbi9FeGFtcGxlcy5tZCIKICAgIH0KICB9KTsKfQoKTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7CjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobWFrZVNob3J0Y29kZSwgIm1ha2VTaG9ydGNvZGUiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9QeXRob24vRXhhbXBsZXMubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvUHl0aG9uL0V4YW1wbGVzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYTGF5b3V0LCAiTURYTGF5b3V0IiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvUHl0aG9uL0V4YW1wbGVzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYQ29udGVudCwgIk1EWENvbnRlbnQiLCAiL1VzZXJzL2Rlbm5pcy5va2VlZmZlL1Byb2plY3QtSW1wb3N0ZXIvZGV2ZWxvcGVyLW5vdGVzL21hbnVhbC9QeXRob24vRXhhbXBsZXMubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Python/Examples.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAJK,EAKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFALK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FARK,EASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,syLAAL,CATK,CAAP;AAqKD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BApLMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"python-examples\"\n    }}>{`Python Examples`}</h1>\n    <p>{`This section is just a collecton of interesting real world scripts that were used for one reason for another.`}</p>\n    <h2 {...{\n      \"id\": \"sentry-script-w-datetime-requests-csv-multiprocessing-and-threading\"\n    }}>{`Sentry Script w/ datetime, requests, csv, multiprocessing and threading`}</h2>\n    <p>{`A script used to fetch 92k events from Sentry using all OS cores and multithreading.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`\"\"\"\nRead all the issue IDs saved, then iterate through, find all their issues and paginate through all\n\"\"\"\nimport requests\nimport csv\nimport os\nimport sys\nimport urllib.request\nimport datetime\n\nfrom multiprocessing import Pool\nimport threading\ncsv_writer_lock = threading.Lock()\ntotal_events_lock = threading.Lock()\nrecord_log = True\n\n# for logging\nif record_log:\n    old_stdout = sys.stdout\n    log_file = open(\"fetch_events_by_issue.log\",\"w\")\n    sys.stdout = log_file\n\n\norganization_slug = \"REDACTED\"\nproject_slug = \"REDACTED\"\nbase_url = \"https://sentry.io/api/0\"\n\nheaders = {\n    'Authorization': 'Bearer REDACTED'\n}\n\n\ncursor = 0\n\ndef post_to_slack(message):\n    data = '{\"text\":\"' + message + '\"}'\n    url = 'https://hooks.slack.com/services/REDACTED/REDACTED/REDACTED'\n    req = urllib.request.Request(url, data.encode('utf-8'), {'Content-Type': 'application/json'})\n    res = urllib.request.urlopen(req)\n\n\n# not the best idea but whatever\ntotal_events_with_console_logs = 0\nbreadcrumbs = False\ndef handle_event(event):\n    try:\n        global total_events_with_console_logs\n        global breadcrumbs\n\n        event_has_console_breadcrumbs = False\n        # get single event from the API\n        event_id = event.get(\"eventID\")\n        issue_id = event.get(\"groupID\")\n        print(\"Found a single event with ID: \" + event_id)\n        single_event_url = base_url + \"/projects/\" + organization_slug + \"/\" + project_slug + \"/events/\" + event_id + \"/\"\n        event_response = requests.get(single_event_url, headers=headers)\n\n        row_dict = {\n            'issue_id': issue_id,\n            'event_id': event_id,\n            'console_output': ''\n        }\n        # retreive the metadata\n        print(f'[{datetime.datetime.now()}]  Trying to find breadcrumbs for event ID: {event_id}')\n        event_data = event_response.json()\n\n        for entry in event_data['entries']:\n            if entry['type'] == 'breadcrumbs':\n                breadcrumbs = entry.get('data', {}).get('values', {})\n        if breadcrumbs and len(breadcrumbs) > 0:\n            for crumb in breadcrumbs:\n                if crumb['category'] == 'console':\n                    event_has_console_breadcrumbs = True\n                    print(f'[{datetime.datetime.now()}] Found a console breadcrumb!')\n                    row_dict['console_output'] = crumb\n                    with csv_writer_lock:\n                        writer.writerow(row_dict)\n\n        if event_has_console_breadcrumbs:\n            with total_events_lock:\n                try:\n                    total_events_with_console_logs += 1\n                except Exception as e:\n                    print(f'[{datetime.datetime.now()}] Failed to append to total_events_with_console_logs')\n        else:\n            print(f'[{datetime.datetime.now()}]  Did not find any breadcrumbs.')\n            row_dict['console_output'] = 'No console output!'\n            with csv_writer_lock:\n                writer.writerow(row_dict)\n    except Exception as e:\n        print(f'Failed for {event.get(\"eventID\")}', e.message)\n\n\ndef handle_issue(issue_id):\n    \"\"\"\n    For issue ID, continually fetch all events and paginate until there are none.\n\n    With each event, handle it such that it fetches and appends the required data.\n    \"\"\"\n    # writer.writeheader()\n    list_events_url = f'{base_url}/issues/{issue_id}/events/'\n    attempt = 1\n    while list_events_url is not None:\n        try:\n            if attempt > 5:\n                post_to_slack(f'[{datetime.datetime.now()} FAILED]: Reached 5 attempts for {list_events_url}')\n                list_events_url = None\n                break\n            # get the events\n            print(f'[{datetime.datetime.now()}] NEXT] Getting page of results: {list_events_url}')\n            response = requests.get(list_events_url, headers=headers)\n            # data is an array of events\n            data = response.json()\n            for event in data:\n                handle_event(event)\n            # is there another page of events?\n            link = response.headers.get(\"Link\")\n            # reset attempt if successful\n            attempt = 1\n            if link and 'rel=\"next\"; results=\"true\"' in link:\n                post_to_slack(f'[{datetime.datetime.now()} SUCCESS]: Finished results for {list_events_url}')\n                list_events_url = link.split()[4][1:-2]\n                print(f'[{datetime.datetime.now()} NEXT]: Getting another page of event from issue_id {issue_id} - URL {link}.')\n            else:\n                post_to_slack(f'[{datetime.datetime.now()} SUCCESS]: Finished results for {list_events_url}')\n                list_events_url = None\n        except Exception as e:\n            print(f'[{datetime.datetime.now()} WARNING]Fetch attempt {attempt} failed: {list_events_url}', e)\n            post_to_slack\n            attempt += 1\n\ntry:\n    with open('./fetch_events_by_issue.csv', 'w') as output_file:\n        fieldnames = ['issue_id', 'event_id', 'console_output']\n        writer = csv.DictWriter(output_file, fieldnames=fieldnames)\n        print(f'[{datetime.datetime.now()}Writing headers for csv')\n        with open('./project_issues.csv', 'r') as file:\n            data = file.read().splitlines()\n            # use attempts to give up after trying 10 times on the same URL\n            chunksize = 1\n            proc_count = os.cpu_count()\n            with Pool(processes=proc_count) as pool:\n                result = pool.map(handle_issue, data, chunksize)\n\n\nexcept:\n    post_to_slack(f'[{datetime.datetime.now()} FAILED]: Script crashed')\nfinally:\n    post_to_slack(f'[{datetime.datetime.now()} COMPLETED]: Script finished')\n    if record_log:\n        sys.stdout = old_stdout\n        log_file.close()\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}