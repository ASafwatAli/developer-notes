{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md","mtime":1562563032094},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Swift/Swift-3-OOP.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"swift-3-oop\"\n    }}>{`Swift 3 OOP`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-oop\"\n        }}>{`Swift 3 OOP`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#structs\"\n            }}>{`Structs`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#instances-of-objects\"\n            }}>{`Instances of Objects`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#methods\"\n            }}>{`Methods`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#initialisers-and-self\"\n            }}>{`Initialisers and Self`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#class\"\n            }}>{`Class`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#inheritance\"\n            }}>{`Inheritance`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#structs-vs-classes\"\n            }}>{`Structs vs Classes`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----value-type-vs-reference-type\"\n                }}>{`---- Value type vs Reference type`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs\"\n    }}>{`Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`let coordinate1: (x: Int, y: Int) = (1,0) //tuple\ncoordinate1.x\n\n// structs are the blueprints\nstruct Point {\n  let x: Int\n  let y: Int\n}\n\n// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"instances-of-objects\"\n    }}>{`Instances of Objects`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\np1.x\np1.y\n\nstruct User {\n  let username: String\n  let password: String\n}\n\nlet Login = User(username: \"example@mail.com\", password: \"123pass\")\nLogin.username\nLogin.password\n`}</code></pre>\n    <div id=\"newSection\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Declaring empty arrays that infer a type `}<inlineCode parentName=\"li\">{`var results: [Point] = []`}</inlineCode></li>\n      <li parentName=\"ul\">{`Declaring it the preferred way `}<inlineCode parentName=\"li\">{`var results = [Point]()`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`struct PointTwo {\n  let x: Int\n  let y: Int\n\n  // three slashes helps with definitions\n\n  /// Returns the surrounding points in range of\n  /// the current one\n  func points(inRange range: Int = 1) -> [PointTwo] {\n    var results = [PointTwo]()\n\n    let lowerBoundOfXRange = x - range\n    let upperBoundOfXRange = x + range\n\n    let lowerBoundOfYRange = y - range\n    let upperBoundOfYRange = y + range\n\n    for xCoordinate in lowerBoundOfXRange...upperBoundOfXRange {\n      for yCoordinate in lowerBoundOfYRange...upperBoundOfYRange {\n        let coordinatePoint = PointTwo(x: xCoordinate, y: yCoordinate)\n        results.append(coordinatePoint)\n      }\n    }\n\n    return results\n  }\n}\n\nlet p2 = PointTwo(x: 1, y: 0)\np2.x\np2.y\n\nlet rangeReturn = p2.points(inRange: 3)\nrangeReturn[0].x\nrangeReturn[3].y\n\nstruct Person {\n    let firstName: String\n    let lastName: String\n\n    func fullName() -> String {\n      return firstName + \" \" + lastName\n    }\n}\n\nlet aPerson = Person(firstName: \"Billy\", lastName: \"Bob\")\nlet myFullName = aPerson.fullName()\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"initialisers-and-self\"\n    }}>{`Initialisers and Self`}</h2>\n    <p>{`Self is generally only used in Swift in the init method or when differentiating`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Point {\n  let x: Int\n  let y: Int\n\n  init(x: Int, y: Int) {\n    self.x = x;\n    self.y = x;\n  }\n}\n\nstruct RGBColor {\n  let red: Double\n  let green: Double\n  let blue: Double\n  let alpha: Double\n\n  let description: String\n\n  // Add your code below\n  init(red: Double, green: Double, blue: Double, alpha: Double) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n    self.alpha = alpha\n\n    self.description = \"red: \\\\(self.red), green: \\\\(self.green), blue: \\\\(self.blue), alpha: \\\\(self.alpha)\"\n  }\n}\n\nlet test = RGBColor(red: 16.0, green: 5.0, blue: 4.3, alpha: 3.0)\ntest.description\n`}</code></pre>\n    <div id=\"classes\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"class\"\n    }}>{`Class`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Enemy {\n  var life: Int = 2\n  let position: Point\n\n  init(x: Int, y: Int) {\n    self.position = Point(x: x, y: y)\n  }\n\n  func decreaseLife(by factor: Int) {\n    life -= factor\n  }\n\n}\n\nstruct Location {\n  let latitude: Double\n  let longitude: Double\n}\n\nclass Business {\n  var name: String\n  var location: Location\n\n  init(name: String, location: Location) {\n    self.name = name\n    self.location = location\n  }\n}\n\nlet someBusiness = Business(name: \"Quiry\", location: Location(latitude: 341, longitude: 82))\n`}</code></pre>\n    <div id=\"inheritance\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class SuperEnemy: Enemy {\n  let isSuper: Bool = true\n\n  override init(x: Int, y: Int) {\n    super.init(x: x, y: y)\n    self.life = 50\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Vehicle {\n  var numberOfDoors: Int\n  var numberOfWheels: Int\n\n  init(withDoors doors: Int, andWheels wheels: Int) {\n      self.numberOfDoors = doors\n      self.numberOfWheels = wheels\n  }\n}\n\nclass Car: Vehicle {\n  var numberOfSeats: Int = 4\n\n  override init(withDoors doors: Int, andWheels wheels: Int) {\n    super.init(withDoors: doors, andWheels: wheels)\n  }\n\n}\n\nlet someCar = Car(withDoors: 4, andWheels: 4)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Person {\n  let firstName: String\n  let lastName: String\n\n  init(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n\n  func fullName() -> String {\n    return \"\\\\(firstName) \\\\(lastName)\"\n  }\n}\n\n// Enter your code below\nclass Doctor: Person {\n\n  override init(firstName: String, lastName: String) {\n    super.init(firstName: firstName, lastName: lastName)\n  }\n\n  override func fullName() -> String {\n    return \"Dr. \\\\(lastName)\"\n  }\n}\n\nlet someDoctor = Doctor(firstName: \"Sam\", lastName: \"Smith\")\n`}</code></pre>\n    <div id=\"final\"></div>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs-vs-classes\"\n    }}>{`Structs vs Classes`}</h2>\n    <p>{`Distinct line in the sand.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\n\nvar str = \"Hello, playground\"\n\n\nstruct User {\n  var fullName: String\n  var email: String\n  var age: Int\n}\n\nvar someUser = User(fullName: \"Denis O'Keeffe\", email: \"test@test\", age: 24)\n\nvar anotherUser = someUser\n\nsomeUser.email = \"newemail@email\"\n\n// remains as test@test\nanotherUser.email\n\nclass Person {\n  var fullName: String\n  var email: String\n  var age: Int\n\n  init(name: String, email: String, age: Int) {\n    self.fullName = name\n    self.email = email\n    self.age = age\n  }\n}\n\nvar somePerson = Person(name: \"Tim Cook\", email: \"tc@apple.com\", age: 54)\n\nvar anotherPerson = somePerson\n\nsomePerson.email = \"newemail@email\"\n\n// newemail@email -> points to the same reference\nanotherPerson.email\n`}</code></pre>\n    <div id=\"valuevsref\"></div>\n    <h3 {...{\n      \"id\": \"-----value-type-vs-reference-type\"\n    }}>{`---- Value type vs Reference type`}</h3>\n    <p>{`Values are copied across, references are not. All `}<inlineCode parentName=\"p\">{`structs`}</inlineCode>{` are value types.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}