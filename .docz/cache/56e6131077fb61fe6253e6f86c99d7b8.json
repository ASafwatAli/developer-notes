{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md","mtime":1577954340432},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"typescript--github-example\"\n    }}>{`TypeScript + Github Example`}</h1>\n    <p>{`In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`Initialise a project in a folder `}<inlineCode parentName=\"p\">{`yarn init -y`}</inlineCode>{`.`}</p>\n    <p>{`Prerequisites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-setup\"\n    }}>{`API Setup`}</h2>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`api/example.ts`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tsconfig\"\n    }}>{`TSConfig`}</h2>\n    <p>{`Add this is tsconfig.json (taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json\"\n      }}>{`this Zeit Now example`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"git-ignore\"\n    }}>{`Git Ignore`}</h2>\n    <p>{`Ignore npm modules + .env where we will store the local key in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node_modules/\n.env\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dotenv\"\n    }}>{`Dotenv`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.`}</p>\n    <p>{`If you need to create one, `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`follow this article from the GitHub site`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_TOKEN=TOKEN_VALUE\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nowjson\"\n    }}>{`Now.json`}</h2>\n    <p>{`We will use `}<inlineCode parentName=\"p\">{`now.json`}</inlineCode>{` to help define some env variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-github\"\n      }}>{`{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-json\"\n    }}>{`Test JSON`}</h2>\n    <p>{`For what we will upload, add this to `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hello\": \"world\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h2>\n    <p>{`Now we can develop locally. Run `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{` to get localhost running on port 3000.`}</p>\n    <p>{`Once the port is running, we can ping `}<inlineCode parentName=\"p\">{`http://localhost:3000/api/example`}</inlineCode>{` and pass some params to generate a new repo and add some JSON.`}</p>\n    <p>{`In this example, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"https://httpie.org/doc#json\"\n      }}>{`HTTPie`}</a>{` and running `}<inlineCode parentName=\"p\">{`http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json`}</inlineCode>{` on the command line will lead to the creation of a new private repo `}<inlineCode parentName=\"p\">{`temp-zeit-a`}</inlineCode>{` with content from the `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{` local file saved into the `}<inlineCode parentName=\"p\">{`hello.json`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`Hooray!`}</p>\n    <h2 {...{\n      \"id\": \"production\"\n    }}>{`Production`}</h2>\n    <p>{`To deploy to production, we simply run `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}