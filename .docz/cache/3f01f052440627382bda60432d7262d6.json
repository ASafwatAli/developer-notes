{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Braintree/Sandbox.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Braintree/Sandbox.md","mtime":1562563032016},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Braintree/Sandbox.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-started-with-the-braintree-sandbox\"\n    }}>{`Getting started with the Braintree Sandbox`}</h1>\n    <p>{`Published: October 5th 2018`}</p>\n    <p>{`Braintree is one of those methods to get started with payments.`}</p>\n    <p>{`I've been looking for alternatives to Stripe more for comparisons sake to see what would be easiest to implement and more relevant to what I am trying to achieve en masse down the road.`}</p>\n    <p>{`This is a small hello world into getting up and running with Braintree using Express on the serverside and React on the frontend.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`If you are following along, you should sign up for a Sandbox account.`}</p>\n    <p>{`This tutorial will use create-react-app and a user contributed npm module to abstract some of the time required for setup.`}</p>\n    <p>{`Another useful link comes from `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.braintreepayments.com/start/tutorial\"\n      }}>{`their website for Node.js and JS`}</a>{`. Although I will be deterring away from it, it is still a useful reference.`}</p>\n    <p>{`We are going to treat this project as a monorepo for now, so in the root directory we need to create a subdirectory for the frontend and a directory for the server.`}</p>\n    <h2 {...{\n      \"id\": \"building-the-express-server\"\n    }}>{`Building the Express server`}</h2>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir server\ncd server\nyarn init -y\nyarn add express body-parser morgan cors dotenv braintree\nmkdir routes\ntouch server.js .env .gitignore routes/index.js\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"gitignore\"\n    }}>{`.gitignore`}</h3>\n    <p>{`For the sake of doing things right, let's just quickly update our file to ignore `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`.env\nnode_modules/\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"env\"\n    }}>{`.env`}</h3>\n    <p>{`Here we need to update our file with the sandbox tokens given to us from the Braintree sandbox environment. The keys and configuration can be found on your Braintree dashboard:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`BRAINTREE_MERCHANT_ID=<use_your_merchant_id>\nBRAINTREE_PUBLIC_KEY=<use_your_public_key>\nBRAINTREE_PRIVATE_KEY=<use_your_private_key>\n`}</code></pre>\n    <p>{`Now we can use `}<inlineCode parentName=\"p\">{`dotenv`}</inlineCode>{` in our app to access the variables and keep them out of our git history.`}</p>\n    <h3 {...{\n      \"id\": \"serverjs\"\n    }}>{`server.js`}</h3>\n    <p>{`To set up the main server, update the server.js file to look like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Add variables from dotenv into process.env vars\nrequire('dotenv').config();\n\n// Main starting point of the application\nconst express = require('express');\nconst http = require('http');\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\nconst app = express();\nconst cors = require('cors');\n\n// Routes Setup\nconst routes = require('./routes');\n\n// App Setup\nconst morganFormat = process.env.NODE_ENV === 'production' ? 'combined' : 'dev';\napp.use(morgan(morganFormat));\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Add routes after setting up middleware\nroutes(app);\n\n// Server Setup\nconst port = process.env.NODE_ENV == 'production' ? 80 : 5000;\nconst server = http.createServer(app);\nserver.listen(port);\nconsole.log('Server listening on:', port);\n`}</code></pre>\n    <p>{`This `}<inlineCode parentName=\"p\">{`server.js`}</inlineCode>{` file will load the `}<inlineCode parentName=\"p\">{`routes/index.js`}</inlineCode>{` file, which we will now update.`}</p>\n    <h3 {...{\n      \"id\": \"routesindexjs\"\n    }}>{`routes/index.js`}</h3>\n    <p>{`Let's now update our `}<inlineCode parentName=\"p\">{`routes/index.js`}</inlineCode>{` to take setup the gateway and setup three routes - one for a simple ping test, another for fetching a client token and a third for making a payment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const braintree = require('braintree');\n\nvar gateway = braintree.connect({\n  environment: braintree.Environment.Sandbox,\n  // Use your own credentials from the sandbox Control Panel here\n  merchantId: process.env.BRAINTREE_MERCHANT_ID,\n  publicKey: process.env.BRAINTREE_PUBLIC_KEY,\n  privateKey: process.env.BRAINTREE_PRIVATE_KEY\n});\n\nmodule.exports = function(app) {\n  app.get('/braintree', function(req, res) {\n    res.send('Braintree route is healthy');\n  });\n\n  app.get('/api/braintree/v1/getToken', async function(req, res) {\n    try {\n      gateway.clientToken.generate({}, function(err, response) {\n        if (err) {\n          res.status(500).send(err);\n        } else {\n          res.send(response);\n        }\n      });\n    } catch (err) {\n      res.status(500).send(err);\n    }\n  });\n\n  app.post('/api/braintree/v1/sandbox', async function(req, res) {\n    try {\n      // Use the payment method nonce here\n      var nonceFromTheClient = req.body.paymentMethodNonce;\n      // Create a new transaction for $10\n      var newTransaction = gateway.transaction.sale(\n        {\n          amount: '10.00',\n          paymentMethodNonce: nonceFromTheClient,\n          options: {\n            // This option requests the funds from the transaction once it has been\n            // authorized successfully\n            submitForSettlement: true\n          }\n        },\n        function(error, result) {\n          if (result) {\n            res.send(result);\n          } else {\n            res.status(500).send(error);\n          }\n        }\n      );\n    } catch (err) {\n      // Deal with an error\n      console.log(err);\n      res.send(err);\n    }\n  });\n};\n`}</code></pre>\n    <p>{`Now if we run `}<inlineCode parentName=\"p\">{`node server.js`}</inlineCode>{`, we should have our app up and running on port 5000!`}</p>\n    <p>{`We can run `}<inlineCode parentName=\"p\">{`curl http://localhost:5000/braintree`}</inlineCode>{` from another terminal to see our `}<inlineCode parentName=\"p\">{`Braintree route is healthy`}</inlineCode>{` response.`}</p>\n    <p>{`Now we need to set up the clientside.`}</p>\n    <h2 {...{\n      \"id\": \"building-the-react-frontend\"\n    }}>{`Building the React frontend`}</h2>\n    <h3 {...{\n      \"id\": \"react-installation\"\n    }}>{`React Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`create-react-app clientside\ncd clientside\nyarn add braintree-web braintree-web-drop-in-react axios\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-the-app\"\n    }}>{`Updating the app`}</h3>\n    <p>{`Go to our App.js file and clean it out. Replace the file with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport './App.css';\nimport 'braintree-web';\nimport axios from 'axios';\nimport DropIn from 'braintree-web-drop-in-react';\n\nclass App extends Component {\n  instance;\n\n  state = {\n    clientToken: null\n  };\n\n  async componentDidMount() {\n    try {\n      // Get a client token for authorization from your server\n      const response = await axios.get(\n        'http://localhost:5000/api/braintree/v1/getToken'\n      );\n      const clientToken = response.data.clientToken;\n\n      this.setState({ clientToken });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async buy() {\n    try {\n      // Send the nonce to your server\n      const { nonce } = await this.instance.requestPaymentMethod();\n      const response = await axios.post(\n        'http://localhost:5000/api/braintree/v1/sandbox',\n        nonce\n      );\n      console.log(response);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    if (!this.state.clientToken) {\n      return (\n        <div>\n          <h1>Loading...</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <DropIn\n            options={{\n              authorization: this.state.clientToken\n            }}\n            onInstance={(instance) => (this.instance = instance)}\n          />\n          <button onClick={this.buy.bind(this)}>Buy</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`This code is a variation of the intro code found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cretezy/braintree-web-drop-in-react\"\n      }}>{`Braintree Web Drop-in React Github intro`}</a>{`.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`yarn start`}</inlineCode>{` we should load up the React app on locahost and you should be able to see the following:`}</p>\n    <p><img alt=\"React Frontend\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698065/samples/braintree-one.png\" /></p>\n    <p>{`If that is the case, perfect! We are ready to roll.`}</p>\n    <h3 {...{\n      \"id\": \"making-the-payment\"\n    }}>{`Making the payment`}</h3>\n    <p>{`The following comes directly from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.braintreepayments.com/start/tutorial\"\n      }}>{`Node.js quickstart for Braintree`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Card number: 4111 1111 1111 1111\nExpiry: 09/20\nCVV: 400\nPostal Code: 40000\n`}</code></pre>\n    <p>{`If we insert both the card number and expiry, that should be enough for us to get to the end of the road! After inserting and making the payment, our front end should look like the following:`}</p>\n    <p><img alt=\"Payment made\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698064/samples/braintree-two.png\" /></p>\n    <p>{`Opening up `}<inlineCode parentName=\"p\">{`devtools`}</inlineCode>{`, we can even inspect the response object we are logging to see our great success!`}</p>\n    <p><img alt=\"Devtools\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698065/samples/braintree-three.png\" /></p>\n    <p>{`Bingo!`}</p>\n    <h3 {...{\n      \"id\": \"the-server-terminal\"\n    }}>{`The server terminal`}</h3>\n    <p>{`If we checkout the server terminal, we should be able to see how events went down thanks to Morgan doing our logging:`}</p>\n    <p><img alt=\"Express App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698063/samples/braintree-four.png\" /></p>\n    <p>{`The image above can help us fully understand the process. When our frontend app loads, we make a `}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{` request to fetch the token from `}<inlineCode parentName=\"p\">{`/api/braintree/v1/getToken`}</inlineCode>{`. This token is required for when that final payment request was made. The `}<inlineCode parentName=\"p\">{`OPTIONS`}</inlineCode>{` 204 request we see there secondly is a CORS preflight request made to ensure we are allowed to make the call and finally and `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` 200 to `}<inlineCode parentName=\"p\">{`/api/braintree/v1/sandbox`}</inlineCode>{` is our success response after making the payment.`}</p>\n    <h2 {...{\n      \"id\": \"confirmation\"\n    }}>{`Confirmation`}</h2>\n    <p>{`If we now go back to our Sandbox dashboard, we can now see the successful transaction has been recorded!`}</p>\n    <p><img alt=\"Success\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698732/braintreedashboard.png\" /></p>\n    <p>{`Very cool. We just went from 0 to payment in a short amount of time.`}</p>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`What's next? Something I like about Braintree is UI extensibility. Although we used a frontend package on this occassion, try building out your own UI for taking payments!`}</p>\n    <p>{`Whether or not you are a fan of Braintree or Stripe really is up to you and your business needs at the end of the day. It is worth looking up both the pros and cons of the developer docs and the rates to decide what is best for your specific usecase (or any other payment platform for that case).`}</p>\n    <p>{`Original post: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dennisokeeffe.com/blog/braintree-node-react\"\n      }}>{`https://www.dennisokeeffe.com/blog/braintree-node-react`}</a></p>\n    <p>{`Git repo: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/okeeffed/hello-braintree\"\n      }}>{`https://github.com/okeeffed/hello-braintree`}</a></p>\n    <p><em parentName=\"p\"><strong parentName=\"em\">{`Depth`}</strong>{` is a series that goes into more detail for projects than it's friendly counterpart series \"Hello\".`}</em></p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}