{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/okeeffe_d/Business/Documentation/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/okeeffe_d/Business/Documentation/manual/LinkedIn/linkedin-api-cheat-sheet.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/LinkedIn/linkedin-api-cheat-sheet.md","mtime":1548209344366},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/okeeffe_d/Business/Documentation/manual/LinkedIn/linkedin-api-cheat-sheet.md\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"linkedin-api-cheat-sheet\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"LinkedIn API Cheat Sheet\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-php\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"<?php\\n    // Change these back to your things\\n    define('API_KEY',      'YOUR API KEY');\\n    define('API_SECRET',   'YOUR API SECRET');\\n    define('REDIRECT_URI',  'http://localhost/');\\n\\n    // I've changed the scope to work for what we generally have access to\\n    define('SCOPE', 'r_basicprofile r_emailaddress');\\n\\n    // This stuff I believe it used if you have a database\\n    session_name('linkedin');\\n    session_start();\\n\\n    // OAuth 2 Control Flow\\n    if (isset($_GET['error'])) {\\n        // LinkedIn returned an error\\n        print $_GET['error'] . ': ' . $_GET['error_description'];\\n        exit;\\n    } elseif (isset($_GET['code'])) {\\n        // User authorized your application\\n        if ($_SESSION['state'] == $_GET['state']) {\\n            // Get token so you can make API calls\\n            getAccessToken();\\n        } else {\\n            // CSRF attack? Or did you mix up your states?\\n            exit;\\n        }\\n    } else {\\n        if ((empty($_SESSION['expires_at'])) || (time() > $_SESSION['expires_at'])) {\\n            // Token has expired, clear the state\\n            $_SESSION = array();\\n        }\\n        if (empty($_SESSION['access_token'])) {\\n            // Start authorization process\\n            getAuthorizationCode();\\n        }\\n    }\\n\\n    // You have a valid token. Now fetch your profile.\\n    // I've just put in some dummy fields for now, but hopefully these should do it.\\n    $user = fetch('GET', '/v1/people/~:(first-name,last-name,email-address,phone-numbers,num-connections,picture-url,location,positions,summary,specialties,industry)');\\n\\n    // I've just shoved the responses into some variables from the $user dict response\\n\\n    // STORE THE RESULTS IN AN ARRAY\\n\\n    $res = array();\\n\\n    $res[] = $user->firstName;\\n    $res[] = $user->lastName;\\n    $res[] = $user->emailAddress;\\n    $res[] = $user->phoneNumbers;\\n    $res[] = $user->numConnections;\\n    $res[] = $user->pictureUrl;\\n    $res[] = $user->location->country->code;\\n    $res[] = $user->location->name;\\n    $res[] = $user->summary;\\n    $res[] = $user->specialties;\\n    $res[] = $user->industry;\\n    $res[] = $user->positions;\\n\\n    echo  nl2br(\\\"First name: \\\". $res[0] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Last name: \\\". $res[1] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Email Address: \\\" . $res[2] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Phone Numbers: \\\". $res[3] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Num Connections: \\\". $res[4] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Picture Url: \\\" . $res[5] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Location Country Code: \\\" . $res[6]. \\\"\\n\\\");\\n    echo  nl2br(\\\"Location Name: \\\". $res[7] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Summary: \\\" . $res[8] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Specialties: \\\". $res[9] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Industry: \\\". $res[10] . \\\"\\n\\\");\\n    echo  nl2br(\\\"Positions: \\\" . $res[11] . \\\"\\n\\\");\\n\\n    exit;\\n\\n    function getAuthorizationCode() {\\n        $params = array('response_type' => 'code',\\n                        'client_id' => API_KEY,\\n                        'scope' => SCOPE,\\n                        'state' => uniqid('', true), // unique long string\\n                        'redirect_uri' => REDIRECT_URI,\\n                  );\\n        // Authentication request\\n        $url = 'https://www.linkedin.com/uas/oauth2/authorization?' . http_build_query($params);\\n\\n        // Needed to identify request when it returns to us\\n        $_SESSION['state'] = $params['state'];\\n        // Redirect user to authenticate\\n        header(\\\"Location: $url\\\");\\n        exit;\\n    }\\n\\n    function getAccessToken() {\\n        $params = array('grant_type' => 'authorization_code',\\n                        'client_id' => API_KEY,\\n                        'client_secret' => API_SECRET,\\n                        'code' => $_GET['code'],\\n                        'redirect_uri' => REDIRECT_URI,\\n                  );\\n\\n        // Access Token request\\n        $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);\\n\\n        // Tell streams to make a POST request\\n        $context = stream_context_create(\\n                        array('http' =>\\n                            array('method' => 'POST',\\n                            )\\n                        )\\n                    );\\n        // Retrieve access token information\\n        $response = file_get_contents($url, false, $context);\\n        // Native PHP object, please\\n        $token = json_decode($response);\\n        // Store access token and expiration time\\n        $_SESSION['access_token'] = $token->access_token; // guard this!\\n        $_SESSION['expires_in']   = $token->expires_in; // relative time (in seconds)\\n        $_SESSION['expires_at']   = time() + $_SESSION['expires_in']; // absolute time\\n\\n        return true;\\n    }\\n\\n    // this fetch should be the main thing that you really need to add to what you already have!\\n\\n    function fetch($method, $resource, $body = '') {\\n        $params = array('oauth2_access_token' => $_SESSION['access_token'],\\n                        'format' => 'json',\\n                  );\\n\\n        // Need to use HTTPS\\n        $url = 'https://api.linkedin.com' . $resource . '?' . http_build_query($params);\\n        // Tell streams to make a (GET, POST, PUT, or DELETE) request\\n        $context = stream_context_create(\\n                        array('http' =>\\n                            array('method' => $method,\\n                            )\\n                        )\\n                    );\\n\\n        // Hocus Pocus\\n        $response = file_get_contents($url, false, $context);\\n        // Native PHP object, please\\n        return json_decode($response);\\n    }\\n\\n?>\\n\")));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/okeeffe_d/Business/Documentation/manual/LinkedIn/linkedin-api-cheat-sheet.md\");\n  leaveModule(module);\n})();\n\n;\nMDXContent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MDXContent\"\n};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/LinkedIn/linkedin-api-cheat-sheet.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;;IAGmBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,MAAL,GAAc,IAAd;AAFiB;AAGlB;;;;6BACQ;AAAA,wBAC0B,KAAKD,KAD/B;AAAA,UACCE,UADD,eACCA,UADD;AAAA,UACgBF,KADhB;;AAGP,aAAO,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAGE,QAAA,UAAU,EAAEE,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAG0B,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,UAAU,EAAEA,UAA9B;AAA0C,QAAA,KAAK,EAAE;AAAC,gBAAK;AAAN,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAH1B,EAIX,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,KAAb;AAAmB,QAAA,UAAU,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAEA,UAAhC;AAA4C,QAAA,UAAU,EAAC,KAAvD;AAA6D,QAAA,KAAK,EAAE;AAAC,uBAAY;AAAb,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,olLAA3C,CAJW,CAAP;AAyJD;;;;;;;;;;;EAjKqCL,KAAK,CAACM,S;;SAAzBJ,U;;;;;;;;;;;;0BAAAA,U","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"linkedin-api-cheat-sheet\"}}>{`LinkedIn API Cheat Sheet`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-php\"}}>{`<?php\n    // Change these back to your things\n    define('API_KEY',      'YOUR API KEY');\n    define('API_SECRET',   'YOUR API SECRET');\n    define('REDIRECT_URI',  'http://localhost/');\n\n    // I've changed the scope to work for what we generally have access to\n    define('SCOPE', 'r_basicprofile r_emailaddress');\n\n    // This stuff I believe it used if you have a database\n    session_name('linkedin');\n    session_start();\n\n    // OAuth 2 Control Flow\n    if (isset(\\$_GET['error'])) {\n        // LinkedIn returned an error\n        print \\$_GET['error'] . ': ' . \\$_GET['error_description'];\n        exit;\n    } elseif (isset(\\$_GET['code'])) {\n        // User authorized your application\n        if (\\$_SESSION['state'] == \\$_GET['state']) {\n            // Get token so you can make API calls\n            getAccessToken();\n        } else {\n            // CSRF attack? Or did you mix up your states?\n            exit;\n        }\n    } else {\n        if ((empty(\\$_SESSION['expires_at'])) || (time() > \\$_SESSION['expires_at'])) {\n            // Token has expired, clear the state\n            \\$_SESSION = array();\n        }\n        if (empty(\\$_SESSION['access_token'])) {\n            // Start authorization process\n            getAuthorizationCode();\n        }\n    }\n\n    // You have a valid token. Now fetch your profile.\n    // I've just put in some dummy fields for now, but hopefully these should do it.\n    \\$user = fetch('GET', '/v1/people/~:(first-name,last-name,email-address,phone-numbers,num-connections,picture-url,location,positions,summary,specialties,industry)');\n\n    // I've just shoved the responses into some variables from the \\$user dict response\n\n    // STORE THE RESULTS IN AN ARRAY\n\n    \\$res = array();\n\n    \\$res[] = \\$user->firstName;\n    \\$res[] = \\$user->lastName;\n    \\$res[] = \\$user->emailAddress;\n    \\$res[] = \\$user->phoneNumbers;\n    \\$res[] = \\$user->numConnections;\n    \\$res[] = \\$user->pictureUrl;\n    \\$res[] = \\$user->location->country->code;\n    \\$res[] = \\$user->location->name;\n    \\$res[] = \\$user->summary;\n    \\$res[] = \\$user->specialties;\n    \\$res[] = \\$user->industry;\n    \\$res[] = \\$user->positions;\n\n    echo  nl2br(\"First name: \". \\$res[0] . \"\\n\");\n    echo  nl2br(\"Last name: \". \\$res[1] . \"\\n\");\n    echo  nl2br(\"Email Address: \" . \\$res[2] . \"\\n\");\n    echo  nl2br(\"Phone Numbers: \". \\$res[3] . \"\\n\");\n    echo  nl2br(\"Num Connections: \". \\$res[4] . \"\\n\");\n    echo  nl2br(\"Picture Url: \" . \\$res[5] . \"\\n\");\n    echo  nl2br(\"Location Country Code: \" . \\$res[6]. \"\\n\");\n    echo  nl2br(\"Location Name: \". \\$res[7] . \"\\n\");\n    echo  nl2br(\"Summary: \" . \\$res[8] . \"\\n\");\n    echo  nl2br(\"Specialties: \". \\$res[9] . \"\\n\");\n    echo  nl2br(\"Industry: \". \\$res[10] . \"\\n\");\n    echo  nl2br(\"Positions: \" . \\$res[11] . \"\\n\");\n\n    exit;\n\n    function getAuthorizationCode() {\n        \\$params = array('response_type' => 'code',\n                        'client_id' => API_KEY,\n                        'scope' => SCOPE,\n                        'state' => uniqid('', true), // unique long string\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n        // Authentication request\n        \\$url = 'https://www.linkedin.com/uas/oauth2/authorization?' . http_build_query(\\$params);\n\n        // Needed to identify request when it returns to us\n        \\$_SESSION['state'] = \\$params['state'];\n        // Redirect user to authenticate\n        header(\"Location: \\$url\");\n        exit;\n    }\n\n    function getAccessToken() {\n        \\$params = array('grant_type' => 'authorization_code',\n                        'client_id' => API_KEY,\n                        'client_secret' => API_SECRET,\n                        'code' => \\$_GET['code'],\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n\n        // Access Token request\n        \\$url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query(\\$params);\n\n        // Tell streams to make a POST request\n        \\$context = stream_context_create(\n                        array('http' =>\n                            array('method' => 'POST',\n                            )\n                        )\n                    );\n        // Retrieve access token information\n        \\$response = file_get_contents(\\$url, false, \\$context);\n        // Native PHP object, please\n        \\$token = json_decode(\\$response);\n        // Store access token and expiration time\n        \\$_SESSION['access_token'] = \\$token->access_token; // guard this!\n        \\$_SESSION['expires_in']   = \\$token->expires_in; // relative time (in seconds)\n        \\$_SESSION['expires_at']   = time() + \\$_SESSION['expires_in']; // absolute time\n\n        return true;\n    }\n\n    // this fetch should be the main thing that you really need to add to what you already have!\n\n    function fetch(\\$method, \\$resource, \\$body = '') {\n        \\$params = array('oauth2_access_token' => \\$_SESSION['access_token'],\n                        'format' => 'json',\n                  );\n\n        // Need to use HTTPS\n        \\$url = 'https://api.linkedin.com' . \\$resource . '?' . http_build_query(\\$params);\n        // Tell streams to make a (GET, POST, PUT, or DELETE) request\n        \\$context = stream_context_create(\n                        array('http' =>\n                            array('method' => \\$method,\n                            )\n                        )\n                    );\n\n        // Hocus Pocus\n        \\$response = file_get_contents(\\$url, false, \\$context);\n        // Native PHP object, please\n        return json_decode(\\$response);\n    }\n\n?>\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}