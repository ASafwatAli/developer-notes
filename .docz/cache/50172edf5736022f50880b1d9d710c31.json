{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md","mtime":1562563032024},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJidWlsZGVyLXBhdHRlcm4ifSwiQnVpbGRlciBQYXR0ZXJuIiksbWR4KCJwIixudWxsLCJUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkJ1aWxkZXIgUGF0dGVybiIpLCIgZW5hYmxlcyB1cyB0byBjcmVhdGUgZGlmZmVyZW50IGluc3RhbmNlIHJlcHJlc2VudGF0aW9ucyB1c2luZyB0aGUgc2FtZSBjb25zdHJ1Y3Rpb24gY29kZS4iKSxtZHgoInAiLG51bGwsIkluIHRoaXMgc2NlbmFyaW8sIHdlIHdpbGwgdXNlIHRoZSBjbGFzc2ljIHRyb3BlIG9mIGJ1aWxkaW5nIGEgcGl6emEgdG8gaWxsdXN0YXRlIGhvdyB0byBpbXBsZW1lbnQgdGhpcyBwYXR0ZXJuLiIpLG1keCgicCIsbnVsbCwiVGhlIHBhdHRlcm4gd29ya3MgYnkgdXNpbmcgdGhlIGZvbGxvd2luZzoiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiUHJvZHVjdCIpLCIgd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGxleCBvYmplY3QgdW5kZXIgY29uc3RydWN0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBwcm9kdWN0IGlzIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIlBpenphIiksIiBjbGFzcyB3aGljaCBkZW5vdGVzIG91ciBwaXp6YSBpbnN0YW5jZXMuIFdlIHdpbCBuYW1lIHRoaXMgb3VyICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiUGl6emFQcm9kdWN0IiksIi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIkJ1aWxkZXIiKSwiIHRoYXQgc3BlY2lmaWVzIHRoZSBhYnN0cmFjdCBjbGFzcyBmb3IgY3JlYXRpbmcgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiUHJvZHVjdCIpLCIgcGFydHMgKGluIG91ciBjYXNlIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIlBpenphIiksIikuIEluIHRoaXMgY2FzZSwgaXQgd2lsbCBiZSBvdXIgYWJzdHJhY3QgY2xhc3MgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJQaXp6YUJ1aWxkZXIiKSwiLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIkNvbmNyZXRlIEJ1aWxkZXJzIiksIiB3aGVyZSBlYWNoIGJ1aWxkZXIgaXMgcmVzcG9uc2libGUgdG8gaW5zdGFudGlhdGUgZGlmZmVyZW50IHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgcHJvZHVjdC4gSW4gdGhpcyBjYXNlLCB0aGUgY29uY3JldGUgYnVpbGRlcnMgd2lsbCBiZSBvdXIgY2xhc3NlcyB0aGF0IGNvbnN0cnVjdCBkaWZmZXJlbnQgdHlwZXMgb2YgcGl6emEgZGVub3RlZCBhcyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIk5Db25jcmV0ZUJ1aWxkZXIiKSwiIHdoZXJlIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIk4iKSwiIHJlcHJlc2VudHMgdGhlIG5hbWUgb2YgdGhlIGtpbmQgb2YgcGl6emEuIEFsbCB3ZSB3aWxsIGRvIGluIHRoaXMgZXhhbXBsZSBpcyBjcmVhdGUgYSBIYXdhaWluIHBpenphIGFuZCBhIE1lYXQgTG92ZXJzIHBpenphLCBzbyB0aGUgY29uY3JldGUgYnVpbGRlcnMgd2lsbCBiZSBjYWxsZWQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJIYXdhaWluQ29uY3JldGVCdWlsZGVyIiksIiBhbmQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJNZWF0TG92ZXJzQ29uY3JldGVCdWlsZGVyIiksIiBpbiB0aGlzIGV4YW1wbGUuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJEaXJlY3RvciIpLCIgdGhhdCBjb25zdHJ1Y3RzIHRoZSBvYmplY3QgdXNpbmcgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiQnVpbGRlciIpLCIgaW50ZXJmYWNlLiBJbiB0aGlzIGNhc2UsIHdlIHdpbGwgaGF2ZSB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJDaGVmRGlyZWN0b3IiKSwiIGNsYXNzIGZ1bGZpbCB0aGlzIHJvbGUuIFRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIkNoZWZEaXJlY3RvciIpLCIgd2lsbCBjcmVhdGUgYSBjaGVmIHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBwaXp6YS4iKSksbWR4KCJoMiIseyJpZCI6ImJ1aWxkZXItZGVzaWduLXBhdHRlcm4taW4tYWN0aW9uIn0sIkJ1aWxkZXIgRGVzaWduIFBhdHRlcm4gSW4gQWN0aW9uIiksbWR4KCJwIixudWxsLCJGaXJzdCwgbGV0J3MgYnVpbGQgb3VyICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJQaXp6YVByb2R1Y3QiKSwiLiBUbyBkbyBzbywgd2Ugd2lsbCBjcmVhdGUgYW4gaW50ZXJmYWNlIHRvIGVuc3VyZSBvdXIgcHJvZHVjdCB3aWxsIGluY2x1ZGUgYWxsIHRoZSBwaXp6YSBlc3NlbnRpYWxzIGFuZCB0aGVuIGltcGxlbWVudCB0aGF0IHRvIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIlBpenphUHJvZHVjdCIpLCIuIiksbWR4KCJwIixudWxsLCJUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIlBpenphUHJvZHVjdCIpLCIgaXRzZWxmIHdpbGwgY3JlYXRlIHRoZSBwaXp6YSBpbnN0YW5jZXMsIGJ1dCB3aWxsIHVsdGltYXRlbHkgYmUgYWJzdHJhY3RlZCBhd2F5IGFuZCBmbGV4aWJseSBidWlsdCB0aGFua3MgdG8gb3VyICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJEaXJlY3RvciIpLCIgYW5kICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJDb25jcmV0ZSBCdWlsZGVycyIpLCIuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmFzY3JpcHQifSksIi8vIGVhY2ggcGl6emEgcmVxdWlyZXMgYSBiYXNlLCBzYXVjZSBhbmQgdG9wcGluZyBwcm9wZXJ0eVxuLy8gYWxzbyBlbnN1cmUgYSB0YXN0ZSBtZXRob2QgaXMgaW1wbGVtZW50ZWRcbmludGVyZmFjZSBQaXp6YSB7XG4gICAgYmFzZTogc3RyaW5nO1xuICAgIHNhdWNlOiBzdHJpbmc7XG4gICAgdG9wcGluZzogc3RyaW5nO1xuICAgIHRhc3RlKCk6IHZvaWQ7XG59XG5cbmNsYXNzIFBpenphUHJvZHVjdCBpbXBsZW1lbnRzIFBpenphIHtcbiAgICBwcml2YXRlIF9iYXNlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdG9wcGluZzogc3RyaW5nO1xuICAgIHByaXZhdGUgX3NhdWNlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gaW5pdGlhbGlzZSBhbGwgdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3NcbiAgICAgICAgLy8gb3VyIGRpcmVjdCB3aWxsIHVzZSB0aGUgY29uY3JldGUgYnVpbGRlcnNcbiAgICAgICAgLy8gdG8gc2V0IGFsbCB0aGVzZSB2YWx1ZXMgZHVyaW5cbiAgICAgICAgdGhpcy5fYmFzZSA9ICcnO1xuICAgICAgICB0aGlzLl90b3BwaW5nID0gJyc7XG4gICAgICAgIHRoaXMuX3NhdWNlID0gJyc7XG4gICAgfVxuXG4gICAgc2V0IGJhc2UoYmFzZVZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fYmFzZSA9IGJhc2VWYWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgdG9wcGluZyh0b3BwaW5nVmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl90b3BwaW5nID0gdG9wcGluZ1ZhbHVlO1xuICAgIH1cblxuICAgIHNldCBzYXVjZShzYXVjZVZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fc2F1Y2UgPSBzYXVjZVZhbHVlO1xuICAgIH1cblxuICAgIHRhc3RlKCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhgQmFzZTogJHt0aGlzLl9iYXNlfSwgVG9wcGluZzogJHt0aGlzLl90b3BwaW5nfSwgU2F1Y2U6ICR7dGhpcy5fc2F1Y2V9LmApO1xuICAgIH1cbn1cbiIpKSxtZHgoImgyIix7ImlkIjoid3JpdGluZy1vdXItYWJzdHJhY3QtYnVpbGRlciJ9LCJXcml0aW5nIE91ciBBYnN0cmFjdCBCdWlsZGVyIiksbWR4KCJwIixudWxsLCJOZXh0LCB3ZSBuZWVkIHRvIGRlZmluZSBvdXIgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIlBpenphQnVpbGRlciIpLCIuIFRoaXMgYnVpbGRlciB3aWxsIGJlIGFuIGFic3RyYWN0IGNsYXNzIHRoYXQgZGVmaW5lcyB0aGUgcmVxdWlyZWQgbWV0aG9kcyBhbmQgc2V0IHRoZSBiYXNlIGZvciBvdXIgY29uY3JldGUgYnVpbGRlcnMgdG8gZXh0ZW5kIGZyb20uIiksbWR4KCJwIixudWxsLCJOb3RlOiBhbiBhYnN0cmFjdCBjbGFzcyBjYW5ub3QgaGF2ZSBhbiBpbnN0YW5jZSBjcmVhdGVkLiBUaGlzIGlzIGluY3JlZGlibHkgaW1wb3J0YW50LiBUaGUgaW5zdGFuY2VzIGNyZWF0ZWQgaW4gdGhlIHByb2dyYW0gd2lsbCBiZSBkb25lIGJ5IG91ciBjb25jcmV0ZSBidWlsZGVycyBsYXRlci4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiYWJzdHJhY3QgY2xhc3MgUGl6emFCdWlsZGVyIHtcbiAgICAvLyB0aGlzIHJlbGF0aW9uIHRvIHRoZSBQaXp6YVByb2R1Y3QgaXMgd2hhdCBhYnN0cmFjdHMgdGhlIFBpenphUHJvZHVjdFxuICAgIC8vIGZyb20gdGhlIGNvZGUgcnVuIGZyb20gdGhlIHByb2dyYW1cbiAgICBwcm90ZWN0ZWQgX3BpenphOiBQaXp6YVByb2R1Y3Q7XG5cbiAgICAvLyB3ZSBzZXQgdGhlc2UgZnVuY3Rpb25zIHRvIGFic3RyYWN0IGJlY2F1c2Ugd2Ugd2FudFxuICAgIC8vIHRoZSBjb25jcmV0ZSBidWlsZGVycyB0aGF0IGV4dGVuZCB0aGUgUGl6emFCdWlsZGVyXG4gICAgLy8gdG8gaW1wbGVtZW50IHRoZXNlIGZ1bmN0aW9uc1xuICAgIGFic3RyYWN0IGJ1aWxkQmFzZSgpOiB2b2lkO1xuICAgIGFic3RyYWN0IGJ1aWxkU2F1Y2UoKTogdm9pZDtcbiAgICBhYnN0cmFjdCBidWlsZFRvcHBpbmcoKTogdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Ygc2ltcGxpY3R5IGluc3RlYWQgb2YgYSBtYWtlUGl6emEgZnVuY3Rpb25cbiAgICAgICAgLy8gd2Ugd2lsbCBqdXN0IGluc3RhbnRpYXRlIGFuIFwiZW1wdHlcIiBwaXp6YSB3aGVuIGEgYnVpbGRlclxuICAgICAgICAvLyBpbnN0YW5jZSBpcyBpbml0aWFsaXNlZFxuICAgICAgICB0aGlzLl9waXp6YSA9IG5ldyBQaXp6YVByb2R1Y3QoKTtcbiAgICB9XG5cbiAgICBnZXQgcGl6emEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waXp6YTtcbiAgICB9XG59XG4iKSksbWR4KCJoMiIseyJpZCI6IndyaXRpbmctb3VyLWNvbmNyZXRlLWJ1aWxkZXJzIn0sIldyaXRpbmcgT3VyIENvbmNyZXRlIEJ1aWxkZXJzIiksbWR4KCJwIixudWxsLCJOb3cgdGhhdCB0aGUgYWJzdHJhY3QgYnVpbGRlciBoYXMgYmVlbiBjcmVhdGVkLCB3ZSBub3cgY3JlYXRlIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY29uY3JldGUgYnVpbGRlcnMiKSwiLiBSZW1lbWJlciwgdGhlIHJvbGUgb2YgZWFjaCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY29uY3JldGUgYnVpbGRlciIpLCIgaXMgdGhlIGJ1aWxkIG91dCBkaWZmZXJlbnQgdmVyc2lvbnMgb2Ygb3VyICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJQaXp6YVByb2R1Y3QiKSwiLiIpLG1keCgicCIsbnVsbCwiTm90ZTogc2luY2Ugd2UgYXJlIGV4dGVuZGVkIGZyb20gdGhlIGFic3RyYWN0IGNsYXNzLCB3ZSBkbyBub3QgbmVlZCB0byBvdmVycmlkZSB0aGUgY29uc3RydWN0b3IgbWV0aG9kLiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBtZXRob2QgcHJvdmlkZWQgaW4gdGhlIHN1cGVyIGNsYXNzICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJQaXp6YUJ1aWxkZXIiKSwiIHdpbGwgaGFuZGxlIG91ciBpbnN0YW50aWF0aW9uIG9mIHRoZSBwcml2YXRlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJfcGl6emEiKSwiIHByb3BlcnR5IGFzIHdlbGwgYXMgdGhlIGdldHRlciwgc28gdGhlIGNvZGUgZm9yIHRoZXNlIGNvbmNyZXRlIGJ1aWxkZXJzIHNob3VsZCBiZSBzdHJhaWdodCBmb3J3YXJkIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImFic3RyYWN0IGNsYXNzZXMiKSwiIHJlcXVpcmVkLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhc2NyaXB0In0pLCJjbGFzcyBIYXdhaWluQ29uY3JldGVCdWlsZGVyIGV4dGVuZHMgUGl6emFCdWlsZGVyIHtcbiAgYnVpbGRCYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3BpenphLmJhc2UgPSAndGhpY2sgY3J1c3QnO1xuICB9XG5cbiAgYnVpbGRTYXVjZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9waXp6YS5zYXVjZSA9ICd0b21hdG8nO1xuICB9XG5cbiAgYnVpbGRUb3BwaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuX3BpenphLnRvcHBpbmcgPSAnaGFtIGFuZCBwaW5lYXBwbGUnO1xuICB9XG59XG5cbmNsYXNzIE1lYXRMb3ZlcnNDb25jcmV0ZUJ1aWxkZXIgZXh0ZW5kcyBQaXp6YUJ1aWxkZXIge1xuICBidWlsZEJhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fcGl6emEuYmFzZSA9ICd0aGluIGNydXN0JztcbiAgfVxuXG4gIGJ1aWxkU2F1Y2UoKTogdm9pZCB7XG4gICAgdGhpcy5fcGl6emEuc2F1Y2UgPSAndG9tYXRvJztcbiAgfVxuXG4gIGJ1aWxkVG9wcGluZygpOiB2b2lkIHtcbiAgICB0aGlzLl9waXp6YS50b3BwaW5nID0gJ2EgbG90IG9mIG1lYXQnO1xuICB9XG59XG4iKSksbWR4KCJoMiIseyJpZCI6IndyaXRpbmctb3VyLWRpcmVjdG9yIn0sIldyaXRpbmcgT3VyIERpcmVjdG9yIiksbWR4KCJwIixudWxsLCJGaW5hbGx5LCB3ZSBjYW4gYnVpbGQgb3VyIENoZWYgRGlyZWN0b3IuIFRoZSByb2xlIG9mIHRoZSBkaXJlY3RvciBpcyB0byB0YWtlIGFueSBidWlsZGVyIHRoYXQgY29uZm9ybXMgdG8gb3VyIGFic3RyYWN0IGJ1aWxkZXIgY2xhc3MgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIlBpenphQnVpbGRlciIpLCIgYW5kIG1ha2UgdGhlIHBpenphcyBhbmQgdGFzdGUgdGhlIHBpenphcy4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiY2xhc3MgQ2hlZkRpcmVjdG9yIHtcbiAgICBwcml2YXRlIHBpenphQnVpbGRlcj86IFBpenphQnVpbGRlcjtcblxuICAgIG1ha2VQaXp6YShwaXp6YUJ1aWxkZXI6IFBpenphQnVpbGRlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnBpenphQnVpbGRlciA9IHBpenphQnVpbGRlcjtcbiAgICAgICAgdGhpcy5waXp6YUJ1aWxkZXIuYnVpbGRCYXNlKCk7XG4gICAgICAgIHRoaXMucGl6emFCdWlsZGVyLmJ1aWxkU2F1Y2UoKTtcbiAgICAgICAgdGhpcy5waXp6YUJ1aWxkZXIuYnVpbGRUb3BwaW5nKCk7XG4gICAgfVxuXG4gICAgdGFzdGVQaXp6YSgpOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5waXp6YUJ1aWxkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHBpenphIGJ1aWxkZXIgcHJvcGVydHkgZGVmaW5lZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnBpenphQnVpbGRlci5waXp6YS50YXN0ZSgpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iKSksbWR4KCJoMiIseyJpZCI6InB1dHRpbmctaXQtYWxsLXRvZ2V0aGVyIn0sIlB1dHRpbmcgSXQgQWxsIFRvZ2V0aGVyIiksbWR4KCJwIixudWxsLCJOb3cgdGhhdCBhbGwgb3VyIHJlcXVpcmVkIGNvZGUgaGFzIGJlZW4gd3JpdHRlbiwgd2UgY2FuIGhhcHBpbHkgd3JpdGUgYSBxdWl0ZSBzY3JpcHQgdG8gdGVzdCB0aGF0IGFuIGluc3RhbmNlIG9mIG91ciAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiQ2hlZkRpcmVjdG9yIiksIiBjYW4gbWFrZSBib3RoIGEgXCJIYXdhaWluXCIgYW5kIFwiTWVhdCBMb3ZlcnNcIiBwaXp6YSEiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiLy8gdGhlIGRpcmVjdG9yIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYW5kIHRhc3RlIHBpenphc1xuY29uc3QgY2hlZkRpcmVjdG9yID0gbmV3IENoZWZEaXJlY3RvcigpO1xuXG4vLyB0aGUgY29uY3JldGUgYnVpbGRlcnMgd2lsbCBub3cgYmUgdXNlZCB0byBkZWZpbmVcbi8vIHdoYXQgdHlwZSBvZiBwaXp6YSB0aGUgY2hlZiB3aWxsIG1ha2UgYW5kIHRhc3RlXG5jb25zdCBoYXdhaWluQnVpbGRlciA9IG5ldyBIYXdhaWluQ29uY3JldGVCdWlsZGVyKCk7XG5jb25zdCBtZWF0TG92ZXJzQnVpbGRlciA9IG5ldyBNZWF0TG92ZXJzQ29uY3JldGVCdWlsZGVyKCk7XG5cbi8vIEZpcnN0LCBsZXQncyB0ZXN0IG91ciBIYXdhaWluIFBpenphXG5jaGVmRGlyZWN0b3IubWFrZVBpenphKGhhd2FpaW5CdWlsZGVyKTtcbmNoZWZEaXJlY3Rvci50YXN0ZVBpenphKCk7XG5cbi8vIFNlY29uZGx5LCBsZXQncyB0ZXN0IG91ciBNZWF0IExvdmVyc1xuY2hlZkRpcmVjdG9yLm1ha2VQaXp6YShtZWF0TG92ZXJzQnVpbGRlcik7XG5jaGVmRGlyZWN0b3IudGFzdGVQaXp6YSgpO1xuIikpLG1keCgicCIsbnVsbCwiSWYgd2Ugbm93IGNoZWNrIG91ciBjb25zb2xlLCB3ZSBjYW4gc2VlIG91ciByZXN1bHRzOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1tZCJ9KSwiQmFzZTogdGhpY2sgY3J1c3QsIFRvcHBpbmc6IGhhbSBhbmQgcGluZWFwcGxlLCBTYXVjZTogdG9tYXRvLlxuQmFzZTogdGhpbiBjcnVzdCwgVG9wcGluZzogYSBsb3Qgb2YgbWVhdCwgU2F1Y2U6IHRvbWF0by5cbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9CdWlsZGVyLVBhdHRlcm4ubWQifX0pO31NRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Builder-Pattern.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"builder-pattern\"\n    }}>{`Builder Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Builder Pattern`}</inlineCode>{` enables us to create different instance representations using the same construction code.`}</p>\n    <p>{`In this scenario, we will use the classic trope of building a pizza to illustate how to implement this pattern.`}</p>\n    <p>{`The pattern works by using the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` which represents the complex object under construction. In this case, the product is the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{` class which denotes our pizza instances. We wil name this our `}<inlineCode parentName=\"li\">{`PizzaProduct`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` that specifies the abstract class for creating the `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` parts (in our case the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{`). In this case, it will be our abstract class `}<inlineCode parentName=\"li\">{`PizzaBuilder`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Concrete Builders`}</inlineCode>{` where each builder is responsible to instantiate different representations of the product. In this case, the concrete builders will be our classes that construct different types of pizza denoted as `}<inlineCode parentName=\"li\">{`NConcreteBuilder`}</inlineCode>{` where the `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` represents the name of the kind of pizza. All we will do in this example is create a Hawaiin pizza and a Meat Lovers pizza, so the concrete builders will be called `}<inlineCode parentName=\"li\">{`HawaiinConcreteBuilder`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`MeatLoversConcreteBuilder`}</inlineCode>{` in this example.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Director`}</inlineCode>{` that constructs the object using the `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` interface. In this case, we will have the `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` class fulfil this role. The `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` will create a chef that is used to create the different types of pizza.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"builder-design-pattern-in-action\"\n    }}>{`Builder Design Pattern In Action`}</h2>\n    <p>{`First, let's build our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`. To do so, we will create an interface to ensure our product will include all the pizza essentials and then implement that to a `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{` itself will create the pizza instances, but will ultimately be abstracted away and flexibly built thanks to our `}<inlineCode parentName=\"p\">{`Director`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Concrete Builders`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// each pizza requires a base, sauce and topping property\n// also ensure a taste method is implemented\ninterface Pizza {\n    base: string;\n    sauce: string;\n    topping: string;\n    taste(): void;\n}\n\nclass PizzaProduct implements Pizza {\n    private _base: string;\n    private _topping: string;\n    private _sauce: string;\n\n    constructor() {\n        // initialise all values to empty strings\n        // our direct will use the concrete builders\n        // to set all these values durin\n        this._base = '';\n        this._topping = '';\n        this._sauce = '';\n    }\n\n    set base(baseValue: string) {\n        this._base = baseValue;\n    }\n\n    set topping(toppingValue: string) {\n        this._topping = toppingValue;\n    }\n\n    set sauce(sauceValue: string) {\n        this._sauce = sauceValue;\n    }\n\n    taste(): void {\n        console.log(\\`Base: \\${this._base}, Topping: \\${this._topping}, Sauce: \\${this._sauce}.\\`);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-abstract-builder\"\n    }}>{`Writing Our Abstract Builder`}</h2>\n    <p>{`Next, we need to define our `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{`. This builder will be an abstract class that defines the required methods and set the base for our concrete builders to extend from.`}</p>\n    <p>{`Note: an abstract class cannot have an instance created. This is incredibly important. The instances created in the program will be done by our concrete builders later.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`abstract class PizzaBuilder {\n    // this relation to the PizzaProduct is what abstracts the PizzaProduct\n    // from the code run from the program\n    protected _pizza: PizzaProduct;\n\n    // we set these functions to abstract because we want\n    // the concrete builders that extend the PizzaBuilder\n    // to implement these functions\n    abstract buildBase(): void;\n    abstract buildSauce(): void;\n    abstract buildTopping(): void;\n\n    constructor() {\n        // added for the sake of simplicty instead of a makePizza function\n        // we will just instantiate an \"empty\" pizza when a builder\n        // instance is initialised\n        this._pizza = new PizzaProduct();\n    }\n\n    get pizza() {\n        return this._pizza;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-concrete-builders\"\n    }}>{`Writing Our Concrete Builders`}</h2>\n    <p>{`Now that the abstract builder has been created, we now create the `}<inlineCode parentName=\"p\">{`concrete builders`}</inlineCode>{`. Remember, the role of each `}<inlineCode parentName=\"p\">{`concrete builder`}</inlineCode>{` is the build out different versions of our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`Note: since we are extended from the abstract class, we do not need to override the constructor method. The base constructor method provided in the super class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` will handle our instantiation of the private `}<inlineCode parentName=\"p\">{`_pizza`}</inlineCode>{` property as well as the getter, so the code for these concrete builders should be straight forward implementations of the `}<inlineCode parentName=\"p\">{`abstract classes`}</inlineCode>{` required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class HawaiinConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thick crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'ham and pineapple';\n  }\n}\n\nclass MeatLoversConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thin crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'a lot of meat';\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-director\"\n    }}>{`Writing Our Director`}</h2>\n    <p>{`Finally, we can build our Chef Director. The role of the director is to take any builder that conforms to our abstract builder class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` and make the pizzas and taste the pizzas.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class ChefDirector {\n    private pizzaBuilder?: PizzaBuilder;\n\n    makePizza(pizzaBuilder: PizzaBuilder): void {\n        this.pizzaBuilder = pizzaBuilder;\n        this.pizzaBuilder.buildBase();\n        this.pizzaBuilder.buildSauce();\n        this.pizzaBuilder.buildTopping();\n    }\n\n    tastePizza(): void {\n        try {\n            if (!this.pizzaBuilder) {\n                throw new Error('No pizza builder property defined');\n            }\n\n            this.pizzaBuilder.pizza.taste();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"putting-it-all-together\"\n    }}>{`Putting It All Together`}</h2>\n    <p>{`Now that all our required code has been written, we can happily write a quite script to test that an instance of our `}<inlineCode parentName=\"p\">{`ChefDirector`}</inlineCode>{` can make both a \"Hawaiin\" and \"Meat Lovers\" pizza!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the director will be used to create and taste pizzas\nconst chefDirector = new ChefDirector();\n\n// the concrete builders will now be used to define\n// what type of pizza the chef will make and taste\nconst hawaiinBuilder = new HawaiinConcreteBuilder();\nconst meatLoversBuilder = new MeatLoversConcreteBuilder();\n\n// First, let's test our Hawaiin Pizza\nchefDirector.makePizza(hawaiinBuilder);\nchefDirector.tastePizza();\n\n// Secondly, let's test our Meat Lovers\nchefDirector.makePizza(meatLoversBuilder);\nchefDirector.tastePizza();\n`}</code></pre>\n    <p>{`If we now check our console, we can see our results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`Base: thick crust, Topping: ham and pineapple, Sauce: tomato.\nBase: thin crust, Topping: a lot of meat, Sauce: tomato.\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}