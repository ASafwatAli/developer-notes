{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/COMP3306-AI/2-Problem-Solving-And-Search.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/COMP3306-AI/2-Problem-Solving-And-Search.md","mtime":1548209344275},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"problem-solving-and-search\"}},\"Problem Solving and Search\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Learning Aims\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Uninformed Search: BFS, DFS, UCS and IDS \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Informed Search: Greedy Best-First\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"search-problem-formulation\"}},\"Search Problem Formulation\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Defined by 4 items:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Initial state \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Goal state \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Operators = actions \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Path cost function \")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Choosing States and Actions\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Real problems are too complex, to solve them we need to \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"abstract\"),\" them! Simplify them by removing unnecessary details.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Eg. If we need to find the path somewhere, we can ignore things such as weather, road conditions, scenary.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Actions need to be suitable specified eg not \\\"turn the steering wheel left by 5 degrees\\\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"level of abstraction\"),\" must be appropriate.\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"State = set of real states \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Action = complex combination of real actions \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Solution = set of real paths that are solutions in the real world\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"8-Queens Problem\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Incremental - stat with empty space, add 1 queen at a time \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Complete-state - start with all 8 queens and move them around \")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"For 1:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"States? Any arrangement of 0 to 8 queens \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Initial state? No queens on the board \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Operators? Add any queen to any square \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"State space? 1.8 \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"li\"},\" 10^14 states (= 64 \"),\" 63 \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"li\"},\" ... \"),\" 57)\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"For 2:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"States? Any arrangement of 0 to 8 queens, 1 in each column with no queen attacking each other\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Initial state? No queens on the board\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Operators? Place a queen in the left-most-empty column such that it is not attacked by any other queen \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"State space? 2057 states \")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"For 100-queens:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"1: 10^400 states \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"2: 10^52 states (hugh improvement but problem still not tractable)\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"searching-for-solutions\"}},\"Searching for solutions\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Searching the state space \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Generate a search tree starting from the initial state and applying the operators \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"We can generate a search graph - in a graph the same state can be reached rom multiple paths\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"tree-search-algorithm---pseudo-code\"}},\"Tree search algorithm - pseudo code\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Basic idea: offline exploration of the state space by generating successors of the explored states (i.e. exapnding states)\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"We keep two lists:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Expanded - for nodes that have been expanded \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Fringe - for nodes that bae been generated but not expanded yet\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"nodes-vs-states\"}},\"Nodes vs States\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"node\"),\" is different than a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"state\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"A node:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"represents a state \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"is a data structure used in the search tree \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"includes \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"parent\"),\", \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"children\"),\", and other relevant information e.g. \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"depth\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"path cost g\"))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"search-strategies\"}},\"Search Strategies\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"A \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"search strategy\"),\" defines which node from the fringe is most promising and should be expanded next\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"We always keep the nodes in the fringe orded based on the search strategy and always expand the first one \")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Evaluation Critera\")),React.createElement(MDXTag,{name:\"table\",components:components},React.createElement(MDXTag,{name:\"thead\",components:components,parentName:\"table\"},React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"thead\"},React.createElement(MDXTag,{name:\"th\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Term\"),React.createElement(MDXTag,{name:\"th\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Definition\"))),React.createElement(MDXTag,{name:\"tbody\",components:components,parentName:\"table\"},React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Completeness\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"is it guaranteed to find a solution if one exists?\")),React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Optimality\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"is it guaranteed to find an \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"td\"},\"optimal (least cost path)\"),\" solution?\")),React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Time complexity\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"How long does it take to find the solution? (measured as no. of generated nodes)\")),React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Space complexity\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"what is the max number of nodes in memory?\")))),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Time and space complexity\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Measured in terms of:\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"b: max branching factor of the search tree (we can assume that it is finite)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"d: depth of the optimal (least cost) solution \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"m: maximum depth of the state space (can be finite or not finite)\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"There are two types of search methods:\")),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Uninformed (blind)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Informed (heuristic)\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"uninformed-blind-search-strategies\"}},\"Uninformed (Blind) Search Strategies\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Uninformed strategies:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Generate children in a systematic way eg level by level, from left to right \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Know if a child node is a goal or non-goal node \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Do not know if one non-goal child is better (more promising) than another one. By contrast, informed (heuristic) search strategies know this\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"5 uninformed search strategies:\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Breadth first \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Uniform-cost \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Depth-first \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Depth-limited \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Iterative deepening\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"bfs---breadth-first-search\"}},\"BFS - Breadth First Search\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"Is the first node in the fringe a goal node?\\n    Yes => stop and return solution\\n    No => expand it:\\n        - Move it to the expanded list\\n        - Generate its children and put them in the fringe in a order defined by the search strategy\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Properties\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Complete? Yes\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Optimal? Not optimal in general; Yes, if step cost is the same, e.g. =1\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Time? generated nodes = \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"1+b+b^2+ ... + b^d = O(b^d)\"),\", exponential\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Space? O(b^d) (keeps every node in memory)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Both time and space are problems as they grow exponentially with depth but space is the bigger problem!\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"ucs---uniform-cost-search\"}},\"UCS - Uniform Cost Search\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Complete? Yes ( if step cost>0 )\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Optimal? Yes\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Time? # nodes with g \\uF0A3 cost of optimal solution O(bd)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Space? # nodes with g \\uF0A3 cost of optimal solution O(bd)\")),React.createElement(MDXTag,{name:\"p\",components:components},\"UCS is equivalent to BFS if the step cost is 1 or the same\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"dfs---depth-firth-search\"}},\"DFS - Depth-Firth Search\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Expands deepest unexpanded node\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Implementation: insert children at the front of the fringe Fringe: A\\nExpanded: none\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"ids---iterative-deepening-searh-ids\"}},\"IDS - Iterative Deepening Searh (IDS)\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Sidesteps issue o choosing the best depth limit by trying all possible depth limits in turn (0, 1, 2, etc.) and applying DFS.\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Depth-limited search = DFS with depth limit l\\n- i.e. it imposes a cutoff on the maximum depth\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Properties - similar to DFS\\n- Complete? Yes (as the search depth is always finite)\\n- Optimal? No\\n- Time? 1+b^2+b^3+b^4 + ... +b^l = O(b^l)\\n- Space? O(bl)\"))),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Overhead of multiple expansion\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"May seem wasteful as many nodes are expanded multiple times\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"But for most problems the overhead of this multiple expansion is small!\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Common properties of IDS\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"b - branching factor \\nd - depth of least cost solution \\nm - max depth \\n\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Combines the benefits of DFS and BFS\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Complete? As BFS:\\n- Yes \",\"[DFS: yes, if m is finite; no otherwise]\",\"* \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Optimal? As BFS:\\n- No in general; Yes if step cost=1 \",\"[DFS: not optimal, even if step cost=1]\",\" *\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Time? As BFS:\\n- \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"(d+1)b^0+db^1+(d-1)b^2+ ... +bd = O(b^d) [DFS: O(bm)] *\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Space? As DFS: O(bd), linear\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Where are the improvements of IDS in comparison to DFS? - in completeness, optimality and time (shown with *)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Can be modified to explore uniform-cost tree\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"informed-vs-uninformed-search\"}},\"Informed vs Uninformed Search\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"A search strategy defines the order of node expansion\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Uniformed\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Uninformed search strategies do not use problem specific knowledge beyond the definition of the problem, i.e. they do not use heuristic knowledge.\\n- expand nodes systematically\\n- know if node is goal or non-goal\\n- cannot compare two non-goal nodes (do not know if one goal node is better than another)\\n- typically inefficient\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Informed\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Informed search strategies use problem-specific heuristic knowledge to select the order of node expansion. They:\\n- can compare non-goal nodes \\u2013 they know if one non-goal node is better than another one\\n- are typically more efficient\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"best-first-search\"}},\"Best First Search\"),React.createElement(MDXTag,{name:\"p\",components:components},\"How can informed strategies compare non-goal nodes?\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"By using domain specific knowledge to devise an evaluation function which estimates how good each node is\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The evaluation function assigns a value to each node\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"At each step, the best node is expanded (the one with the best\\nvalue)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"This is called best-first search\\n- Note that we don\\u2019t really know which is the best node as we use an estimate based on the evaluation function. So best-first search expands the node that appears to be the best.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Fringe: insert children in decreasing order of desirability\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"We will study 2 best-first search algorithms: greedy and A*\")),React.createElement(MDXTag,{name:\"hr\",components:components}),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"greedy-search-gs\"}},\"Greedy Search (GS)\"),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Uses \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"h\"),\" value as an evaluation function (h - heuristic)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"h(n)\"),\" for node \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"n\"),\" is the estimated cost from \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"n\"),\" to a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"goal\"),\" node\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Eg for the Romania example we can use \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"h(n)=SLD(n, Bucharest)\"),\" = straight-line distance from \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"n\"),\" to Bucharest\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"h\"),\" value of a goal node is 0, i.e. \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"h(goal)=0\"))),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"Properties\")),React.createElement(MDXTag,{name:\"ul\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Complete? As DFS\\n- Yes in finite spaces (if \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"m\"),\" is finite)\\n- No - fails in infinite spaces (can get stuck in a loop)\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Optimal? No \"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Time? O(b^m) but good heauristic can give dramatic improvement\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ul\"},\"Space? O(b^m), keeps every node in memory\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/COMP3306-AI/2-Problem-Solving-And-Search.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"problem-solving-and-search\"}}>{`Problem Solving and Search`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Learning Aims`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Uninformed Search: BFS, DFS, UCS and IDS `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Informed Search: Greedy Best-First`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"search-problem-formulation\"}}>{`Search Problem Formulation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Defined by 4 items:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Initial state `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Goal state `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Operators = actions `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Path cost function `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Choosing States and Actions`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Real problems are too complex, to solve them we need to `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`abstract`}</MDXTag>{` them! Simplify them by removing unnecessary details.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Eg. If we need to find the path somewhere, we can ignore things such as weather, road conditions, scenary.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Actions need to be suitable specified eg not \"turn the steering wheel left by 5 degrees\".`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`level of abstraction`}</MDXTag>{` must be appropriate.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`State = set of real states `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Action = complex combination of real actions `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Solution = set of real paths that are solutions in the real world`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`8-Queens Problem`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Incremental - stat with empty space, add 1 queen at a time `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Complete-state - start with all 8 queens and move them around `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`For 1:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Initial state? No queens on the board `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Operators? Add any queen to any square `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`State space? 1.8 `}<MDXTag name=\"em\" components={components} parentName=\"li\">{` 10^14 states (= 64 `}</MDXTag>{` 63 `}<MDXTag name=\"em\" components={components} parentName=\"li\">{` ... `}</MDXTag>{` 57)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`For 2:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens, 1 in each column with no queen attacking each other`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Initial state? No queens on the board`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Operators? Place a queen in the left-most-empty column such that it is not attacked by any other queen `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`State space? 2057 states `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`For 100-queens:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`1: 10^400 states `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`2: 10^52 states (hugh improvement but problem still not tractable)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"searching-for-solutions\"}}>{`Searching for solutions`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Searching the state space `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Generate a search tree starting from the initial state and applying the operators `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`We can generate a search graph - in a graph the same state can be reached rom multiple paths`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"tree-search-algorithm---pseudo-code\"}}>{`Tree search algorithm - pseudo code`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Basic idea: offline exploration of the state space by generating successors of the explored states (i.e. exapnding states)`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`We keep two lists:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Expanded - for nodes that have been expanded `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Fringe - for nodes that bae been generated but not expanded yet`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"nodes-vs-states\"}}>{`Nodes vs States`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`node`}</MDXTag>{` is different than a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`A node:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`represents a state `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`is a data structure used in the search tree `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`includes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`parent`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`children`}</MDXTag>{`, and other relevant information e.g. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`depth`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`path cost g`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"search-strategies\"}}>{`Search Strategies`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`search strategy`}</MDXTag>{` defines which node from the fringe is most promising and should be expanded next`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`We always keep the nodes in the fringe orded based on the search strategy and always expand the first one `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Evaluation Critera`}</MDXTag></MDXTag>\n<MDXTag name=\"table\" components={components}>\n<MDXTag name=\"thead\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"thead\">\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Term`}</MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Definition`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"tbody\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Completeness`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`is it guaranteed to find a solution if one exists?`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Optimality`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`is it guaranteed to find an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"td\">{`optimal (least cost path)`}</MDXTag>{` solution?`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Time complexity`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`How long does it take to find the solution? (measured as no. of generated nodes)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Space complexity`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`what is the max number of nodes in memory?`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Time and space complexity`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Measured in terms of:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`b: max branching factor of the search tree (we can assume that it is finite)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`d: depth of the optimal (least cost) solution `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`m: maximum depth of the state space (can be finite or not finite)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`There are two types of search methods:`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Uninformed (blind)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Informed (heuristic)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"uninformed-blind-search-strategies\"}}>{`Uninformed (Blind) Search Strategies`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Uninformed strategies:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Generate children in a systematic way eg level by level, from left to right `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Know if a child node is a goal or non-goal node `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Do not know if one non-goal child is better (more promising) than another one. By contrast, informed (heuristic) search strategies know this`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`5 uninformed search strategies:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Breadth first `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Uniform-cost `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Depth-first `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Depth-limited `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Iterative deepening`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"bfs---breadth-first-search\"}}>{`BFS - Breadth First Search`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`Is the first node in the fringe a goal node?\n    Yes => stop and return solution\n    No => expand it:\n        - Move it to the expanded list\n        - Generate its children and put them in the fringe in a order defined by the search strategy\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Properties`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complete? Yes`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Optimal? Not optimal in general; Yes, if step cost is the same, e.g. =1`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Time? generated nodes = `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`1+b+b^2+ ... + b^d = O(b^d)`}</MDXTag>{`, exponential`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Space? O(b^d) (keeps every node in memory)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Both time and space are problems as they grow exponentially with depth but space is the bigger problem!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"ucs---uniform-cost-search\"}}>{`UCS - Uniform Cost Search`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complete? Yes ( if step cost>0 )`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Optimal? Yes`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Time? # nodes with g  cost of optimal solution O(bd)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Space? # nodes with g  cost of optimal solution O(bd)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`UCS is equivalent to BFS if the step cost is 1 or the same`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"dfs---depth-firth-search\"}}>{`DFS - Depth-Firth Search`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Expands deepest unexpanded node`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Implementation: insert children at the front of the fringe Fringe: A\nExpanded: none`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"ids---iterative-deepening-searh-ids\"}}>{`IDS - Iterative Deepening Searh (IDS)`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Sidesteps issue o choosing the best depth limit by trying all possible depth limits in turn (0, 1, 2, etc.) and applying DFS.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Depth-limited search = DFS with depth limit l\n- i.e. it imposes a cutoff on the maximum depth`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Properties - similar to DFS\n- Complete? Yes (as the search depth is always finite)\n- Optimal? No\n- Time? 1+b^2+b^3+b^4 + ... +b^l = O(b^l)\n- Space? O(bl)`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Overhead of multiple expansion`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`May seem wasteful as many nodes are expanded multiple times`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`But for most problems the overhead of this multiple expansion is small!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Common properties of IDS`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`b - branching factor \nd - depth of least cost solution \nm - max depth \n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Combines the benefits of DFS and BFS`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complete? As BFS:\n- Yes `}{`[DFS: yes, if m is finite; no otherwise]`}{`* `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Optimal? As BFS:\n- No in general; Yes if step cost=1 `}{`[DFS: not optimal, even if step cost=1]`}{` *`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Time? As BFS:\n- `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`(d+1)b^0+db^1+(d-1)b^2+ ... +bd = O(b^d) [DFS: O(bm)] *`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Space? As DFS: O(bd), linear`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Where are the improvements of IDS in comparison to DFS? - in completeness, optimality and time (shown with *)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Can be modified to explore uniform-cost tree`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"informed-vs-uninformed-search\"}}>{`Informed vs Uninformed Search`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A search strategy defines the order of node expansion`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Uniformed`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Uninformed search strategies do not use problem specific knowledge beyond the definition of the problem, i.e. they do not use heuristic knowledge.\n- expand nodes systematically\n- know if node is goal or non-goal\n- cannot compare two non-goal nodes (do not know if one goal node is better than another)\n- typically inefficient`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Informed`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Informed search strategies use problem-specific heuristic knowledge to select the order of node expansion. They:\n- can compare non-goal nodes – they know if one non-goal node is better than another one\n- are typically more efficient`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"best-first-search\"}}>{`Best First Search`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How can informed strategies compare non-goal nodes?`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`By using domain specific knowledge to devise an evaluation function which estimates how good each node is`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The evaluation function assigns a value to each node`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`At each step, the best node is expanded (the one with the best\nvalue)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`This is called best-first search\n- Note that we don’t really know which is the best node as we use an estimate based on the evaluation function. So best-first search expands the node that appears to be the best.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Fringe: insert children in decreasing order of desirability`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`We will study 2 best-first search algorithms: greedy and A*`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"greedy-search-gs\"}}>{`Greedy Search (GS)`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`h`}</MDXTag>{` value as an evaluation function (h - heuristic)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`h(n)`}</MDXTag>{` for node `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`n`}</MDXTag>{` is the estimated cost from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`n`}</MDXTag>{` to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`goal`}</MDXTag>{` node`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Eg for the Romania example we can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`h(n)=SLD(n, Bucharest)`}</MDXTag>{` = straight-line distance from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`n`}</MDXTag>{` to Bucharest`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`h`}</MDXTag>{` value of a goal node is 0, i.e. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`h(goal)=0`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Properties`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complete? As DFS\n- Yes in finite spaces (if `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`m`}</MDXTag>{` is finite)\n- No - fails in infinite spaces (can get stuck in a loop)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Optimal? No `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Time? O(b^m) but good heauristic can give dramatic improvement`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Space? O(b^m), keeps every node in memory`}</MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}