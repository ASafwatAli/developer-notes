{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/Principles/Typography.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/Principles/Typography.md","mtime":1548209344410},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"fonts-cli\"}},\"Fonts CLI\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This tool is a wrapper to help download/rename fonts to fit with the font naming conventions.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"conventions\"}},\"Conventions\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code).\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"To see the conventional name for font weights, \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"}},\"Mozilla has a reference here.\")),React.createElement(MDXTag,{name:\"h3\",components:components,props:{\"id\":\"examples\"}},\"Examples\"),React.createElement(MDXTag,{name:\"table\",components:components},React.createElement(MDXTag,{name:\"thead\",components:components,parentName:\"table\"},React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"thead\"},React.createElement(MDXTag,{name:\"th\",components:components,parentName:\"tr\",props:{\"align\":null}},\"Example name\"),React.createElement(MDXTag,{name:\"th\",components:components,parentName:\"tr\",props:{\"align\":null}},\"After renaming\"))),React.createElement(MDXTag,{name:\"tbody\",components:components,parentName:\"table\"},React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"SourceSansPro-200.ttf\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"source-sans-pro-extra-light.ttf\")),React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"SourceSansPro-200italic.ttf\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"source-sans-pro-extra-light-italic.ttf\")),React.createElement(MDXTag,{name:\"tr\",components:components,parentName:\"tbody\"},React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"SourceSansPro-regular.ttf\"),React.createElement(MDXTag,{name:\"td\",components:components,parentName:\"tr\",props:{\"align\":null}},\"source-sans-pro-regular.ttf\")))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"renaming\"}},\"Renaming\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Running the rename function will find the path of the fonts and return it in the condition we require for the convention.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const oldNames = [\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\\n];\\n\\n/*\\n    // ! after renaming oldNames through function\\n\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\\n*/\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"You can use something like the following to do this:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"const fs = require('fs-extra');\\nconst cwd = process.cwd();\\nconst recursive = require('recursive-readdir');\\nconst kebabCase = require('lodash.kebabcase');\\n\\n/**\\n * Replace names of fonts found within directory\\n * with naming convention.\\n *\\n */\\nconst updateFontNames = async() => {\\n    /**\\n     * ! Replace numeral with comment name - hack job.\\n     *\\n     * @param {string} name Name of the font to update\\n     */\\n    const commentWeightName = name => {\\n        name = name.replace('100', 'thin');\\n        name = name.replace('200', 'extra-light');\\n        name = name.replace('300', 'light');\\n        name = name.replace('400', 'normal');\\n        name = name.replace('500', 'medium');\\n        name = name.replace('600', 'semi-bold');\\n        name = name.replace('700', 'bold');\\n        name = name.replace('800', 'extra-bold');\\n        name = name.replace('900', 'black');\\n        return name;\\n    }\\n\\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\\n    for (const fontPath of fontFiles) {\\n        try {\\n            const fontDirArr = fontPath.split('/');\\n            const fontNameFull = fontDirArr.pop();\\n            const font = fontNameFull.replace('.ttf', '');\\n            const fontDir = fontDirArr.join('/');\\n            let kebabFontName = kebabCase(font);\\n            const newFontName = commentWeightName(kebabFontName);\\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\\n        } catch (err) {\\n            console.error(err);\\n        }\\n    }\\n};\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"convention-usage-for-web\"}},\"Convention usage for Web\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-scss\"}},\"/* open sans - light */\\n@font-face {\\n    font-family: 'open-sans-regular';\\n    font-style: normal;\\n    font-weight: 300;\\n    // local() just checks for local files first\\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\\n}\\n\\n// Font mixins\\n@mixin f-opensans-regular {\\n    font: {\\n        family: 'open-sans-regular', sans-serif;\\n    }\\n}\\n\\n// optional - flexible usage\\n@mixin f-primary-regular {\\n    // option a)\\n    @include f-opensans-regular;\\n    // option b) - don't include the above mixin for this\\n    font: {\\n        family: 'open-sans-regular', sans-serif;\\n    }\\n}\\n\\n// usage for standard base class\\np,\\nli {\\n    @include f-primary-regular;\\n    font-size: 1.5rem;\\n    line-height: 1.4;\\n    margin-bottom: 10px;\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"convention-usage-for-react-native-not-expo\"}},\"Convention usage for React Native (not Expo)\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For React Native, fonts MUST be kept at the root in \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"assets/fonts\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file).\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"}},\"Check here for more information on what to do.\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"convention-usage-for-expo\"}},\"Convention usage for Expo\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For React Native, fonts MUST be kept at the root in \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"assets/fonts\"),\".\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import { Font } from 'expo';\\n\\nexport default class App extends React.Component {\\n  componentDidMount() {\\n    Font.loadAsync({\\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\\n    });\\n  }\\n\\n  // ...\\n}\\n\")));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/Principles/Typography.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"fonts-cli\"}}>{`Fonts CLI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This tool is a wrapper to help download/rename fonts to fit with the font naming conventions.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"conventions\"}}>{`Conventions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To see the conventional name for font weights, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"}}>{`Mozilla has a reference here.`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"examples\"}}>{`Examples`}</MDXTag>\n<MDXTag name=\"table\" components={components}>\n<MDXTag name=\"thead\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"thead\">\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Example name`}</MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`After renaming`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"tbody\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`SourceSansPro-200.ttf`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`source-sans-pro-extra-light.ttf`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`SourceSansPro-200italic.ttf`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`source-sans-pro-extra-light-italic.ttf`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`SourceSansPro-regular.ttf`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`source-sans-pro-regular.ttf`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"renaming\"}}>{`Renaming`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Running the rename function will find the path of the fonts and return it in the condition we require for the convention.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const oldNames = [\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\n];\n\n/*\n    // ! after renaming oldNames through function\n\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\n*/\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can use something like the following to do this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const fs = require('fs-extra');\nconst cwd = process.cwd();\nconst recursive = require('recursive-readdir');\nconst kebabCase = require('lodash.kebabcase');\n\n/**\n * Replace names of fonts found within directory\n * with naming convention.\n *\n */\nconst updateFontNames = async() => {\n    /**\n     * ! Replace numeral with comment name - hack job.\n     *\n     * @param {string} name Name of the font to update\n     */\n    const commentWeightName = name => {\n        name = name.replace('100', 'thin');\n        name = name.replace('200', 'extra-light');\n        name = name.replace('300', 'light');\n        name = name.replace('400', 'normal');\n        name = name.replace('500', 'medium');\n        name = name.replace('600', 'semi-bold');\n        name = name.replace('700', 'bold');\n        name = name.replace('800', 'extra-bold');\n        name = name.replace('900', 'black');\n        return name;\n    }\n\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\n    for (const fontPath of fontFiles) {\n        try {\n            const fontDirArr = fontPath.split('/');\n            const fontNameFull = fontDirArr.pop();\n            const font = fontNameFull.replace('.ttf', '');\n            const fontDir = fontDirArr.join('/');\n            let kebabFontName = kebabCase(font);\n            const newFontName = commentWeightName(kebabFontName);\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"convention-usage-for-web\"}}>{`Convention usage for Web`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-scss\"}}>{`/* open sans - light */\n@font-face {\n    font-family: 'open-sans-regular';\n    font-style: normal;\n    font-weight: 300;\n    // local() just checks for local files first\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\n}\n\n// Font mixins\n@mixin f-opensans-regular {\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// optional - flexible usage\n@mixin f-primary-regular {\n    // option a)\n    @include f-opensans-regular;\n    // option b) - don't include the above mixin for this\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// usage for standard base class\np,\nli {\n    @include f-primary-regular;\n    font-size: 1.5rem;\n    line-height: 1.4;\n    margin-bottom: 10px;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"convention-usage-for-react-native-not-expo\"}}>{`Convention usage for React Native (not Expo)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For React Native, fonts MUST be kept at the root in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`assets/fonts`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file).`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"}}>{`Check here for more information on what to do.`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"convention-usage-for-expo\"}}>{`Convention usage for Expo`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For React Native, fonts MUST be kept at the root in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`assets/fonts`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { Font } from 'expo';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    Font.loadAsync({\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\n    });\n  }\n\n  // ...\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}