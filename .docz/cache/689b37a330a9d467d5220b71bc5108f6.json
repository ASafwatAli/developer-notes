{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/okeeffe_d/Business/Documentation/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md","mtime":1548209344332},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"reading-the-d3-documentation\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Reading the D3 Documentation\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"- [Reading the D3 Documentation](#reading-the-d3-documentation)\\n- [map() and filter() methods](#map-and-filter-methods)\\n- [d3 methods](#d3-methods)\\n- [Programmatic SVGs](#programmatic-svgs)\\n- [Scaling Data](#scaling-data)\\n- [Styling with CSS](#styling-with-css)\\n- [Adding Text to the chart](#adding-text-to-the-chart)\\n- [Using SVG groups](#using-svg-groups)\\n\")), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#section-4-making-a-complex-chart\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Section 4: Making a Complex Chart\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#working-with-arrays-of-objects\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Working with Arrays of Objects\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#creating-an-ordinal-scale\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Creating an Ordinal Scale\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#setting-colour-with-colour-scales\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Setting colour with colour scales\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#adding-x-and-y-axis\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Adding X and Y axis\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#flipping-the-axes\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Flipping the axes\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#adding-gridlines\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Adding Gridlines\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#rotating-the-x-axis-titles\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Rotating the X axis titles\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#adding-axis-labels\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Adding axis labels\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#updating-the-plot-function-with-best-practises\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Updating the plot function with best practises\")))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"#secontion-5-making-the-chart-interactive\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Secontion 5: Making the Chart Interactive\"))), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"API Documentation is a great link to bookmark\")), React.createElement(MDXTag, {\n        name: \"hr\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"map-and-filter-methods\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"map() and filter() methods\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"var data = [123, 52, 46, 30, 4];\\n\\nconst results = data.filter((entry) => {\\n    return entry > 50;\\n});\\n\\nconst mapping = data.map((entry) => {\\n    console.log(entry.key);\\n    console.log(entry.value);\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"hr\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"d3-methods\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"d3 methods\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"const example = d3.min(data);\\nconsole.log(example);       // values returned\\n\\nconst dataLoHiValue = d3.extent(data);  // return min/max as array\\n\\nvar dictMinValue = d3.min(dounts, (d, i) {\\n    return d.value;\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"hr\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"programmatic-svgs\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Programmatic SVGs\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"var data = [132,71,337,93,78,43,20,16,30,8,17,21];\\nlet svg = d3.select('body').append('svg')\\n                .attr('id', 'chart')\\n                .attr('height', 450)\\n                .attr('width', 800);\\n\\n// creating the bars\\n// vertical bar graph\\nsvg.selectAll('.bar')\\n    .data(data)\\n    .enter()                // enter phase\\n    .append('rect')\\n    .attr('class', 'bar')   // for future selections\\n    .attr('x', 0)\\n    .attr('y', (d i) => {\\n        return i * 20;\\n    })\\n    .attr('width', (d, i) => {\\n        return d;\\n    })\\n    .attr('height', 19);\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"scaling-data\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Scaling Data\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Creating scaling functions for both x and y.\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, w]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, h]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\n// creating the bars\\n// vertical bar graph\\nsvg\\n    .selectAll('.bar')\\n    .data(data)\\n    .enter() // enter phase\\n    .append('rect')\\n    .attr('class', 'bar') // for future selections\\n    .attr('x', 0)\\n    .attr('y', (d, i) => {\\n        return y(i);\\n    })\\n    .attr('width', (d, i) => {\\n        return x(d); // x() does the scaling\\n    })\\n    .attr('height', (d, i) => {\\n        return y(1) - 1;\\n    });\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"styling-with-css\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Styling with CSS\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Getting rid of the aliasing\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-css\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \".bar {\\n    fill: purple;\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Not that \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"attr('class', 'bar')\"), \" will manually reset the class value, so you can also use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \".classed('bar', true)\"), \" - true to add the class, false to remove.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"adding-text-to-the-chart\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Adding Text to the chart\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Creating scaling functions for both x and y.\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, w]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, h]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d;\\n        });\\n}\\n\\n// first arg will be what is referenced by \\\"this\\\"\\nplot.call(svg, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"using-svg-groups\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Using SVG groups\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"SVG groups are like a div that are a convenience element to allow children to be moved and affected together.\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale\\n    .linear()\\n    .domain([0, d3.max(data)])\\n    .range([0, width]);\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, height]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('id', 'chart')\\n    .attr('height', h)\\n    .attr('width', w);\\n\\nlet chart = svg\\n    .append('g')\\n    .classed('display', true)\\n    .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d;\\n        });\\n}\\n\\n// first arg will be what is referenced by \\\"this\\\"\\nplot.call(chart, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"hr\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"section-4-making-a-complex-chart\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"Section 4: Making a Complex Chart\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"working-with-arrays-of-objects\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"Working with Arrays of Objects\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, \"If working with a dict, we need an accessor function!\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, \"var data = [\\n    { key: 'Glazed', value: 132 },\\n    { key: 'Jelly', value: 71 },\\n    { key: 'Holes', value: 337 },\\n    { key: 'Sprinkles', value: 93 },\\n    { key: 'Crumb', value: 78 },\\n    { key: 'Chocolate', value: 43 },\\n    { key: 'Coconut', value: 20 },\\n    { key: 'Cream', value: 16 },\\n    { key: 'Cruller', value: 30 },\\n    { key: '\\xC9clair', value: 8 },\\n    { key: 'Fritter', value: 17 },\\n    { key: 'Bearclaw', value: 21 }\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale\\n    .linear()\\n    .domain([\\n        0,\\n        d3.max(data, (d) => {\\n            return d.value;\\n        })\\n    ])\\n    .range([0, width]);\\n\\nlet y = d3.scale\\n    .linear()\\n    .domain([0, data.length])\\n    .range([0, height]);\\n\\nlet svg = d3\\n    .select('body')\\n    .append('svg')\\n    .attr('width', 800)\\n    .attr('height', 420)\\n    .attr('id', 'chart');\\nlet chart = svg\\n    .append('g')\\n    .classed('display', true)\\n    .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter() // enter phase\\n        .append('rect')\\n        .attr('class', 'bar') // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value); // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y(1) - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value); // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(i);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y(1) / 1.5 + 2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"creating-an-ordinal-scale\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, \"Creating an Ordinal Scale\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, \"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n    })])\\n        .range([0, width]);\\nvar y = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"setting-colour-with-colour-scales\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, \"Setting colour with colour scales\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, \"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n    })])\\n        .range([0, width]);\\nvar y = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\n// alter colours using linear scale\\nlet linearColorScale = d3.scale.linear()\\n                        .domain([0, data.length])\\n                        .range(['#572500', '#F68026']);\\n\\n// ordinal for distinct colours\\nlet ordinalColorScale = d3.scale.category20();\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"adding-x-and-y-axis\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }, \"Adding X and Y axis\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, \"// after the colour scales\\n\\nlet xAxis = d3.svg.axis()           // svg portion of the d3 library\\n                .scale(x)\\n                .orient('bottom');\\n\\nlet yAxis = d3.svg.axis()\\n                .scale(y)\\n                .orient('left');\\n\\n...\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', 0)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return y.rangeBand() - 1;\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n    this.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis);\\n    this.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"flipping-the-axes\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      }, \"Flipping the axes\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      }, \"How to create a column chart?\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651\n        },\n        __self: this\n      }, \"height needs to take an offset\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652\n        },\n        __self: this\n      }, \"other values essentially invert\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653\n        },\n        __self: this\n      }, \"text anchor will be \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653\n        },\n        __self: this\n      }, \"middle\"), \" in css\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, \"var data = [\\n    {key: \\\"Glazed\\\",     value: 132},\\n    {key: \\\"Jelly\\\",      value: 71},\\n    {key: \\\"Holes\\\",      value: 337},\\n    {key: \\\"Sprinkles\\\",  value: 93},\\n    {key: \\\"Crumb\\\",      value: 78},\\n    {key: \\\"Chocolate\\\",  value: 43},\\n    {key: \\\"Coconut\\\",    value: 20},\\n    {key: \\\"Cream\\\",      value: 16},\\n    {key: \\\"Cruller\\\",    value: 30},\\n    {key: \\\"\\xC9clair\\\",     value: 8},\\n    {key: \\\"Fritter\\\",    value: 17},\\n    {key: \\\"Bearclaw\\\",   value: 21}\\n];\\n\\nlet w = 800;\\nlet h = 450;\\nlet margin = {\\n    top: 20,\\n    bottom: 20,\\n    left: 20,\\n    right: 20\\n};\\n\\nvar width = w - margin.left - margin.right;\\nvar height = h - margin.top - margin.bottom;\\n\\nlet x = d3.scale.ordinal()          // need distinct values eg keys\\n        .domain(data.map((entry) => {\\n            return entry.key;\\n        }))\\n        .rangeBands([0, height]);   // used for distinct values\\n\\nlet y = d3.scale.linear()\\n        .domain([0, d3.max(data, (d) => {\\n            return d.value;\\n        })])\\n        .range([height, 0]);    // IMPORTANT CHANGE FROM [0, width]\\n\\n// alter colours using linear scale\\nlet linearColorScale = d3.scale.linear()\\n                        .domain([0, data.length])\\n                        .range(['#572500', '#F68026']);\\n\\n// ordinal for distinct colours\\nlet ordinalColorScale = d3.scale.category20();\\n\\nlet svg = d3.select('body').append('svg')\\n                        .attr('width', 800)\\n            .attr('height', 420)\\n            .attr('id', 'chart');\\nlet chart = svg.append('g')\\n                .classed('display', true)\\n        .attr('transform', 'translate(20, 20)');\\n\\nfunction plot(params) {\\n    // creating the bars\\n    // vertical bar graph\\n    this.selectAll('.bar')\\n        .data(params.data)\\n        .enter()                // enter phase\\n        .append('rect')\\n        .attr('class', 'bar')   // for future selections\\n        .attr('x', (d, i) => {\\n            return x(d.key);\\n        })\\n        .attr('y', (d, i) => {\\n            return y(d.value);\\n        })\\n        .attr('width', (d, i) => {\\n            return x(d.value);      // x() does the scaling\\n        })\\n        .attr('height', (d, i) => {\\n            return x.rangeBand();\\n        })\\n        .style('fill', (d, i) => {\\n            return linearColorScale(i);\\n        });\\n\\n    this.selectAll('.bar-label')\\n        .data(params.data)\\n        .enter()\\n        .append('text')\\n        .classed('bar-label', true)\\n        .attr('x', (d, i) => {\\n            return x(d.value);          // use css to change the anchor\\n        })\\n        .attr('dx', -4)\\n        .attr('y', (d, i) => {\\n            return y(d.key);\\n        })\\n        .attr('dy', (d, i) => {\\n            return y.rangeBand()/1.5+2;\\n        })\\n        .text((d, i) => {\\n            return d.value;\\n        });\\n\\n        this.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis);\\n        this.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n}\\n\\nplot.call(chart, {\\n    data: data\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"adding-gridlines\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 767\n        },\n        __self: this\n      }, \"Adding Gridlines\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768\n        },\n        __self: this\n      }, \"var yGridlines = d3.svg.axis()              // create another \\\"axis\\\"\\n                    .scale(y)\\n                    .tickSize(-width, 0, 0)             // used to adjust the axis\\n                    .tickFormat('')\\n                    .orient('left');\\n\\n// add these grid lines with the call function at the start of the plot function\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776\n        },\n        __self: this\n      }, \"The grid lines also need to be styled! Hit up the CSS file to do this.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }, \".gridline path,\\n.gridline line {\\n    fill: none;\\n    color: blue;\\n    shape-rendering: crispEdges;\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"rotating-the-x-axis-titles\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784\n        },\n        __self: this\n      }, \"Rotating the X axis titles\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, \"...\\nthis.append('g')\\n            .classed('x axis', true)\\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\\n            .call(xAxis)\\n                .selectAll('text')\\n                    .style('text-anchor', 'end')\\n                    .attr('dx', -8)\\n                    .attr('dy', 8)\\n                    .attr('transform', 'translate(0,0), rotate(-45)');\\nthis.append('g')\\n            .classed('y axis', true)\\n            .attr('transform', 'translate(0, 0)')\\n            .call(yAxis);\\n...\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"adding-axis-labels\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801\n        },\n        __self: this\n      }, \"Adding axis labels\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802\n        },\n        __self: this\n      }, \"// within the plot function at the bottom\\n\\nthis.select('.y.axis')\\n    .append('text')\\n    .attr('x', 0)\\n    .attr('y', 0)\\n    .style('text-anchor', 'middle')\\n    .attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\\n    .text('Units sold');\\n\\nthis.select('.x.axis')\\n    .append('text')\\n    .attr('x', 0)\\n    .attr('y', 0)\\n    .style('text-anchor', 'middle')\\n    .attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\\n    .text('Donut Type');\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"updating-the-plot-function-with-best-practises\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820\n        },\n        __self: this\n      }, \"Updating the plot function with best practises\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 822\n        },\n        __self: this\n      }, \"Add new parameter entries.\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824\n        },\n        __self: this\n      }, \"plot.call(chart, {\\n    data: data,\\n    axis: {\\n        x: xAxis,\\n        y: yAxis\\n    },\\n    gridlines: yGridlines\\n}\\n})\\n\")), React.createElement(MDXTag, {\n        name: \"hr\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834\n        },\n        __self: this\n      }), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"secontion-5-making-the-chart-interactive\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 835\n        },\n        __self: this\n      }, \"Secontion 5: Making the Chart Interactive\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837\n        },\n        __self: this\n      }, \"Sorting data using things like buttons.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        },\n        __self: this\n      }, \"Similary to jquery, with have d3 methods like \\\"on\\\"\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 839\n        },\n        __self: this\n      }, \"Using the '+' prefix will convert the string to a number\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840\n        },\n        __self: this\n      }, \"To show updated \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840\n        },\n        __self: this\n      }, \"data\"), \" changes, we need to know about the phases // enter(), update(), exit()\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841\n        },\n        __self: this\n      }, \"we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842\n        },\n        __self: this\n      }, \"you must update the domains when you update data!\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, \"// do for all elements we wish to remove\\nthis.selectAll('.bar')\\n    .data(params.data)\\n    .exit()\\n    .remove();\\n\")));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md\");\n  leaveModule(module);\n})();\n\n;\nMDXContent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MDXContent\"\n};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/JavaScript/JS-D3-Udemy.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"reading-the-d3-documentation\"}}>{`Reading the D3 Documentation`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`- [Reading the D3 Documentation](#reading-the-d3-documentation)\n- [map() and filter() methods](#map-and-filter-methods)\n- [d3 methods](#d3-methods)\n- [Programmatic SVGs](#programmatic-svgs)\n- [Scaling Data](#scaling-data)\n- [Styling with CSS](#styling-with-css)\n- [Adding Text to the chart](#adding-text-to-the-chart)\n- [Using SVG groups](#using-svg-groups)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#section-4-making-a-complex-chart\"}}>{`Section 4: Making a Complex Chart`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#working-with-arrays-of-objects\"}}>{`Working with Arrays of Objects`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#creating-an-ordinal-scale\"}}>{`Creating an Ordinal Scale`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#setting-colour-with-colour-scales\"}}>{`Setting colour with colour scales`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-x-and-y-axis\"}}>{`Adding X and Y axis`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#flipping-the-axes\"}}>{`Flipping the axes`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-gridlines\"}}>{`Adding Gridlines`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#rotating-the-x-axis-titles\"}}>{`Rotating the X axis titles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-axis-labels\"}}>{`Adding axis labels`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#updating-the-plot-function-with-best-practises\"}}>{`Updating the plot function with best practises`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#secontion-5-making-the-chart-interactive\"}}>{`Secontion 5: Making the Chart Interactive`}</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`API Documentation is a great link to bookmark`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"map-and-filter-methods\"}}>{`map() and filter() methods`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [123, 52, 46, 30, 4];\n\nconst results = data.filter((entry) => {\n    return entry > 50;\n});\n\nconst mapping = data.map((entry) => {\n    console.log(entry.key);\n    console.log(entry.value);\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"d3-methods\"}}>{`d3 methods`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const example = d3.min(data);\nconsole.log(example);       // values returned\n\nconst dataLoHiValue = d3.extent(data);  // return min/max as array\n\nvar dictMinValue = d3.min(dounts, (d, i) {\n    return d.value;\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"programmatic-svgs\"}}>{`Programmatic SVGs`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132,71,337,93,78,43,20,16,30,8,17,21];\nlet svg = d3.select('body').append('svg')\n                .attr('id', 'chart')\n                .attr('height', 450)\n                .attr('width', 800);\n\n// creating the bars\n// vertical bar graph\nsvg.selectAll('.bar')\n    .data(data)\n    .enter()                // enter phase\n    .append('rect')\n    .attr('class', 'bar')   // for future selections\n    .attr('x', 0)\n    .attr('y', (d i) => {\n        return i * 20;\n    })\n    .attr('width', (d, i) => {\n        return d;\n    })\n    .attr('height', 19);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"scaling-data\"}}>{`Scaling Data`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Creating scaling functions for both x and y.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\n// creating the bars\n// vertical bar graph\nsvg\n    .selectAll('.bar')\n    .data(data)\n    .enter() // enter phase\n    .append('rect')\n    .attr('class', 'bar') // for future selections\n    .attr('x', 0)\n    .attr('y', (d, i) => {\n        return y(i);\n    })\n    .attr('width', (d, i) => {\n        return x(d); // x() does the scaling\n    })\n    .attr('height', (d, i) => {\n        return y(1) - 1;\n    });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"styling-with-css\"}}>{`Styling with CSS`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Getting rid of the aliasing`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-css\"}}>{`.bar {\n    fill: purple;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Not that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`attr('class', 'bar')`}</MDXTag>{` will manually reset the class value, so you can also use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.classed('bar', true)`}</MDXTag>{` - true to add the class, false to remove.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-text-to-the-chart\"}}>{`Adding Text to the chart`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Creating scaling functions for both x and y.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(svg, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"using-svg-groups\"}}>{`Using SVG groups`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`SVG groups are like a div that are a convenience element to allow children to be moved and affected together.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, width]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"section-4-making-a-complex-chart\"}}>{`Section 4: Making a Complex Chart`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"working-with-arrays-of-objects\"}}>{`Working with Arrays of Objects`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If working with a dict, we need an accessor function!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`var data = [\n    { key: 'Glazed', value: 132 },\n    { key: 'Jelly', value: 71 },\n    { key: 'Holes', value: 337 },\n    { key: 'Sprinkles', value: 93 },\n    { key: 'Crumb', value: 78 },\n    { key: 'Chocolate', value: 43 },\n    { key: 'Coconut', value: 20 },\n    { key: 'Cream', value: 16 },\n    { key: 'Cruller', value: 30 },\n    { key: 'Éclair', value: 8 },\n    { key: 'Fritter', value: 17 },\n    { key: 'Bearclaw', value: 21 }\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([\n        0,\n        d3.max(data, (d) => {\n            return d.value;\n        })\n    ])\n    .range([0, width]);\n\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('width', 800)\n    .attr('height', 420)\n    .attr('id', 'chart');\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-an-ordinal-scale\"}}>{`Creating an Ordinal Scale`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"setting-colour-with-colour-scales\"}}>{`Setting colour with colour scales`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-x-and-y-axis\"}}>{`Adding X and Y axis`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// after the colour scales\n\nlet xAxis = d3.svg.axis()           // svg portion of the d3 library\n                .scale(x)\n                .orient('bottom');\n\nlet yAxis = d3.svg.axis()\n                .scale(y)\n                .orient('left');\n\n...\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n    this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n    this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"flipping-the-axes\"}}>{`Flipping the axes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How to create a column chart?`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`height needs to take an offset`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`other values essentially invert`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`text anchor will be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`middle`}</MDXTag>{` in css`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet y = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n        })])\n        .range([height, 0]);    // IMPORTANT CHANGE FROM [0, width]\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', (d, i) => {\n            return x(d.key);\n        })\n        .attr('y', (d, i) => {\n            return y(d.value);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return x.rangeBand();\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n\n        this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n        this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-gridlines\"}}>{`Adding Gridlines`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var yGridlines = d3.svg.axis()              // create another \"axis\"\n                    .scale(y)\n                    .tickSize(-width, 0, 0)             // used to adjust the axis\n                    .tickFormat('')\n                    .orient('left');\n\n// add these grid lines with the call function at the start of the plot function\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The grid lines also need to be styled! Hit up the CSS file to do this.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`.gridline path,\n.gridline line {\n    fill: none;\n    color: blue;\n    shape-rendering: crispEdges;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"rotating-the-x-axis-titles\"}}>{`Rotating the X axis titles`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`...\nthis.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis)\n                .selectAll('text')\n                    .style('text-anchor', 'end')\n                    .attr('dx', -8)\n                    .attr('dy', 8)\n                    .attr('transform', 'translate(0,0), rotate(-45)');\nthis.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n...\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"adding-axis-labels\"}}>{`Adding axis labels`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// within the plot function at the bottom\n\nthis.select('.y.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\n    .text('Units sold');\n\nthis.select('.x.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\n    .text('Donut Type');\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"updating-the-plot-function-with-best-practises\"}}>{`Updating the plot function with best practises`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Add new parameter entries.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`plot.call(chart, {\n    data: data,\n    axis: {\n        x: xAxis,\n        y: yAxis\n    },\n    gridlines: yGridlines\n}\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"secontion-5-making-the-chart-interactive\"}}>{`Secontion 5: Making the Chart Interactive`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Sorting data using things like buttons.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Similary to jquery, with have d3 methods like \"on\"`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Using the '+' prefix will convert the string to a number`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`To show updated `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`data`}</MDXTag>{` changes, we need to know about the phases // enter(), update(), exit()`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`you must update the domains when you update data!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// do for all elements we wish to remove\nthis.selectAll('.bar')\n    .data(params.data)\n    .exit()\n    .remove();\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}