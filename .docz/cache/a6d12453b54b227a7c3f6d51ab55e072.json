{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md","mtime":1548282825014},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiY2xvdWRmb3JtYXRpb24tbWFzdGVyLWNsYXNzIn0sIkNsb3VkRm9ybWF0aW9uIE1hc3RlciBDbGFzcyIpLG1keCgiaDIiLHsiaWQiOiJ3aGF0LWlzLWNsb3VkZm9ybWF0aW9uIn0sIldoYXQgaXMgQ2xvdWRGb3JtYXRpb24iKSxtZHgoInAiLG51bGwsIkhhdmluZyA+NTAgc2VydmljZXMsIENsb3VkRm9ybWF0aW9uIHdhcyBicm91Z2h0IGluIHRvIGhlbHAgZGV2ZWxvcHMgc2NhZmZvbGQgb3V0IHRoZSByZXF1aXJlcyBBV1Mgc3RhY2suIiksbWR4KCJwIixudWxsLCJFZy4gSSB3YW50IGEgc2VjdXJpdHkgZ3JvdXAsIHR3byBFQzIgbWFjaGluZXMgd2l0aCBpdCwgdHdvIGVsYXN0aWMgSVBzLCBhbiBTMyBidWNrZXQgKyBhIGxvYWQgYmFsYW5jZXIgaW4gZnJvbnQuIiksbWR4KCJwIixudWxsLCJDbG91ZEZvcm1hdGlvbiB3aWxsIGNyZWF0ZSBhbGwgb2YgdGhpcyBpbiB0aGUgcmlnaHQgb3JkZXIgd2l0aCB0aGUgZXhhY3QgY29uZmlnLiIpLG1keCgiaDIiLHsiaWQiOiJiZW5lZml0cyJ9LCJCZW5lZml0cyIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkluZnJhc3RydWN0dXJlIGFzIGNvZGUiLG1keCgidWwiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJObyBtYW51YWwgY3JlYXRpb24iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQ2FuIGJlIHZlcnNpb24gY29udHJvbGxlZCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJDaGFuZ2VzIHRvIGluZnJhc3RydWN0dXJlIGFyZSByZXZpZXdlZCB0aHJvdWdoIGNvZGUiKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJDb3N0IixtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiRWFjaCByZXNvdXJjZSB3aWxsIGJlIHRhZ2dlZCBzbyB5b3UgY2FuIGVzdGltYXRlIHRoZSBjb3N0cyBhbmQgZmlndXJlIG91dCB3aGljaCBjb3N0cyB3aGF0IiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkdyZWF0IHNhdmluZ3Mgc3RyYXRlZ3kiKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJQcm9kdWN0aXZpdHkiLG1keCgidWwiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBYmlsaXR5IHRvIGRlc3Ryb3kgYW5kIHJlLWNyZWF0ZSBhbiBpbmZyYXN0cnVjdHVyZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBdXRvbWF0ZWQgZ2VuZXJhdGlvbiBvZiBEaWFncmFtIGZvciB0ZW1wbGF0ZXMiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQWxsIGRlY2xhcmF0aXZlIikpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiU2VwYXJhdGlvbiBvZiBjb25jZXJuIixtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTWFueSBkaWZmZXJlbnQgc3RhY2tzIGZvciBtYW55IGRpZmZlcmVudCBsYXllcnMiKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJEb24ndCByZS1pbnZlbnQgdGhlIHdoZWVsIixtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQWxyZWFkeSBzbyBtYW55IHRlbXBsYXRlcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJMZXZlcmFnZSB0aGUgZG9jcyIpKSkpLG1keCgiaDIiLHsiaWQiOiJjbG91ZGZvcm1hdGlvbi12cy1hbnNpYmxlLS10ZXJyYWZvcm0ifSwiQ2xvdWRGb3JtYXRpb24gdnMgQW5zaWJsZSAvIFRlcnJhZm9ybSIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkNGIGlzIG5hdGl2ZSwgYW5kIGFsc28gY29udGFpbiB0aGUgbGF0ZXN0IiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkNGIGlzIHN0YXRlIGJhc2VkIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlRoZSBvdGhlcnMgYXJlIGluc3RydWN0aW9uIGJhc2VkIC0gZGlmZmljdWx0IHRvIG9yY2hlc3RyYXRlIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkZvciBuZXcgc2VydmljZXMsIEFuc2libGUgLyBUZXJyYWZvcm0gY2FuIHRha2UgYSBsb25nIHRpbWUiKSksbWR4KCJoMiIseyJpZCI6ImZpcnN0LXRlbXBsYXRlIn0sIkZpcnN0IHRlbXBsYXRlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIi0tLVxuUmVzb3VyY2VzOlxuICBNeUluc3RhbmNlOlxuICAgIFR5cGU6IEFXUzo6RUMyOjpJbnN0YW5jZVxuICAgIFByb3BlcnRpZXM6XG4gICAgICBBdmFpbGFiaWxpdHlab25lOiB1cy1lYXN0LTFhXG4gICAgICBJbWFnZUlkOiBhbWktYTRjN2VkYjJcbiAgICAgIEluc3RhbmNlVHlwZTogdDIubWljcm9cbiIpKSxtZHgoInAiLG51bGwsIlRoZSBzdGFjayBpbnN0YW5jZSBjYW4gYmUgY3JlYXRlZCwgdXBkYXRlZCBvciBkZXN0cm95ZWQuIiksbWR4KCJwIixudWxsLCJZb3UgY2Fubm90IGVkaXQgdGhlIHN0YWNrIGl0c2VsZiBsYXRlciwgeW91IG5lZWQgdG8ganVzdCByZS11cGRhdGUgdGhlIHN0YWNrIGJ5IHVwbG9hZGluZyBhIG5ldyBmaWxlLiIpLG1keCgicCIsbnVsbCwiVGhlIHN0YWNrIGl0c2VsZiBjYW4gY2xlYW4gdXAgaW5zdGFuY2VzIGFmdGVyIGl0c2VsZiB0b28uIiksbWR4KCJoMiIseyJpZCI6InlhbWwtaW50cm8ifSwiWUFNTCBJbnRybyIpLG1keCgicCIsbnVsbCwiWW91IGNhbiB1c2UgWUFNTCBvciBKU09OIGZvciB3cml0aW5nIGl0IC0gYnV0IEpTT04gaXMgdG91Z2ggZm9yIGl0IiksbWR4KCJwIixudWxsLCJBcnJheSBzdXBwb3J0OiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0se30pLCJwcm9kdWN0OlxuICAgIC0gdGVzdCAgOiAxXG4gICAgICBxdWFudGl0eTogMlxuICAgIC0gdGVzdCAgOiAyXG4gICAgICBxdWFudGl0eTogNFxuIikpLG1keCgiaDIiLHsiaWQiOiJjcmVhdGluZy1hLXMzLWJ1Y2tldCJ9LCJDcmVhdGluZyBhIFMzIEJ1Y2tldCIpLG1keCgicCIsbnVsbCwiR29vZ2xpbmcgZm9yIHRoZSB0eXBlLCB5b3Ugd2lsbCBnZXQgdGhlIGluIGRlcHRoIGRvY3MgZnJvbSBBV1MuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi0tLVxuUmVzb3VyY2VzOiAjIGFsd2F5cyB0aGUgc3RhcnRcbiAgICBNeVMzQnVja2V0OiAjIHRlbXBsYXRlIG5hbWVcbiAgICAgICAgVHlwZTogXCJBV1M6OlMzOjpCdWNrZXRcIlxuICAgICAgICBQcm9wZXJ0aWVzOlxuICAgICAgICAgICAgQWNjZXNzQ29udHJvbDogUHVibGljUmVhZFxuICAgICAgICAgICAgQnVja2V0TmFtZTogXCJ3d3cuc2l0ZS5jb21cIlxuIikpLG1keCgiaDMiLHsiaWQiOiJ0eXBlcy1vZi11cGRhdGVzIn0sIlR5cGVzIG9mIHVwZGF0ZXMiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJVcGRhdGVzIHdpdGggbm8gaW50ZXJydXB0aW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlJlcGxhY2VtZW50cyBhcmUgYnJlYWtpbmcgYW5kIG5lZWQgdG8gcmVwbGFjZSB0aGUgcmVzb3VyY2UiKSksbWR4KCJoMyIseyJpZCI6InByb3BlcnRpZXMifSwiUHJvcGVydGllcyIpLG1keCgicCIsbnVsbCwiT24gdGhlIHByb3BlcnRpZXMgdW5kZXIgdGhlIGRvY3MsIHlvdSBjYW4gc2VlIGluZm8gYWJvdXQgdGhlIHByb3BlcnRpZXMuIiksbWR4KCJoMyIseyJpZCI6ImRlbGV0aW5nLXRoZS1zdGFjayJ9LCJEZWxldGluZyB0aGUgc3RhY2siKSxtZHgoInAiLG51bGwsIkp1c3QgcmlnaHQgY2xpY2sgb24gdGhlIENsb3VkRm9ybWF0aW9uIGFuZCBkZWxldGUgdGhlIHJlc291cmNlcy4iKSxtZHgoImgyIix7ImlkIjoiY2xvdWRmb3JtYXRpb24tdGVtcGxhdGUtb3B0aW9ucyJ9LCJDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSBvcHRpb25zIiksbWR4KCJwIixudWxsLCJZb3UgaGF2ZSBhIGZldyB0ZW1wbGF0ZSBvcHRpb25zOiIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlRhZ3MiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUGVybWlzc2lvbnMgKElBTSByb2xlKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJOb3RpZmljYXRpb25zIE9wdGlvbnMgKFNOUyB0b3BpYykiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVGltZW91dHMgKG1pbnV0ZXMgYmVmb3JlIGNhbGxpbmcgZmFpbHVyZSkiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUm9sbGJhY2sgb24gRmFpbHVyZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTdGFjayBQb2xpY3kiKSksbWR4KCJwIixudWxsLCJUaGVzZSAoaWYgeW91IG1hbnVhbGx5IGRvIGl0KSBhbGwgc2hvdyB1cCBvbiB0aGUgXCJjcmVhdGUgc3RhY2tcIiBwYXJ0IG9mIENsb3VkRm9ybWF0aW9uLiIpLG1keCgicCIsbnVsbCwiVGhlIHRlbXBsYXRlIHJldmlldyBhbHNvIGdpdmVzIHlvdSBhbiBvcHBvcnR1bml0eSB0byBlc3RpbWF0ZSBjb3N0LiIpLG1keCgiaDIiLHsiaWQiOiJjbG91ZGZvcm1hdGlvbi1kZXNpZ25lciJ9LCJDbG91ZEZvcm1hdGlvbiBEZXNpZ25lciIpLG1keCgicCIsbnVsbCwiQSB2aXN1YWwgYWlkIHRvIGhlbHAgYnVpbGQgdGhlIENGIFN0YWNrLiBFbnN1cmUgdGhlIHRlbXBsYXRlIGlzIGFsc28gd2VsbCB3cml0dGVuLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBkcmFnIGFuZCBkcm9wIGJhc2ljYWxseSBldmVyeXRoaW5nLiBEcm9wcGluZyBpdCB3aWxsIGdpdmUgeW91IG9wdGlvbnMgdG8gc2VsZWN0aW5nIGRvY3VtZW50YXRpb24gZXRjLiIpLG1keCgicCIsbnVsbCwiSXQncyBncmVhdCBmb3IgZHJhZ2dpbmcgYW5kIGRyb3BwaW5nIHRlbXBsYXRlcyBhbmQgZ2l2aW5nIGluZm9ybWF0aW9uIG9uIHRoYXQgdGVtcGxhdGUgYXMgd2VsbC4iKSxtZHgoImgyIix7ImlkIjoiYnVpbGRpbmctYmxvY2tzIn0sIkJ1aWxkaW5nIEJsb2NrcyIpLG1keCgicCIsbnVsbCwiVGhlcmUgYXJlIGEgbnVtYmVyIG9mIGJ1aWxkaW5nIGJsb2NrcyBmb3IgZWFjaCB0ZW1wbGF0ZToiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJSZXNvdXJjZXM6IHlvdXIgQVdTIHJlc291cmNlcyBkZWNsYXJlZCBpbiB0aGUgdGVtcGxhdGUiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUGFyYW1ldGVyczogdGhlIGR5bmFtaWMgaW5wdXRzIGZvciB5b3VyIHRlbXBsYXRlIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIk1hcHBpbmdzOiB0aGUgc3RhdGljIHZhcmlhYmxlcyBmb3IgeW91ciB0ZW1wbGF0ZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJPdXRwdXRzOiBSZWZlcmVuY2VzIHRvIHdoYXQgaGFzIGJlZW4gY3JlYXRlZCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJDb25kaXRpb25hbHM6IExpc3Qgb2YgY29uZGl0aW9ucyB0byBwZXJmb3JtIHJlc291cmNlIGNyZWF0aW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIk1ldGFkYXRhIikpLG1keCgiaDIiLHsiaWQiOiJ0ZW1wbGF0ZS1oZWxwZXJzIn0sIlRlbXBsYXRlIGhlbHBlcnMiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJSZWZlcmVuY2VzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkZ1bmN0aW9ucyIpKSxtZHgoImgyIix7ImlkIjoiY2xvdWRmb3JtYXRpb24tcGFyYW1ldGVycyJ9LCJDbG91ZEZvcm1hdGlvbiBQYXJhbWV0ZXJzIiksbWR4KCJoMyIseyJpZCI6Im92ZXJ2aWV3In0sIk92ZXJ2aWV3IiksbWR4KCJwIixudWxsLCJXaGF0IGFyZSB0aGV5PyBUaGUgd2F5IHRvIHByb3ZpZGUgaW5wdXRzIHRvIHlvdXIgQVdTIENsb3VkRm9ybWF0aW9uIHRlbXBsYXRlLiIpLG1keCgicCIsbnVsbCwiVGhleSdyZSBpbXBvcnRhbnQgdG8ga25vdyBhYm91dCBpdDoiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJZb3Ugd2FudCB0byByZXVzZSB5b3VyIHRlbXBsYXRlcyBhY3Jvc3MgdGhlIGNvbXBhbnkiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiU29tZSBpbnB1dHMgY2FuIG5vdCBiZSBkZXRlcm1pbmVkIGFoZWFkIG9mIHRpbWUiKSksbWR4KCJwIixudWxsLCJUaGUgbWFqb3IgYmVuZWZpdDogeW91IHdvbid0IGhhdmUgdG8gcmUtdXBsb2FkIGEgdGVtcGxhdGUgdG8gY2hhbmdlIGl0cyBjb250ZW50LiIpLG1keCgiaDMiLHsiaWQiOiJ0aGVvcnktYW5kLWhhbmRzLW9uIn0sIlRoZW9yeSBhbmQgaGFuZHMgb24iKSxtZHgoInAiLG51bGwsIlBhcmFtZXRlcnMgY2FuIGJlIGNvbnRyb2xsZWQgYnkgYWxsIHRoZXNlIHNldHRpbmdzOiIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlR5cGU6IikpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlN0cmluZyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJOdW1iZXIiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQ29tbWFEZWxpbWl0ZWRMaXN0IiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwiTGlzdDxUeXBlPiIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQVdTIFBhcmFtZXRlciAodG8gaGVscCBjYXRjaCBpbnZhbGlkIHZhbHVlcyAtIG1hdGNoIGFnYWluc3QgZXhpc3RpbmcgdmFsdWVzIGluIHRoZSBBV1MgQWNjb3VudCkiKSksbWR4KCJvbCIseyJzdGFydCI6Mn0sbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkRlc2NyaXB0aW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkNvbnN0cmFpbnRzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkNvbnN0cmFpbnREZXNjcmlwdGlvbiAoU3RyaW5nKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJNaW4vTWF4TGVuZ3RoIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIk1pbi9NYXhWYWx1ZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJEZWZhdWx0cyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJBbGxvd2VkVmFsdWVzIChhcnJheSkiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQWxsb3dlZFBhdHRlcm4gKHJlZ2V4cCkiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiTm9FY2hvIChCb29sZWFuKSIpKSxtZHgoInAiLG51bGwsIlRoaXMgY2FuIGJlIGZvdW5kIGluIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiMC1wYXJhbWV0ZXJzLWhhbmRzLW9uLnlhbWwiKSwiLiIpLG1keCgicCIsbnVsbCwiQWdhaW4gLSBjaGVjayB0aGUgZG9jcy4iKSxtZHgoInAiLG51bGwsIlRvIHJlZmVyZW5jZSBhIHBhcmFtZXRlciwgeW91IHRoZW4gZ28gd2l0aCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiS2V5OiAhUmVmIFJlZmVyZW5jZSIpLCIuIiksbWR4KCJwIixudWxsLCJJZiB5b3UgaGF2ZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiIVNlbGVjdCIpLCIgZm9yIGEgQ29tbWFEZWxpbWl0ZWRMaXN0LCB5b3UgbmVlZCB0byBnbyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiS2V5OiAhU2VsZWN0IFtBcnJheU51bWJlciwgIVJlZiBSZWZlcmVuY2VdIiksIi4iKSxtZHgoImgyIix7ImlkIjoiaG93LXRvLXJlZmVyZW5jZS1hLXBhcmFtZXRlciJ9LCJIb3cgdG8gcmVmZXJlbmNlIGEgcGFyYW1ldGVyIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVXNpbmcgdGhlIEZuOjpSZWYgZnVuY3Rpb24uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlNob3J0aGFuZCBpbiBZQU1MIGlzICFSZWYuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkNhbiByZWZlcmVuY2UgYmxvY2ssIG5vdCBqdXN0IHBhcmFtZXRlciIpKSxtZHgoImgyIix7ImlkIjoicmVzb3VyY2VzIn0sIlJlc291cmNlcyIpLG1keCgicCIsbnVsbCwiUmVzb3VyY2VzIGFyZSB0aGUgY29yZSBvZiB5b3VyIENsb3VkRm9ybWF0aW9uIHRlbXBsYXRlLiBUaGV5IHJlcHJlc2VudCB0aGUgZGlmZmVyZW50IEFXUyBDb21wb25lbnRzIHRoYXQgd2lsbCBiZSBjcmVhdGVkIGFuZCBjb25maWd1cmVkLiIpLG1keCgicCIsbnVsbCwiVGhleSBhcmUgZGVjbGFyZWQgYW5kIGNhbiBiZSByZWZlcmVuY2VzIGJ5IGVhY2hvdGhlci4gQVdTIGZpZ3VyZXMgb3V0IGNyZWF0aW9uLCB1cGRhdGVzLCBkZWxldGVzIGV0Yy4iKSxtZHgoInAiLG51bGwsIlRoZXJlIGFyZSBvdmVyIDIyNCB0eXBlcyBvZiByZXNvdXJjZXMuIiksbWR4KCJwIixudWxsLCJUaGV5IGFyZSBpZGVudGlmaWVkIHVzaW5nIHRoZSBmb3JtICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJBV1M6OmF3cy1wcm9kdWN0LW5hbWU6OmRhdGEtdHlwZS1uYW1lIiksIi4iKSxtZHgoImgzIix7ImlkIjoicmVhZGluZy10aGUtZG9jcy1mb3ItYW4tZXMyLWluc3RhbmNlIn0sIlJlYWRpbmcgdGhlIGRvY3MgZm9yIGFuIEVTMiBJbnN0YW5jZSIpLG1keCgicCIsbnVsbCwiSWYgeW91IGxvb2sgYXQgdGhlIGRvY3MsIGlmIGNvbWVzIHVwIHdpdGggYm90aCBKU09OIGFuZCBZQU1MIGRvY3MuIiksbWR4KCJoMyIseyJpZCI6Im9wdGlvbmFsLWF0dHJpYnV0ZXMtZm9yLXJlc291cmNlcyJ9LCJPcHRpb25hbCBBdHRyaWJ1dGVzIGZvciBSZXNvdXJjZXMiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJEZXBlbmRzT246IHZlcnkgdXNlZnVsIHRvIGRyYXcgYSBkZXBlbmRlbmN5IGJldHdlZW4gdHdvIHJlc291cmNlcy4gRm9yIGV4YW1wbGUsIG9ubHkgY3JlYXRlIGFuIEVDUyBjbHVzdGVyIGFmdGVyIGNyZWF0aW5nIGFuIEFTRyAoYXV0byBzY2FsaW5nIGdyb3VwKS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiRGVsZXRpb25Qb2xpY3k6IHByb3RlY3QgcmVzb3VyY2UgZnJvbSBiZWluZyBkZWxldGVkIGV2ZW4gaWYgY2xvdWRmb3JtYXRpb24gaXMgZGVsZXRlZC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ3JlYXRpb25Qb2xpY3k6IG1vcmUgaW5mbyBvbiBDRk4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiTWV0YWRhdGE6IGFueXRoaW5nIHlvdSB3YW50ISIpKSxtZHgoImgzIix7ImlkIjoiZmFxLWZvci1yZXNvdXJjZXMifSwiRkFRIGZvciByZXNvdXJjZXMiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJDYW4gSSBjcmVhdGUgYSBkeW5hbWljIGEgZHluYW1pYyBhbW91bnQgb2YgcmVzb3VyY2VzPyBObyB5b3UgY2FuIHBlcmZvcm0gY29kZSBnZW5lcmF0aW9uLiBUaGUgd29yayBhcm91bmQgaXMgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSwidHJvcG9zcGhlcmUiKSwiIFB5dGhvbiBsaWJyYXJ5LiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJJcyBldmVyeSBBV1MgU2VydmljZSBzdXBwb3J0ZWQ/IEFsbW9zdC4gT25seSBhIHNlbGVjdCBmZXcgbmljaGVzIGFyZSBub3QgdGhlcmUuIikpLG1keCgiaDIiLHsiaWQiOiJtYXBwaW5ncyJ9LCJNYXBwaW5ncyIpLG1keCgicCIsbnVsbCwiV2hhdCBhcmUgbWFwcGluZ3M/IEZpeGVkIGFyaWFibGVzIHdpdGhpbiB5b3VyIENGIFRlbXBsYXRlLiBHcmVhdCBmb3IgZGV2IHZzIHByb2QsIHJlZ2lvbnMsIEFNSSB0eXBlcyBldGMuIiksbWR4KCJwIixudWxsLCJFdmVyeSBtYXBwaW5nIGhhcyB0b3AsIG1pZGRsZSBhbmQgYm90dG9tLiIpLG1keCgicCIsbnVsbCwiR3JlYXQgdG8gdXNlIHdoZW4geW91IGtub3cgaW4gYWR2YW5jZToiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJSZWdpb24iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQVoiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQVdTQWNjb3VudCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJFbnZpcm9ubWVudCAoZGV2IHZzIHByb2QpIikpLG1keCgicCIsbnVsbCwiVGhleSBhbGxvdyBzYWZlciBjb250cm9sIG92ZXIgdGhlIHRlbXBsYXRlLiBVc2UgcGFyYW1ldGVycyB3aGVuIHRoZSB2YWx1ZXMgYXJlICIsbWR4KCJlbSIse3BhcmVudE5hbWU6InAifSwicmVhbGx5IiksIiB1c2VyIHNwZWNpZmljLiIpLG1keCgiaDMiLHsiaWQiOiJmbmZpbmRpbm1hcC0tLWFjY2Vzc2luZy1tYXBwaW5nLXZhbHVlcyJ9LCJGbjo6RmluZEluTWFwIC0gQWNjZXNzaW5nIE1hcHBpbmcgVmFsdWVzIiksbWR4KCJwIixudWxsLCJVc2UgRm46OkZpbmRJbk1hcCB0byByZXR1cm4gYSBuYW1lZCB2YWx1ZSBmcm9tIGEgc3BlY2lmaWMga2V5LiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIiFGaW5kSW5NYXAgIiwiWyBNYXBOYW1lLCBUb3BMZXZlbEtleSwgU2Vjb25kTGV2ZWxLZXkgXSIpKSxtZHgoInAiLG51bGwsIkV4YW1wbGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknXG5NYXBwaW5nczpcbiAgUmVnaW9uTWFwOlxuICAgIHVzLWVhc3QtMTpcbiAgICAgICczMic6ICdhbWktNjQxMWUyMGQnXG4gICAgICAnNjQnOiAnYW1pLTdhMTFlMjEzJ1xuUmVzb3VyY2VzOlxuICBteUVDMkluc3RhbmNlOlxuICAgIFR5cGU6ICdBV1M6OkVDMjo6SW5zdGFuY2UnXG4gICAgUHJvcGVydGllczpcbiAgICAgIEltYWdlSWQ6ICFGaW5kSW5NYXAgW1JlZ2lvbk1hcCwgIVJlZiAnQVdTOjpSZWdpb24nLCAzMl1cbiAgICAgIEluc3RhbmNlVHlwZTogbTEuc21hbGxcbiIpKSxtZHgoImgzIix7ImlkIjoibWFwcGluZ3MtaW4tcHJhY3Rpc2UifSwiTWFwcGluZ3MgaW4gcHJhY3Rpc2UiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiUGFyYW1ldGVyczpcbiAgRW52aXJvbm1lbnROYW1lOlxuICAgIERlc2NyaXB0aW9uOiBFbnZpcm9ubWVudCBOYW1lXG4gICAgVHlwZTogU3RyaW5nXG4gICAgQWxsb3dlZFZhbHVlczogW2RldmVsb3BtZW50LCBwcm9kdWN0aW9uXVxuICAgIENvbnN0cmFpbnREZXNjcmlwdGlvbjogbXVzdCBiZSBkZXZlbG9wbWVudCBvciBwcm9kdWN0aW9uXG5cbk1hcHBpbmdzOlxuICBBV1NSZWdpb25BcmNoMkFNSTpcbiAgICB1cy1lYXN0LTE6XG4gICAgICBIVk02NDogYW1pLTY4NjlhYTA1XG4gIEVudmlyb25tZW50VG9JbnN0YW50VHlwZTpcbiAgICBkZXZlbG9wbWVudDpcbiAgICAgIGluc3RhbmNlVHlwZTogdDIubWljcm9cbiAgICBwcm9kdWN0aW9uOlxuICAgICAgaW5zdGFuY2VUeXBlOiB0Mi5zbWFsbFxuXG5SZXNvdXJjZXM6XG4gIEVDMkluc3RhbmNlOlxuICAgIFR5cGU6IEFXUzo6RUMyOjpJbnN0YW5jZVxuICAgIFByb3BlcnRpZXM6XG4gICAgICBJbnN0YW5jZVR5cGU6XG4gICAgICAgICFGaW5kSW5NYXAgW1xuICAgICAgICAgIEVudmlyb25tZW50VG9JbnN0YW5jZVR5cGUsXG4gICAgICAgICAgIVJlZiAnRW52aXJvbm1lbnROYW1lJyxcbiAgICAgICAgICBpbnN0YW5jZVR5cGUsXG4gICAgICAgIF1cbiAgICAgIEltYWdlSWQ6ICFGaW5kSW5NYXAgW0FXU1JlZ2lvbkFyY2gyQU1JLCAhUmVmICdBV1M6OlJlZ2lvbicsIEhWTTY0XVxuIikpLG1keCgiaDIiLHsiaWQiOiJjb25jZXB0LXBzZXVkby1wYXJhbWV0ZXJzIn0sIkNvbmNlcHQ6IFBzZXVkbyBQYXJhbWV0ZXJzIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQVdTIG9mZmVycyB1cyBwc2V1ZG8gcGFyYW1zIGluIGFueSBDRiB0ZW1wbGF0ZS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVGhlc2UgY2FuIGJlIHVzZWQgYXQgYW55IHRpbWUgYW5kIGFyZSBlbmFibGVkIGJ5IGRlZmF1bHQuIikpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6QWNjb3VudElkIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6Tm90aWZpY2F0aW9uc0FSTnMiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQVdTOjpOb1ZhbHVlIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6UmVnaW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6U3RhY2tJZCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJBV1M6OlN0YWNrTmFtZSIpKSxtZHgoImgyIix7ImlkIjoiY2xvdWRmb3JtYXRpb24tb3V0cHV0cyJ9LCJDbG91ZEZvcm1hdGlvbiBPdXRwdXRzIiksbWR4KCJwIixudWxsLCJXaGF0IGFyZSB0aGV5PyBUaGV5IGFyZSAiLG1keCgiZW0iLHtwYXJlbnROYW1lOiJwIn0sIm9wdGlvbmFsIiksIiB2YWx1ZXMgdGhhdCB3ZSBjYW4gaW1wb3J0IGludG8gb3RoZXIgc3RhY2tzLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBhbHNvIHZpZXcgdGhlIG91dHB1dHMgaW4gdGhlIEFXUyBDb25zb2xlIG9yIGluIHVzaW5nIHRoZSBBV1MgQ0xJLiIpLG1keCgicCIsbnVsbCwiVGhleSdyZSB2ZXJ5IHVzZWZ1bCBmb3IgZXhhbXBsZSBpZiB5b3UgZGVmaW5lIGEgbmV0d29yayBDbG91ZEZvcm1hdGlvbiwgYW5kIG91dHB1dCB0aGUgdmFyaWFibGVzIHN1Y2ggYXMgVlBDIElEIGFuZCB5b3VyIFN1Ym5ldCBJRHMuIiksbWR4KCJwIixudWxsLCJJdCdzIHRoZSBiZXN0IHdheSB0byBwZXJmb3JtIHNvbWUgY29sbGFib3JhdGlvbiBjcm9zcyBzdGFjay4gTGV0IHRoZSBleHBlcnQgaGFuZGxlIHRoZWlyIHBhcnQgYW5kIHlvdSBoYW5kbGUgeW91cnMuIiksbWR4KCJoMyIseyJpZCI6Im91dHB1dHMtaGFuZHMtb24ifSwiT3V0cHV0cyBIYW5kcy1PbiIpLG1keCgicCIsbnVsbCwiQ3JlYXRpbmcgYSBTU0ggU2VjdXJpdHkgR3JvdXAgYXMgcGFydCBvZiBvbmUgdGVtcGxhdGUuIFdlIGNhbiBjcmVhdGUgYW4gb3V0cHV0IHRoYXQgcmVmZXJlbmNlcyB0aGF0IHNlY3VyaXR5IGdyb3VwLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJPdXRwdXRzOlxuICA8TG9naWNhbCBJRD46XG4gICAgRGVzY3JpcHRpb246IEluZm9ybWF0aW9uIGFib3V0IHRoZSB2YWx1ZVxuICAgIFZhbHVlOiBWYWx1ZSB0byByZXR1cm5cbiAgICBFeHBvcnQ6XG4gICAgICBOYW1lOiBWYWx1ZSB0byBleHBvcnRcbiIpKSxtZHgoInAiLG51bGwsIkluIDAtY3JlYXRlLXNzaC1zZWN1cml0eS1ncm91cC55YW1sIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIlJlc291cmNlczpcbiAgIyBoZXJlIHdlIGRlZmluZSBhIFNTSCBzZWN1cml0eSBncm91cCB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0aGUgZW50aXJlIGNvbXBhbnlcbiAgTXlDb21wYW55V2lkZVNTSFNlY3VyaXR5R3JvdXA6XG4gICAgIyBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NDbG91ZEZvcm1hdGlvbi9sYXRlc3QvVXNlckd1aWRlL2F3cy1wcm9wZXJ0aWVzLWVjMi1zZWN1cml0eS1ncm91cC5odG1sXG4gICAgVHlwZTogQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXBcbiAgICBQcm9wZXJ0aWVzOlxuICAgICAgR3JvdXBEZXNjcmlwdGlvbjogRW5hYmxlIFNTSCBhY2Nlc3MgdmlhIHBvcnQgMjJcbiAgICAgIFNlY3VyaXR5R3JvdXBJbmdyZXNzOlxuICAgICAgICAjIHdlIGhhdmUgYSBsb3Qgb2YgcnVsZXMgYmVjYXVzZSBpdCdzIGEgcGVyZmVjdCBzZWN1cml0eSBncm91cFxuICAgICAgICAjIGZpbmFuY2UgdGVhbSBuZXR3b3JrXG4gICAgICAgIC0gQ2lkcklwOiAxMC4wLjQ4LjAvMjRcbiAgICAgICAgICBGcm9tUG9ydDogMjJcbiAgICAgICAgICBJcFByb3RvY29sOiB0Y3BcbiAgICAgICAgICBUb1BvcnQ6IDIyXG4gICAgICAgICAgIyBtYXJrZXRpbmcgdGVhbSBuZXR3b3JrXG4gICAgICAgIC0gQ2lkcklwOiAxMC4wLjExMi4wLzI0XG4gICAgICAgICAgRnJvbVBvcnQ6IDIyXG4gICAgICAgICAgSXBQcm90b2NvbDogdGNwXG4gICAgICAgICAgVG9Qb3J0OiAyMlxuICAgICAgICAgICMgYXBwbGljYXRpb24gdGVhbSBzdXBwb3J0IG5ldHdvcmtcbiAgICAgICAgLSBDaWRySXA6IDEwLjAuMTc2LjAvMjRcbiAgICAgICAgICBGcm9tUG9ydDogMjJcbiAgICAgICAgICBJcFByb3RvY29sOiB0Y3BcbiAgICAgICAgICBUb1BvcnQ6IDIyXG5cbk91dHB1dHM6XG4gIFN0YWNrU1NIU2VjdXJpdHlHcm91cDpcbiAgICBEZXNjcmlwdGlvbjogVGhlIFNTSCBTZWN1cml0eSBHcm91cCBmb3Igb3VyIENvbXBhbnlcbiAgICBWYWx1ZTogIVJlZiBNeUNvbXBhbnlXaWRlU1NIU2VjdXJpdHlHcm91cFxuICAgIEV4cG9ydDpcbiAgICAgIE5hbWU6IFNTSFNlY3VyaXR5R3JvdXBcbiIpKSxtZHgoInAiLG51bGwsIkl0IGlzIGltcG9ydGFudCB0byBub3RlIHRoYXQgZm9yIGFuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJvdXRwdXQiKSwiIHRvIGJlIHVzZWQgYW55d2hlcmUsIHlvdSBuZWVkIHRvIGRlZmluZSBhbiAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZXhwb3J0IiksIiB2YWx1ZS4iKSxtZHgoImgzIix7ImlkIjoiY3Jvc3Mtc3RhY2stcmVmZXJlbmNlIn0sIkNyb3NzIFN0YWNrIFJlZmVyZW5jZSIpLG1keCgicCIsbnVsbCwiV2UgdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJGbjo6SW1wb3J0VmFsdWUiKSwiIGluIGEgc2ltcGxlIGJsb2NrOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJSZXNvdXJjZXM6XG4gIE15U2VjdXJlSW5zdGFuY2U6XG4gICAgIyBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NDbG91ZEZvcm1hdGlvbi9sYXRlc3QvVXNlckd1aWRlL2F3cy1wcm9wZXJ0aWVzLWVjMi1pbnN0YW5jZS5odG1sXG4gICAgVHlwZTogQVdTOjpFQzI6Okluc3RhbmNlXG4gICAgUHJvcGVydGllczpcbiAgICAgIEF2YWlsYWJpbGl0eVpvbmU6IHVzLWVhc3QtMWFcbiAgICAgIEltYWdlSWQ6IGFtaS1hNGM3ZWRiMlxuICAgICAgSW5zdGFuY2VUeXBlOiB0Mi5taWNyb1xuICAgICAgU2VjdXJpdHlHcm91cHM6XG4gICAgICAgICMgd2UgcmVmZXJlbmNlIHRoZSBvdXRwdXQgaGVyZSwgdXNpbmcgdGhlIEZuOjpJbXBvcnRWYWx1ZSBmdW5jdGlvblxuICAgICAgICAtICFJbXBvcnRWYWx1ZSBTU0hTZWN1cml0eUdyb3VwXG4iKSksbWR4KCJoMiIseyJpZCI6ImNvbmRpdGlvbnMifSwiQ29uZGl0aW9ucyIpLG1keCgicCIsbnVsbCwiQ29uZGl0aW9uYWxzIGFyZSB1c2VkIHRvIGNvbnRyb2wgdGhlIGNyZWF0aW9uIG9mIHJlc291cmNlcyBvciBvdXRwdXRzIGJhc2VkIG9uIGEgY29uZGl0aW9uLiIpLG1keCgicCIsbnVsbCwiQ29uZGl0aW9ucyBjYW4gYmUgd2hhdGV2ZXIgeW91IHdhbnQgdGhlbSB0byBiZSwgYnV0IGNvbW1vbiBvbmVzIGFyZToiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJFbnZpcm9ubWVudCAoZGV2L3Rlc3QvcHJvZCkiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQVdTIFJlZ2lvbiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBbnkgcGFyYW1ldGVyIHZhbHVlIikpLG1keCgicCIsbnVsbCwiRWFjaCBjb25kaXRpb24gY2FuIHJlZmVyZW5jZSBhbm90aGVyIGNvbmRpdGlvbiwgcGFyYW1ldGVyIHZhbHVlIG9yIG1hcHBpbmcuIiksbWR4KCJoMyIseyJpZCI6Imhvdy10by1kZWZpbmUtYS1jb25kaXRpb24ifSwiSG93IHRvIGRlZmluZSBhIGNvbmRpdGlvbj8iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiQ29uZGl0aW9uczpcbiAgW0xvZ2ljYWwgSURdOiBbSW50cmluc2ljIGZ1bmN0aW9uXVxuIikpLG1keCgicCIsbnVsbCwiTG9naWNhbCBJRCBpcyBmb3IgeW91IHRvIGNob29zZS4gSXQncyBob3cgeW91IG5hbWUgdGhlIGNvbmRpdGlvbi4iKSxtZHgoInAiLG51bGwsIlRoZSBpbnRyaW5zaWMgZnVuY3Rpb24gKGxvZ2ljYWwpIGNhbiBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZzogLSBGbjo6QW5kIC0gRm46OkVxdWFscyAtIEZuOjpJZiAtIEZuOjpOb3QgLSBGbjo6T3IiKSxtZHgoImgyIix7ImlkIjoiY29uZGl0aW9uYWwtaGFuZHMtb24ifSwiQ29uZGl0aW9uYWwgSGFuZHMgT24iKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJMZXQncyBhbmFseXplIGEgQ0YgdGVtcGxhdGUgdGhhdCBvcHRpb25hbGx5IGNyZWF0ZXMgYSB2b2x1bWUgYW5kIG1vdW50IHBvaW50IG9ubHkgaWYgXCJwcm9kXCIgaXMgc3BlY2lmaWVkIGFzIGEgcGFyYW1ldGVyLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJJdCB1dGlsaXplcyBwYXJhbXMsIG1hcHBpbmdzLCBjb25kaXRpb25hbHMsIG91dHB1dHMiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknXG5NYXBwaW5nczpcbiAgUmVnaW9uTWFwOlxuICAgIHVzLWVhc3QtMTpcbiAgICAgIEFNSTogJ2FtaS1hNGM3ZWRiMidcbiAgICAgIFRlc3RBejogJ3VzLWVhc3QtMWEnXG4gICAgdXMtd2VzdC0xOlxuICAgICAgQU1JOiAnYW1pLTZkZjFlNTE0J1xuICAgICAgVGVzdEF6OiAndXMtd2VzdC0xYSdcbiAgICB1cy13ZXN0LTI6XG4gICAgICBBTUk6ICdhbWktMzI3ZjUzNTInXG4gICAgICBUZXN0QXo6ICd1cy13ZXN0LTJhJ1xuICAgIGV1LXdlc3QtMTpcbiAgICAgIEFNSTogJ2FtaS1kN2I5YTJiMSdcbiAgICAgIFRlc3RBejogJ2V1LXdlc3QtMWEnXG4gICAgc2EtZWFzdC0xOlxuICAgICAgQU1JOiAnYW1pLTg3ZGFiMWViJ1xuICAgICAgVGVzdEF6OiAnc2EtZWFzdC0xYSdcbiAgICBhcC1zb3V0aGVhc3QtMTpcbiAgICAgIEFNSTogJ2FtaS03N2FmMjAxNCdcbiAgICAgIFRlc3RBejogJ2FwLXNvdXRoZWFzdC0xYSdcbiAgICBhcC1zb3V0aGVhc3QtMjpcbiAgICAgIEFNSTogJ2FtaS0xMDkxODE3MydcbiAgICAgIFRlc3RBejogJ2FwLXNvdXRoZWFzdC0yYSdcbiAgICBhcC1ub3J0aGVhc3QtMTpcbiAgICAgIEFNSTogJ2FtaS1lMjFjYzM4YydcbiAgICAgIFRlc3RBejogJ2FwLW5vcnRoZWFzdC0xYSdcblBhcmFtZXRlcnM6XG4gIEVudlR5cGU6XG4gICAgRGVzY3JpcHRpb246IEVudmlyb25tZW50IHR5cGUuXG4gICAgRGVmYXVsdDogdGVzdFxuICAgIFR5cGU6IFN0cmluZ1xuICAgIEFsbG93ZWRWYWx1ZXM6XG4gICAgICAtIHByb2RcbiAgICAgIC0gdGVzdFxuICAgIENvbnN0cmFpbnREZXNjcmlwdGlvbjogbXVzdCBzcGVjaWZ5IHByb2Qgb3IgdGVzdC5cblxuQ29uZGl0aW9uczpcbiAgQ3JlYXRlUHJvZFJlc291cmNlczogIUVxdWFscyBbIVJlZiBFbnZUeXBlLCBwcm9kXVxuXG5SZXNvdXJjZXM6XG4gIEVDMkluc3RhbmNlOlxuICAgIFR5cGU6ICdBV1M6OkVDMjo6SW5zdGFuY2UnXG4gICAgUHJvcGVydGllczpcbiAgICAgIEltYWdlSWQ6ICFGaW5kSW5NYXAgW1JlZ2lvbk1hcCwgIVJlZiAnQVdTOjpSZWdpb24nLCBBTUldXG4gICAgICBJbnN0YW5jZVR5cGU6IHQyLm1pY3JvXG4gICAgICBBdmFpbGFiaWxpdHlab25lOiAhRmluZEluTWFwIFtSZWdpb25NYXAsICFSZWYgJ0FXUzo6UmVnaW9uJywgVGVzdEF6XVxuXG4gIE1vdW50UG9pbnQ6XG4gICAgVHlwZTogJ0FXUzo6RUMyOjpWb2x1bWVBdHRhY2htZW50J1xuICAgIENvbmRpdGlvbjogQ3JlYXRlUHJvZFJlc291cmNlc1xuICAgIFByb3BlcnRpZXM6XG4gICAgICBJbnN0YW5jZUlkOiAhUmVmIEVDMkluc3RhbmNlXG4gICAgICBWb2x1bWVJZDogIVJlZiBOZXdWb2x1bWVcbiAgICAgIERldmljZTogL2Rldi9zZGhcblxuICBOZXdWb2x1bWU6XG4gICAgVHlwZTogJ0FXUzo6RUMyOjpWb2x1bWUnXG4gICAgQ29uZGl0aW9uOiBDcmVhdGVQcm9kUmVzb3VyY2VzXG4gICAgUHJvcGVydGllczpcbiAgICAgIFNpemU6IDEwMFxuICAgICAgQXZhaWxhYmlsaXR5Wm9uZTogIUdldEF0dCBFQzJJbnN0YW5jZS5BdmFpbGFiaWxpdHlab25lXG5cbk91dHB1dHM6XG4gIFZvbHVtZUlkOlxuICAgIENvbmRpdGlvbjogQ3JlYXRlUHJvZFJlc291cmNlc1xuICAgIFZhbHVlOiAhUmVmIE5ld1ZvbHVtZVxuIikpLG1keCgicCIsbnVsbCwiTm90ZSB0aGF0ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjb25kaXRpb25zIiksIiBjYW4gbm90IGJlIGFwcGxpZWQgdG8gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInBhcmFtZXRlcnMiKSwiLiIpLG1keCgiaDIiLHsiaWQiOiJmbmdldGF0dCJ9LCJGbjo6R2V0QXR0IiksbWR4KCJwIixudWxsLCJHZXQgYW4gYXR0cmlidXRlIGF0dGFjaGVkIHRvIGFueSByZXNvdXJjZSB0aGF0IGV4aXN0cy4gVG8ga25vdyB0aGUgYXR0cmlidXRlcywgY2hlY2sgdGhlIGRvY3MuIiksbWR4KCJoMiIseyJpZCI6ImNmLW1ldGFkYXRhIn0sIkNGIE1ldGFkYXRhIiksbWR4KCJwIixudWxsLCJUaGlzIGlzIGFueSBvcHRpb25hbCBtZXRhZGF0YSBzZWN0aW9uIHRvIGluY2x1ZGUgYXJiaXRyYXJ5IFlBTUwgdGhhdCBwcm92aWRlIGRldGFpbHMgYWJvdXQgdGhlIHRlbXBsYXRlIG9yIHJlc291cmNlLiIpLG1keCgicCIsbnVsbCwiVGhlcmUgYXJlIDMgbWV0YWRhdGEga2V5cyB0aGF0IGhhdmUgc3BlY2lhbCBtZWFuaW5nOiIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6Q2xvdWRGb3JtYXRpb246OkRlc2lnbmVyIikpLG1keCgicCIsbnVsbCwiRGVzY3JpYmVzIGhvdyB0aGUgcmVzb3VyY2VzIGFyZSBsYWlkIG91dCBpbiB5b3VyIHRlbXBsYXRlLiBUaGlzIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgYnkgdGhlIEFXUyBEZXNpZ25lci4gVGhpcyBoZWxwcyB0aGUgVUkgKHggYW5kIHkpIiksbWR4KCJvbCIseyJzdGFydCI6Mn0sbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6Q2xvdWRGb3JtYXRpb246OkludGVyZmFjZSIpKSxtZHgoInAiLG51bGwsIkRlZmluZSBncm91cGluZyBhbmQgb3JkZXJpbmcgb2YgaW5wdXQgcGFyYW1ldGVycyB3aGVuIHRoZXkgYXJlIGRpc3BsYXllZCBpbiB0aGUgQVdTIENvbnNvbGUuIiksbWR4KCJvbCIseyJzdGFydCI6M30sbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkFXUzo6Q2xvdWRGb3JtYXRpb246OkluaXQiKSksbWR4KCJwIixudWxsLCJEZWZpbmUgY29uZmlndXJhdGlvbiB0YXNrcyBmb3IgY2ZuLWluaXQuIEl0J3MgdGhlIG1vc3QgcG93ZXJmdWwgdXNhZ2Ugb2YgdGhlIG1ldGFkYXRhLiBUaGlzIGlzIHZlcnkgaW1wb3J0YW50IGFuZCBhIGxvdCB0byBsZWFybiBhYm91dCBpdCBiZWxvdy4iKSxtZHgoImgzIix7ImlkIjoiYXdzY2xvdWRmb3JtYXRpb25kZXNpZ25lci1oYW5kcy1vbiJ9LCJBV1M6OkNsb3VkRm9ybWF0aW9uOjpEZXNpZ25lciBoYW5kcyBvbiIpLG1keCgicCIsbnVsbCwiVGhpcyBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIGZvciB5b3UgYnV0IHdvcnRoIGRlbGV0aW5nIGZvciBvbmxpbmUgc2hhcmluZyBhbmQgdXNhZ2UuIFdoZW4gZHJhZ2dpbmcgYW5kIGRyb3BwaW5nIGVhY2ggcmVzb3VyY2UgeW91IHdpbGwgc2VlIGEgaHVnZSBzZXQgb2YgbWV0YWRhdGEgbGVmdCB0aGVyZS4gVGhlIG1ldGFkYXRhIGNhbiBhbHNvIGJlIGFkZGVkIHRvIGVhY2ggcmVzb3VyY2UuIiksbWR4KCJoMyIseyJpZCI6ImF3c2Nsb3VkZm9ybWF0aW9uaW50ZXJmYWNlLWhhbmRzLW9uIn0sIkFXUzo6Q2xvdWRGb3JtYXRpb246OkludGVyZmFjZSBoYW5kcyBvbiIpLG1keCgicCIsbnVsbCwiRGVmaW5lIGdyb3VwaW5nIGFuZCBvcmRlcmluZyBvZiBpbnB1dCBwYXJhbWV0ZXJlcyB3aGVuIHRoZXkgYXJlIGRpc3BsYXllZCBpbiB0aGUgQVdTIENvbnNvbGUuIFRoaXMgaXMgbWVhbnQgd2hlbiB1c2VycyBtdXN0IGlucHV0IHBhcmFtcyBtYW51YWxseS4iKSxtZHgoInAiLG51bGwsIllvdSBwcm92aWRlIHRoZW0gd2l0aCBncm91cGluZywgb3Igc29ydGluZywgdGhhdCBhbGxvdyB0aGVtIHRvIGlucHV0IHBhcmFtZXRlcnMgZWZmaWNpZW50bHkuIiksbWR4KCJwIixudWxsLCJFeGFtcGxlOiBHcm91cCBhbGwgdGhlIEVDMiByZWxhdGVkIHBhcmFtcyB0b2dldGhlci4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiLS0tXG5QYXJhbWV0ZXJzOlxuICBLZXlOYW1lOlxuICAgIERlc2NyaXB0aW9uOiBOYW1lIG9mIGFuIGV4aXN0aW5nIEVDMiBrZXkgcGFpciBmb3IgU1NIIGFjY2VzcyB0byB0aGUgRUMyIGluc3RhbmNlLlxuICAgIFR5cGU6IEFXUzo6RUMyOjpLZXlQYWlyOjpLZXlOYW1lXG4gIEluc3RhbmNlVHlwZTpcbiAgICBEZXNjcmlwdGlvbjogRUMyIGluc3RhbmNlIHR5cGUuXG4gICAgVHlwZTogU3RyaW5nXG4gICAgRGVmYXVsdDogdDIubWljcm9cbiAgICBBbGxvd2VkVmFsdWVzOlxuICAgICAgLSB0Mi5taWNyb1xuICAgICAgLSB0Mi5zbWFsbFxuICAgICAgLSB0Mi5tZWRpdW1cbiAgICAgIC0gbTMubWVkaXVtXG4gICAgICAtIG0zLmxhcmdlXG4gICAgICAtIG0zLnhsYXJnZVxuICAgICAgLSBtMy4yeGxhcmdlXG4gIFNTSExvY2F0aW9uOlxuICAgIERlc2NyaXB0aW9uOiBUaGUgSVAgYWRkcmVzcyByYW5nZSB0aGF0IGNhbiBTU0ggdG8gdGhlIEVDMiBpbnN0YW5jZS5cbiAgICBUeXBlOiBTdHJpbmdcbiAgICBNaW5MZW5ndGg6ICc5J1xuICAgIE1heExlbmd0aDogJzE4J1xuICAgIERlZmF1bHQ6IDAuMC4wLjAvMFxuICAgIEFsbG93ZWRQYXR0ZXJuOiBcIihcXFxcZHsxLDN9KVxcXFwuKFxcXFxkezEsM30pXFxcXC4oXFxcXGR7MSwzfSlcXFxcLihcXFxcZHsxLDN9KS8oXFxcXGR7MSwyfSlcIlxuICAgIENvbnN0cmFpbnREZXNjcmlwdGlvbjogTXVzdCBiZSBhIHZhbGlkIElQIENJRFIgcmFuZ2Ugb2YgdGhlIGZvcm0geC54LngueC94LlxuICBWUENJRDpcbiAgICBEZXNjcmlwdGlvbjogVlBDIHRvIG9wZXJhdGUgaW5cbiAgICBUeXBlOiBBV1M6OkVDMjo6VlBDOjpJZFxuICBTdWJuZXRJRDpcbiAgICBEZXNjcmlwdGlvbjogU3VibmV0IElEXG4gICAgVHlwZTogQVdTOjpFQzI6OlN1Ym5ldDo6SWRcbiAgU2VjdXJpdHlHcm91cElEOlxuICAgIERlc2NyaXB0aW9uOiBTZWN1cml0eSBHcm91cFxuICAgIFR5cGU6IEFXUzo6RUMyOjpTZWN1cml0eUdyb3VwOjpJZFxuXG5SZXNvdXJjZXM6XG4gIE15RUMySW5zdGFuY2U6XG4gICAgVHlwZTogJ0FXUzo6RUMyOjpJbnN0YW5jZSdcbiAgICBQcm9wZXJ0aWVzOlxuICAgICAgQXZhaWxhYmlsaXR5Wm9uZTogdXMtZWFzdC0xYVxuICAgICAgSW1hZ2VJZDogYW1pLWE0YzdlZGIyXG4gICAgICBJbnN0YW5jZVR5cGU6ICFSZWYgSW5zdGFuY2VUeXBlXG4gICAgICBTZWN1cml0eUdyb3VwczpcbiAgICAgICAgLSAhUmVmIFNlY3VyaXR5R3JvdXBJRFxuICAgICAgU3VibmV0SUQ6ICFSZWYgU3VibmV0SURcblxuTWV0YWRhdGE6XG4gICMgVGhpcyBpcyB0aGUgaW1wb3J0YW50IHBhcnRcbiAgQVdTOjpDbG91ZEZvcm1hdGlvbjo6SW50ZXJmYWNlOlxuICAgIFBhcmFtZXRlckdyb3VwczpcbiAgICAgIC0gTGFiZWw6XG4gICAgICAgICAgZGVmYXVsdDogJ05ldHdvcmsgQ29uZmlndXJhdGlvbidcbiAgICAgICAgUGFyYW1ldGVyczpcbiAgICAgICAgICAtIFZQQ0lEXG4gICAgICAgICAgLSBTdWJuZXRJRFxuICAgICAgICAgIC0gU2VjdXJpdHlHcm91cElEXG4gICAgICAtIExhYmVsOlxuICAgICAgICAgIGRlZmF1bHQ6ICdBbWF6b24gRUMyIENvbmZpZ3VyYXRpb24nXG4gICAgICAgIFBhcmFtZXRlcnM6XG4gICAgICAgICAgLSBJbnN0YW5jZVR5cGVcbiAgICAgICAgICAtIEtleU5hbWVcbiAgICBQYXJhbWV0ZXJMYWJlbHM6XG4gICAgICBWUENJRDpcbiAgICAgICAgZGVmYXVsdDogJ1doaWNoIFZQQyBzaG91bGQgdGhpcyBiZSBkZXBsb3llZCB0bz8nXG4iKSksbWR4KCJwIixudWxsLCJJZiB5b3UgZGVwbG95IGEgbmV3IHN0YWNrIHVzaW5nIHRoZSBhYm92ZSwgeW91IHdpbGwgc2VlIHRoYXQgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJQYXJhbWV0ZXJzIiksIiBibG9jayB3aWxsIHRoZW4gZHJvcCB5b3UgdG8gcXVlc3Rpb25zIGFib3V0IHdoYXQgY29uZmlndXJhdGlvbiB5b3UgYXJlIGxvb2tpbmcgZm9yLiIpLG1keCgiaDIiLHsiaWQiOiJjZm4taW5pdC1hbmQtZWMyLXVzZXItZGF0YSJ9LCJDRk4gSW5pdCBhbmQgRUMyIFVzZXIgRGF0YSIpLG1keCgiaDMiLHsiaWQiOiJlYzItdXNlci1kYXRhLW92ZXJ2aWV3In0sIkVDMiBVc2VyIERhdGEgT3ZlcnZpZXciKSxtZHgoInAiLG51bGwsIk1hbnkgQ0YgdGVtcGxhdGVzIHdpbGwgYmUgYWJvdXQgcHJvdmlzaW9uaW5nIGNvbXB1dGVyIHJlc291cmNlcyBpbiB5b3VyIEFXUyBDbG91ZCBlZy4gRUMyIGluc3RhbmNlcywgYXV0b3NjYWxpbmcuIiksbWR4KCJwIixudWxsLCJVc3VhbGx5LCB5b3Ugd2FudCB0byB0aGUgaW5zdGFuY2VzIHRvIGJlIHNlbGYgY29uZmlndXJlZCBzbyB0aGF0IHRoZXkgY2FuIHBlcmZvcm0gdGhlIGpvYiB0aGV5IGFyZSBzdXBwb3NlZCB0byBwZXJmb3JtLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBmdWxseSBhdXRvbWF0ZSB0aGUgRUMyIGZsZWV0IHdpdGggQ0YgaW5pdC4iKSxtZHgoInAiLG51bGwsIkV4YW1wbGU6IGFuIEVDMiBpbnN0YW5jZSB0aGF0IGhhcyBwaHAgYW5kIG15c3FsIGluc3RhbGxlZCBvbiBpdC4iKSxtZHgoInAiLG51bGwsIldlIHdhbnQgYSB1c2VyLWRhdGEgc2NyaXB0IHRvIGdldCB0aGlzIHVwIGFuZCBnb2luZy4gRnJvbSB0aGUgRUMyIG1hbmFnZW1lbnQgY29uc29sZSwgeW91IGNhbiBiYXNpY2FsbHkgdXNlIHRoZSBhZHZhbmNlZCBzZWN0aW9uIHRvIGFkZCBhICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIvYmluL2Jhc2giKSwiIHNlY3Rpb24uIFRoaXMgaXMgYWxyZWFkeSBzdGFydGVkIHRvIGJlY29tZSBtb3JlIHRlZGlvdXMgdGhhbiB3aGF0IHdlIHdhbnQuIiksbWR4KCJwIixudWxsLCJIb3cgY2FuIHdlIGRvIHRoaXMgaW4gQ2xvdWZGb3JtYXRpb24/IiksbWR4KCJwIixudWxsLCJUaGUgZm9sbG93aW5nIHNjcmlwdCBjYW4gdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJVc2VyRGF0YSIpLCIgdG8gYWRkIHRoZSBzY3JpcHQ6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIlBhcmFtZXRlcnM6XG4gIEtleU5hbWU6XG4gICAgRGVzY3JpcHRpb246IE5hbWUgb2YgYW4gZXhpc3RpbmcgRUMyIGtleSBwYWlyIGZvciBTU0ggYWNjZXNzIHRvIHRoZSBFQzIgaW5zdGFuY2UuXG4gICAgVHlwZTogQVdTOjpFQzI6OktleVBhaXI6OktleU5hbWVcbiAgU1NITG9jYXRpb246XG4gICAgRGVzY3JpcHRpb246IFRoZSBJUCBhZGRyZXNzIHJhbmdlIHRoYXQgY2FuIGJlIHVzZWQgdG8gU1NIIHRvIHRoZSBFQzIgaW5zdGFuY2VzXG4gICAgVHlwZTogU3RyaW5nXG4gICAgTWluTGVuZ3RoOiAnOSdcbiAgICBNYXhMZW5ndGg6ICcxOCdcbiAgICBEZWZhdWx0OiAwLjAuMC4wLzBcbiAgICBBbGxvd2VkUGF0dGVybjogXCIoXFxcXGR7MSwzfSlcXFxcLihcXFxcZHsxLDN9KVxcXFwuKFxcXFxkezEsM30pXFxcXC4oXFxcXGR7MSwzfSkvKFxcXFxkezEsMn0pXCJcbiAgICBDb25zdHJhaW50RGVzY3JpcHRpb246IG11c3QgYmUgYSB2YWxpZCBJUCBDSURSIHJhbmdlIG9mIHRoZSBmb3JtIHgueC54LngveC5cblxuUmVzb3VyY2VzOlxuICBXZWJTZXJ2ZXI6XG4gICAgVHlwZTogQVdTOjpFQzI6Okluc3RhbmNlXG4gICAgUHJvcGVydGllczpcbiAgICAgIEltYWdlSWQ6IGFtaS1hNGM3ZWRiMlxuICAgICAgSW5zdGFuY2VUeXBlOiB0Mi5taWNyb1xuICAgICAgS2V5TmFtZTogIVJlZiBLZXlOYW1lXG4gICAgICBTZWN1cml0eUdyb3VwczpcbiAgICAgICAgLSAhUmVmIFdlYlNlcnZlclNlY3VyaXR5R3JvdXBcbiAgICAgIFVzZXJEYXRhOlxuICAgICAgICBGbjo6QmFzZTY0OiB8ICMgZXZlcnl0aGluZyBhZnRlciB3aWxsIGJlIGtlcHQgYXMgaXNcbiAgICAgICAgICAjIS9iaW4vYmFzaFxuICAgICAgICAgIHl1bSB1cGRhdGUgLXlcbiAgICAgICAgICB5dW0gaW5zdGFsbCAteSBodHRwZDI0IHBocDU2IG15c3FsNTUtc2VydmVyIHBocDU2LW15c3FsbmRcbiAgICAgICAgICBzZXJ2aWNlIGh0dHBkIHN0YXJ0XG4gICAgICAgICAgY2hrY29uZmlnIGh0dHBkIG9uXG4gICAgICAgICAgZ3JvdXBhZGQgd3d3XG4gICAgICAgICAgdXNlcm1vZCAtYSAtRyB3d3cgZWMyLXVzZXJcbiAgICAgICAgICBjaG93biAtUiByb290Ond3dyAvdmFyL3d3d1xuICAgICAgICAgIGNobW9kIDI3NzUgL3Zhci93d3dcbiAgICAgICAgICBmaW5kIC92YXIvd3d3IC10eXBlIGQgLWV4ZWMgY2htb2QgMjc3NSB7fSArXG4gICAgICAgICAgZmluZCAvdmFyL3d3dyAtdHlwZSBmIC1leGVjIGNobW9kIDA2NjQge30gK1xuICAgICAgICAgIGVjaG8gXCI8P3BocCBwaHBpbmZvKCk7ID8+XCIgPiAvdmFyL3d3dy9odG1sL3BocGluZm8ucGhwXG5cbiAgV2ViU2VydmVyU2VjdXJpdHlHcm91cDpcbiAgICBUeXBlOiBBV1M6OkVDMjo6U2VjdXJpdHlHcm91cFxuICAgIFByb3BlcnRpZXM6XG4gICAgICBHcm91cERlc2NyaXB0aW9uOiAnRW5hYmxlIEhUVFAgYWNjZXNzIHZpYSBwb3J0IDgwICsgU1NIIGFjY2VzcydcbiAgICAgIFNlY3VyaXR5R3JvdXBJbmdyZXNzOlxuICAgICAgICAtIENpZHJJcDogMC4wLjAuMC8wXG4gICAgICAgICAgRnJvbVBvcnQ6ICc4MCdcbiAgICAgICAgICBJcFByb3RvY29sOiB0Y3BcbiAgICAgICAgICBUb1BvcnQ6ICc4MCdcbiAgICAgICAgLSBDaWRySXA6ICFSZWYgU1NITG9jYXRpb25cbiAgICAgICAgICBGcm9tUG9ydDogJzIyJ1xuICAgICAgICAgIElwUHJvdG9jb2w6IHRjcFxuICAgICAgICAgIFRvUG9ydDogJzIyJ1xuIikpLG1keCgicCIsbnVsbCwiTm93IHRoYXQgd2Ugc2VlIHRoZSBwb3dlciBvZiB0aGlzLCBsZXQncyBoYXZlIGEgbG9vayBhdCBDRiBJbml0LiIpLG1keCgiaDMiLHsiaWQiOiJjbG91ZGZvcm1hdGlvbi1pbml0In0sIkNsb3VkRm9ybWF0aW9uIEluaXQiKSxtZHgoInAiLG51bGwsIldoYXQgaXMgdGhlIHByb2JsZW0gd2l0aCBFQzIgdXNlciBkYXRhPyBXZWxsLCB3aGF0IGhhcHBlbnMgaWYgd2UgaGF2ZSBhIGxhcmdlIGNvbmZpZ3VyYXRpb24/IFdoYXQgaWYgd2Ugd2FudCB0byBldm9sdmUgdGhlIHN0YXRlIHdpdGhvdXQgdGVybWluYXRpbmcgaXQ/IEhvdyBkbyB3ZSBtYWtlIGl0IHJlYWRhYmxlPyBIb3cgZG8gd2Uga25vdyBvciBzaWduYWwgdGhhdCBvdXIgRUMyIHVzZXItZGF0YSBzY3JpcHQgYWN0dWFsbHkgY29tcGxldGVkIHN1Y2Nlc3NmdWxseT8iKSxtZHgoInAiLG51bGwsIkFtYXpvbiBjcmVhdGluZyBDRiBoZWxwZXIgc2NyaXB0cy4iKSxtZHgoInAiLG51bGwsIlRoZXJlIGFyZSA0IHB5dGhvbiBzY3JpcHRzIHRoYXQgY29tZSBkaXJlY3RseSB3aXRoIEFtYXpvbiBMaW51eCBBTUkgb3IgY2FuIGJlIGluc3RhbGxlZCB1c2luZyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwieXVtIiksIiBvbiBub24tQW1hem9uIExpbnV4LiBUaGV5IGFyZToiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJjZm4taW5pdDogVXNlZCB0byByZXRyaWV2ZSBhbmQgaW50ZXJwcmV0eSB0aGUgcmVzb3VjZSBtZXRhZGF0YSwgaW5zdGFsbGluZyBwYWNrYWdlcywgY3JlYXRpbmcgZmlsZXMgYW5kIHN0YXJ0aW5nIHNlcnZpY2VzLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJjZm4tc2lnbmFsOiBBIHNpbXBsZSB3cmFwcGVyIHRvIHNpZ25hbCBhbiBBV1MgQ2xvdWRGb3JtYXRpb24gQ3JlYXRpb25Qb2xpY3kgb3IgV2FpdENvbmRpdGlvbiwgZW5hYmxpbmcgeW91IHRvIHN5bmMgb3RoZXIgcmVzb3VyY2VzIGluIHRoZSBzdGFjayB3aXRoIHRoZSBhcHBsaWNhdGlvbiBiZWluZyByZWFkeS4gVGhpcyBjYW4gZ2l2ZSB1cyB0aGUgeWVzL25vIGlmIHN1Y2Nzc2Z1bC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiY2ZuLWdldC1tZXRhZGF0YTogQSB3cmFwcGVyIHNjcmlwdCBtYWtpbmcgaXQgZWFzeSB0byByZXRyaWV2ZSBlaXRoZXIgYWxsIG1ldGFkYXRhIGRlZmluZWQgZm9yIGEgcmVzb3VyY2Ugb3IgcGF0aCB0byBhIHNwZWNpZmljIGtleSBvciBzdWJ0cmVlIG9mIHRoZSByZXNvdXJjZSBtZXRhZGF0YS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiY2ZuLWh1cDogQSBkYWVtb24gdG8gY2hlY2sgZm9yIHVwZGF0ZXMgdG8gbWV0YWRhdGEgYW5kIGV4ZWN1dGUgY3VzdG9tIGhvb2tzIHdoZW4gdGhlIGNoYW5nZXMgYXJlIGRldGVjdGVkLiIpKSxtZHgoInAiLG51bGwsIlRoZSB1c3VhbCBmbG93PyBjZm4taW5pdCwgdGhlbiBjZm4tc2lnbmFsLCB0aGVuIG9wdGlvbmFsbHkgY2ZuLWh1cC4iKSxtZHgoImgzIix7ImlkIjoiYXdzY2xvdWRmb3JtYXRpb25pbml0In0sIkFXUzo6Q2xvdWRGb3JtYXRpb246OkluaXQiKSxtZHgoInAiLG51bGwsIkEgY29uZmlnIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgYW5kIGlzIGV4ZWN1dGVkIGluIHRoYXQgb3JkZXI6IiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUGFja2FnZXM6IGluc3RhbGwgYSBsaXN0IG9mIHBhY2thZ2VzIG9uIHRoZSBMaW51eCBPUyAobXlzcWwsIHdvcmRwcmVzcywgZXRjKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJHcm91cHM6IGRlZmluZSB1c2VyIGdyb3VwcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJVc2VyczogZGVmaW5lIHVzZXJzLCBhbmQgd2hpY2ggZ3JvdXAgdGhleSBiZWxvbmcgdG8iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiU291cmNlczogZG93bmxvYWQgYW4gYXJjaGl2ZSBmaWxlIGFuZCBwbGFjZSBpdCBvbiB0aGUgZWMyIGluc3RhbmNlICh0YXIsIHppcCwgYnoyKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJGaWxlczogY3JlYXRlIGZpbGVzIG9uIHRoZSBlYzIgaW5zdGFuY2UsIHVzaW5nIGlubGluZSBvciBjYW4gYmUgcHVsbGVkIGZyb20gYSBVUkwiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQ29tbWFuZHM6IHJ1biBhIHNlcmllcyBvZiBjb21tYW5kcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTZXJ2aWNlczogbGF1bmNoIGEgbGlzdCBvZiBzeXN2aW5pdCIpKSxtZHgoInAiLG51bGwsIllvdSBjYW4gYWxzbyBoYXZlIG11bHRpcGxlIGNvbmZpZ3MgYW5kIHlvdSBjYW4gcnVuIHRoZW0gc2VxdWVudGlhbGx5IGV0Yy4iKSxtZHgoImgzIix7ImlkIjoicGFja2FnZXMifSwiUGFja2FnZXMiKSxtZHgoInAiLG51bGwsIllvdSBjYW4gaW5zdGFsbCBwYWNrYWdlcyBmcm9tIHRoZSBmb2xsb3dpbmcgcmVwb3NpdG9yaWVzOiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sImFwdCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJtc2kiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwicHl0aG9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sInJwbSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJydWJ5Z2VtcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJ5dW0iKSksbWR4KCJwIixudWxsLCJQYWNrYWdlcyBhcmUgcHJvY2Vzc2VkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6IHJwbSwgeXVtL2FwdCwgYW5kIHRoZW4gcnVieWdlbXMgYW5kIHB5dGhvbi4iKSxtZHgoInAiLG51bGwsIllvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgdmVyc2lvbiBpZiB5b3Ugd2FudC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiQVdTOjpDbG91ZEZvcm1hdGlvbjo6SW5pdDpcbiAgY29uZmlnOlxuICAgIHBhY2thZ2VzOlxuICAgICAgcnBtOlxuICAgICAgICBlcGVsOiAnaHR0cDovL2Rvd25sb2FkLi4uLidcbiAgICAgIHl1bTpcbiAgICAgICAgaHR0cGQ6IFtdICMgbWVhbnMgbGF0ZXN0XG4gICAgICAgIHBocDogW11cbiAgICAgICAgd29yZHByZXNzOiBbXVxuICAgICAgcnVieWdlbXM6XG4gICAgICAgIGNoZWY6XG4gICAgICAgICAgLSAnMC4xMC4yJyAjIGdldCB0aGlzIHZlcnNpb25cbiIpKSxtZHgoImgzIix7ImlkIjoiZ3JvdXBzLWFuZC11c2VycyJ9LCJHcm91cHMgYW5kIFVzZXJzIiksbWR4KCJwIixudWxsLCJJZiB5b3Ugd2FudCB0byBoYXZlIG11bHRpcGxlIHVzZXJzIGFuZCBncm91cHMgKHdpdGggb3B0aW9uYWwgZ2lkKSBpbiB5b3VyIGVjMiBpbnN0YW5jZSwgeW91IGNhbiBhZGQgZ3JvdXBzIGFuZCB1c2VycyB0byBDRiBhbmQgbWV0YWRhdGEuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIkFXUzo6Q2xvdWRGb3JtYXRpb246OkluaXQ6XG4gIGNvbmZpZzpcbiAgICBncm91cHM6XG4gICAgICBncm91cGVPbmU6IHt9XG4gICAgICBncm91cFR3bzpcbiAgICAgICAgZ2lkOiAnNDUnICNnaWQgPSBncm91cCBJRFxuICAgIHVzZXJzOlxuICAgICAgbXlVc2VyOlxuICAgICAgICBncm91cHM6XG4gICAgICAgICAgLSAnZ3JvdXBPbmUnXG4gICAgICAgICAgLSAnZ3JvdXBUd28nXG4gICAgICAgIHVpZDogJzUwJ1xuICAgICAgICBob21lRGlyOiAnL3RtcCdcbiIpKSxtZHgoInAiLG51bGwsIkluIHRoZSBsYXJnZXIgZXhhbXBsZS4uLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJBV1M6OkNsb3VkRm9ybWF0aW9uOjpJbml0OlxuICBjb25maWc6XG4gICAgZ3JvdXBzOlxuICAgICAgYXBhY2hlOiB7fSAjIGFzc2lnbiBhbnkgZ3JvdXAgSURcbiAgICB1c2VyczpcbiAgICAgICdhcGFjaGUnOlxuICAgICAgICBncm91cHM6XG4gICAgICAgICAgLSAnYXBhY2hlJyAjIHVzZXIgYXBhY2hlIGJlbG9uZ3MgdG8gYXBhY2hlXG4iKSksbWR4KCJoMyIseyJpZCI6InNvdXJjZXMifSwiU291cmNlcyIpLG1keCgicCIsbnVsbCwiVGhlc2UgYXJlIGNvbnZlbmluZW5jZSBmb3IgYSBjb21wcmVzc2VkIGFyY2hpZXZlLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJBV1M6OkNsb3VkRm9ybWF0aW9uOjpJbml0OlxuICBjb25maWc6XG4gICAgIyB3aGVyZSB0byB1bnBhY2sgYW5kIGZyb20gd2hlcmVcbiAgICBzb3VyY2VzOlxuICAgICAgJy9ob21lL2VjMi11c2VyL2F3cy1jbGknOiAnaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY2xpL3RhcmJhbGwvbWFzdGVyJ1xuIikpLG1keCgiaDMiLHsiaWQiOiJmaWxlcyJ9LCJGaWxlcyIpLG1keCgicCIsbnVsbCwiRmlsZXMgY2FuIGJlIHRoZSBtb3N0IHVzZWQgc2VjdGlvbi4gQWxtb3N0IGFsbCB0aGUgZnVsbCBwb3dlci4gSXQgY2FuIGJlIGEgc3BlY2lmaWMgVVJMIG9yIHdyaXR0ZW4gaW5saW5lIGZvciB3aGF0IHlvdSBhcmUgZG9pbmcuIiksbWR4KCJwIixudWxsLCJCYXNlIGV4YW1wbGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIkFXUzo6Q2xvdWRGb3JtYXRpb246OkluaXQ6XG4gIGNvbmZpZzpcbiAgICAjIHdoZXJlIHRvIHVucGFjayBhbmQgZnJvbSB3aGVyZVxuICAgIGZpbGVzOlxuICAgICAgL3RtcC9zZXR1cC5teXNxbDpcbiAgICAgICAgY29udGVudDogIVN1YiB8XG4gICAgICAgICAgQ1JFQVRFIERBVEFCQVNFICR7REJOYW1lfTtcbiAgICAgICAgICBDUkVBVEUgVVNFUiAnJHtEQlVzZXJuYW1lfSdAJ2xvY2FsaG9zdCcgSURFTlRJRklFRCBCWSAnJHtEQlBhc3N3b3JkfSc7XG4gICAgICAgICAgR1JBTlQgQUxMIE9OICR7REJOYW1lfS4qIFRPICcke0RCVXNlcm5hbWV9J0AnbG9jYWxob3N0JztcbiAgICAgICAgICBGTFVTSCBQUklWSUxFREdFUztcbiAgICAgICAgbW9kZTogJzAwMDY0NCdcbiAgICAgICAgb3duZXI6ICdyb290J1xuICAgICAgICBncm91cDogJ3Jvb3QnXG4iKSksbWR4KCJwIixudWxsLCJGdWxsIGV4YW1wbGU6IiksbWR4KCJwIixudWxsLCJOb3RlOiAhU3ViIGlzIGEgZnVuY3Rpb24gdXNlZCBmb3IgbWFraW5nIHN1YnN0aXR1dGlvbi4gaWUgd2hlcmUgeW91IHNlZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiJHtBV1M6OlN0YWNrTmFtZX0iKSwiLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJBV1M6OkNsb3VkRm9ybWF0aW9uOjpJbml0OlxuICBjb25maWc6XG4gICAgIyB3aGVyZSB0byB1bnBhY2sgYW5kIGZyb20gd2hlcmVcbiAgICBmaWxlczpcbiAgICAgICcvdG1wL2N3bG9ncy9hcGFjaGVhY2Nlc3MuY29uZic6XG4gICAgICAgIGNvbnRlbnQ6ICFTdWIgfFxuICAgICAgICAgIFtnZW5lcmFsXVxuICAgICAgICAgIHN0YXRlX2ZpbGU9IC92YXIvYXdzbG9ncy9hZ2VudC1zdGF0ZVxuICAgICAgICAgIFsvdmFyL2xvZy9odHRwZC9hY2Nlc3NfbG9nXVxuICAgICAgICAgIGZpbGUgPSAvdmFyL2xvZy9odHRwZC9hY2Nlc3NfbG9nXG4gICAgICAgICAgbG9nX2dyb3VwX25hbWUgPSAke0FXUzo6U3RhY2tOYW1lfVxuICAgICAgICAgIGxvZ19zdHJlYW1fbmFtZSA9IHtpbnN0YW5jZV9pZH0vYXBhY2hlLmxvZ1xuICAgICAgICAgIGRhdGV0aW1lX2Zvcm1hdCA9ICVkLyViLyVZOiVIOiVNOiVTXG4gICAgICAgIG1vZGU6ICcwMDA0MDAnXG4gICAgICAgIG93bmVyOiBhcGFjaGVcbiAgICAgICAgZ3JvdXA6IGFwYWNoZVxuICAgICAgJy92YXIvd3d3L2h0bWwvaW5kZXgucGhwJzpcbiAgICAgICAgY29udGVudDogIVN1YiB8XG4gICAgICAgICAgPD9waHBcbiAgICAgICAgICBlY2hvICc8aDE+QVdTIENsb3VkRm9ybWF0aW9uIHNhbXBsZSBQSFAgYXBwbGljYXRpb24gZm9yICR7QVdTOjpTdGFja05hbWV9PC9oMT4nO1xuICAgICAgICAgID8+XG4gICAgICAgIG1vZGU6ICcwMDA2NDQnXG4gICAgICAgIG93bmVyOiBhcGFjaGVcbiAgICAgICAgZ3JvdXA6IGFwYWNoZVxuICAgICAgJy9ldGMvY2ZuL2Nmbi1odXAuY29uZic6XG4gICAgICAgIGNvbnRlbnQ6ICFTdWIgfFxuICAgICAgICAgIFttYWluXVxuICAgICAgICAgIHN0YWNrPSR7QVdTOjpTdGFja0lkfVxuICAgICAgICAgIHJlZ2lvbj0ke0FXUzo6UmVnaW9ufVxuICAgICAgICBtb2RlOiAnMDAwNDAwJ1xuICAgICAgICBvd25lcjogJ3Jvb3QnXG4gICAgICAgIGdyb3VwOiAncm9vdCdcbiAgICAgICcvZXRjL2Nmbi9ob29rcy5kL2Nmbi1hdXRvLXJlbG9hZGVyLmNvbmYnOlxuICAgICAgICBjb250ZW50OiAhU3ViIHxcbiAgICAgICAgICBbY2ZuLWF1dG8tcmVsb2FkZXItaG9va11cbiAgICAgICAgICB0cmlnZ2Vycz1wb3N0LnVwZGF0ZVxuICAgICAgICAgIHBhdGg9UmVzb3VyY2VzLldlYlNlcnZlckhvc3QuTWV0YWRhdGEuQVdTOjpDbG91ZEZvcm1hdGlvbjo6SW5pdFxuICAgICAgICAgIGFjdGlvbj0vb3B0L2F3cy9iaW4vY2ZuLWluaXQgLXYgLS1zdGFjayAke0FXUzo6U3RhY2tOYW1lfSAtLXJlc291cmNlIFdlYlNlcnZlckhvc3QgLS1yZWdpb24gJHtBV1M6OlJlZ2lvbn1cbiAgICAgICAgbW9kZTogJzAwMDQwMCdcbiAgICAgICAgb3duZXI6ICdyb290J1xuICAgICAgICBncm91cDogJ3Jvb3QnXG4iKSksbWR4KCJoMyIseyJpZCI6ImZuc3ViIn0sIkZuOjpTdWIiKSxtZHgoInAiLG51bGwsIihPciBhcyAhU3ViKSBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdmFyaWFibGVzIGZyb20gYSB0ZXh0LiBJdCdzIGEgdmVyeSBoYW5keSBmdW5jdGlvbiB0aGF0IHdpbGwgYWxsb3cgeW91IHRvIGZ1bGx5IGN1c3RvbWl6ZSB5b3VyIHRlbXBsYXRlcy4iKSxtZHgoInAiLG51bGwsIkZvciBleGFtcGxlLCB5b3UgY2FuIGNvbWJpbmUgIVN1YiB3aXRoIFJlZmVyZW5jZXMgb3IgQVdTIFBzZXVkbyB2YXJpYWJsZXMuIiksbWR4KCJwIixudWxsLCJNdXN0IGJlIGluIHRoZSBmb3JtICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIke1Zhck5hbWV9IiksIi4iKSxtZHgoInAiLG51bGwsIkZvcm1zOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCIjIFlvdSBjYW4gZG8gdGhpc1xuIVN1YlxuICAtIFN0cmluZ1xuICAtIHsgVmFyMU5hbWU6IFZhcjFWYWx1ZSwgVmFyMk5hbWU6IFZhcjJWYWx1ZSB9XG5cbiMgb3IgKG1vcmUgY29tcGxpY2F0ZWQgYW5kIHJhcmVseSBzZWVuKVxuIVN1YiBTdHJpbmdcbiIpKSxtZHgoImgzIix7ImlkIjoiY29tbWFuZHMifSwiQ29tbWFuZHMiKSxtZHgoInAiLG51bGwsIllvdSBjYW4gcnVuIGNvbW1hbmRzIG9uZSBhdCBhIHRpbWUgaW4gdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJhbHBoYWJldGljYWwgb3JkZXIiKSwiLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBzZXQgYSBkaXJlY3RvcnkgZnJvbSB3aGljaCB0aGF0IGNvbW1hbmQgaXMgcnVuLCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZXRjLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBhbHNvIHByb3ZpZGUgYSB0ZXN0IHRvIGNvbnRyb2wgd2hldGhlciB0aGUgY29tbWFuZCBpcyBleGVjdXRlZCBvciBub3QuIiksbWR4KCJwIixudWxsLCJUaGlzIHNob3VsZCBiZSBhIGxhc3QgcmVzb3J0LiBZb3UgY2FuIGV4ZWN1dGUgYW55IG9mIHRoZSBzY3JpcHRzIGZyb20gdGhlIGFib3ZlIGZpbGVzIGluIHRoaXMgc2VjdGlvbi4iKSxtZHgoInAiLG51bGwsIkV4YW1wbGU6IGNhbGwgdGhlIGVjaG8gY29tbWFuZCBvbmx5IGlmIHRoZSBmaWxlIGRvZXNuJ3QgZXhpc3QiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiY29tbWFuZHM6XG4gIHRlc3Q6XG4gICAgY29tbWFuZDogJ2VjaG8gXCIkTUFHSUNcIiA+IHRlc3QudHh0J1xuICAgIGVudjpcbiAgICAgIE1BR0lDOiAnSSBjb21lIGZyb20gdGhlIGVudmlyb25tZW50ISdcbiAgICBjd2Q6ICd+J1xuICAgIHRlc3Q6ICd0ZXN0ICEgLWUgfi90ZXN0LnR4dCcgIyBjaGVjayBmaWxlIGV4aXN0c1xuICAgIGlnbm9yZUVycm9yczogJ2ZhbHNlJyAjIGZhaWwgaWYgaXMgZG9lc24ndCB3b3JrXG4iKSksbWR4KCJoMyIseyJpZCI6InNlcnZpY2VzIn0sIlNlcnZpY2VzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIkFXUzo6Q2xvdWRGb3JtYXRpb246OkluaXQ6XG4gIGNvbmZpZzpcbiAgICBzZXJ2aWNlczpcbiAgICAgIHN5c3Zpbml0OlxuICAgICAgICBodHRwZDpcbiAgICAgICAgICBlbmFibGVkOiAndHJ1ZSdcbiAgICAgICAgICBlbnN1cmVSdW5uaW5nOiAndHJ1ZSdcbiAgICAgICAgc2VuZG1haWw6XG4gICAgICAgICAgZW5hYmxlZDogJ2ZhbHNlJ1xuICAgICAgICAgIGVuc3VyZVJ1bm5pbmc6ICdmYWxzZSdcbiIpKSxtZHgoImgzIix7ImlkIjoiY2ZuLWluaXQtYW5kLXNpZ25hbCJ9LCJDRk4gSW5pdCBhbmQgU2lnbmFsIiksbWR4KCJwIixudWxsLCJGaXJzdCwgd2UgdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjZm4taW5pdCIpLCIgdG8gbGF1bmNoIHRoZSBjb25maWcuIiksbWR4KCJwIixudWxsLCJUaGVuIHdlIHVzZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY2ZuLXNpZ25hbCIpLCIgdG8gdGVsbCB3aGVuIHRoZSBjb25maWcgaXMgY29tcGxldGUsIHdoaWNoIHdpbGwgbGV0IENGIGtub3cgdGhhdCB0aGUgcmVzb3VyY2UgY3JlYXRpb24gaGFzIGJlZW4gc3VjY2Vzc2Z1bC4iKSxtZHgoInAiLG51bGwsIlRoaXMgaGFzIHRvIGJlIHVzZWQgaW4gY29uanVjdGlvbiB3aXRoIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkNyZWF0aW9uUG9saWN5IiksIi4iKSxtZHgoInAiLG51bGwsIlRoaXMgZXhhbXBsZSBtZWFucyB3YWl0aW5nIGEgbWF4IG9mIDUgbWludXRlcyBmb3IgdGhlIGluc3RhbmNlIHRvIGNvbWUgb25saW5lIGFuZCBiZSBzZWxmIGNvbmZpZ3VyZWQuIElmIHdlIGRvbid0IGhlYXIgYmFjayBieSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiY2ZuLXNpZ25hbCIpLCIgYnkgdGhlLCBDRiB3aWxsIGZhaWwgYW5kIHJvbGxiYWNrLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLCJDcmVhdGlvblBvbGljeTpcbiAgUmVzb3VyY2VTaWduYWw6XG4gICAgVGltZW91dDogUFQ1TVxuIikpLG1keCgicCIsbnVsbCwiVGhpcyBpcyB1c2VmdWwgaW4gY2FzZSBvZiBhIGJhZCB1cGRhdGUuIiksbWR4KCJoMyIseyJpZCI6ImNmbi1odXAifSwiY2ZuLWh1cCIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkNmbi1odXAgY2FuIGJlIHVzZWQgdG8gdGVsbCB5b3VyIEVDMiBpbnN0YW5jZSB0byBsb29rIGZvciBNZXRhZGF0YSBjaGFuZ2VzIGV2ZXJ5IDE1IG1pbnV0ZXMgYW5kIGFwcGx5IHRoZSBtZXRhZGF0YSBjb25maWd1cmF0aW9uIGFnYWluLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJJdCdzIHZlcnkgcG93ZXJmdWwgYnV0IHlvdSByZWFsbHkgbmVlZCB0byB0cnkgaXQgb3V0IHRvIHVuZGVyc3RhbmQgaG93IGl0IHdvcmtzLiIpKSxtZHgoInAiLG51bGwsIkV4YW1wbGUgZnJvbSB0aGUgXCJmaWxlc1wiIGRlY2xhdGlvbjoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSwiJy9ldGMvY2ZuL2Nmbi1odXAuY29uZic6XG4gIGNvbnRlbnQ6ICFTdWIgfFxuICAgIFttYWluXVxuICAgIHN0YWNrPSR7QVdTOjpTdGFja0lkfVxuICAgIHJlZ2lvbj0ke0FXUzo6UmVnaW9ufVxuICBtb2RlOiAnMDAwNDAwJ1xuICBvd25lcjogJ3Jvb3QnXG4gIGdyb3VwOiAncm9vdCdcbicvZXRjL2Nmbi9ob29rcy5kL2Nmbi1hdXRvLXJlbG9hZGVyLmNvbmYnOlxuICBjb250ZW50OiAhU3ViIHxcbiAgICBbY2ZuLWF1dG8tcmVsb2FkZXItaG9va11cbiAgICB0cmlnZ2Vycz1wb3N0LnVwZGF0ZVxuICAgIHBhdGg9UmVzb3VyY2VzLldlYlNlcnZlckhvc3QuTWV0YWRhdGEuQVdTOjpDbG91ZEZvcm1hdGlvbjo6SW5pdFxuICAgIGFjdGlvbj0vb3B0L2F3cy9iaW4vY2ZuLWluaXQgLXYgLS1zdGFjayAke0FXUzo6U3RhY2tOYW1lfSAtLXJlc291cmNlIFdlYlNlcnZlckhvc3QgLS1yZWdpb24gJHtBV1M6OlJlZ2lvbn1cbiAgbW9kZTogJzAwMDQwMCdcbiAgb3duZXI6ICdyb290J1xuIikpLG1keCgiaDMiLHsiaWQiOiJjZm4taW5pdC1oYW5kcy1vbiJ9LCJDRk4gSW5pdCBIYW5kcy1PbiIpLG1keCgicCIsbnVsbCwiQWZ0ZXIgbG9hZGluZyB0aGUgQ0ZOIEluaXQgeWFtbCBmaWxlIGludG8gQ0YsIGl0IHdpbGwgZ28gdGhyb3VnaCBhIHNlcmllcyBvZiBkaWZmZXJlbnQgZXZlbnRzLiIpLG1keCgicCIsbnVsbCwiWW91IGNhbiB1bmRlciBcInN0YXR1cyByZWFzb25cIiBpZiB0aGVyZSBpcyBhIHN1Y2Nlc3MgbWVzc2FnZSBzZW50IGJhY2suIiksbWR4KCJwIixudWxsLCJZb3UgbmVlZCB0byBwcmFjdGlzZSB5b3VyICFJbml0IHNraWxsZXMuIEl0IHdpbGwgYmUgZXh0cmVtZWx5IGhhbmR5IGZvciBjcmVhdGluZyBFQzIgSW5zdGFuY2VzIG9yIEF1dG9TY2FsaW5nIGdyb3Vwcy4iKSxtZHgoInAiLG51bGwsIlJlbWVtYmVyIGxvZ3MgZm9yIGVjMi11c2VyIGRhdGEgYXJlIGluICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIvdmFyL2xvZy9jbG91ZC1pbml0LW91dHB1dC5sb2ciKSwiIGFuZCBsb2dzIGZvciBjZm4taW5pdCBhcmUgaW4gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIi92YXIvbG9nL2Nmbi1pbml0LmxvZyIpLCIsIHdoaWNoIGlzIHJlYWxseSBoZWxwZnVsIGlmIGNvbW1hbmRzIGRvbid0IGNvbXBsZXRlIGxpa2UgeW91IHdhbnQgdGhlbSB0by4iKSxtZHgoImgyIix7ImlkIjoiYWR2YW5jZWQtY2YtY29uY2VwdHMifSwiQWR2YW5jZWQgQ0YgQ29uY2VwdHMiKSxtZHgoInAiLG51bGwsIlJldmlldyBvZiBjdXJyZW50IHN0YW5kaW5nOiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIllvdSBjYW4gY2hlY2sgQVdTIGxhYnMgdGVtcGxhdGVzIGZyb20gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCJodHRwczovL2dpdGh1Yi9jb20vYXdzbGFicy9hd3MtY2xvdWRmb3JtYXRpb24tdGVtcGxhdGVzIiksIiB0byBzZWUgd2hhdCB5b3UgY2FuIHVuZGVyc3RhbmQvc2VlIGdvb2QgcHJhY3Rpc2UuIikpLG1keCgicCIsbnVsbCwiVGhlIGV4YW1wbGUgd2l0aCBXb3JkUHJlc3MgaXMgd2hhdCBpcyBzaG93biBpbiB0aGUgY291cnNlLiIpLG1keCgiaDMiLHsiaWQiOiJ1c2luZy10aGUtYXdzLWNsaSJ9LCJVc2luZyB0aGUgQVdTIENMSSIpLG1keCgicCIsbnVsbCwiV2UgY2FuIHVzZSB0aGUgQVdTIENMSSB0byBjcmVhdGUsIHVwZGF0ZSBvciBkZWxldGUgQ0YgdGVtcGxhdGVzLiIpLG1keCgicCIsbnVsbCwiU3VwZXIgY29udmVudGllbnQgZm9yIHdoZW4geW91IHN0YXJ0IGF1dG9tYXRpbmcgeW91ciBkZXBsb3ltZW50cy4iKSxtZHgoInAiLG51bGwsIk9uY2UgeW91J3ZlIGRvd25sb2FkZWQgdGhlIEFXUyBjb25maWcsIHVzZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiYXdzIGNvbmZpZ3VyZSAtLXByb2ZpbGUgPHByb2ZpbGVfbmFtZT4iKSwiIHRvIGNvbmZpZ3VyZSBhIHByb2ZpbGUgd2l0aCB0aGUgSUQgYW5kIFNlY3JldCBBY2Nlc3Mga2V5LiIpLG1keCgicCIsbnVsbCwiVG8gcnVuIGEgQ0YgY29tbWFuZCwgeW91IGNhbiB1c2Ugc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiYXdzIGNsb3VkZm9ybWF0aW9uIGNyZWF0ZS1zdGFjayAtLXN0YWNrLW5hbWUgZXhhbXBsZS1jbGktc3RhY2sgLS10ZW1wbGF0ZS1ib2R5IGZpbGU6Ly8wLXNhbXBsZS10ZW1wbGF0ZS55YW1sIC0tcGFyYW1ldGVycyBmaWxlOi8vMC1wYXJhbWV0ZXJzLmpzb24gLS1wcm9maWxlIGNmLWNvdXJzZSAtLXJlZ2lvbiB1cy1lYXN0LTEiKSksbWR4KCJwIixudWxsLCJXZSBjYW4gdXNlIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicGFyYW1ldGVycy5qc29uIiksIiBmaWxlIHRvIHNldCBQYXJhbWV0ZXJLZXkgYW5kIFBhcmFtZXRlclZhbHVlIGZvciBhbGwgdGhlIGtleXMgYW5kIHZhbHVlcyB3ZSBhcmUgbG9va2luZyB0byBzaGFyZS4iKSxtZHgoInAiLG51bGwsIkFmdGVyIHJ1bm5pbmcgdGhlIGNvbW1hbmQsIHdoYXQgeW91IGdldCBiYWNrIGlzIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiU3RhY2tJZCIpLCIuIiksbWR4KCJoMyIseyJpZCI6InVzaW5nLXRyb3Bvc3BoZXJlLXB5dGhvbi10by1nZW5lcmF0ZS1jbG91ZGZvcm1hdGlvbi10ZW1wbGF0ZXMifSwiVXNpbmcgVHJvcG9zcGhlcmUgKFB5dGhvbikgdG8gZ2VuZXJhdGUgQ2xvdWRGb3JtYXRpb24gdGVtcGxhdGVzIiksbWR4KCJwIixudWxsLCJUcm9wb3NoZXJlIGFsbG93cyB5b3UgdG8gbGV2ZXJhZ2UgUHl0aG9uIHdyaXRlIHRoZSB0ZW1wbGF0ZXMuIiksbWR4KCJwIixudWxsLCJUaGlzIG1lYW5zIHlvdSBjYW4gc3RhcnQgdXNpbmcgdHlwZXMgaW4geW91ciB0ZW1wbGF0ZXMgZm9yIHNhZmV0eS4iKSxtZHgoInAiLG51bGwsIllvdSB3aWxsIGFsc28gaGF2ZSB2YWxpZCBDRiBhbmQgY2FuIGR5bmFtaWNhbGx5IGdlbmVyYXRlIENsb3VkRm9ybWF0aW9uLiIpLG1keCgicCIsbnVsbCwiVGhpcyBtZWFucyB5b3UgY2FuIGFsc28gaGF2ZSB2ZXJ5IGNvbXBsZXggY29uZGl0aW9ucy4iKSxtZHgoInAiLG51bGwsIlRoZSBkaXNhZHZhbnRhZ2UgaXMgdGhhdCB0aGUgUHl0aG9uIG5lZWRzIHRvIGdlbmVyYXRlIHRoZSBKU09OIGZvciBpdCB0byBiZS4iKSxtZHgoImgzIix7ImlkIjoiZGVsZXRpb25wb2xpY3kifSwiRGVsZXRpb25Qb2xpY3kiKSxtZHgoInAiLG51bGwsIlRoaXMgcG9saWN5IGNhbiBwcmV2ZW50IHJlc291cmNlcyBmcm9tIGJlaW5nIGRlbGV0ZWQsIG9yIGluIHNvbWUgY2FzZXMsIGJhY2sgdGhlbSB1cCBiZWZvcmUgdGhlIGRlbGV0aW9uLiBUaGlzIHdpbGwgaGVscCBwcmV2ZW50IGRvaW5nIHNvbWV0aGluZyByZWFsbHksIHJlYWxseSBiYWQuIiksbWR4KCJwIixudWxsLCJEZWxldGlvbiBQb2xpY3kgY2FuIHRha2UgdXAgdGhlIGZvbGxvd2luZyB2YWx1ZXM6IiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiRGVsZXRlOiBBV1MgQ2xvdWRGb3JtYXRpb24gd2lsbCBkZWxldGUgdGhlIHJlc291cmNlIGFuZCBhbGwgaXRzIGNvbnRlbnQgaWYgYXBwbGljYWJsZSBkdXJpbmcgc3RhY2sgZGVsZXRpb24gKGRvZXMgbm90IGFwcGx5IHRvIFMzKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJSZXRhaW46IEFXUyBDbG91ZEZvcm1hdGlvbiBrZWVwcyB0aGUgcmVzb3VyY2Ugd2l0aG91dCBkZWxldGluZyB0aGUgcmVzb3VyY2Ugb3IgaXRzIGNvbnRlbnRzIHdoZW4gaXRzIHN0YWNrIGlzIGRlbGV0ZWQuIFlvdSBjYW4gYWRkIHRoaXMgZGVsZXRpb24gcG9saWN5IHRvIGFueSByZXNvdXJjZSB0eXBlLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTbmFwc2hvdDogRm9yIHJlc291cmNlcyB0aGF0IHN1cHBvcnQgc25hcHNob3RzIChBV1M6OkVDMjo6Vm9sdW1lLCBBV1M6OkVsYXN0aWNDYWNoZTo6Q2FjaGVDbHVzdGVyIGV0YykiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksIlJlc291cmNlczpcbiAgbXlTM0J1Y2tldDpcbiAgICBUeXBlOiBBV1M6OlMzOjpCdWNrZXRcbiAgICBEZWxldGlvblBvbGljeTogUmV0YWluXG4iKSksbWR4KCJwIixudWxsLCJJbiB0aGUgYWJvdmUgZXhhbXBsZSwgaXQgd2lsbCBjcmVhdGUgdGhlIFMzIEJ1Y2tldCwgeW91IHdpbGwgc2VlIHRoZSBidWNrZXQgY3JlYXRlZC4iKSxtZHgoInAiLG51bGwsIk5vdyBpZiB3ZSBkZWxldGUgdGhhdCBzdGFjayBhbmQgdGhlIGRlbGV0aW9uIHBvbGljeSBpcyByZXRhaW4sIHlvdSB3aWxsIHN0aWxsIGhhdmUgdGhhdCBidWNrZXQgdGhlcmUuIiksbWR4KCJoMyIseyJpZCI6ImN1c3RvbS1yZXNvdXJjZXMtd2l0aC1hd3MtbGFtYmRhIn0sIkN1c3RvbSBSZXNvdXJjZXMgd2l0aCBBV1MgTGFtYmRhIiksbWR4KCJwIixudWxsLCJDdXN0b20gcmVzb3VyY2VzIGVuYWJsZSB5b3UgdG8gd3JpdGUgY3VzdG9tIHByb3Zpc2lvbmluZyBsb2dpYyBpbiB0ZW1wbGF0ZXMgdGhhdCBBV1MgQ2xvdWRGb3JtYXRpb24gcnVucyBhbnl0aW1lIHlvdSBjcmVhdGUsIHVwZGF0ZSAoaWYgeW91IGNoYW5nZWQgdGhlIGN1c3RvbSByZXNvdXJjZSkgb3IgZGVsZXRlIHN0YWNrcy4iKSxtZHgoInAiLG51bGwsIkZvciBleGFtcGxlLCB5b3UgbWlnaHQgd2FudCB0byBpbmNsdWRlIHJlc291cmNlcyB0aGF0IGFyZW4ndCBhdmFpbGFibGUgYXMgQVdTIENsb3VkRm9ybWF0aW9uIHJlc291cmNlIHR5cGVzLiIpLG1keCgicCIsbnVsbCwiQ2hlY2sgb25saW5lIGZvciBhIHdhbGt0aHJvdWdoIG9mIGN1c3RvbSByZXNvdXJjZXMuIiksbWR4KCJoMyIseyJpZCI6ImJlc3QtcHJhY3Rpc2VzLXRvLW9yZ2FuaXplLXlvdXItY2xvdWRmb3JtYXRpb24tdGVtcGxhdGVzIn0sIkJlc3QgcHJhY3Rpc2VzIHRvIG9yZ2FuaXplIHlvdXIgQ2xvdWRGb3JtYXRpb24gdGVtcGxhdGVzIiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiSG93IHRvIG9yZ2FuaXNlIHRlbXBsYXRlczogeW91IGNhbiBoYXZlIGEgbGF5ZXJlZCBhcmNoaXRlY3R1cmUgKGhvcml6b250YWwgbGF5ZXJzKSB2cyBzZXJ2aWNlIG9yaWVudGVkIGFyY2hpdGVjdHVyZSAodmVydGljYWwgbGF5ZXJzKS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVXNlIGNyb3NzIHN0YWNrIHJlZmVyZW5jZXMgZWcuIHRvIHJlZmVyZW5jZSBhIFZQQyBvciBzdWJuZXQuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIk1ha2Ugc3VyZSB0aGUgdGVtcGxhdGUgaXMgZW52aXJvbm1lbnQgYWdub3N0aWMgdG8gZG8gZGV2IC8gdGVzdCAvIHByb2QgYW5kIGFjcm9zcyByZWdpb25zIC8gYWNjb3VudHMgc2VlbWxlc3NseS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiTmV2ZXIgZW1iZWQgY3JlZGVudGlhbHMgKHVzZSBwYXJhbWV0ZXJzIHdpdGggTm9FY2hvIG9yIEtNUykuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlVzZSBzcGVjaWZpYyBwYXJhbWV0ZXJzIHR5cGVzIGFuZCBjb25zdHJhaW50cy4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVXNlIENGTiBJbml0ICgmIGxhdGVzdCB2ZXJzaW9uIG9mIHRoZSBoZWxwZXIgc2NyaXB0cykiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVmFsaWRhdGUgdGVtcGxhdGVzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkRvbid0IGRvIGFueXRoaW5nIG1hbnVhbCBvbiB0aGUgZWxlbWVudHMgb2YgdGhlIHN0YWNrIC0gdGhhdCBjYW4gY2F1c2UgYSBzdGF0ZSBtaXNtYXRjaC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVmVyaWZ5IGNoYW5nZXMgd2l0aCBjaGFuZ2VzZXRzIChhbmQgYXZvaWQgZGlzYXN0ZXJzKS4iKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiVXNlIHN0YWNrIHBvbGljaWVzIHRvIHByZXZlbnQgY3JpdGljYWwgY29tcG9uZW50cyBmcm9tIGJlaW5nIGRlbGV0ZWQgYWZ0ZXIgY3JlYXRlIChzdWNoIGFzIHlvdXIgbW9zdCB2YWx1YWJsZSBSRFMgZGF0YWJhc2UpLiIpKSxtZHgoImgzIix7ImlkIjoiY29zdC1lc3RpbWF0ZS1mb3ItdGVtcGxhdGVzIn0sIkNvc3QgZXN0aW1hdGUgZm9yIHRlbXBsYXRlcyIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBlc3RpbWF0ZSB0aGUgY29zdCBvZiBhIHN0YWNrIHZlcnkgZWFzaWx5LiIpLG1keCgicCIsbnVsbCwiRm9yIHRoaXMsIGp1c3QgdXBsb2FkIHRoZSBzdGFjayBvbnRvIHRoZSBBV1MgY29uc29sZSwgZW50ZXIgdGhlIHBhcmFtcyBhbmQgY2xpY2sgXCJjb3N0XCIuIikpO31pZih0eXBlb2YgTURYQ29udGVudCE9PSd1bmRlZmluZWQnJiZNRFhDb250ZW50JiZNRFhDb250ZW50PT09T2JqZWN0KE1EWENvbnRlbnQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKE1EWENvbnRlbnQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiTURYQ29udGVudCIsZmlsZW5hbWU6Im1hbnVhbC9BV1MvQVdTLUNsb3VkRm9ybWF0aW9uLU1hc3RlckNsYXNzLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/AWS/AWS-CloudFormation-MasterClass.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"cloudformation-master-class\"\n    }}>{`CloudFormation Master Class`}</h1>\n    {\n      /* TOC -->autoauto- [CloudFormation Master Class](#cloudformation-master-class)auto    - [What is CloudFormation](#what-is-cloudformation)auto    - [Benefits](#benefits)auto    - [CloudFormation vs Ansible / Terraform](#cloudformation-vs-ansible--terraform)auto    - [First template](#first-template)auto    - [YAML Intro](#yaml-intro)auto    - [Creating a S3 Bucket](#creating-a-s3-bucket)auto        - [Types of updates](#types-of-updates)auto        - [Properties](#properties)auto        - [Deleting the stack](#deleting-the-stack)auto    - [CloudFormation template options](#cloudformation-template-options)auto    - [CloudFormation Designer](#cloudformation-designer)auto    - [Building Blocks](#building-blocks)auto    - [Template helpers](#template-helpers)auto    - [CloudFormation Parameters](#cloudformation-parameters)auto        - [Overview](#overview)auto        - [Theory and hands on](#theory-and-hands-on)auto    - [How to reference a parameter](#how-to-reference-a-parameter)auto    - [Resources](#resources)auto        - [Reading the docs for an ES2 Instance](#reading-the-docs-for-an-es2-instance)auto        - [Optional Attributes for Resources](#optional-attributes-for-resources)auto        - [FAQ for resources](#faq-for-resources)auto    - [Mappings](#mappings)auto        - [Fn::FindInMap - Accessing Mapping Values](#fnfindinmap---accessing-mapping-values)auto        - [Mappings in practise](#mappings-in-practise)auto    - [Concept: Pseudo Parameters](#concept-pseudo-parameters)auto    - [CloudFormation Outputs](#cloudformation-outputs)auto        - [Outputs Hands-On](#outputs-hands-on)auto        - [Cross Stack Reference](#cross-stack-reference)auto    - [Conditions](#conditions)auto        - [How to define a condition?](#how-to-define-a-condition)auto    - [Conditional Hands On](#conditional-hands-on)auto    - [Fn::GetAtt](#fngetatt)auto    - [CF Metadata](#cf-metadata)auto        - [AWS::CloudFormation::Designer hands on](#awscloudformationdesigner-hands-on)auto        - [AWS::CloudFormation::Interface hands on](#awscloudformationinterface-hands-on)auto    - [CFN Init and EC2 User Data](#cfn-init-and-ec2-user-data)auto        - [EC2 User Data Overview](#ec2-user-data-overview)auto        - [CloudFormation Init](#cloudformation-init)auto        - [AWS::CloudFormation::Init](#awscloudformationinit)auto        - [Packages](#packages)auto        - [Groups and Users](#groups-and-users)auto        - [Sources](#sources)auto        - [Files](#files)auto        - [Fn::Sub](#fnsub)auto        - [Commands](#commands)auto        - [Services](#services)auto        - [CFN Init and Signal](#cfn-init-and-signal)auto        - [cfn-hup](#cfn-hup)auto        - [CFN Init Hands-On](#cfn-init-hands-on)auto    - [Advanced CF Concepts](#advanced-cf-concepts)auto        - [Using the AWS CLI](#using-the-aws-cli)auto        - [Using Troposphere (Python) to generate CloudFormation templates](#using-troposphere-python-to-generate-cloudformation-templates)auto        - [DeletionPolicy](#deletionpolicy)auto        - [Custom Resources with AWS Lambda](#custom-resources-with-aws-lambda)auto        - [Best practises to organize your CloudFormation templates](#best-practises-to-organize-your-cloudformation-templates)auto        - [Cost estimate for templates](#cost-estimate-for-templates)autoauto<!-- /TOC */\n    }\n    <h2 {...{\n      \"id\": \"what-is-cloudformation\"\n    }}>{`What is CloudFormation`}</h2>\n    <p>{`Having >50 services, CloudFormation was brought in to help develops scaffold out the requires AWS stack.`}</p>\n    <p>{`Eg. I want a security group, two EC2 machines with it, two elastic IPs, an S3 bucket + a load balancer in front.`}</p>\n    <p>{`CloudFormation will create all of this in the right order with the exact config.`}</p>\n    <h2 {...{\n      \"id\": \"benefits\"\n    }}>{`Benefits`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Infrastructure as code`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`No manual creation`}</li>\n          <li parentName=\"ul\">{`Can be version controlled`}</li>\n          <li parentName=\"ul\">{`Changes to infrastructure are reviewed through code`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Cost`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Each resource will be tagged so you can estimate the costs and figure out which costs what`}</li>\n          <li parentName=\"ul\">{`Great savings strategy`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Productivity`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Ability to destroy and re-create an infrastructure`}</li>\n          <li parentName=\"ul\">{`Automated generation of Diagram for templates`}</li>\n          <li parentName=\"ul\">{`All declarative`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Separation of concern`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Many different stacks for many different layers`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Don't re-invent the wheel`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Already so many templates`}</li>\n          <li parentName=\"ul\">{`Leverage the docs`}</li>\n        </ul></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-vs-ansible--terraform\"\n    }}>{`CloudFormation vs Ansible / Terraform`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`CF is native, and also contain the latest`}</li>\n      <li parentName=\"ul\">{`CF is state based`}</li>\n      <li parentName=\"ul\">{`The others are instruction based - difficult to orchestrate`}</li>\n      <li parentName=\"ul\">{`For new services, Ansible / Terraform can take a long time`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"first-template\"\n    }}>{`First template`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`---\nResources:\n  MyInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n`}</code></pre>\n    <p>{`The stack instance can be created, updated or destroyed.`}</p>\n    <p>{`You cannot edit the stack itself later, you need to just re-update the stack by uploading a new file.`}</p>\n    <p>{`The stack itself can clean up instances after itself too.`}</p>\n    <h2 {...{\n      \"id\": \"yaml-intro\"\n    }}>{`YAML Intro`}</h2>\n    <p>{`You can use YAML or JSON for writing it - but JSON is tough for it`}</p>\n    <p>{`Array support:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`product:\n    - test  : 1\n      quantity: 2\n    - test  : 2\n      quantity: 4\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-a-s3-bucket\"\n    }}>{`Creating a S3 Bucket`}</h2>\n    <p>{`Googling for the type, you will get the in depth docs from AWS.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`---\nResources: # always the start\n    MyS3Bucket: # template name\n        Type: \"AWS::S3::Bucket\"\n        Properties:\n            AccessControl: PublicRead\n            BucketName: \"www.site.com\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"types-of-updates\"\n    }}>{`Types of updates`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Updates with no interruption`}</li>\n      <li parentName=\"ol\">{`Replacements are breaking and need to replace the resource`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <p>{`On the properties under the docs, you can see info about the properties.`}</p>\n    <h3 {...{\n      \"id\": \"deleting-the-stack\"\n    }}>{`Deleting the stack`}</h3>\n    <p>{`Just right click on the CloudFormation and delete the resources.`}</p>\n    <h2 {...{\n      \"id\": \"cloudformation-template-options\"\n    }}>{`CloudFormation template options`}</h2>\n    <p>{`You have a few template options:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Tags`}</li>\n      <li parentName=\"ol\">{`Permissions (IAM role)`}</li>\n      <li parentName=\"ol\">{`Notifications Options (SNS topic)`}</li>\n      <li parentName=\"ol\">{`Timeouts (minutes before calling failure)`}</li>\n      <li parentName=\"ol\">{`Rollback on Failure`}</li>\n      <li parentName=\"ol\">{`Stack Policy`}</li>\n    </ol>\n    <p>{`These (if you manually do it) all show up on the \"create stack\" part of CloudFormation.`}</p>\n    <p>{`The template review also gives you an opportunity to estimate cost.`}</p>\n    <h2 {...{\n      \"id\": \"cloudformation-designer\"\n    }}>{`CloudFormation Designer`}</h2>\n    <p>{`A visual aid to help build the CF Stack. Ensure the template is also well written.`}</p>\n    <p>{`You can drag and drop basically everything. Dropping it will give you options to selecting documentation etc.`}</p>\n    <p>{`It's great for dragging and dropping templates and giving information on that template as well.`}</p>\n    <h2 {...{\n      \"id\": \"building-blocks\"\n    }}>{`Building Blocks`}</h2>\n    <p>{`There are a number of building blocks for each template:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Resources: your AWS resources declared in the template`}</li>\n      <li parentName=\"ol\">{`Parameters: the dynamic inputs for your template`}</li>\n      <li parentName=\"ol\">{`Mappings: the static variables for your template`}</li>\n      <li parentName=\"ol\">{`Outputs: References to what has been created`}</li>\n      <li parentName=\"ol\">{`Conditionals: List of conditions to perform resource creation`}</li>\n      <li parentName=\"ol\">{`Metadata`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"template-helpers\"\n    }}>{`Template helpers`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`References`}</li>\n      <li parentName=\"ol\">{`Functions`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-parameters\"\n    }}>{`CloudFormation Parameters`}</h2>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`What are they? The way to provide inputs to your AWS CloudFormation template.`}</p>\n    <p>{`They're important to know about it:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You want to reuse your templates across the company`}</li>\n      <li parentName=\"ol\">{`Some inputs can not be determined ahead of time`}</li>\n    </ol>\n    <p>{`The major benefit: you won't have to re-upload a template to change its content.`}</p>\n    <h3 {...{\n      \"id\": \"theory-and-hands-on\"\n    }}>{`Theory and hands on`}</h3>\n    <p>{`Parameters can be controlled by all these settings:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Type:`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`String`}</li>\n      <li parentName=\"ul\">{`Number`}</li>\n      <li parentName=\"ul\">{`CommaDelimitedList`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`List<Type>`}</inlineCode></li>\n      <li parentName=\"ul\">{`AWS Parameter (to help catch invalid values - match against existing values in the AWS Account)`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Description`}</li>\n      <li parentName=\"ol\">{`Constraints`}</li>\n      <li parentName=\"ol\">{`ConstraintDescription (String)`}</li>\n      <li parentName=\"ol\">{`Min/MaxLength`}</li>\n      <li parentName=\"ol\">{`Min/MaxValue`}</li>\n      <li parentName=\"ol\">{`Defaults`}</li>\n      <li parentName=\"ol\">{`AllowedValues (array)`}</li>\n      <li parentName=\"ol\">{`AllowedPattern (regexp)`}</li>\n      <li parentName=\"ol\">{`NoEcho (Boolean)`}</li>\n    </ol>\n    <p>{`This can be found in the `}<inlineCode parentName=\"p\">{`0-parameters-hands-on.yaml`}</inlineCode>{`.`}</p>\n    <p>{`Again - check the docs.`}</p>\n    <p>{`To reference a parameter, you then go with `}<inlineCode parentName=\"p\">{`Key: !Ref Reference`}</inlineCode>{`.`}</p>\n    <p>{`If you have `}<inlineCode parentName=\"p\">{`!Select`}</inlineCode>{` for a CommaDelimitedList, you need to go `}<inlineCode parentName=\"p\">{`Key: !Select [ArrayNumber, !Ref Reference]`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-reference-a-parameter\"\n    }}>{`How to reference a parameter`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Using the Fn::Ref function.`}</li>\n      <li parentName=\"ul\">{`Shorthand in YAML is !Ref.`}</li>\n      <li parentName=\"ul\">{`Can reference block, not just parameter`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <p>{`Resources are the core of your CloudFormation template. They represent the different AWS Components that will be created and configured.`}</p>\n    <p>{`They are declared and can be references by eachother. AWS figures out creation, updates, deletes etc.`}</p>\n    <p>{`There are over 224 types of resources.`}</p>\n    <p>{`They are identified using the form `}<inlineCode parentName=\"p\">{`AWS::aws-product-name::data-type-name`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"reading-the-docs-for-an-es2-instance\"\n    }}>{`Reading the docs for an ES2 Instance`}</h3>\n    <p>{`If you look at the docs, if comes up with both JSON and YAML docs.`}</p>\n    <h3 {...{\n      \"id\": \"optional-attributes-for-resources\"\n    }}>{`Optional Attributes for Resources`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`DependsOn: very useful to draw a dependency between two resources. For example, only create an ECS cluster after creating an ASG (auto scaling group).`}</li>\n      <li parentName=\"ol\">{`DeletionPolicy: protect resource from being deleted even if cloudformation is deleted.`}</li>\n      <li parentName=\"ol\">{`CreationPolicy: more info on CFN`}</li>\n      <li parentName=\"ol\">{`Metadata: anything you want!`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"faq-for-resources\"\n    }}>{`FAQ for resources`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Can I create a dynamic a dynamic amount of resources? No you can perform code generation. The work around is the `}<inlineCode parentName=\"li\">{`troposphere`}</inlineCode>{` Python library.`}</li>\n      <li parentName=\"ol\">{`Is every AWS Service supported? Almost. Only a select few niches are not there.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"mappings\"\n    }}>{`Mappings`}</h2>\n    <p>{`What are mappings? Fixed ariables within your CF Template. Great for dev vs prod, regions, AMI types etc.`}</p>\n    <p>{`Every mapping has top, middle and bottom.`}</p>\n    <p>{`Great to use when you know in advance:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Region`}</li>\n      <li parentName=\"ul\">{`AZ`}</li>\n      <li parentName=\"ul\">{`AWSAccount`}</li>\n      <li parentName=\"ul\">{`Environment (dev vs prod)`}</li>\n    </ul>\n    <p>{`They allow safer control over the template. Use parameters when the values are `}<em parentName=\"p\">{`really`}</em>{` user specific.`}</p>\n    <h3 {...{\n      \"id\": \"fnfindinmap---accessing-mapping-values\"\n    }}>{`Fn::FindInMap - Accessing Mapping Values`}</h3>\n    <p>{`Use Fn::FindInMap to return a named value from a specific key.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`!FindInMap `}{`[ MapName, TopLevelKey, SecondLevelKey ]`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      '32': 'ami-6411e20d'\n      '64': 'ami-7a11e213'\nResources:\n  myEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 32]\n      InstanceType: m1.small\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mappings-in-practise\"\n    }}>{`Mappings in practise`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Parameters:\n  EnvironmentName:\n    Description: Environment Name\n    Type: String\n    AllowedValues: [development, production]\n    ConstraintDescription: must be development or production\n\nMappings:\n  AWSRegionArch2AMI:\n    us-east-1:\n      HVM64: ami-6869aa05\n  EnvironmentToInstantType:\n    development:\n      instanceType: t2.micro\n    production:\n      instanceType: t2.small\n\nResources:\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      InstanceType:\n        !FindInMap [\n          EnvironmentToInstanceType,\n          !Ref 'EnvironmentName',\n          instanceType,\n        ]\n      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"concept-pseudo-parameters\"\n    }}>{`Concept: Pseudo Parameters`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`AWS offers us pseudo params in any CF template.`}</li>\n      <li parentName=\"ul\">{`These can be used at any time and are enabled by default.`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">{`AWS::AccountId`}</li>\n      <li parentName=\"ol\">{`AWS::NotificationsARNs`}</li>\n      <li parentName=\"ol\">{`AWS::NoValue`}</li>\n      <li parentName=\"ol\">{`AWS::Region`}</li>\n      <li parentName=\"ol\">{`AWS::StackId`}</li>\n      <li parentName=\"ol\">{`AWS::StackName`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-outputs\"\n    }}>{`CloudFormation Outputs`}</h2>\n    <p>{`What are they? They are `}<em parentName=\"p\">{`optional`}</em>{` values that we can import into other stacks.`}</p>\n    <p>{`You can also view the outputs in the AWS Console or in using the AWS CLI.`}</p>\n    <p>{`They're very useful for example if you define a network CloudFormation, and output the variables such as VPC ID and your Subnet IDs.`}</p>\n    <p>{`It's the best way to perform some collaboration cross stack. Let the expert handle their part and you handle yours.`}</p>\n    <h3 {...{\n      \"id\": \"outputs-hands-on\"\n    }}>{`Outputs Hands-On`}</h3>\n    <p>{`Creating a SSH Security Group as part of one template. We can create an output that references that security group.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Outputs:\n  <Logical ID>:\n    Description: Information about the value\n    Value: Value to return\n    Export:\n      Name: Value to export\n`}</code></pre>\n    <p>{`In 0-create-ssh-security-group.yaml`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  # here we define a SSH security group that will be used in the entire company\n  MyCompanyWideSSHSecurityGroup:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Enable SSH access via port 22\n      SecurityGroupIngress:\n        # we have a lot of rules because it's a perfect security group\n        # finance team network\n        - CidrIp: 10.0.48.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # marketing team network\n        - CidrIp: 10.0.112.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # application team support network\n        - CidrIp: 10.0.176.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n\nOutputs:\n  StackSSHSecurityGroup:\n    Description: The SSH Security Group for our Company\n    Value: !Ref MyCompanyWideSSHSecurityGroup\n    Export:\n      Name: SSHSecurityGroup\n`}</code></pre>\n    <p>{`It is important to note that for an `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` to be used anywhere, you need to define an `}<inlineCode parentName=\"p\">{`export`}</inlineCode>{` value.`}</p>\n    <h3 {...{\n      \"id\": \"cross-stack-reference\"\n    }}>{`Cross Stack Reference`}</h3>\n    <p>{`We use `}<inlineCode parentName=\"p\">{`Fn::ImportValue`}</inlineCode>{` in a simple block:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  MySecureInstance:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      SecurityGroups:\n        # we reference the output here, using the Fn::ImportValue function\n        - !ImportValue SSHSecurityGroup\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditions\"\n    }}>{`Conditions`}</h2>\n    <p>{`Conditionals are used to control the creation of resources or outputs based on a condition.`}</p>\n    <p>{`Conditions can be whatever you want them to be, but common ones are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Environment (dev/test/prod)`}</li>\n      <li parentName=\"ul\">{`AWS Region`}</li>\n      <li parentName=\"ul\">{`Any parameter value`}</li>\n    </ul>\n    <p>{`Each condition can reference another condition, parameter value or mapping.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-define-a-condition\"\n    }}>{`How to define a condition?`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Conditions:\n  [Logical ID]: [Intrinsic function]\n`}</code></pre>\n    <p>{`Logical ID is for you to choose. It's how you name the condition.`}</p>\n    <p>{`The intrinsic function (logical) can be any of the following: - Fn::And - Fn::Equals - Fn::If - Fn::Not - Fn::Or`}</p>\n    <h2 {...{\n      \"id\": \"conditional-hands-on\"\n    }}>{`Conditional Hands On`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Let's analyze a CF template that optionally creates a volume and mount point only if \"prod\" is specified as a parameter.`}</li>\n      <li parentName=\"ul\">{`It utilizes params, mappings, conditionals, outputs`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      AMI: 'ami-a4c7edb2'\n      TestAz: 'us-east-1a'\n    us-west-1:\n      AMI: 'ami-6df1e514'\n      TestAz: 'us-west-1a'\n    us-west-2:\n      AMI: 'ami-327f5352'\n      TestAz: 'us-west-2a'\n    eu-west-1:\n      AMI: 'ami-d7b9a2b1'\n      TestAz: 'eu-west-1a'\n    sa-east-1:\n      AMI: 'ami-87dab1eb'\n      TestAz: 'sa-east-1a'\n    ap-southeast-1:\n      AMI: 'ami-77af2014'\n      TestAz: 'ap-southeast-1a'\n    ap-southeast-2:\n      AMI: 'ami-10918173'\n      TestAz: 'ap-southeast-2a'\n    ap-northeast-1:\n      AMI: 'ami-e21cc38c'\n      TestAz: 'ap-northeast-1a'\nParameters:\n  EnvType:\n    Description: Environment type.\n    Default: test\n    Type: String\n    AllowedValues:\n      - prod\n      - test\n    ConstraintDescription: must specify prod or test.\n\nConditions:\n  CreateProdResources: !Equals [!Ref EnvType, prod]\n\nResources:\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]\n      InstanceType: t2.micro\n      AvailabilityZone: !FindInMap [RegionMap, !Ref 'AWS::Region', TestAz]\n\n  MountPoint:\n    Type: 'AWS::EC2::VolumeAttachment'\n    Condition: CreateProdResources\n    Properties:\n      InstanceId: !Ref EC2Instance\n      VolumeId: !Ref NewVolume\n      Device: /dev/sdh\n\n  NewVolume:\n    Type: 'AWS::EC2::Volume'\n    Condition: CreateProdResources\n    Properties:\n      Size: 100\n      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone\n\nOutputs:\n  VolumeId:\n    Condition: CreateProdResources\n    Value: !Ref NewVolume\n`}</code></pre>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`conditions`}</inlineCode>{` can not be applied to `}<inlineCode parentName=\"p\">{`parameters`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"fngetatt\"\n    }}>{`Fn::GetAtt`}</h2>\n    <p>{`Get an attribute attached to any resource that exists. To know the attributes, check the docs.`}</p>\n    <h2 {...{\n      \"id\": \"cf-metadata\"\n    }}>{`CF Metadata`}</h2>\n    <p>{`This is any optional metadata section to include arbitrary YAML that provide details about the template or resource.`}</p>\n    <p>{`There are 3 metadata keys that have special meaning:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Designer`}</li>\n    </ol>\n    <p>{`Describes how the resources are laid out in your template. This is automatically added by the AWS Designer. This helps the UI (x and y)`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Interface`}</li>\n    </ol>\n    <p>{`Define grouping and ordering of input parameters when they are displayed in the AWS Console.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Init`}</li>\n    </ol>\n    <p>{`Define configuration tasks for cfn-init. It's the most powerful usage of the metadata. This is very important and a lot to learn about it below.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationdesigner-hands-on\"\n    }}>{`AWS::CloudFormation::Designer hands on`}</h3>\n    <p>{`This is automatically added for you but worth deleting for online sharing and usage. When dragging and dropping each resource you will see a huge set of metadata left there. The metadata can also be added to each resource.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationinterface-hands-on\"\n    }}>{`AWS::CloudFormation::Interface hands on`}</h3>\n    <p>{`Define grouping and ordering of input parameteres when they are displayed in the AWS Console. This is meant when users must input params manually.`}</p>\n    <p>{`You provide them with grouping, or sorting, that allow them to input parameters efficiently.`}</p>\n    <p>{`Example: Group all the EC2 related params together.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`---\nParameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  InstanceType:\n    Description: EC2 instance type.\n    Type: String\n    Default: t2.micro\n    AllowedValues:\n      - t2.micro\n      - t2.small\n      - t2.medium\n      - m3.medium\n      - m3.large\n      - m3.xlarge\n      - m3.2xlarge\n  SSHLocation:\n    Description: The IP address range that can SSH to the EC2 instance.\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})/(\\\\\\\\d{1,2})\"\n    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n  VPCID:\n    Description: VPC to operate in\n    Type: AWS::EC2::VPC::Id\n  SubnetID:\n    Description: Subnet ID\n    Type: AWS::EC2::Subnet::Id\n  SecurityGroupID:\n    Description: Security Group\n    Type: AWS::EC2::SecurityGroup::Id\n\nResources:\n  MyEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: !Ref InstanceType\n      SecurityGroups:\n        - !Ref SecurityGroupID\n      SubnetID: !Ref SubnetID\n\nMetadata:\n  # This is the important part\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: 'Network Configuration'\n        Parameters:\n          - VPCID\n          - SubnetID\n          - SecurityGroupID\n      - Label:\n          default: 'Amazon EC2 Configuration'\n        Parameters:\n          - InstanceType\n          - KeyName\n    ParameterLabels:\n      VPCID:\n        default: 'Which VPC should this be deployed to?'\n`}</code></pre>\n    <p>{`If you deploy a new stack using the above, you will see that the `}<inlineCode parentName=\"p\">{`Parameters`}</inlineCode>{` block will then drop you to questions about what configuration you are looking for.`}</p>\n    <h2 {...{\n      \"id\": \"cfn-init-and-ec2-user-data\"\n    }}>{`CFN Init and EC2 User Data`}</h2>\n    <h3 {...{\n      \"id\": \"ec2-user-data-overview\"\n    }}>{`EC2 User Data Overview`}</h3>\n    <p>{`Many CF templates will be about provisioning computer resources in your AWS Cloud eg. EC2 instances, autoscaling.`}</p>\n    <p>{`Usually, you want to the instances to be self configured so that they can perform the job they are supposed to perform.`}</p>\n    <p>{`You can fully automate the EC2 fleet with CF init.`}</p>\n    <p>{`Example: an EC2 instance that has php and mysql installed on it.`}</p>\n    <p>{`We want a user-data script to get this up and going. From the EC2 management console, you can basically use the advanced section to add a `}<inlineCode parentName=\"p\">{`/bin/bash`}</inlineCode>{` section. This is already started to become more tedious than what we want.`}</p>\n    <p>{`How can we do this in CloufFormation?`}</p>\n    <p>{`The following script can use `}<inlineCode parentName=\"p\">{`UserData`}</inlineCode>{` to add the script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Parameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  SSHLocation:\n    Description: The IP address range that can be used to SSH to the EC2 instances\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})/(\\\\\\\\d{1,2})\"\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\n\nResources:\n  WebServer:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      KeyName: !Ref KeyName\n      SecurityGroups:\n        - !Ref WebServerSecurityGroup\n      UserData:\n        Fn::Base64: | # everything after will be kept as is\n          #!/bin/bash\n          yum update -y\n          yum install -y httpd24 php56 mysql55-server php56-mysqlnd\n          service httpd start\n          chkconfig httpd on\n          groupadd www\n          usermod -a -G www ec2-user\n          chown -R root:www /var/www\n          chmod 2775 /var/www\n          find /var/www -type d -exec chmod 2775 {} +\n          find /var/www -type f -exec chmod 0664 {} +\n          echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php\n\n  WebServerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Enable HTTP access via port 80 + SSH access'\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          FromPort: '80'\n          IpProtocol: tcp\n          ToPort: '80'\n        - CidrIp: !Ref SSHLocation\n          FromPort: '22'\n          IpProtocol: tcp\n          ToPort: '22'\n`}</code></pre>\n    <p>{`Now that we see the power of this, let's have a look at CF Init.`}</p>\n    <h3 {...{\n      \"id\": \"cloudformation-init\"\n    }}>{`CloudFormation Init`}</h3>\n    <p>{`What is the problem with EC2 user data? Well, what happens if we have a large configuration? What if we want to evolve the state without terminating it? How do we make it readable? How do we know or signal that our EC2 user-data script actually completed successfully?`}</p>\n    <p>{`Amazon creating CF helper scripts.`}</p>\n    <p>{`There are 4 python scripts that come directly with Amazon Linux AMI or can be installed using `}<inlineCode parentName=\"p\">{`yum`}</inlineCode>{` on non-Amazon Linux. They are:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`cfn-init: Used to retrieve and interprety the resouce metadata, installing packages, creating files and starting services.`}</li>\n      <li parentName=\"ol\">{`cfn-signal: A simple wrapper to signal an AWS CloudFormation CreationPolicy or WaitCondition, enabling you to sync other resources in the stack with the application being ready. This can give us the yes/no if succssful.`}</li>\n      <li parentName=\"ol\">{`cfn-get-metadata: A wrapper script making it easy to retrieve either all metadata defined for a resource or path to a specific key or subtree of the resource metadata.`}</li>\n      <li parentName=\"ol\">{`cfn-hup: A daemon to check for updates to metadata and execute custom hooks when the changes are detected.`}</li>\n    </ol>\n    <p>{`The usual flow? cfn-init, then cfn-signal, then optionally cfn-hup.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationinit\"\n    }}>{`AWS::CloudFormation::Init`}</h3>\n    <p>{`A config contains the following and is executed in that order:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Packages: install a list of packages on the Linux OS (mysql, wordpress, etc)`}</li>\n      <li parentName=\"ol\">{`Groups: define user groups`}</li>\n      <li parentName=\"ol\">{`Users: define users, and which group they belong to`}</li>\n      <li parentName=\"ol\">{`Sources: download an archive file and place it on the ec2 instance (tar, zip, bz2)`}</li>\n      <li parentName=\"ol\">{`Files: create files on the ec2 instance, using inline or can be pulled from a URL`}</li>\n      <li parentName=\"ol\">{`Commands: run a series of commands`}</li>\n      <li parentName=\"ol\">{`Services: launch a list of sysvinit`}</li>\n    </ol>\n    <p>{`You can also have multiple configs and you can run them sequentially etc.`}</p>\n    <h3 {...{\n      \"id\": \"packages\"\n    }}>{`Packages`}</h3>\n    <p>{`You can install packages from the following repositories:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`apt`}</li>\n      <li parentName=\"ul\">{`msi`}</li>\n      <li parentName=\"ul\">{`python`}</li>\n      <li parentName=\"ul\">{`rpm`}</li>\n      <li parentName=\"ul\">{`rubygems`}</li>\n      <li parentName=\"ul\">{`yum`}</li>\n    </ul>\n    <p>{`Packages are processed in the following order: rpm, yum/apt, and then rubygems and python.`}</p>\n    <p>{`You can also specify a version if you want.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    packages:\n      rpm:\n        epel: 'http://download....'\n      yum:\n        httpd: [] # means latest\n        php: []\n        wordpress: []\n      rubygems:\n        chef:\n          - '0.10.2' # get this version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"groups-and-users\"\n    }}>{`Groups and Users`}</h3>\n    <p>{`If you want to have multiple users and groups (with optional gid) in your ec2 instance, you can add groups and users to CF and metadata.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      groupeOne: {}\n      groupTwo:\n        gid: '45' #gid = group ID\n    users:\n      myUser:\n        groups:\n          - 'groupOne'\n          - 'groupTwo'\n        uid: '50'\n        homeDir: '/tmp'\n`}</code></pre>\n    <p>{`In the larger example...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      apache: {} # assign any group ID\n    users:\n      'apache':\n        groups:\n          - 'apache' # user apache belongs to apache\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sources\"\n    }}>{`Sources`}</h3>\n    <p>{`These are conveninence for a compressed archieve.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    sources:\n      '/home/ec2-user/aws-cli': 'https://github.com/aws/aws-cli/tarball/master'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"files\"\n    }}>{`Files`}</h3>\n    <p>{`Files can be the most used section. Almost all the full power. It can be a specific URL or written inline for what you are doing.`}</p>\n    <p>{`Base example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      /tmp/setup.mysql:\n        content: !Sub |\n          CREATE DATABASE \\${DBName};\n          CREATE USER '\\${DBUsername}'@'localhost' IDENTIFIED BY '\\${DBPassword}';\n          GRANT ALL ON \\${DBName}.* TO '\\${DBUsername}'@'localhost';\n          FLUSH PRIVILEDGES;\n        mode: '000644'\n        owner: 'root'\n        group: 'root'\n`}</code></pre>\n    <p>{`Full example:`}</p>\n    <p>{`Note: !Sub is a function used for making substitution. ie where you see `}<inlineCode parentName=\"p\">{`\\${AWS::StackName}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      '/tmp/cwlogs/apacheaccess.conf':\n        content: !Sub |\n          [general]\n          state_file= /var/awslogs/agent-state\n          [/var/log/httpd/access_log]\n          file = /var/log/httpd/access_log\n          log_group_name = \\${AWS::StackName}\n          log_stream_name = {instance_id}/apache.log\n          datetime_format = %d/%b/%Y:%H:%M:%S\n        mode: '000400'\n        owner: apache\n        group: apache\n      '/var/www/html/index.php':\n        content: !Sub |\n          <?php\n          echo '<h1>AWS CloudFormation sample PHP application for \\${AWS::StackName}</h1>';\n          ?>\n        mode: '000644'\n        owner: apache\n        group: apache\n      '/etc/cfn/cfn-hup.conf':\n        content: !Sub |\n          [main]\n          stack=\\${AWS::StackId}\n          region=\\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n      '/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n        content: !Sub |\n          [cfn-auto-reloader-hook]\n          triggers=post.update\n          path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n          action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fnsub\"\n    }}>{`Fn::Sub`}</h3>\n    <p>{`(Or as !Sub) is used to substitute variables from a text. It's a very handy function that will allow you to fully customize your templates.`}</p>\n    <p>{`For example, you can combine !Sub with References or AWS Pseudo variables.`}</p>\n    <p>{`Must be in the form `}<inlineCode parentName=\"p\">{`\\${VarName}`}</inlineCode>{`.`}</p>\n    <p>{`Forms:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# You can do this\n!Sub\n  - String\n  - { Var1Name: Var1Value, Var2Name: Var2Value }\n\n# or (more complicated and rarely seen)\n!Sub String\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"commands\"\n    }}>{`Commands`}</h3>\n    <p>{`You can run commands one at a time in the `}<inlineCode parentName=\"p\">{`alphabetical order`}</inlineCode>{`.`}</p>\n    <p>{`You can set a directory from which that command is run, environment variables etc.`}</p>\n    <p>{`You can also provide a test to control whether the command is executed or not.`}</p>\n    <p>{`This should be a last resort. You can execute any of the scripts from the above files in this section.`}</p>\n    <p>{`Example: call the echo command only if the file doesn't exist`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`commands:\n  test:\n    command: 'echo \"$MAGIC\" > test.txt'\n    env:\n      MAGIC: 'I come from the environment!'\n    cwd: '~'\n    test: 'test ! -e ~/test.txt' # check file exists\n    ignoreErrors: 'false' # fail if is doesn't work\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"services\"\n    }}>{`Services`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    services:\n      sysvinit:\n        httpd:\n          enabled: 'true'\n          ensureRunning: 'true'\n        sendmail:\n          enabled: 'false'\n          ensureRunning: 'false'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cfn-init-and-signal\"\n    }}>{`CFN Init and Signal`}</h3>\n    <p>{`First, we use `}<inlineCode parentName=\"p\">{`cfn-init`}</inlineCode>{` to launch the config.`}</p>\n    <p>{`Then we use `}<inlineCode parentName=\"p\">{`cfn-signal`}</inlineCode>{` to tell when the config is complete, which will let CF know that the resource creation has been successful.`}</p>\n    <p>{`This has to be used in conjuction with a `}<inlineCode parentName=\"p\">{`CreationPolicy`}</inlineCode>{`.`}</p>\n    <p>{`This example means waiting a max of 5 minutes for the instance to come online and be self configured. If we don't hear back by `}<inlineCode parentName=\"p\">{`cfn-signal`}</inlineCode>{` by the, CF will fail and rollback.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`CreationPolicy:\n  ResourceSignal:\n    Timeout: PT5M\n`}</code></pre>\n    <p>{`This is useful in case of a bad update.`}</p>\n    <h3 {...{\n      \"id\": \"cfn-hup\"\n    }}>{`cfn-hup`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Cfn-hup can be used to tell your EC2 instance to look for Metadata changes every 15 minutes and apply the metadata configuration again.`}</li>\n      <li parentName=\"ul\">{`It's very powerful but you really need to try it out to understand how it works.`}</li>\n    </ul>\n    <p>{`Example from the \"files\" declation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`'/etc/cfn/cfn-hup.conf':\n  content: !Sub |\n    [main]\n    stack=\\${AWS::StackId}\n    region=\\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n  group: 'root'\n'/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n  content: !Sub |\n    [cfn-auto-reloader-hook]\n    triggers=post.update\n    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n    action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cfn-init-hands-on\"\n    }}>{`CFN Init Hands-On`}</h3>\n    <p>{`After loading the CFN Init yaml file into CF, it will go through a series of different events.`}</p>\n    <p>{`You can under \"status reason\" if there is a success message sent back.`}</p>\n    <p>{`You need to practise your !Init skilles. It will be extremely handy for creating EC2 Instances or AutoScaling groups.`}</p>\n    <p>{`Remember logs for ec2-user data are in `}<inlineCode parentName=\"p\">{`/var/log/cloud-init-output.log`}</inlineCode>{` and logs for cfn-init are in `}<inlineCode parentName=\"p\">{`/var/log/cfn-init.log`}</inlineCode>{`, which is really helpful if commands don't complete like you want them to.`}</p>\n    <h2 {...{\n      \"id\": \"advanced-cf-concepts\"\n    }}>{`Advanced CF Concepts`}</h2>\n    <p>{`Review of current standing:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You can check AWS labs templates from `}<inlineCode parentName=\"li\">{`https://github/com/awslabs/aws-cloudformation-templates`}</inlineCode>{` to see what you can understand/see good practise.`}</li>\n    </ul>\n    <p>{`The example with WordPress is what is shown in the course.`}</p>\n    <h3 {...{\n      \"id\": \"using-the-aws-cli\"\n    }}>{`Using the AWS CLI`}</h3>\n    <p>{`We can use the AWS CLI to create, update or delete CF templates.`}</p>\n    <p>{`Super conventient for when you start automating your deployments.`}</p>\n    <p>{`Once you've downloaded the AWS config, use `}<inlineCode parentName=\"p\">{`aws configure --profile <profile_name>`}</inlineCode>{` to configure a profile with the ID and Secret Access key.`}</p>\n    <p>{`To run a CF command, you can use something like the following `}<inlineCode parentName=\"p\">{`aws cloudformation create-stack --stack-name example-cli-stack --template-body file://0-sample-template.yaml --parameters file://0-parameters.json --profile cf-course --region us-east-1`}</inlineCode></p>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`parameters.json`}</inlineCode>{` file to set ParameterKey and ParameterValue for all the keys and values we are looking to share.`}</p>\n    <p>{`After running the command, what you get back is the `}<inlineCode parentName=\"p\">{`StackId`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"using-troposphere-python-to-generate-cloudformation-templates\"\n    }}>{`Using Troposphere (Python) to generate CloudFormation templates`}</h3>\n    <p>{`Troposhere allows you to leverage Python write the templates.`}</p>\n    <p>{`This means you can start using types in your templates for safety.`}</p>\n    <p>{`You will also have valid CF and can dynamically generate CloudFormation.`}</p>\n    <p>{`This means you can also have very complex conditions.`}</p>\n    <p>{`The disadvantage is that the Python needs to generate the JSON for it to be.`}</p>\n    <h3 {...{\n      \"id\": \"deletionpolicy\"\n    }}>{`DeletionPolicy`}</h3>\n    <p>{`This policy can prevent resources from being deleted, or in some cases, back them up before the deletion. This will help prevent doing something really, really bad.`}</p>\n    <p>{`Deletion Policy can take up the following values:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Delete: AWS CloudFormation will delete the resource and all its content if applicable during stack deletion (does not apply to S3)`}</li>\n      <li parentName=\"ol\">{`Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted. You can add this deletion policy to any resource type.`}</li>\n      <li parentName=\"ol\">{`Snapshot: For resources that support snapshots (AWS::EC2::Volume, AWS::ElasticCache::CacheCluster etc)`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  myS3Bucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n`}</code></pre>\n    <p>{`In the above example, it will create the S3 Bucket, you will see the bucket created.`}</p>\n    <p>{`Now if we delete that stack and the deletion policy is retain, you will still have that bucket there.`}</p>\n    <h3 {...{\n      \"id\": \"custom-resources-with-aws-lambda\"\n    }}>{`Custom Resources with AWS Lambda`}</h3>\n    <p>{`Custom resources enable you to write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update (if you changed the custom resource) or delete stacks.`}</p>\n    <p>{`For example, you might want to include resources that aren't available as AWS CloudFormation resource types.`}</p>\n    <p>{`Check online for a walkthrough of custom resources.`}</p>\n    <h3 {...{\n      \"id\": \"best-practises-to-organize-your-cloudformation-templates\"\n    }}>{`Best practises to organize your CloudFormation templates`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`How to organise templates: you can have a layered architecture (horizontal layers) vs service oriented architecture (vertical layers).`}</li>\n      <li parentName=\"ol\">{`Use cross stack references eg. to reference a VPC or subnet.`}</li>\n      <li parentName=\"ol\">{`Make sure the template is environment agnostic to do dev / test / prod and across regions / accounts seemlessly.`}</li>\n      <li parentName=\"ol\">{`Never embed credentials (use parameters with NoEcho or KMS).`}</li>\n      <li parentName=\"ol\">{`Use specific parameters types and constraints.`}</li>\n      <li parentName=\"ol\">{`Use CFN Init (& latest version of the helper scripts)`}</li>\n      <li parentName=\"ol\">{`Validate templates`}</li>\n      <li parentName=\"ol\">{`Don't do anything manual on the elements of the stack - that can cause a state mismatch.`}</li>\n      <li parentName=\"ol\">{`Verify changes with changesets (and avoid disasters).`}</li>\n      <li parentName=\"ol\">{`Use stack policies to prevent critical components from being deleted after create (such as your most valuable RDS database).`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"cost-estimate-for-templates\"\n    }}>{`Cost estimate for templates`}</h3>\n    <p>{`You can estimate the cost of a stack very easily.`}</p>\n    <p>{`For this, just upload the stack onto the AWS console, enter the params and click \"cost\".`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}