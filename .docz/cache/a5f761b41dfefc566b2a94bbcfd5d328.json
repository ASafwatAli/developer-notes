{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/React-With-Redux.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/React-With-Redux.md","mtime":1579074369030},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Notes/React-With-Redux.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApB,EAE6B;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACzB;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAApB,CADyB,EAIzB;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAApB,CAJyB,EAOzB;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAApB,SAEqC;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACxD,YAAQ;AADgD,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAFrC,SAIsD;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACzE,YAAQ;AADiE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAJtD,SAM0E;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AAC7F,YAAQ;AADqF,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAN1E,CAPyB,EAgBzB;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAApB,SAE0D;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AAC7E,YAAQ;AADqE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAF1D,SAI2D;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AAC9E,YAAQ;AADsE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAJ3D,SAMsD;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACzE,YAAQ;AADiE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDANtD,SAQiE;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACpF,YAAQ;AAD4E,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CARjE,SAUyD;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AAC5E,YAAQ;AADoE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAVzD,CAhByB,CAF7B,CADF,CAPK,EA4CL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BA5CK,EA+CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH,CA/CK,EAgDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ucAAL,CAhDK,EA+DL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/DK,EAgEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAH,CAhEK,EAiEL;AAAK,IAAA,GAAG,EAAC,4EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjEK,EAkEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAiD;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAjD,CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA4B;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA5B,kBAAuG;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvG,+BAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA4B;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5B,kFAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAAiE;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAjE,iCAAmJ;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAnJ,6CAAgP;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhP,CAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA4B;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA5B,mBAAkG;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlG,0BAA6K;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA7K,gBAA6O;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA7O,+BAA4T;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5T,sCAAuZ;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAvZ,yBAAge;AAAY,IAAA,UAAU,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAhe,oCALF,CAlEK,EAyEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzEK,EA0EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH,CA1EK,EA2EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,CA3EK,EA4EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgB;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhB,2EA5EK,EA6EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuB;AAAI,IAAA,UAAU,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAvB,CAAH,CA7EK,EA8EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HAAL,CA9EK,EAuFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,CAvFK,EAwFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAAoE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApE,MAxFK,EAyFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA8B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9B,6BAA2G;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3G,WAA0K;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1K,MAzFK,EA0FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuB;AAAI,IAAA,UAAU,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAvB,CAAH,CA1FK,EA2FL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yWAAL,CA3FK,EA6GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,CA7GK,EA8GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAA+E;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA/E,MA9GK,EA+GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHA/GK,EAgHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuB;AAAI,IAAA,UAAU,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAvB,CAAH,CAhHK,EAiHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,++CAAL,CAjHK,EAqKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,CArKK,EAsKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAtKK,EAuKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAvKK,EAwKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuB;AAAI,IAAA,UAAU,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAvB,CAAH,CAxKK,EAyKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0RAAL,CAzKK,EAsLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuB;AAAI,IAAA,UAAU,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAvB,CAAH,CAtLK,EAuLL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wLAAL,CAvLK,EAkML,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAlMK,EAqML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDArMK,EAsML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAtMK,EAuML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAH,CAvMK,EAwML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAxMK,EAyML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qIAzMK,EA0ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qQA1MK,EA2ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEA3MK,EA4ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yIA5MK,EA6ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GA7MK,EA8ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,CA9MK,EA+ML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DA/MK,EAgNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAhNK,EAiNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAjNK,EAkNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAJF,CAlNK,EAwNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxNK,EAyNL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJF,EAKE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCALF,CAzNK,EAgOL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAhOK,EAmOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAH,iCAnOK,EAoOL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCApOK,EAuOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAvOK,EAwOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAxOK,EAyOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mIAzOK,EA0OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDA1OK,EA2OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDA3OK,EA4OL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gRAAL,CA5OK,EA6PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DA7PK,EA8PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,uDA9PK,EA+PL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sLAAL,CA/PK,EA0QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FA1QK,EA2QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAH,CA3QK,EA4QL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oQAAL,CA5QK,EA0RL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DA1RK,EA6RL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAH,CA7RK,EA8RL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kdAAL,CA9RK,EAkTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAlTK,EAmTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAAyE;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAzE,MAnTK,EAoTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EApTK,EAqTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDArTK,EAsTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAH,CAtTK,EAuTL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kdAAL,CAvTK,EA2UL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oLA3UK,EA4UL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDA5UK,EA6UL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAH,CA7UK,EA8UL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDA9UK,EAiVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAH,CAjVK,EAkVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oRAAL,CAlVK,EAkWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFAlWK,EAmWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGAnWK,EAoWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEApWK,EAqWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAH,CArWK,EAsWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4vBAAL,CAtWK,EAwYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+IAxYK,EAyYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAH,CAzYK,EA0YL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAHF,CA1YK,EA+YL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/YK,EAgZL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAhZK,EAmZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uHAnZK,EAoZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CApZK,EAqZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DArZK,EAsZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAtZK,EAuZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADF,CAvZK,EA0ZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CA1ZK,EA2ZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qJAAL,CA3ZK,EAqaL,wBAAQ;AACN,aAAS;AADH,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAHF,CAraK,EA0aL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAAL,CA1aK,EAmbL,wBAAQ;AACN,aAAS;AADH,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAHF,CAnbK,EAwbL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAxbK,EAybL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAzbK,EA0bL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wLAAL,CA1bK,EAscL,wBAAQ;AACN,aAAS;AADH,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAHF,CAtcK,EA2cL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uLAAL,CA3cK,EA2dL,wBAAQ;AACN,aAAS;AADH,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qMAHF,CA3dK,EAgeL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAheK,EAmeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAH,CAneK,EAoeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FADF,CApeK,EAueL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GAAL,CAveK,EA6eL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAH,CA7eK,EA8eL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DA9eK,EA+eL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4LAA0L;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA1L,yDA/eK,EAgfL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,k3CAAL,CAhfK,EAgiBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAhiBK,EAmiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAH,CAniBK,EAoiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFApiBK,EAqiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAriBK,EAsiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAtiBK,EAuiBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oiDAAL,CAviBK,EA4lBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAH,CA5lBK,EA6lBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEA7lBK,EA8lBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uOAAL,CA9lBK,EAymBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAzmBK,EA4mBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GA5mBK,EA6mBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DA7mBK,EA8mBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GA9mBK,EA+mBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAH,CA/mBK,EAgnBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6RAAL,CAhnBK,EA6nBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAH,CA7nBK,EA8nBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA9nBK,EA+nBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFA/nBK,EAgoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ySAAL,CAhoBK,EA+oBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAH,CA/oBK,EAgpBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4JAhpBK,EAipBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAH,CAjpBK,EAkpBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+KAAL,CAlpBK,EA4pBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAH,CA5pBK,EA6pBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wWAAL,CA7pBK,EA+qBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CA/qBK,EAgrBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4eAAL,CAhrBK,EAusBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAvsBK,EA0sBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAH,CA1sBK,EA2sBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6qBAAL,CA3sBK,EAyuBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kIAAgI;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhI,MAzuBK,EA0uBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GAA6G;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA7G,0CA1uBK,EA2uBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oHA3uBK,EA4uBL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA5uBK,EA+uBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA/uBK,EAgvBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8dADF,CADF,EAIE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iOADF,CAJF,CAhvBK,CAAP;AAyvBD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAxwBMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-with-redux\"\n    }}>{`React with Redux`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#react-with-redux\"\n        }}>{`React with Redux`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redux-0-crash-course\"\n            }}>{`REDUX-0: Crash Course`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redux-1-modelling-application-state\"\n            }}>{`REDUX-1: Modelling Application State`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redux-2-reducers\"\n            }}>{`REDUX-2: Reducers`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-21-what-is-a-reducer\"\n            }}>{`---- REDUX-2.1: What is a Reducer?`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-22-containers---connecting-redux-to-react\"\n            }}>{`---- REDUX-2.2: Containers - Connecting Redux to React`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-23-implementation-of-a-container-class\"\n            }}>{`---- REDUX-2.3: Implementation of a container class`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redux-3-actions-and-action-containers\"\n            }}>{`REDUX-3: Actions and Action Containers`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-31-binding-action-creators\"\n            }}>{`---- REDUX-3.1: Binding Action Creators`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-32-creating-an-action\"\n            }}>{`---- REDUX-3.2: Creating an Action`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-33-consuming-actions-in-reducers\"\n            }}>{`---- REDUX-3.3: Consuming Actions in Reducers`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-34-conditional-rendering\"\n            }}>{`---- REDUX-3.4: Conditional Rendering`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redux-35-redux-intro-review\"\n            }}>{`---- REDUX-3.5: Redux intro review`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"redux-0-crash-course\"\n    }}>{`REDUX-0: Crash Course`}</h2>\n    <p><strong parentName=\"p\">{`Key Imports`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// used to extend the react Component class\nimport React, { Component } from 'react';\n\n// used to connect the container/component class, mapStateToProps and\n// the mapDispatchToProps functions\nimport { connect } from 'react-redux';\n\n// used to pass the result to all the reducers\nimport { bindActionCreators } from 'redux';\n\n// used to import the combineReducers function in reducers/index.js\nimport { combineReducers } from 'redux';\n`}</code></pre>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`The flow of how the Application Reacts in Redux`}</strong></p>\n    <img src=\"https://d1din05d4116wx.cloudfront.net/react-with-redux/react-diagram-1.png\" />\n    <ol>\n      <li parentName=\"ol\">{`An interaction calls the `}<inlineCode parentName=\"li\">{`Action Creator`}</inlineCode></li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`Action Creator`}</inlineCode>{` returns an `}<inlineCode parentName=\"li\">{`Action`}</inlineCode>{` that is a plain JS Object`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`Action`}</inlineCode>{` is automatically sent to all Reducers (through the combineReducers function)`}</li>\n      <li parentName=\"ol\">{`If the property contains a case for that `}<inlineCode parentName=\"li\">{`Action`}</inlineCode>{`, the relevant property on `}<inlineCode parentName=\"li\">{`State`}</inlineCode>{` set to the value returned by from the `}<inlineCode parentName=\"li\">{`Reducer`}</inlineCode></li>\n      <li parentName=\"ol\">{`All `}<inlineCode parentName=\"li\">{`Reducers`}</inlineCode>{` process the `}<inlineCode parentName=\"li\">{`Action`}</inlineCode>{` and return the new `}<inlineCode parentName=\"li\">{`State`}</inlineCode>{`. The new `}<inlineCode parentName=\"li\">{`State`}</inlineCode>{` has been assembled. The `}<inlineCode parentName=\"li\">{`Containers`}</inlineCode>{` are notified of any changes to `}<inlineCode parentName=\"li\">{`State`}</inlineCode>{`. On notification, `}<inlineCode parentName=\"li\">{`Containers`}</inlineCode>{` will re-render with new props.`}</li>\n    </ol>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`src folders`}</strong></p>\n    <p><em parentName=\"p\">{`actions`}</em></p>\n    <p>{`Contains `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` which is about exporting functions that are used to update the state.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Example: actions/index.js`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export function selectBook(book) {\n    return {\n        type: 'BOOK_SELECTED',\n        payload: book\n    };\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`components`}</em></p>\n    <p>{`Contains all the \"children\" components that do not deal with `}<inlineCode parentName=\"p\">{`Application State`}</inlineCode>{`.`}</p>\n    <p>{`Also contains the main `}<inlineCode parentName=\"p\">{`app.js`}</inlineCode>{` file that renders the `}<inlineCode parentName=\"p\">{`containers`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Example: components/app.js`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nimport BookList from '../containers/book-list';\nimport BookDetail from '../containers/book-detail';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <BookList />\n                <BookDetail />\n            </div>\n        );\n    }\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`containers`}</em></p>\n    <p>{`These are the \"parent\" components that are most significant to changing `}<inlineCode parentName=\"p\">{`Application State`}</inlineCode>{`.`}</p>\n    <p>{`In this example, we return a view that shows all the book titles and has an onClick action associated with it.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Example: containers/book-list.js`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// let's import the action creator\nimport { selectBook } from '../actions/index';\nimport { bindActionCreators } from 'redux';\n\nclass BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            return (\n                <li\n                    key={book.title}\n                    onClick={() => this.props.selectBook(book)}\n                    className=\"list-group-item\"\n                >\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n\nfunction mapStateToProps(state) {\n    // What is returned will show up as props\n    // inside of BookList\n    return {\n        books: state.books\n    };\n}\n\n// define our dispatch to props\n// anything returned from this function will end up as props\n// on the BookList container\nfunction mapDispatchToProps(dispatch) {\n    // Whenever selectBook is called, the result should be passed\n    // to all of our reducers\n    return bindActionCreators({ selectBook: selectBook }, dispatch);\n}\n\n// add the dispatch as the second argument!\n// Promote bookList from component to container, so it needs to know\n// about this new dispatch method, selectBook. Make it available\n// as a prop\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);\n`}</code></pre>\n    <p><em parentName=\"p\">{`reducers`}</em></p>\n    <p>{`Deal with the data and how the state is handled.`}</p>\n    <p>{`Contains index.js that combines all the reducers and the other reducer files.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Example: reducers/index.js`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { combineReducers } from 'redux';\nimport BooksReducer from './reducer_books.js';\nimport ActiveBook from './reducer_active_book.js';\n\nconst rootReducer = combineReducers({\n    books: BooksReducer,\n    activeBook: ActiveBook\n});\n\nexport default rootReducer;\n`}</code></pre>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Example: reducers/reducer_active_books.js`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export default function(state = null, action) {\n    switch (action.type) {\n        case 'BOOK_SELECTED':\n            return action.payload;\n    }\n\n    return state;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"redux-1-modelling-application-state\"\n    }}>{`REDUX-1: Modelling Application State`}</h2>\n    <p>{`Inherently difficult in terms of the concept.`}</p>\n    <p>{`Redux is just the start of a bunch of different technologies. You need to understand the core concepts of it.`}</p>\n    <p><strong parentName=\"p\">{`What is Redux?`}</strong></p>\n    <p>{`Consider the structure of an application on the view layer and the data layer.`}</p>\n    <p>{`Where does Redux come into this? Redux is like the data, while React is the views. A state container is essentially the data.`}</p>\n    <p>{`This doesn't look too different to the others, but here we put all the data into a single collection. This is different to other Frameworks. Redux centralises all the data in the \"state\". Redux state is Application state as opposed to Component state.`}</p>\n    <p>{`Think of a +/- button state that displays the current count.`}</p>\n    <p>{`If we think about this, the data contained is the current count, while the views are the current count value and the +/- buttons.`}</p>\n    <p>{`Redux is going to keep track of the counter. It tells the components how and what they should render.`}</p>\n    <p><strong parentName=\"p\">{`Modelling an App`}</strong></p>\n    <p>{`Designing the state is the critical part of Redux.`}</p>\n    <p>{`Let's model Tinder!`}</p>\n    <p>{`In data, we need to model a few things.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The swiping screen. The list of the users not reviewed, and the view of the current user.`}</li>\n      <li parentName=\"ol\">{`The conversation screen. List of all current convos.`}</li>\n      <li parentName=\"ol\">{`The actual conversation screen itself.`}</li>\n      <li parentName=\"ol\">{`List of all the users in general.`}</li>\n    </ol>\n    <p>{`Controller Views`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Image Card`}</li>\n      <li parentName=\"ol\">{`Like/Dislike buttons`}</li>\n      <li parentName=\"ol\">{`ConversationList`}</li>\n      <li parentName=\"ol\">{`TextItem (individual message)`}</li>\n      <li parentName=\"ol\">{`TextList (list of chat messages)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"redux-2-reducers\"\n    }}>{`REDUX-2: Reducers`}</h2>\n    <p><inlineCode parentName=\"p\">{`npm start`}</inlineCode>{` from the ReduxSimpleStarter`}</p>\n    <h3 {...{\n      \"id\": \"redux-21-what-is-a-reducer\"\n    }}>{`REDUX-2.1: What is a Reducer?`}</h3>\n    <p>{`A function that returns the state.`}</p>\n    <p>{`One reducer would be responsible for each function that returns an Application State.`}</p>\n    <p>{`For example, if we're looking at a list of books where one is currently selected, we are then looking to have two reducers.`}</p>\n    <p>{`The important thing is the value of the state.`}</p>\n    <p>{`Key of state, value of state. That's the pairing.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n    // Books Reducer\n    books: [\n        {\n            title: 'Harry Potter'\n        },\n        {\n            title: 'JavaScript'\n        }\n    ],\n\n    // ActiveBook Reducer\n    activeBook: {\n        title: 'JavaScript: The Good Parts'\n    }\n}\n`}</code></pre>\n    <p>{`We want a function to produce these types of states.`}</p>\n    <p><strong parentName=\"p\">{`In src/reducers/`}</strong>{`, we'll create a reducer file \"reducer_books.js\"`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export default function() {\n    return [\n        { title: 'Book 1' },\n        { title: 'Book 2' },\n        { title: 'Book 3' },\n        { title: 'Book 4' }\n    ];\n}\n`}</code></pre>\n    <p>{`Step 1 - Create the reducer is now done. Now, Step 2 - we want to re-wire the reducer.`}</p>\n    <p><strong parentName=\"p\">{`reducers/index.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { combineReducers } from 'redux';\n\n//import in the file\nimport BooksReducer from './reducer_books.js';\n\nconst rootReducer = combineReducers({\n    // wire BooksReducer to books\n    books: BooksReducer\n});\n\nexport default rootReducer;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redux-22-containers---connecting-redux-to-react\"\n    }}>{`REDUX-2.2: Containers - Connecting Redux to React`}</h3>\n    <p><strong parentName=\"p\">{`In components/book-list.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nexport default class BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            return (\n                <li key={book.title} className=\"list-group-item\">\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n`}</code></pre>\n    <p>{`Combining React and Redux is done with a library called react-redux`}</p>\n    <p>{`To make use of that library, we define one of our components as a `}<strong parentName=\"p\">{`container`}</strong>{`.`}</p>\n    <p>{`To separate components and containers, we create a container directory.`}</p>\n    <p>{`Cut and move the file into the containers folder!`}</p>\n    <p><strong parentName=\"p\">{`Now in containers/book-list.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nexport default class BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            return (\n                <li key={book.title} className=\"list-group-item\">\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n`}</code></pre>\n    <p>{`How do we decide what becomes a container and what stays as a component? It varies. The most parent component that cares about a particular state should become a container.`}</p>\n    <p>{`The app component should be a \"dumb component\".`}</p>\n    <p><strong parentName=\"p\">{`Remember: Only the most parent component should become the container`}</strong></p>\n    <h3 {...{\n      \"id\": \"redux-23-implementation-of-a-container-class\"\n    }}>{`REDUX-2.3: Implementation of a container class`}</h3>\n    <p><strong parentName=\"p\">{`in app.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nimport BookList from '../containers/book-list';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <BookList />\n            </div>\n        );\n    }\n}\n`}</code></pre>\n    <p>{`Back in containers/book-list, ensure that you have imported react-redux.`}</p>\n    <p>{`The function mapStateToProps(state) {} will use the function map the state to the props.`}</p>\n    <p>{`The connect function is what will be used to connect all of this.`}</p>\n    <p><inlineCode parentName=\"p\">{`connect(arg)(state)`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\n// importing connect\nimport { connect } from 'react-redux';\n\nclass BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            return (\n                <li key={book.title} className=\"list-group-item\">\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n\n// mapping the state to props\nfunction mapStateToProps(state) {\n    // What is returned will show up as props\n    // inside of BookList\n    return {\n        books: state.books\n    };\n}\n\nexport default connect(mapStateToProps)(BookList);\n`}</code></pre>\n    <p>{`Whenever the app state changes, our container will automatically re-render. The object in the state function will assigned as the prop.`}</p>\n    <p><strong parentName=\"p\">{`Containers and Reducers Review`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`We promoted a component to a container`}</li>\n      <li parentName=\"ol\">{`Redux serves to produce the state, React shows the state`}</li>\n      <li parentName=\"ol\">{`App state is produced by reducer functions`}</li>\n    </ol>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"redux-3-actions-and-action-containers\"\n    }}>{`REDUX-3: Actions and Action Containers`}</h2>\n    <p>{`Currently, the books reducer ALWAYS brings back the same books. We don't want this. We want an \"active\" book.`}</p>\n    <p>{`Actions and Action Creators solve this.`}</p>\n    <p>{`Example: A user clicks on the Book List at Book #2`}</p>\n    <p>{`The event starts with an \"action\" eg. AJAX, clicks, hovers etc. This creates the action creator.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The click calls the action creator`}</li>\n    </ol>\n    <p>{`The function will return an object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function(\n    return {\n        type: BOOK_SELECTED\n        // the book here is the payload\n        book: { title: 'Book 2' }\n    }\n)\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Action creator returns an action`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    type: BOOK_SELECTED;\n    book: {\n        title: 'Book 2';\n    }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Action automatically send to all reducers`}</li>\n    </ol>\n    <p>{`This is sent to all of our reducers.`}</p>\n    <p>{`Reducers don't have to react, so it just returns the currentState and there are no changes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in the ActionBook Reducer\n\nswitch (action.type) {\n    case BOOK_SELECTED\n        return actionBook\n    default\n        // do nothing\n        return currentState\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`activeBook property on the state set to the value returned fom the active book reducer`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    activeBook: {\n        title: 'JS ';\n    }\n    books: [\n        {\n            title: 'dark'\n        },\n        {\n            title: 'JS'\n        }\n    ];\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`All reducers processed the action and returned new state. New state has been assembled. Notify containers of the changes to state. On notification, containers will re-render with new props.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"redux-31-binding-action-creators\"\n    }}>{`REDUX-3.1: Binding Action Creators`}</h3>\n    <p><strong parentName=\"p\">{`In actions/index.js`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Export the function to make use of the action creator in other parts of the function.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export function selectBook(book) {\n    console.log('A book has been selected: ', book.title);\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`In containers/book-list.js`}</strong></p>\n    <p>{`We are going to bind this action to the component.`}</p>\n    <p>{`We call the function mapDispatchToProps with the return bindActionCreators() to say that we know we're going to call this at some stage and we want the result to flow through the `}<inlineCode parentName=\"p\">{`dispatch`}</inlineCode>{` function which will pass it to all of our Reducers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// let's import the action creator\nimport { selectBook } from '../actions/index';\nimport { bindActionCreators } from 'redux';\n\nclass BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            return (\n                <li key={book.title} className=\"list-group-item\">\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n\nfunction mapStateToProps(state) {\n    // What is returned will show up as props\n    // inside of BookList\n    return {\n        books: state.books\n    };\n}\n\n// define our dispatch to props\n// anything returned from this function will end up as props\n// on the BookList container\nfunction mapDispatchToProps(dispatch) {\n    // Whenever selectBook is called, the result should be passed\n    // to all of our reducers\n    return bindActionCreators({ selectBook: selectBook }, dispatch);\n}\n\n// add the dispatch as the second argument!\n// Promote bookList from component to container, so it needs to know\n// about this new dispatch method, selectBook. Make it available\n// as a prop\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redux-32-creating-an-action\"\n    }}>{`REDUX-3.2: Creating an Action`}</h3>\n    <p><strong parentName=\"p\">{`In containers/book-list.js`}</strong></p>\n    <p>{`Whenever a user clicks on a line item for a particular book, we want an action.`}</p>\n    <p>{`If we add a click handler, we can create this.`}</p>\n    <p>{`Use the console log to see the results from this!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// let's import the action creator\nimport { selectBook } from '../actions/index';\nimport { bindActionCreators } from 'redux';\n\nclass BookList extends Component {\n    renderList() {\n        return this.props.books.map((book) => {\n            // ACTION - add in the onClick function\n            return (\n                <li\n                    key={book.title}\n                    onClick={() => this.props.selectBook(book)}\n                    className=\"list-group-item\"\n                >\n                    {book.title}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return <ul className=\"list-group col-sm-4\">{this.renderList()}</ul>;\n    }\n}\n\nfunction mapStateToProps(state) {\n    // What is returned will show up as props\n    // inside of BookList\n    return {\n        books: state.books\n    };\n}\n\n// define our dispatch to props\n// anything returned from this function will end up as props\n// on the BookList container\nfunction mapDispatchToProps(dispatch) {\n    // Whenever selectBook is called, the result should be passed\n    // to all of our reducers\n    return bindActionCreators({ selectBook: selectBook }, dispatch);\n}\n\n// add the dispatch as the second argument!\n// Promote bookList from component to container, so it needs to know\n// about this new dispatch method, selectBook. Make it available\n// as a prop\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`in actions/index.js`}</strong></p>\n    <p>{`Change the result from console.log to whatever you want!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export function selectBook(book) {\n    // selectBook is an action creator! Return an action.\n    // this is an object with a property type\n    return {\n        type: 'BOOK_SELECTED',\n        payload: book\n    };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redux-33-consuming-actions-in-reducers\"\n    }}>{`REDUX-3.3: Consuming Actions in Reducers`}</h3>\n    <p>{`The result of the action container is automatically being sent to our reducers because of the dispatch.`}</p>\n    <p>{`Let's now create a new reducer to show our active book!`}</p>\n    <p>{`For the switch case, you must ALWAYS return a value. Set state = null for if the state is undefined.`}</p>\n    <p><strong parentName=\"p\">{`after creating reducers/reducer_active_book.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// State argument is not application state, just the state\n// that this reducer is responsible for\nexport default function(state = null, action) {\n    switch (action.type) {\n        case 'BOOK_SELECTED':\n            return action.payload;\n    }\n\n    return state;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`in reducers/index.js`}</strong></p>\n    <p>{`Let's now import the new reducer.`}</p>\n    <p>{`Remember, any key we pass into this comes back as a key to a global state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { combineReducers } from 'redux';\nimport BooksReducer from './reducer_books.js';\n\n// new reducer\nimport ActiveBook from './reducer_active_book';\n\nconst rootReducer = combineReducers({\n    books: BooksReducer,\n    activeBook: ActiveBook\n});\n\nexport default rootReducer;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Let's see how this now works`}</strong></p>\n    <p>{`Do we want a component or a container? The app doesn't really care about the active book. So, this book detail view/component should be a container.`}</p>\n    <p><strong parentName=\"p\">{`create containers/book-detail.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nexport default class BookDetail extends Component {\n    render() {\n        return <div>Book Details!</div>;\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`import this into components/app.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nimport BookList from '../containers/book-list';\nimport BookDetail from '../container/book-detail';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <BookList />\n                <BookDetail />\n            </div>\n        );\n    }\n}\n`}</code></pre>\n    <p>{`Now we start connecting everything up!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass BookDetail extends Component {\n    render() {\n        return (\n            <div>Book Details!</div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        // activeBook from our activeBook pierce of state\n        // in reducers/index.js in the combineReducers\n        book: state.activeBook;\n    };\n}\n\nexport default connect(mapStateToProps)(BookDetail);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redux-34-conditional-rendering\"\n    }}>{`REDUX-3.4: Conditional Rendering`}</h3>\n    <p><strong parentName=\"p\">{`in containers/book-detail.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass BookDetail extends Component {\n    render() {\n        if (!this.props.book) {\n            return <div>Select a book to begin</div>\n        }\n\n        return (\n            <div>\n                <h3>Details for:</h3>\n                <div>{this.props.book.titile}</div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        // activeBook from our activeBook pierce of state\n        // in reducers/index.js in the combineReducers\n        book: state.activeBook;\n    };\n}\n\nexport default connect(mapStateToProps)(BookDetail);\n`}</code></pre>\n    <p>{`An action comes through, but we don't know what that is yet. So when the app first boots up, it will always currently be `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n    <p>{`What we will do, is add an initial check in the BookDetail class. We can run a conditional check with `}<inlineCode parentName=\"p\">{`if (!this.props.book)`}</inlineCode>{` Then, we can render an initial view!`}</p>\n    <p>{`The idea is that the application is now malleable enough to start adding things like extra book details etc.`}</p>\n    <h3 {...{\n      \"id\": \"redux-35-redux-intro-review\"\n    }}>{`REDUX-3.5: Redux intro review`}</h3>\n    <p>{`Things to take away:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Redux is entirely responsible for the Application State - Component State is still separate from our Application state, so you could still use setState in the components. - Reducers form the application state. Everything gets combined together in the combineReducers function. - Reducers are in charge of changing the Application State over time using actions. All actions flow through all the reducers and they react depending on what has been set for them to react to.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Actions and action creators - Action creators are just functions that return an action - An action is just a plain JS object - Must have a type defined. Normally has payload as convention for what it is passing along.`}</p>\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}