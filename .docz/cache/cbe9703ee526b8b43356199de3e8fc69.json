{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Dotnet-Stripe-Configuration.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Dotnet-Stripe-Configuration.md","mtime":1578795913331},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1N0cmlwZS9Eb3RuZXQtU3RyaXBlLUNvbmZpZ3VyYXRpb24ubWQiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKLyogQGpzeCBtZHggKi8KaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCc7Ci8qIEBqc3ggbWR4ICovCgp2YXIgbWFrZVNob3J0Y29kZSA9IGZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSkgewogIHJldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7CiAgICBjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiICsgbmFtZSArICIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpOwogICAgcmV0dXJuIG1keCgiZGl2IiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgICAgX19zb3VyY2U6IHsKICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICAgIGxpbmVOdW1iZXI6IDkKICAgICAgfSwKICAgICAgX19zZWxmOiB0aGlzCiAgICB9KSk7CiAgfTsKfTsKCnZhciBsYXlvdXRQcm9wcyA9IHt9Owp2YXIgTURYTGF5b3V0ID0gIndyYXBwZXIiOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpIHsKICB2YXIgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50cywKICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyJjb21wb25lbnRzIl0pOwoKICByZXR1cm4gbWR4KE1EWExheW91dCwgT2JqZWN0LmFzc2lnbih7fSwgbGF5b3V0UHJvcHMsIHByb3BzLCB7CiAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLAogICAgbWR4VHlwZTogIk1EWExheW91dCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCBtZHgoImgxIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiY29uZmlndXJpbmctc3RyaXBlLWZvci1uZXQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkNvbmZpZ3VyaW5nIFN0cmlwZSBmb3IgLk5FVCIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAicmVzb3VyY2VzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJSZXNvdXJjZXMiKSwgbWR4KCJvbCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyOAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vY29kZWJyYWlucy5pby9pbnRlZ3JhdGUtc3RyaXBlLWFwaS13aXRoLWFzcC1uZXQtY29yZS1jcmVhdGluZy1jdXN0b21lcnMvIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJTZXR0aW5nIHVwIFN0cmlwZSBBUEkgZm9yIERvdG5ldCIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vc3RyaXBlLmNvbS9kb2NzL2FwaT9sYW5nPWRvdG5ldCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzMQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiU3RyaXBlIERvdG5ldCBBUEkgRG9jcyIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2FzcG5ldC9jb3JlL3R1dG9yaWFscy9maXJzdC13ZWItYXBpP3ZpZXc9YXNwbmV0Y29yZS0zLjEmdGFicz12aXN1YWwtc3R1ZGlvLW1hYyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRmlyc3QgRG90bmV0IEFQSSIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2FzcG5ldC9jb3JlL3NlY3VyaXR5L2FwcC1zZWNyZXRzP3ZpZXc9YXNwbmV0Y29yZS0zLjEmdGFicz1saW51eCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiU2V0dGluZyBzZWNyZXRzIGZvciBhIERvdG5ldCBwcm9qZWN0IikpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAibGkiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvaW50ZXJmYWNlIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJJbnRlcmZhY2VzIGluIEMjIikpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAibGkiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly9zdG9ybXBhdGguY29tL2Jsb2cvYnVpbGQtYXBpLXNlcnZpY2UtZG90bmV0LWNvcmUtdHdpbGlvLXN0cmlwZSIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiQVNQLk5FVCBDb3JlIEFQSSBTZXJ2aWNlIHdpdGggVHdpbGlvLCBTdHJpcGUgYW5kIFN0b3JtcGF0aCIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vY21hdHNrYXMuY29tL3Byb2Nlc3NpbmctcGF5bWVudHMtYW5kLWJlaW5nLXBjaS1jb21wbGlhbnQtd2l0aC1zdHJpcGUtanMvP3V0bV9jb250ZW50PWJ1ZmZlcjU1ZDU2JnV0bV9tZWRpdW09c29jaWFsJnV0bV9zb3VyY2U9dHdpdHRlci5jb20mdXRtX2NhbXBhaWduPWJ1ZmZlciIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0NgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiUHJvY2VzcyBQYXltZW50cyB3aXRoIERvdG5ldCIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA0OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZ2l0aHViLmNvbS9jbWF0c2thcy9TdHJpcGVTYW1wbGUvdHJlZS9tYXN0ZXIvU3RyaXBlU2FtcGxlIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDQ5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJQcm9jZXNzIFBheW1lbnRzIHdpdGggRG90bmV0IEdpdGh1YiIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1MgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vc3RyaXBlLmNvbS9kb2NzL2RldmVsb3BtZW50I2NyZWF0ZS1jaGFyZ2UiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlN0cmlwZSBEZXZlbG9wbWVudCBEb2NzIikpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDU1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAibGkiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly93d3cudG9wdGFsLmNvbS9hc3AtZG90LW5ldC9hc3AtbmV0LXdlYi1hcGktdHV0b3JpYWwiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNTUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlRvcHRhbCBBU1AuTkVUIFdlYkFQSSIpKSwgbWR4KCJsaSIsIHsKICAgIHBhcmVudE5hbWU6ICJvbCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiYSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogImxpIgogIH0sIHsKICAgICJocmVmIjogImh0dHBzOi8vZGV2LnRvL2ludGVnZXJtYW4vY3JlYXRpbmctYS1uZXQtY29yZS1hcGktM242ZCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA1OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRGV2LlRvIHR1dG9yaWFsIikpLCBtZHgoImxpIiwgewogICAgcGFyZW50TmFtZTogIm9sIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAibGkiCiAgfSwgewogICAgImhyZWYiOiAiaHR0cHM6Ly9odHRwaWUub3JnL2RvYyNkZWZhdWx0LWJlaGF2aW91ciIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2MQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiSFRUUGllIEpTT04iKSkpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiYWRkaW5nLXRoZS1saWJyYXJ5IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJBZGRpbmcgdGhlIGxpYnJhcnkiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLXNoZWxsIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDY4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICIjIGluc3RhbGwgc3RyaXBlXG5kb3RuZXQgYWRkIHBhY2thZ2UgU3RyaXBlLm5ldFxuIyBmb3IgcmVhZGluZyBsb2NhbCBlbnYgZmlsZVxuIyBOT1QgUkVRVUlSRUQgdW5sZXNzIHlvdSB3YW50IHRvIHJlYWQgZnJvbSAuZW52XG5kb3RuZXQgYWRkIHBhY2thZ2UgRG90TmV0RW52XG4jIGluc3RhbGwgcmVxdWlyZWQgY29kZSBnZW5lcmF0aW9uIGNvZGVcbk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uV2ViLkNvZGVHZW5lcmF0aW9uLkRlc2lnblxuIyBnbG9iYWwgaW5zdGFsbCBzY2FmZm9sZGluZyB0b29sXG5kb3RuZXQgdG9vbCBpbnN0YWxsIC0tZ2xvYmFsIGRvdG5ldC1hc3BuZXQtY29kZWdlbmVyYXRvclxuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiYWRkaW5nLWEtZG90ZW52LWZpbGUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkFkZGluZyBhIERvdGVudiBmaWxlIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1zaGVsbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAidG91Y2ggLmVudlxuIikpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4NwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJXaXRoaW4gdGhlIERvdGVudiBmaWxlLCB3ZSBuZWVkIHRvIGFkZCB5b3VyIHRlc3Qga2V5cyBmcm9tIFN0cmlwZSdzIHdlYnNpdGUuIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1zaGVsbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA4OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiU0tfVEVTVF9LRVk9IHNrX3Rlc3QuLi5cblBLX1RFU1RfS0VZPXBrX3Rlc3QuLi5cbiIpKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInVwZGF0aW5nLXlvdXItc2V0dGluZ3MtZmlsZSIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA5MwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiVXBkYXRpbmcgeW91ciBzZXR0aW5ncyBmaWxlIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDk2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIklmIHlvdSBhcmUgZ29pbmcgdG8gdXNlIGFub3RoZXIgbWV0aG9kIHRvIGZldGNoIHRoZSB2YXJpYWJsZXMgKGllIHNlY3JldHMgZXRjKSwgeW91IGNvdWxkIGFkZCB0aGUgZm9sbG93aW5nIHRvIHlvdXIgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogOTYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiYXBwc2V0dGluZ3MuanNvbiIpLCAiIGZpbGU6IiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogOTcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qc29uIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDk3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJ7XG4gIC8vIHByZXZpb3VzIGtleS92YWx1ZXMgb21pdHRlZCBmb3IgYnJldml0eVxuICBcIlN0cmlwZVwiOiB7XG4gICAgXCJTZWNyZXRLZXlcIjogXCJTS19URVNUX0tFWVwiLCAvLyB0aGlzIHdpbGwgZXZhbCB0byBza190ZXN0Xy4uLiAuZW52XG4gICAgXCJQdWJsaXNoYWJsZUtleVwiOiBcIlBLX1RFU1RfS0VZXCIgLy8gdGhpcyB3aWxsIGV2YWwgdG8gc2tfdGVzdF8uLi4gZnJvbSAuZW52XG4gIH1cbn1cbiIpKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTA3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIk1ha2Ugc3VyZSB0byBjaGVjayB0aGUgIiwgbWR4KCJhIiwgT2JqZWN0LmFzc2lnbih7CiAgICBwYXJlbnROYW1lOiAicCIKICB9LCB7CiAgICAiaHJlZiI6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9kb3RuZXQvY3NoYXJwL3Byb2dyYW1taW5nLWd1aWRlL2NsYXNzZXMtYW5kLXN0cnVjdHMvcGFzc2luZy1wYXJhbWV0ZXJzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwNwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiZG9jcyBvbiBwYXNzaW5nIHBhcmFtZXRlcnMiKSwgIiB0byB1bmRlcnN0YW5kIGhvdyB0aGlzIHdvcmtzLiIpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiYWRkLXN0cmlwZS1jb25maWctdG8tc3RhcnR1cGNzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExMAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiQWRkIFN0cmlwZSBjb25maWcgdG8gU3RhcnR1cC5jcyIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWNzaGFycCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgInVzaW5nIFN0cmlwZTtcbnVzaW5nIERvdE5ldEVudjtcblxuLy8gLi4uIGNvZGUgb21pdHRlZCBmb3IgYnJldml0eVxuXG5wdWJsaWMgU3RhcnR1cChJQ29uZmlndXJhdGlvbiBjb25maWd1cmF0aW9uKVxue1xuICAgIENvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xuICAgIC8vIGxvYWQgLmVudiBmaWxlXG4gICAgRG90TmV0RW52LkVudi5Mb2FkKCk7XG4gICAgLy8gc2V0IGNvbmZpZyB1c2luZyBlbnYgdmFyXG4gICAgU3RyaXBlQ29uZmlndXJhdGlvbi5BcGlLZXkgPSBTeXN0ZW0uRW52aXJvbm1lbnQuR2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIlNLX1RFU1RfS0VZXCIpO1xufVxuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAiY3JlYXRlLXRoZS1tb2RlbCIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMjkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkNyZWF0ZSB0aGUgTW9kZWwiKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1jcyIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMzIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIi8vIGluIE1vZGVscy9TdHJpcGVDaGFyZ2UuY3Ncbm5hbWVzcGFjZSBDaGFyZ2VBcGkuTW9kZWxzXG57XG4gICAgcHVibGljIGNsYXNzIFN0cmlwZUNoYXJnZVxuICAgIHtcbiAgICAgICAgcHVibGljIGxvbmcgQW1vdW50IHsgZ2V0OyBzZXQ7IH1cbiAgICAgICAgcHVibGljIHN0cmluZyBDdXJyZW5jeSB7IGdldDsgc2V0OyB9XG4gICAgICAgIHB1YmxpYyBzdHJpbmcgU291cmNlIHsgZ2V0OyBzZXQ7IH1cbiAgICAgICAgcHVibGljIHN0cmluZyBSZWNlaXB0RW1haWwgeyBnZXQ7IHNldDsgfVxuICAgIH1cbn1cbiIpKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImNyZWF0ZS10aGUtY29udHJvbGxlciIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNDYKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkNyZWF0ZSB0aGUgQ29udHJvbGxlciIpLCBtZHgoInByZSIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE0OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWNzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE0OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiLy8gQ29udHJvbGxlcnMvQ2hhcmdlLmNzXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcbnVzaW5nIE1pY3Jvc29mdC5Bc3BOZXRDb3JlLk12YztcbnVzaW5nIFN0cmlwZTtcbnVzaW5nIENoYXJnZUFwaS5Nb2RlbHM7XG5cbm5hbWVzcGFjZSBkb3RuZXRfc3RyaXBlLkNvbnRyb2xsZXJzXG57XG4gICAgW0FwaUNvbnRyb2xsZXJdXG4gICAgW1JvdXRlKFwiYXBpL2NoYXJnZXNcIildXG4gICAgcHVibGljIGNsYXNzIENoYXJnZXNDb250cm9sbGVyIDogQ29udHJvbGxlclxuICAgIHtcbiAgICAgICAgW0h0dHBQb3N0XVxuICAgICAgICBwdWJsaWMgU3RyaXBlLkNoYXJnZSBDcmVhdGVDaGFyZ2UoW0Zyb21Cb2R5XSBTdHJpcGVDaGFyZ2UgY3JlYXRlT3B0aW9ucylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgQ2hhcmdlQ3JlYXRlT3B0aW9uc1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIEFtb3VudCA9IGNyZWF0ZU9wdGlvbnMuQW1vdW50LFxuICAgICAgICAgICAgICAgIEN1cnJlbmN5ID0gXCJ1c2RcIixcbiAgICAgICAgICAgICAgICBTb3VyY2UgPSBcInRva192aXNhXCIsXG4gICAgICAgICAgICAgICAgUmVjZWlwdEVtYWlsID0gXCJ0aW0uYXBwbGVAZXhhbXBsZS5jb21cIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc2VydmljZSA9IG5ldyBDaGFyZ2VTZXJ2aWNlKCk7XG4gICAgICAgICAgICB2YXIgY2hhcmdlID0gc2VydmljZS5DcmVhdGUob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gY2hhcmdlO1xuICAgICAgICB9XG4gICAgfVxufVxuIikpLCBtZHgoImgyIiwgT2JqZWN0LmFzc2lnbih7CiAgICAiaWQiOiAic2VuZGluZy10aGUtcmVxdWVzdC1vbi1odHRwaWUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTgwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJTZW5kaW5nIHRoZSByZXF1ZXN0IG9uIEhUVFBpZSIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxODMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiU2luY2Ugd2UgYXJlIHNlbmRpbmcgYmFjayB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTgzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIlN0cmlwZS5DaGFyZ2UiKSwgIiBvYmplY3QsIGl0IHdpbGwgYmUgdmVyeSB2ZXJib3NlIGFuZCBub3Qgd2hhdCB5b3Ugd2FudCB0byBkbyBpbiByZWFsaXR5IGZvciB0aGUgQVBJLiIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxODQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVXNpbmcgSFRUUGllIChjaGVjayByZXNvdXJjZSAiLCAiWzEyXSIsICIpLCB3ZSBjYW4gY2hlY2sgZm9yIG91ciAyMDAgcmVzcG9uc2Ugd2l0aCB0aGUgZnVsbCBKU09OIGJvZHkgcmV0dXJuZWQgYnkgU3RyaXBlIGJ5IGNhbGxpbmcgIiwgbWR4KCJpbmxpbmVDb2RlIiwgewogICAgcGFyZW50TmFtZTogInAiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTg0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImh0dHAgUE9TVCBodHRwOi8vbG9jYWxob3N0OjUwMDAvYXBpL2NoYXJnZXMgQW1vdW50Oj0yMDAiKSwgIiBpbiBvdXIgY29uc29sZS4iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImNoZWNrLXRoZS1zdHJpcGUtZGV2ZWxvcGVyLWNvbnNvbGUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTg1CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJDaGVjayB0aGUgU3RyaXBlIGRldmVsb3BlciBjb25zb2xlIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJIZWFkaW5nIHRvIG91ciBTdHJpcGUgZGFzaGJvYXJkIGFuZCBjaGVja2luZyB1bmRlciAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxODgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiRGV2ZWxvcGVycyA+IEV2ZW50cyIpLCAiLCBvbmUgY2FuIHNlZSBvdXIgcGF5bWVudCBtYWRlIGZvciAiLCBtZHgoImlubGluZUNvZGUiLCB7CiAgICBwYXJlbnROYW1lOiAicCIsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxODgKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVVMkMi4wMCIpLCAiIGJ5ICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4OAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJcInRpbS5hcHBsZUBleGFtcGxlLmNvbVwiIiksICIuIEdyZWF0IHN1Y2Nlc3MhIiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4OQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJPZiBjb3Vyc2UsIGFsbCB0aG9zZSB2YWx1ZXMgYXJlIGNvZGVkIGFuZCBub3QgZXhhY3RseSB3aGF0IHdlIHdhbnQgaW4gdGhlIHJlYWwgd29ybGQuLi4gYnV0IHdlIGFyZSBjb25uZWN0ZWQuIikpOwp9CgppZiAodHlwZW9mIE1EWENvbnRlbnQgIT09ICd1bmRlZmluZWQnICYmIE1EWENvbnRlbnQgJiYgTURYQ29udGVudCA9PT0gT2JqZWN0KE1EWENvbnRlbnQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIk1EWENvbnRlbnQiLAogICAgICBmaWxlbmFtZTogIm1hbnVhbC9TdHJpcGUvRG90bmV0LVN0cmlwZS1Db25maWd1cmF0aW9uLm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1N0cmlwZS9Eb3RuZXQtU3RyaXBlLUNvbmZpZ3VyYXRpb24ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9tYW51YWwvU3RyaXBlL0RvdG5ldC1TdHJpcGUtQ29uZmlndXJhdGlvbi5tZCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWExheW91dCwgIk1EWExheW91dCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1N0cmlwZS9Eb3RuZXQtU3RyaXBlLUNvbmZpZ3VyYXRpb24ubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvVXNlcnMvZGVubmlzLm9rZWVmZmUvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbWFudWFsL1N0cmlwZS9Eb3RuZXQtU3RyaXBlLUNvbmZpZ3VyYXRpb24ubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Dotnet-Stripe-Configuration.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"configuring-stripe-for-net\"\n    }}>{`Configuring Stripe for .NET`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codebrains.io/integrate-stripe-api-with-asp-net-core-creating-customers/\"\n        }}>{`Setting up Stripe API for Dotnet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/api?lang=dotnet\"\n        }}>{`Stripe Dotnet API Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio-mac\"\n        }}>{`First Dotnet API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-3.1&tabs=linux\"\n        }}>{`Setting secrets for a Dotnet project`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\"\n        }}>{`Interfaces in C#`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stormpath.com/blog/build-api-service-dotnet-core-twilio-stripe\"\n        }}>{`ASP.NET Core API Service with Twilio, Stripe and Stormpath`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://cmatskas.com/processing-payments-and-being-pci-compliant-with-stripe-js/?utm_content=buffer55d56&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer\"\n        }}>{`Process Payments with Dotnet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/cmatskas/StripeSample/tree/master/StripeSample\"\n        }}>{`Process Payments with Dotnet Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/development#create-charge\"\n        }}>{`Stripe Development Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.toptal.com/asp-dot-net/asp-net-web-api-tutorial\"\n        }}>{`Toptal ASP.NET WebAPI`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/integerman/creating-a-net-core-api-3n6d\"\n        }}>{`Dev.To tutorial`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://httpie.org/doc#default-behaviour\"\n        }}>{`HTTPie JSON`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"adding-the-library\"\n    }}>{`Adding the library`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# install stripe\ndotnet add package Stripe.net\n# for reading local env file\n# NOT REQUIRED unless you want to read from .env\ndotnet add package DotNetEnv\n# install required code generation code\nMicrosoft.VisualStudio.Web.CodeGeneration.Design\n# global install scaffolding tool\ndotnet tool install --global dotnet-aspnet-codegenerator\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-a-dotenv-file\"\n    }}>{`Adding a Dotenv file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`touch .env\n`}</code></pre>\n    <p>{`Within the Dotenv file, we need to add your test keys from Stripe's website.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY= sk_test...\nPK_TEST_KEY=pk_test...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updating-your-settings-file\"\n    }}>{`Updating your settings file`}</h2>\n    <p>{`If you are going to use another method to fetch the variables (ie secrets etc), you could add the following to your `}<inlineCode parentName=\"p\">{`appsettings.json`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  // previous key/values omitted for brevity\n  \"Stripe\": {\n    \"SecretKey\": \"SK_TEST_KEY\", // this will eval to sk_test_... .env\n    \"PublishableKey\": \"PK_TEST_KEY\" // this will eval to sk_test_... from .env\n  }\n}\n`}</code></pre>\n    <p>{`Make sure to check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters\"\n      }}>{`docs on passing parameters`}</a>{` to understand how this works.`}</p>\n    <h2 {...{\n      \"id\": \"add-stripe-config-to-startupcs\"\n    }}>{`Add Stripe config to Startup.cs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using Stripe;\nusing DotNetEnv;\n\n// ... code omitted for brevity\n\npublic Startup(IConfiguration configuration)\n{\n    Configuration = configuration;\n    // load .env file\n    DotNetEnv.Env.Load();\n    // set config using env var\n    StripeConfiguration.ApiKey = System.Environment.GetEnvironmentVariable(\"SK_TEST_KEY\");\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-the-model\"\n    }}>{`Create the Model`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`// in Models/StripeCharge.cs\nnamespace ChargeApi.Models\n{\n    public class StripeCharge\n    {\n        public long Amount { get; set; }\n        public string Currency { get; set; }\n        public string Source { get; set; }\n        public string ReceiptEmail { get; set; }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-the-controller\"\n    }}>{`Create the Controller`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`// Controllers/Charge.cs\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing Stripe;\nusing ChargeApi.Models;\n\nnamespace dotnet_stripe.Controllers\n{\n    [ApiController]\n    [Route(\"api/charges\")]\n    public class ChargesController : Controller\n    {\n        [HttpPost]\n        public Stripe.Charge CreateCharge([FromBody] StripeCharge createOptions)\n        {\n            var options = new ChargeCreateOptions\n            {\n                Amount = createOptions.Amount,\n                Currency = \"usd\",\n                Source = \"tok_visa\",\n                ReceiptEmail = \"tim.apple@example.com\",\n            };\n            var service = new ChargeService();\n            var charge = service.Create(options);\n            return charge;\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sending-the-request-on-httpie\"\n    }}>{`Sending the request on HTTPie`}</h2>\n    <p>{`Since we are sending back the response from the `}<inlineCode parentName=\"p\">{`Stripe.Charge`}</inlineCode>{` object, it will be very verbose and not what you want to do in reality for the API.`}</p>\n    <p>{`Using HTTPie (check resource `}{`[12]`}{`), we can check for our 200 response with the full JSON body returned by Stripe by calling `}<inlineCode parentName=\"p\">{`http POST http://localhost:5000/api/charges Amount:=200`}</inlineCode>{` in our console.`}</p>\n    <h2 {...{\n      \"id\": \"check-the-stripe-developer-console\"\n    }}>{`Check the Stripe developer console`}</h2>\n    <p>{`Heading to our Stripe dashboard and checking under `}<inlineCode parentName=\"p\">{`Developers > Events`}</inlineCode>{`, one can see our payment made for `}<inlineCode parentName=\"p\">{`US$2.00`}</inlineCode>{` by `}<inlineCode parentName=\"p\">{`\"tim.apple@example.com\"`}</inlineCode>{`. Great success!`}</p>\n    <p>{`Of course, all those values are coded and not exactly what we want in the real world... but we are connected.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}