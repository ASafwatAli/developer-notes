{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md","mtime":1548282825034},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/JavaScript/Enzyme-Testing.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,qBADA,CAAR,uBADK,CAIL,0EAJK,CAKL,sCAA6B,kBAAY,UAAU,CAAC,GAAvB,YAA7B,MAAsF,kBAAY,UAAU,CAAC,GAAvB,UAAtF,MAA6I,kBAAY,UAAU,CAAC,GAAvB,WAA7I,MAAqM,kBAAY,UAAU,CAAC,GAAvB,UAArM,MAA4P,kBAAY,UAAU,CAAC,GAAvB,SAA5P,CALK,CAML,qIAA4H,kBAAY,UAAU,CAAC,GAAvB,YAA5H,KANK,CAOL,8CAAqC,kBAAY,UAAU,CAAC,GAAvB,UAArC,KAPK,CAQL,qGAA4F,kBAAY,UAAU,CAAC,GAAvB,WAA5F,KARK,CASL,aAAG,UAAI,UAAU,CAAC,GAAf,mBAAH,CATK,CAUL,cACE,UAAI,UAAU,CAAC,IAAf,mFADF,CAKE,UAAI,UAAU,CAAC,IAAf,+BALF,CAOE,UAAI,UAAU,CAAC,IAAf,iBAPF,CAQE,UAAI,UAAU,CAAC,IAAf,yCARF,CAVK,CAsBL,SAAQ,CACN,KAAM,4BADA,CAAR,mCAtBK,CAyBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,iXAAL,CAzBK,CAuCL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,8wCAAL,CAvCK,CAsEL,SAAQ,CACN,KAAM,0BADA,CAAR,iCAtEK,CAyEL,qCAA4B,kBAAY,UAAU,CAAC,GAAvB,WAA5B,CAzEK,CA0EL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,6hBAAL,CA1EK,CAiGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,w4DAAL,CAjGK,CAqJL,SAAQ,CACN,KAAM,2BADA,CAAR,kCArJK,CAwJL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,ubAAL,CAxJK,CAAP,CAwKD,C,+QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"testing-with-enzyme\"\n    }}>{`Testing with Enzyme`}</h1>\n    <p>{`React components allow unit tests in JS to be much easier.`}</p>\n    <p>{`These exampes require `}<inlineCode parentName=\"p\">{`sinonjs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`enzyme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mocha`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chai`}</inlineCode></p>\n    <p>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<inlineCode parentName=\"p\">{`shallow`}</inlineCode>{`.`}</p>\n    <p>{`Testing lifecycle events, use `}<inlineCode parentName=\"p\">{`mount`}</inlineCode>{`.`}</p>\n    <p>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`File structure`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</li>\n      <li parentName=\"ul\">{`scripts\n- mocha_runner.js`}</li>\n      <li parentName=\"ul\">{`package.json`}</li>\n      <li parentName=\"ul\">{`src\n- components\n- repositories.js`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"enz-1-testing-with-shallow\"\n    }}>{`ENZ-1: Testing with \"Shallow\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-2-testing-with-mount\"\n    }}>{`ENZ-2: Testing with \"Mount\"`}</h2>\n    <p>{`This requires use of `}<inlineCode parentName=\"p\">{`js-dom`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-3-testing-with-render\"\n    }}>{`ENZ-3: Testing with \"Render\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}