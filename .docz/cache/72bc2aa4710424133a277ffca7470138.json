{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Prototype-Pattern.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Prototype-Pattern.md","mtime":1562563032027},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Prototype-Pattern.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CALK,EAML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FADF,EAEE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAFF,EAGE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAHF,CANK,EAWL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXK,EAcL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,g9CAAL,CAdK,EAsFL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAtFK,EAyFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,UAAU,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB;AAAG,IAAA,UAAU,EAAC;AAAd,KAAuB;AACvC,YAAQ;AAD+B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAApB,CADF,CAzFK,CAAP;AA+FD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA9GMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"prototype-pattern\"\n    }}>{`Prototype Pattern`}</h1>\n    <p>{`GoF defines prototype pattern as \"Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype.\"`}</p>\n    <p>{`The components used in this pattern:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Prototype: An interface or abstract classes that defined the method to clone itself.`}</li>\n      <li parentName=\"ul\">{`ConcretePrototype: This is the concrete class that will clone itself.`}</li>\n      <li parentName=\"ul\">{`Client: The application object that needs the cloned copies of the object.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-code\"\n    }}>{`In code`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface PersonPrototype {\n    name: string;\n    clone(): PersonPrototype;\n}\n\nclass Tom implements PersonPrototype {\n    private _name:string = 'Tom';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Tom();\n    }\n}\n\nclass Dick implements PersonPrototype {\n    private _name:string = 'Dick';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Dick();\n    }\n}\n\nclass Harry implements PersonPrototype {\n    private _name:string = 'Harry';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Harry();\n    }\n}\n\n// create factory\nabstract class PersonFactory {\n    abstract createPerson(person: string): PersonPrototype;\n}\n\n// concrete factories\nclass PlayerPersonFactory extends PersonFactory {\n    private players: { [player: string]: PersonPrototype; } = {};\n\n    constructor() {\n        super();\n        this.players['Tom'] = new Tom();\n        this.players['Dick'] = new Dick();\n        this.players['Harry'] = new Harry();\n    }\n\n    createPerson(player: string): PersonPrototype {\n        return this.players[player].clone();\n    }\n}\n\n(function main() {\n    const factory = new PlayerPersonFactory();\n    const prototypes = ['Tom', 'Dick', 'Harry'].map((player) => {\n        return factory.createPerson(player)\n    });\n    console.log(prototypes);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references-and-resources\"\n    }}>{`References And Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.codeproject.com/Articles/476807/Understanding-and-Implementing-Prototype-Pattern-i\"\n        }}>{`Understanding The Prototype Design Pattern`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}