{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md","mtime":1579080082208},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Data-Structures/JavaScript.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"javascript-data-structures\"\n    }}>{`JavaScript Data Structures`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#javascript-data-structures\"\n        }}>{`JavaScript Data Structures`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#string-reversal\"\n            }}>{`String reversal`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#basic-debugger-statements\"\n            }}>{`Basic debugger statements`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#palindromes\"\n            }}>{`Palindromes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#reverse-integer\"\n            }}>{`Reverse Integer`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#max-chars\"\n            }}>{`Max Chars`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#fizz-buzz\"\n            }}>{`Fizz Buzz`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#array-chunk-problem\"\n            }}>{`Array Chunk Problem`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#anagrams\"\n            }}>{`Anagrams`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#capitalising-a-sentece\"\n            }}>{`Capitalising a sentece`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#stepper\"\n            }}>{`Stepper`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#pyramids\"\n            }}>{`Pyramids`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#vowel-counting\"\n            }}>{`Vowel Counting`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#general-matrix\"\n            }}>{`General Matrix`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#matrix-spiral\"\n            }}>{`Matrix Spiral`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#runtime-complexity\"\n            }}>{`Runtime Complexity`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#determining-complexity\"\n                }}>{`Determining complexity`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#big-o-notation\"\n                }}>{`Big 'O' Notation`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#common-complexities-runtime\"\n                }}>{`Common Complexities (Runtime)`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#space-complexity\"\n                }}>{`Space Complexity`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#fibonacci\"\n            }}>{`Fibonacci`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#memoization\"\n            }}>{`Memoization`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#implementing-memoization\"\n                }}>{`Implementing memoization`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#whats-a-data-structure\"\n            }}>{`What's a data structure?`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#queueing\"\n            }}>{`Queueing`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#weave\"\n            }}>{`Weave`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#stacks\"\n            }}>{`Stacks`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#queue-from-stacks\"\n            }}>{`Queue from Stacks`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#linked-list\"\n            }}>{`Linked List`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#basic-notes-on-generators\"\n            }}>{`Basic notes on generators`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#midpoint-of-a-linked-list\"\n            }}>{`Midpoint of a Linked List`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#detecting-linked-list-loops\"\n            }}>{`Detecting Linked List Loops`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#linked-list-distance-n-from-last\"\n            }}>{`Linked List distance n from last`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#trees-overview\"\n            }}>{`Trees Overview`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#level-width\"\n            }}>{`Level width`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#binary-search-trees\"\n            }}>{`Binary Search Trees`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#validating-a-bst\"\n            }}>{`Validating a BST`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#eventing-system\"\n            }}>{`Eventing system`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#sort-algos-and-complexities\"\n            }}>{`Sort Algos and Complexities`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#bubble-sort\"\n                }}>{`Bubble sort`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#selection-sort\"\n                }}>{`Selection Sort`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#merge-sort\"\n                }}>{`Merge Sort`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"string-reversal\"\n    }}>{`String reversal`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const str = 'test';\n\nconst reverseOne = (str) => {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed = reversed + str[i];\n  }\n\n  return reversed;\n};\n\nconst reverseTwo = (str) => {\n  return str\n    .split('')\n    .reverse()\n    .join('');\n};\n\nconst reverseThree = (str) => {\n  let reversed = '';\n  for (let char of str) {\n    reversed = char + reversed;\n  }\n\n  return reversed;\n};\n\nconst reverseFour = (str) => {\n  let arr = str.split('').reduce((reversed, char) => {\n    return char + reversed;\n  }, '');\n\n  return reversed;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-debugger-statements\"\n    }}>{`Basic debugger statements`}</h2>\n    <p>{`Sometimes that we to pause during execution to do some debugging.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const reverse = (str) => {\n  debugger;\n  let reversed = '';\n  for (let char of str) {\n    reversed = char + reversed;\n  }\n\n  return reversed;\n};\n\nreverse(str);\n`}</code></pre>\n    <p>{`From within the terminal, we can then inspect by running:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node inspect path/to/file.js\ncont # to continue execution (can also use c)\nrepl # kicks you into a js repl\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const palindrome = (str) => {\n  if (typeof str === String) {\n    return str === reverse(str);\n  } else {\n    return false;\n  }\n};\n\npalindrome('noon'); // true\npalindrome('asdf'); // false\n\nconst palindromeTwo = (str) => {\n  str.split('').every((char, index) => {\n    if (i <= Math.ceil(str.length / 2)) {\n      return char === str[str.length - 1 - index];\n    }\n  });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reverse-integer\"\n    }}>{`Reverse Integer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const reverseInt = (n) => {\n  // Check if negative\n  const isPos = Math.sign(n);\n  // 1. cast to string\n  const str = n.toString();\n  // 2. reverse\n  str\n    .split('')\n    .reverse()\n    .join('');\n  // 3. cast to int\n  const revInt = parseInt(str);\n  return isPos > 0 ? revInt : revInt * -1;\n  // return isPos * Math.sign(n);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"max-chars\"\n    }}>{`Max Chars`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// 1\n// maxChar('abccccccd'); // 'c'\nconst maxChar = (str) => {\n    let obj = {};\n    for (let char of str) {\n        if (typeof obj[char] !== 'undefined') {\n            obj[char] = obj[char] + 1l\n        } else {\n            obj[char] = 1;\n        }\n    }\n\n    let maxChar = '';\n    let max = 0;\n    for (let key of obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n            maxChar = key;\n        }\n    }\n\n    return maxChar;\n};\n\n// 2\nconst chars = {};\nconst maxCharTwo = str => {\n    for (let char of str) {\n        if (!chars[char]) {\n            chars[char] = 1;\n        } else {\n            chars[char]++;\n        }\n    }\n\n    let maxChar = '';\n    let max = 0;\n\n    for (let key of obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n            maxChar = key;\n        }\n    }\n    return maxChar;\n}\n\n// 3\nconst maxCharThree = str => {\n    for (let char of str) {\n        chars[char] === !chars[char] ? 1 : chars[char]++;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fizz-buzz\"\n    }}>{`Fizz Buzz`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let fizzBuzz = (i) => {\n  switch (true) {\n    case i % 3 === 0 && i % 5 === 0:\n      return 'fizzbuzz';\n    case i % 3 === 0:\n      return 'fizz';\n    case i % 5 === 0:\n      return 'buzz';\n    default:\n      return i;\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-chunk-problem\"\n    }}>{`Array Chunk Problem`}</h2>\n    <p>{`One solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  let tmp = [];\n  let chunkedArr = [];\n  arr.map((d, index) => {\n    tmp.push(d);\n    if (index % i === i - 1) {\n      chunkedArr.push(tmp);\n      tmp = [];\n    }\n  });\n\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Second solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  for (let el of arr) {\n    const last = chunkedArr[chunkedArr.length - 1];\n\n    if (!last || last.length === size) {\n      chunkedArr.push([el]);\n    } else [\n      last.push([el]);\n    ]\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Third solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  let start = 0;\n  let index = 1;\n  while (start < arr.length) {\n    chunkedArr.push(arr.slice(start, index * i));\n\n    start = start + i;\n    index++;\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <p>{`Fourth solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Given an 1D array, chunk into 2D based on int\n *\n * @param {*} arr Init array\n * @param {*} i Chunk size\n * @returns {Object} Chunked array object\n */\nlet arrayChunk = (arr, i) => {\n  const chunkedArr = [];\n  let start = 0;\n  while (start < arr.length) {\n    chunkedArr.push(arr.slice(start, start + i));\n    start += i;\n  }\n  return chunkedArr;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"anagrams\"\n    }}>{`Anagrams`}</h2>\n    <p>{`Solution one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagram = (strA, strB) => {\n  // use regexp to remove spaces and grammar\n  const cmpA = strA.replace(/[^\\\\w]/g, '').toLowerCase();\n  const cmpB = strB.replace(/[^\\\\w]/g, '').toLowerCase();\n\n  if (cmpA.length !== cmpB.length) {\n    return false;\n  }\n\n  let charMapA = {};\n  let charMapB = {};\n  for (let i in cmpA) {\n    if (!charMapA[cmpA[i]]) {\n      charMapA[cmpA[i]] = 1;\n    } else {\n      charMapA[cmpA[i]] = charMapA[cmpA[i]]++;\n    }\n\n    if (!charMapB[cmpB[i]]) {\n      charMapB[cmpB[i]] = 1;\n    } else {\n      charMapB[cmpB[i]] = charMapB[cmpB[i]]++;\n    }\n  }\n\n  const keysA = Object.keys(charMapA);\n  const keysB = Object.keys(charMapB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (let k in keysA) {\n    if (typeof keysB[k] === 'undefined') {\n      return false;\n    }\n\n    if (keysA[k] !== keysB[k]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n`}</code></pre>\n    <p>{`Solution two (basic refactor):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagram = (strA, strB) => {\n  const filterStr = (str) => str.replace(/[^\\\\w]/g, '').toLowerCase();\n\n  // use regexp to remove spaces and grammar\n  const cmpA = filterStr(str);\n  const cmpB = filterStr(str);\n\n  if (cmpA.length !== cmpB.length) {\n    return false;\n  }\n\n  let charMapA = {};\n  let charMapB = {};\n  const mapHelper = (i, str, map) => {\n    if (!map[str[i]]) {\n      map[str[i]] = 1;\n    } else {\n      map[str[i]] = map[str[i]]++;\n    }\n  };\n\n  for (let i in cmpA) {\n    mapHelper(i, cmpA, charMapA);\n    mapHelper(i, cmpB, charMapB);\n  }\n\n  const keysA = Object.keys(charMapA);\n  const keysB = Object.keys(charMapB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (let k in keysA) {\n    if (typeof keysB[k] === 'undefined') {\n      return false;\n    }\n\n    if (keysA[k] !== keysB[k]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n`}</code></pre>\n    <p>{`Solution three:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagrams = (strA, strB) => {\n  const charMapA = buildCharMap(strA);\n  const charMapB = buildCharMap(strB);\n\n  if (Object.keys(charMapA).length !== Object.keys(charMapB).length) {\n    return false;\n  }\n\n  for (let char in charMapA) {\n    if (aCharMap[char] !== bCharMap[char]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst buildCharMap = (str) => {\n  const charMap = {};\n  for (let char of str.replace(/[^\\\\w]/g, '').toLowerCase()) {\n    charMap[char] = charMap[char] + 1 || 1;\n  }\n\n  return charMap;\n};\n`}</code></pre>\n    <p>{`Solution four:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const anagrams = (strA, strB) => cleanStr(strA) === cleanStr(strB);\n\nconst cleanStr = (str) =>\n  str\n    .replace(/[^\\\\w]/g, '')\n    .toLowerCase()\n    .split('')\n    .sort()\n    .join('');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"capitalising-a-sentece\"\n    }}>{`Capitalising a sentece`}</h2>\n    <p>{`Easy solution for first of sentence:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => str[0].toUpperCase() + str.slice(1);\n`}</code></pre>\n    <p>{`If you actually need to capitalise all sentences...`}</p>\n    <p>{`First solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  const arr = str.split(' ');\n\n  return arr\n    .map((str) => {\n      return str[0].toUpperCase() + str.slice(1);\n    })\n    .join(' ');\n};\n`}</code></pre>\n    <p>{`Second solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  let res = str[0].toUpperCase();\n  for (let i = 1; i < str.length; i++) {\n    if (str[i - 1] === ' ') {\n      res = res + str[i].toUpperCase();\n    } else {\n      res = res + str[i];\n    }\n  }\n  return res;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stepper\"\n    }}>{`Stepper`}</h2>\n    <p>{`Without a space:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (stepper) => {\n  let res = '';\n  for (let i = 0; i < stepper; i++) {\n    let count = 0;\n    while (count <= i) {\n      res = res + '#';\n      count++;\n    }\n\n    if (i !== stepper - 1) {\n      res = res + '\\\\n';\n    }\n  }\n\n  console.log(res);\n  return res;\n};\n\nmodule.exports = {\n  step\n};\n`}</code></pre>\n    <p>{`With a space:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (stepper) => {\n  let res = '';\n  for (let i = 0; i < stepper; i++) {\n    let count = 0;\n    while (count <= i) {\n      res = res + '#';\n      count++;\n    }\n\n    while (count <= stepper) {\n      res = res + ' ';\n      count++;\n    }\n\n    if (i !== stepper - 1) {\n      res = res + '\\\\n';\n    }\n  }\n\n  console.log(res);\n  return res;\n};\n\nmodule.exports = {\n  step\n};\n`}</code></pre>\n    <p>{`Using recursion (doesn't return the string):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (n, row = 0, stair = '') => {\n  // Complete\n  if (n === row) {\n    return;\n  }\n\n  // Handling a row\n  if (n === stair.length) {\n    console.log(stair);\n    return step(n, row + 1);\n  }\n\n  // Handling str on row\n  if (stair.length <= row) {\n    stair += '#';\n  } else {\n    stair += ' ';\n  }\n\n  return step(n, row, stair);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyramids\"\n    }}>{`Pyramids`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const pyramid = (n) => {\n  const midpoint = Math.floor((2 * n - 1) / 2);\n  let level = '';\n  for (let row = 0; row < n; row++) {\n    for (let column = 0; column < 2 * n - 1; column++) {\n      if (midpoint - row <= column && midpoint + row >= column) {\n        level += '#';\n      } else {\n        level += ' ';\n      }\n\n      if (column === 2 * n - 2) {\n        level += '\\\\n';\n      }\n    }\n  }\n\n  return level;\n};\n`}</code></pre>\n    <p>{`Solution with recursion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const pyramid = (n, row = 0, level = '') => {\n  // Complete\n  if (n === row) {\n    console.log(level);\n    return;\n  }\n\n  // Handling a row\n  if (2 * n - 1 === level.length) {\n    console.log(level);\n    return pyramid(n, row + 1);\n  }\n\n  const midpoint = Math.floor((2 * n - 1) / 2);\n  let add = '';\n  if (midpoint - row <= level.length && midpoint + row >= level.length) {\n    add += '#';\n  } else {\n    add += ' ';\n  }\n\n  return pyramid(n, row, level + add);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"vowel-counting\"\n    }}>{`Vowel Counting`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let vowels = (str) => {\n  let count = 0;\n  // could also just use vowels = 'aeiou'\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let char of str) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n`}</code></pre>\n    <p>{`Solution Two:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let vowels = (str) => {\n  const matches = str.match(/[aeiou]/gi);\n  return matches ? matches.length : 0;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"general-matrix\"\n    }}>{`General Matrix`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let matrix = (n) => {\n  let mat = [];\n  let count = 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j === 0) {\n        mat[i] = [];\n      }\n\n      mat[i][j] = count;\n      count++;\n    }\n  }\n\n  return mat;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"matrix-spiral\"\n    }}>{`Matrix Spiral`}</h2>\n    <p>{`Solution One:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let matrix = (n) => {\n  let results = [];\n\n  // init all 2d arrays\n  for (let i = 0; i < n; i++) {\n    results.push([]);\n  }\n\n  let count = 1;\n  let startRow = 0;\n  let endRow = n - 1;\n  let startCol = 0;\n  let endCol = n - 1;\n\n  while (startCol <= endCol && endRow >= startRow) {\n    // Top row\n    for (let i = startCol; i <= endCol; i++) {\n      results[startRow][i] = count;\n      count++;\n    }\n    startRow++;\n\n    // Right col\n    for (let i = startRow; i <= endRow; i++) {\n      results[i][endCol] = count;\n      count++;\n    }\n    endCol--;\n\n    // Bottom row\n    for (let i = endCol; i >= startCol; i--) {\n      results[endRow][i] = count;\n      count++;\n    }\n    endRow--;\n\n    // Start col\n    for (let i = endRow; i >= startRow; i--) {\n      results[i][startCol] = count;\n      count++;\n    }\n    startCol++;\n  }\n  console.log('results', results);\n  // find midpoint to start at (base on even/odd) console.log(results);\n  return results;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"runtime-complexity\"\n    }}>{`Runtime Complexity`}</h2>\n    <p>{`Linear runtime (N):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const capitaliseStr = (str) => {\n  let res = str[0].toUpperCase();\n  for (let i = 1; i < str.length; i++) {\n    if (str[i - 1] === ' ') {\n      res = res + str[i].toUpperCase();\n    } else {\n      res = res + str[i];\n    }\n  }\n  return res;\n};\n`}</code></pre>\n    <p>{`For an example of quadratic runtime (N^2):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const step = (n, row = 0, stair = '') => {\n  // Complete\n  if (n === row) {\n    return;\n  }\n\n  // Handling a row\n  if (n === stair.length) {\n    console.log(stair);\n    return step(n, row + 1);\n  }\n\n  // Handling str on row\n  if (stair.length <= row) {\n    stair += '#';\n  } else {\n    stair += ' ';\n  }\n\n  return step(n, row, stair);\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"determining-complexity\"\n    }}>{`Determining complexity`}</h3>\n    <p>{`How can we determine complexity?`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Time`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Constant`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No mantter how many elements we're working with, the algorithm/operation/whatever will always take the same amount of time`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Logarithmic`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You have this if doubling the number of elements you are iterating over doesn't double the amount of work. Always assume search algorithms to be log(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Linear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through all elements in a colection of data (think arrays)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quasilinear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n * log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You have this if doubling the number of elements you are iterating over doesn't double the amount of work. Always assume sort algorithms to be n*log(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quadratic`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Every el in a collection has to be compared to every other elements (handshake problem)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Exponential`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2^n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If you add a \"single\" element to a collection, the processing power required doubles`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"big-o-notation\"\n    }}>{`Big 'O' Notation`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Complexity`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Linear`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(1)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Constant`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quadratic`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"common-complexities-runtime\"\n    }}>{`Common Complexities (Runtime)`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Likely complexity`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through simple loop on single collection`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Probably O(n)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through half a collection?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Still O(n). There are no constants in runtime.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Iterating through 2 different collections with separate for loops`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n + m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops iterating over the same collection?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops iterating over different collections?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sorting`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*log(n))`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n^2)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Two nested for loops on different collections`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*m)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sorting?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(n*log(n))`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Searching a sorted array?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`O(log(n))`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"space-complexity\"\n    }}>{`Space Complexity`}</h3>\n    <p>{`Extremely similar to performance but related to memory.`}</p>\n    <h2 {...{\n      \"id\": \"fibonacci\"\n    }}>{`Fibonacci`}</h2>\n    <p>{`First solution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fib = n => {\n  const result = [0,1];\n\n  for (let i = 2; i <= n; i++) {\n    const a = result[result.length -1];\n    const b = result[result.length -2];\n\n    result.push(a + b);\n  }\n\n  return result[n];\n}\n`}</code></pre>\n    <p>{`Recursive solution one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fibonacci = (n, iter = 0, value = 1, prev = 0) => {\n    // 0, 1, 1, 2, 3, 5 ... handle base cases\n    if (n === 0) {\n        return 1;\n    } else if (n === 1) {\n        return 2;\n    }\n\n    if (iter < n - 1) {\n        const newValue = value + prev;\n        return fibonacci(n, iter + 1, newValue, value);\n    }\n\n    return value;\n};\n`}</code></pre>\n    <p>{`Recursive solution two:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fibonacci = n => {\n  if (n < 2) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n`}</code></pre>\n    <p>{`To get the complexity of the Fibonacci sequence, we need to think about how all the totals come together for the return calls.`}</p>\n    <p><img alt=\"Fibonacci tree\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550011633/developer-notes/Screen_Shot_2019-02-13_at_9.46.05_am.png\" /></p>\n    <p>{`We don't care of fib(0) since it comes back with zero.`}</p>\n    <p><img alt=\"Remove fib(0)\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550011724/developer-notes/Screen_Shot_2019-02-13_at_9.48.20_am.png\" /></p>\n    <p>{`Therefore for us, we can total calls of `}<inlineCode parentName=\"p\">{`fib(1)`}</inlineCode>{` and that is how we see that we get 5 for `}<inlineCode parentName=\"p\">{`fib(4)`}</inlineCode>{`.`}</p>\n    <p>{`The time complexity is O(2^n).`}</p>\n    <h2 {...{\n      \"id\": \"memoization\"\n    }}>{`Memoization`}</h2>\n    <p>{`Here are some of the performance characteristics of recursion vs quadratic. `}</p>\n    <p>{`For the recusive function, if we saw the tree that represents all the calls, you will see quickly that each iteration requires two more calls until we reach `}<inlineCode parentName=\"p\">{`fib(1)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fib(0)`}</inlineCode>{`.`}</p>\n    <p>{`Given the number of operations increases exponentially, we then know that it becomes `}<inlineCode parentName=\"p\">{`O(2^n)`}</inlineCode>{`. This is a massive no no.`}</p>\n    <p>{`With the first iterative solutin, we will get linear runtime. `}</p>\n    <p>{`What the interviewer wants to hear for the recursive answer is that we are wasting resources by recalling the same functions over and over (think of how often `}<inlineCode parentName=\"p\">{`fib(3)`}</inlineCode>{` might be called lower in the recursion tree when running `}<inlineCode parentName=\"p\">{`fib(6)`}</inlineCode>{`).`}</p>\n    <p>{`What they want to here is `}<inlineCode parentName=\"p\">{`memoization`}</inlineCode>{` - store the arguments of each function call along with the result. If the function is called again with the same arguments, return the precomputed results, rather than running the function again. `}</p>\n    <p>{`Using this will dramatically improve runtime.`}</p>\n    <h3 {...{\n      \"id\": \"implementing-memoization\"\n    }}>{`Implementing memoization`}</h3>\n    <p>{`Recursive solution with memoization:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const memoize(fn) {\n  const cache = {};\n  return function(...args) {\n    if (cache[args]) {\n      return cache[args];\n    }\n\n    // NOTE: apply is integral - check MDN if you don't know how it works \n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n    const result = fn.apply(this, args);\n    cache[args] = result;\n\n    return result;\n  };\n}\n\nconst slowFib = n => {\n  if (n < 2) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst fibonacci = memoize(slowFib);\n// fib = memoize(fib); // could also do this if we rename slowFib => fib\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"whats-a-data-structure\"\n    }}>{`What's a data structure?`}</h2>\n    <p>{`Data structures are all about runtime complexity:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Ways of organizing information with optimal 'runtime complexity' for adding or removing records.`}</li>\n      <li parentName=\"ul\">{`Javascript natively implements several data structures. You will still be asked about 'inferior' data structures.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"queueing\"\n    }}>{`Queueing`}</h2>\n    <p>{`Enqueing: push to back, dequeueing: pop from top.`}</p>\n    <p>{`Implementing a queue in JS:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Queue`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array equivalent`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Add to queue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array.unshift();`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Remove from queue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array.pop();`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`So we could handicap an array. Why would we do that? Just to basically help hide some of the array functionality to lock it down.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export default class Queue {\n  constructor() {\n    this.data = [];\n  }\n\n  add(record) {\n    this.data.unshift(record);\n  }\n\n  remove() {\n    return this.data.pop();\n  }\n}\n\n// another file \nimport Queue from 'path/to/file';\nconst q = new Queue();\n\nq.add({foo: 'bar'});\nconst nextInQ = q.remove();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"weave\"\n    }}>{`Weave`}</h2>\n    <p>{`Weave receives two queues as arguments and combines the contents of each into a new, third queue. The third queue should contain the `}<inlineCode parentName=\"p\">{`alterating`}</inlineCode>{` content of the two queues. The function should handle queues of different lengths without inserting `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` into the new one.`}</p>\n    <p>{`Image you have queue one `}<inlineCode parentName=\"p\">{`[1,2,3]`}</inlineCode>{` and queue two `}<inlineCode parentName=\"p\">{`'hello', 'world', '!`}</inlineCode>{` then we want to have `}<inlineCode parentName=\"p\">{`[1, 'hello', 2, 'world', 3, '!']`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// first, update queue\nexport default class Queue {\n  constructor() {\n    this.data = [];\n  }\n\n  add(record) {\n    this.data.unshift(record);\n  }\n\n  remove() {\n    return this.data.pop();\n  }\n\n  peek() {\n    return this.data[this.data.length - 1];\n  }\n}\n\nimport Queue from 'path/to/file';\n// using weave\nfunction weave(srcOne, srcTwo) {\n  const q = new Queue();\n}\n\nmodule.exports = weave;\n`}</code></pre>\n    <p>{`Assuming we have that queue class, one implementation is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const runWeave = (qOne, qTwo) => {\n    const weave = new Queue();\n\n    while (qOne.peek() || qTwo.peek()) {\n        if (qOne.peek()) {\n            weave.add(qOne.remove());\n        }\n\n        if (qTwo.peek()) {\n            weave.add(qTwo.remove());\n        }\n    }\n\n    return weave;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stacks\"\n    }}>{`Stacks`}</h2>\n    <p>{`Stack is like a push pop implementation of records. It is `}<inlineCode parentName=\"p\">{`First in, Last out`}</inlineCode>{`.`}</p>\n    <p><img alt=\"Stack implemntation\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550020065/developer-notes/Screen_Shot_2019-02-13_at_12.07.28_pm.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Stack {\n  constructor() {\n    this.data = [];\n  }\n\n  push(record) {\n    this.data.push(record);\n  }\n\n  pop() {\n    return this.data.pop();\n  }\n\n  peek() {\n    return this.data[this.data.length - 1];\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"queue-from-stacks\"\n    }}>{`Queue from Stacks`}</h2>\n    <p>{`Using two stacks, can we emulate a queue?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Stack = require('stack');\nconst Queue = require('queue');\n\nconst s1 = new Stack();\nconst s2 = new Stack();\n\nconst q = new Queue();\n\nconst base = ['green', 'blue', 'red'];\n// start with ['green', 'blue', 'red']\n// act as if we were queueing to get green out first\nwhile (base.length > 0) {\n  s1.push(base.unshift());\n}\n\nwhile (s1.peek()) {\n  s2.push(s1.pop());\n}\n\n// now to act as if it is FIFO\ns2.pop(); // gets out green\n`}</code></pre>\n    <p>{`Instead of just emulating, if we create a new queue:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Queue {\n  constructor() {\n    this.first = new Stack();\n    this.second = new Stack();\n\n    add(record) {\n      this.first.push(record);\n    }\n\n    remove() {\n      while (this.first.peek()) {\n        this.second.push(this.first.pop());\n      }\n      const record = this.second.pop();\n\n      while (this.second.peek()) {\n        this.first.push(this.second.pop());\n      }\n\n      return record;\n    }\n\n    peek() {\n      while (this.first.peek()) {\n        this.second.push(this.first.pop());\n      }\n\n      const record = this.second.peek();\n\n      while (this.second.peek()) {\n        this.first.push(this.second.pop());\n      }\n\n      return record;\n    }\n  }\n}\n`}</code></pre>\n    <p>{`To clarify with the above challenge, it's to go A => StackA => StackB and back treating both the stacks as a queue.`}</p>\n    <h2 {...{\n      \"id\": \"linked-list\"\n    }}>{`Linked List`}</h2>\n    <p><img alt=\"Basic singularly linked list\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550023986/developer-notes/Screen_Shot_2019-02-13_at_1.12.51_pm.png\" /></p>\n    <p>{`A node generally contains data and a reference to the next node and the linked list is the collections of nodes linked to each other.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const nodeOne = {\n  data: 123\n}\n\nconst nodeTwo = {\n  data: 456\n}\n\nnodeOne.next = nodeTwo;\n`}</code></pre>\n    <p>{`We can build a `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`LinkedList`}</inlineCode>{` class to help us out here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n    constructor(data, next = null) {\n        this.data = data;\n        this.next = next;\n    }\n}\n\nclass LinkedList {\n    constructor(head = null) {\n        this.head = head;\n    }\n\n    insertFirst(data) {\n        const node = new Node(data, this.head);\n        this.head = node;\n    }\n\n    /**\n     * Return size of LinkedList\n     *\n     * @returns {Number} Size of list\n     * @memberof LinkedList\n     */\n    size() {\n        if (this.head) {\n            // traverse the head\n            let node = this.head;\n            let size = 1;\n            while (node.next) {\n                node = node.next;\n                size++;\n            }\n\n            return size;\n        }\n\n        return 0;\n    }\n\n    getFirst() {\n        return this.head;\n    }\n\n    getLast() {\n        let node = this.head;\n        while (node.next) {\n            node = node.next;\n        }\n\n        return node;\n    }\n\n    /**\n     * Note, we might not have to iterate through all the null values.\n     *\n     * @memberof LinkedList\n     */\n    clear() {\n        if (this.head.next) {\n            let node = this.head.next;\n            while (node.next) {\n                let temp = node.next;\n                node = null;\n                node = temp;\n            }\n        }\n\n        this.head = null;\n    }\n\n    removeFirst() {\n        if (!this.head) {\n            return;\n        }\n\n        this.head = this.head.next;\n    }\n\n    removeLast() {\n        if (!this.head) {\n            return;\n        }\n\n        if (!this.head.next) {\n            this.head = null\n            return;\n        }\n\n        let node = this.head.next;\n        let prev = this.head;\n\n        while (node.next) {\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = null;\n    }\n\n    insertLast(data) {\n        // this could also be done using this.getLast()\n        const n = new Node(data);\n\n        if (!this.head) {\n            this.head = n;\n            return;\n        }\n\n        if (!this.head.next) {\n            this.head.next = n;\n            return;\n        }\n\n        let node = this.head.next;\n\n        while (node.next) {\n            node = node.next;\n        }\n\n        node.next = n;\n    }\n\n    /**\n     * Get node at a particular index with head equating to 0.\n     *\n     * @param {*} index Index to fetch at.\n     * @memberof LinkedList\n     */\n    getAt(index) {\n        if (!this.head) {\n            return null;\n        }\n\n        let count = 0;\n        let node = this.head;\n        while (count < index) {\n            if (!node.next) {\n                return null;\n            }\n\n            count++;\n            node = node.next;\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove at a particular index.\n     *\n     * @param {*} index index to remove.\n     * @memberof LinkedList\n     */\n    removeAt(index) {\n        if (!this.head) {\n            return;\n        } else if (index === 0 && this.head.next) {\n            let node = this.head.next;\n            this.head = node;\n        }\n\n        let prev = this.head;\n        let node = this.head.next;\n        let counter = 0;\n\n        while (counter < index) {\n            if (!node.next) {\n                return;\n            }\n\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = node.next;\n    }\n\n    /**\n     * Insert node at a particular index. Ensure it can handle cases where there is a next or no next.\n     * Insert at end if index is out of bounds.\n     *\n     * @param {*} index Index to insert the object at.\n     * @memberof LinkedList\n     */\n    insertAt(data, index) {\n        if (!this.head) {\n            this.head = new Node(data);\n        }\n\n        if (index === 0) {\n            this.head = new Node(data, this.head);\n        }\n\n        let counter = 0;\n        let prev = this.head;\n        let node = this.head.next;\n        while (counter < index) {\n            if (!node.next) {\n                node.next = new Node(data);\n            }\n\n            prev = node;\n            node = node.next;\n        }\n\n        prev.next = new Node(data, node);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-notes-on-generators\"\n    }}>{`Basic notes on generators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function *numbers() {\n  yield 1;\n  yield 2;\n  yield* moreNumbers(); // I will pass another generator, next should continue to receive yields from this function\n  yield 6;\n  yield 7;\n}\n\nfunction *moreNumbers() {\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\nconst generator = numbers();\n\nconst values = [];\nfor (let value of generator) {\n  values.push(value);\n}\n\nconsole.log(values); // [1,2,3,4,5,6,7]\n`}</code></pre>\n    <p>{`A practical example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Tree {\n  constructor(value = null, children = []) {\n    this.value = value;\n    this.children = children;\n  }\n\n  *printValues() {\n    yield this.value;\n    for (let child of this.children) {\n      yield* child.printValues();\n    }\n  }\n}\n\nconst tree = new Tree(1, [\n  new Tree(2, [new Tree(4)]),\n  new Tree(3)\n]);\n\n// Go in a Depth First Search way to print out the tree\nconst values = [];\nfor (let value of tree.printValues()) {\n  values.push(value);\n}\n\nconsole.log(values); // [1,2,4,3]\n`}</code></pre>\n    <p>{`In practise with linked lists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class LinkedList {\n    constructor(head = null) {\n        this.head = head;\n    }\n\n    // ... other methods\n\n    /**\n     * This will allow us to use a for/of loop with our linked list.\n     *\n     * @memberof LinkedList\n     */ \n    * [Symbol.iterator]() {\n        let node = this.head;\n        while (node) {\n            yield node;\n            node = node.next;\n        }\n    }\n}\n\n// in use assuming we have a LinkedList object list\nfor (let node of list) {\n  console.log(node.data);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"midpoint-of-a-linked-list\"\n    }}>{`Midpoint of a Linked List`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Get list length / 2 but fetch the roof.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const midpoint = list => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (fast.next && fast.next.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n\n  return slow;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"detecting-linked-list-loops\"\n    }}>{`Detecting Linked List Loops`}</h2>\n    <p>{`How can you detect if a linked list has a circular reference?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const circular = list => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (fast.next && fast.next.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n\n    if (slow === fast) {\n      return true;\n    }\n  }\n\n  return false;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"linked-list-distance-n-from-last\"\n    }}>{`Linked List distance n from last`}</h2>\n    <p>{`Given linked list and int n, return el `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` spaces from the last node in the list. Do not call the size method. Always assume that nwill be less than the length of the list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fromLast = (list, n) => {\n  let slow = list.getFirst();\n  let fast = list.getFirst();\n\n  while (n > 0) {\n    fast = fast.next;\n    n--;\n  }\n\n  while (fast.next && fast.next) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"trees-overview\"\n    }}>{`Trees Overview`}</h2>\n    <p>{`Two basics ways we will go through the trees. Depth First Search and Breadth First Search.`}</p>\n    <p>{`A node class should have a data property, add method and remove method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n  constructor(data) {\n    this.data = data;\n    this.children = [];\n  }\n\n  /**\n   * Given some data, create a new node and add it to the current node's 'children' array\n   */\n  add(data) {\n    this.children.push(new Node(data));\n  }\n\n  /**\n   * Given some data, look at each child of the current node and remove any node with data === data\n   */\n  remove(data) {\n    this.children = this.children.filter(node => node.data !== data);\n  }\n}\n`}</code></pre>\n    <p>{`For the tree class, we want a constructor with root set to null.`}</p>\n    <p>{`We then want a `}<inlineCode parentName=\"p\">{`traverseBFS`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`traverseDFS`}</inlineCode>{` method.`}</p>\n    <p>{`Note: Practical reasoning for BFS vs DFS. `}</p>\n    <p>{`BFS example includes a tree of the position hierarchy of a company and wanting to print a tree of positions given importance. `}</p>\n    <p>{`DFS example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Tree {\n  constructor() {\n    this.root = null;\n  }\n  \n  /**\n   * (node) => // do something with node\n   */\n  traverseBFS(fn) {\n    // start at root\n    // check if children\n    // if children, iterate through and recall function \n    const arr = [this.root];\n    while (arr.length) {\n      const node = arr.shift();\n      arr.push(...node.children);\n      fn(node);\n    }\n  }\n\n  traverseDFS(fn) {\n    // start with root\n    // check if children\n    // if children, iterate through in depth fashion\n    const arr = [this.root];\n    while (arr.length) {\n      const node = arr.shift();\n      arr.unshift(...node.children);\n      fn(node);\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"level-width\"\n    }}>{`Level width`}</h2>\n    <p>{`Given the root node of a tree, return an array where each element is the width of the tree at each level.`}</p>\n    <p>{`What we need to do is use a \"stopper\" variable to help us define when we hit the end of level.`}</p>\n    <p><img alt=\"Approach to level width\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550103801/developer-notes/Screen_Shot_2019-02-14_at_11.22.10_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// given a node \nlet node = new Node(); // assume initiated with a bunch of children\n\nconst levelWidth = node => {\n  const counters = [0];\n  const arr = [node, 's'];\n  while (arr.length > 1) {\n    const node = arr.shift();\n    if (node === 's') {\n      arr.push('s');\n      counters.push(0);\n    } else if (arr.length) {\n      counters[counters.length - 1]++;\n      arr.push(...node.children);\n    }\n  } \n\n  return counters;\n}\n\nlevelWidth(node.root);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"binary-search-trees\"\n    }}>{`Binary Search Trees`}</h2>\n    <p>{`Binary trees can only have at most 2 children.`}</p>\n    <p>{`Because of the restrictions of `}<inlineCode parentName=\"p\">{`binary search trees`}</inlineCode>{`, we generally set them up so that the node has properties `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property that is greater than `}<inlineCode parentName=\"p\">{`left.value`}</inlineCode>{` but smaller than `}<inlineCode parentName=\"p\">{`right.value`}</inlineCode>{`.`}</p>\n    <p>{`Creating a BST:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Node {\n  constructor(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(data) {\n    if (data < this.data && this.left) {\n      this.left.insert(data);\n    } else if (data < this.data && !this.left) {\n      this.left = new Node(data);\n    } else if (data > this.data && this.right) {\n      this.right.insert(data);\n    } else if (data > this.data && !this.right) {\n      this.right = new Node(data);\n    }\n  }\n\n  // Find node with data value\n  contains(data) {\n    if (this.data === data) {\n      return this;\n    } else if (data < this.data) {\n      return this.left.contains(data);\n    } else if (data > this.data && this.right) {\n      return this.right.contains(data);\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-a-bst\"\n    }}>{`Validating a BST`}</h2>\n    <p>{`To handle this, we basically want to keep a `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` value to ensure that the thresholds are kept correctly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validation = (node, min = null, max = null) => {\n  if (max !== null && node.data > max) {\n    return false;\n  } else if (min !== null && node.data < min) {\n    return false;\n  }\n\n  if (node.left && !validate(node.left, min, node.data)) {\n    return false;\n  }\n\n  if (node.right && !validate(node.right, node.data, max)) {\n    return false;\n  }\n\n  return true;\n} \n\nvalidation(rootNode);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"eventing-system\"\n    }}>{`Eventing system`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Events {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName].push(callback);\n    } else {\n      this.events[eventName] = [callback];\n    }\n  }\n\n  trigger(eventName) {\n    if (this.events[eventName]) {\n      for (let fn of this.events[eventName]) {\n        fn();\n      }\n    }\n  }\n\n  off(eventName) {\n    delete this.events[eventName];\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sort-algos-and-complexities\"\n    }}>{`Sort Algos and Complexities`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Worst case runtime`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Difficulty`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BubbleSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`easiest`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SelectionSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n^2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`easier`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`MergeSort`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n*log(n)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`medium`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"bubble-sort\"\n    }}>{`Bubble sort`}</h3>\n    <p>{`Take example `}<inlineCode parentName=\"p\">{`[10,-30,97,0,5]`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const arr = [10,-30,97,0,5];\n\nconst bubbleSort = arr => {\n  for (let i=0; i < arr.length; i++) {\n    for (let j=0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j+1]) {\n        let temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\nconst bubbleSorted = bubbleSort(arr);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection-sort\"\n    }}>{`Selection Sort`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const selectionSort = arr => { \n  for (let i=0; i < arr.length; i++) {\n    let indexOfMin = i;\n    for (let j=i+1; j < arr.length; j++) {\n      if (arr[j] > arr[indexOfMin]) {\n        indexOfMin = j;\n      }\n    }\n\n    if (indexOfMin !== i) {\n        let temp = arr[j];\n        arr[j] = arr[indexOfMin];\n        arr[indexOfMin] = temp;\n    }\n  }\n  return arr;\n}\n\nconst selectionSorted = selectionSort(arr);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"merge-sort\"\n    }}>{`Merge Sort`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Used to break down array recursively\nconst mergeSort = arr => {\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const center = Math.floor(arr.length / 2);\n  const left = arr.slice(0, center);\n  const right = arr.slice(center);\n\n  return merge (\n    mergeSort(left);\n    mergeSort(right);\n  );\n}\n\n// Used to build the array back together\nconst merge = (left, right) => {\n  // create results array \n  let results = [];\n  // while elements in BOTH arrays\n  while (left.length && right.length) {\n    // compare first left < first right \n    if (left[0] < right[0]) {\n      // shift el into res arr\n      results.push(left.shift());\n    } else {\n      results.push(right.shift());\n    }\n  }\n\n  // take everything from the arr that has stuff in it and put it in results\n  return [...results, ...left, ...right];\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}