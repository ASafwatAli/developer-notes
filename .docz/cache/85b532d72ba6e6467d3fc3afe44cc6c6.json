{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/ANZ-Algo.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/ANZ-Algo.md","mtime":1581330839691},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/ANZ-Algo.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,EAIL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,y/EAAL,CAPK,CAAP;AA+GD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BA9HMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"anz-algo\"\n    }}>{`ANZ Algo`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/*\n * Complete the 'frequencyCount' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING s as parameter.\n */\n\nfunction frequencyCount(s) {\n  // Write your code here\n  // set final hashmap\n  let finalArray = new Array(26).fill(0);\n  // simple alphabet for final arr\n  // let alpha = 'abcdefghijklmnopqrstuvwxyz'\n\n  // iterate through encoded string and regex test\n  // the follow letters to understand what encoding is\n  // but be careful not to follow through with full length\n  // based on encoding rules\n\n  while (s.length > 0) {\n    let curSlice = '';\n    let encoding = 0;\n\n    // check encoding type\n    if (\n      s.length > 2 &&\n      s[0] === '2' &&\n      /[0123456]/gi.test(s[1]) &&\n      /&/gi.test(s[2])\n    ) {\n      // check amp option\n      curSlice = \\`\\${s[0]}\\${s[1]}\\${s[2]}\\`;\n      s = s.slice(3);\n      encoding = 2;\n    } else if (s.length > 1 && /#/gi.test(s[1])) {\n      // handle hash option\n      curSlice = \\`\\${s[0]}\\${s[1]}\\`;\n      s = s.slice(2);\n      encoding = 1;\n    } else if (/[0-9]/gi.test(s[0])) {\n      // check base number\n      curSlice = s[0];\n      s = s.slice(1);\n    } else {\n      // log for debugging\n      console.log('This case should not happen', s[0]);\n      s.slice(1);\n    }\n\n    // check if repeated\n    let multi = '';\n    if (s[0] === '[') {\n      // base remove [\n      s = s.slice(1);\n      // find matching ]\n      let found = false;\n      let i = 1;\n      while (!found) {\n        if (s.length === 0) {\n          // safety\n          found = true;\n        } else if (s[0] !== ']') {\n          // keep adding numbers until ] found\n          multi += s[0];\n          s = s.slice(1);\n        } else {\n          found = true;\n          s = s.slice(1);\n        }\n      }\n    }\n\n    // handle multi case\n    if (multi !== '') {\n      multi = parseInt(multi);\n    } else {\n      multi = 1;\n    }\n\n    // find letter and push to map\n    switch (encoding) {\n      case 0:\n        const baseIndex = parseInt(curSlice);\n        finalArray[baseIndex - 1] += multi;\n        break;\n      case 1:\n        const hashIndex = parseInt(curSlice[0]) + 10;\n        finalArray[hashIndex - 1] += multi;\n        break;\n      case 2:\n        const ampIndex = parseInt(\\`\\${curSlice[0]}\\${curSlice[1]}\\`);\n        finalArray[ampIndex - 1] += multi;\n        break;\n      default:\n        console.error('Encoder failed to handle cases');\n    }\n  }\n\n  return finalArray;\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}