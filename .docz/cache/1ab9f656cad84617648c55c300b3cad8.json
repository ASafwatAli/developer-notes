{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Testing/UI-Testing-Web.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Testing/UI-Testing-Web.md","mtime":1562563032097},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Testing/UI-Testing-Web.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ui-testing-web\"\n    }}>{`UI Testing Web`}</h1>\n    <p>{`For web, we can test UI elements by making the most of Puppeteer and both the Emitter and Recorder JS packages from Kratos and the `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` js-controller package from Kratos.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kratos install js-controllers json-server\nkratos install js Emitter\nkratos install js Recorder\n# install puppeteer, mocha, json-server etc if required - should be bootstrappable\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-the-tests\"\n    }}>{`Setting up for the tests`}</h2>\n    <p>{`Within the component module you want to target, create a `}<inlineCode parentName=\"p\">{`.puppeteer.js`}</inlineCode>{` file and a `}<inlineCode parentName=\"p\">{`db.json`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"the-component-file\"\n    }}>{`The component file`}</h2>\n    <p>{`We use the `}<inlineCode parentName=\"p\">{`Emitter`}</inlineCode>{` module to emit events to our file, which in turn will - if config is in `}<inlineCode parentName=\"p\">{`debug`}</inlineCode>{` mode, pass on to JSON Server to generate our event emission file.`}</p>\n    <p>{`The component could look like this for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport Emitter from 'common/Emitter';\nimport Config from 'src/app.json';\nimport Waypoint from 'react-waypoint';\n\n/**\n * Render the Component component\n *\n * @class Component\n * @extends {Component}\n */\nclass Component extends Component {\n  /**\n   * Handle primary button click event.\n   *\n   * @memberof Component\n   */\n  handlePrimaryClick = (e) => {\n    Emitter.emit('event', {\n      event: 'Component.handlePrimaryClick',\n      e: e.target\n    });\n\n    if (Config.debug) {\n      e.preventDefault();\n      return;\n    }\n\n    const { router } = this.props;\n    router.push(Config.baseUrl + '/test');\n  };\n\n  /**\n   * Handle component enter event.\n   *\n   * @memberof Component\n   */\n  handleWaypointEnter = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointEnter' });\n  };\n\n  /**\n   * Handle component exit event.\n   *\n   * @memberof Component\n   */\n  handleWaypointExit = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointExit' });\n  };\n\n  /**\n   * Render Component component\n   * @memberof Component\n   * @var {function} render Render Component component\n   * @returns {Object} component\n   */\n  render() {\n    const {\n      title,\n      subtitle,\n      buttonPrimary,\n      buttonSecondary,\n      imageMain\n    } = this.props.copy;\n\n    return (\n      <Waypoint\n        onEnter={this.handleWaypointEnter}\n        onLeave={this.handleWaypointExit}\n      >\n        <div className=\"component\">\n          <div className=\"container content\">\n            <button\n              onClick={this.handlePrimaryClick}\n              className=\"button primary f-primary cta animate\"\n            >\n              {buttonPrimary}\n            </button>\n          </div>\n        </div>\n      </Waypoint>\n    );\n  }\n}\n\nexport default Component;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"recording-the-events-manually-on-the-web\"\n    }}>{`Recording the events manually on the web`}</h2>\n    <p>{`Use the Puppeteer recorder to do a runthrough of the events you want to cover. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/checkly/puppeteer-recorder\"\n      }}>{`Check here`}</a>{` for more info.`}</p>\n    <p>{`After running through with the recorder, we should be able to modify the Puppeteer template. The end result could look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * ComponentALLandingOne tests\n */\nconst puppeteer = require('puppeteer');\nconst json = require('./db.json');\nconst fs = require('fs-extra');\nconst cwd = process.cwd();\nconst server = require(cwd + '/controllers/json-server');\nconst wait = require('waait');\nconst Recorder = require(cwd + '/src/common/Recorder').default;\nlet dbJson;\nserver.listen(4444, () => console.log('JSON DB server started'));\n\ndescribe('ComponentALLandingFive UI functionality', () => {\n  describe('ComponentALLandingFive events', () => {\n    beforeEach(() => {\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n      dbJson.events.map((e) => Recorder.delete(e.id));\n    });\n\n    it('Events emitted equals prerecording', async () => {\n      const browser = await puppeteer.launch();\n      const page = await browser.newPage();\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n      await page.waitForSelector(\n        '.grid > .item > .flex > .block-info > .primary'\n      );\n      await page.click('.grid > .item > .flex > .block-info > .primary');\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n\n      await browser.close();\n\n      await wait(300);\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n\n      expect(dbJson).to.deep.equal(json);\n    });\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"init-the-component-dbjson-file\"\n    }}>{`Init the component db.json file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"events\": []\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"first-run-through-of-the-file\"\n    }}>{`First run through of the file`}</h2>\n    <p>{`If we decide to run that Puppeteer test`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}