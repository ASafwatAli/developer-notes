{"remainingRequest":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/okeeffe_d/Business/Documentation/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Testing-Cheat-Sheet.md","dependencies":[{"path":"/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Testing-Cheat-Sheet.md","mtime":1548209344343},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/cache-loader/dist/cjs.js","mtime":1548134640245},{"path":"/Users/okeeffe_d/Business/Documentation/node_modules/babel-loader/lib/index.js","mtime":1548134640227}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"testing\"}},\"Testing\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The test files are stored in the test folders and require the dev dependencies \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"sinonjs, jsdom, mocha, chai\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Run \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"npm test\"),\" to view the tests files that are written in that folder.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"mocha and chai\")),React.createElement(MDXTag,{name:\"p\",components:components},\"These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"jsdom\"),\" library and import \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"jquery\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Below is a small example of a test set up.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-javascript\"}},\"import jsdom from 'jsdom-global';\\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\\n\\nimport ModuleToTest from 'path/to/module'l\\n\\n// require sinon/chai\\nconst sinon = require('sinon');\\nconst expect = require('chai').expect;\\n\\n// Test suite\\ndescribe('These tests are supposed to test some functionality', () => {\\n\\n    let $;\\n    let ageGateFilters;\\n    jsdom();\\n\\n    // this function will run before every Test Spec\\n    before(function () {\\n        $ = jQuery;\\n        const params = ['param1', 'param2', 'param3']\\n\\n        // create instance\\n        const moduleToTest = new ModuleToTest(...params);\\n    });\\n\\n    // Test Spec (unit test)\\n    it('This test should return ok', () => {\\n        expect(true).to.be.ok;  // returns ok\\n    });\\n\\n    // Test Spec (unit test)\\n    it('This test should return true for the ModuleToTest function', () => {\\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\\n    });\\n\\n});\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"sinon.js\")),React.createElement(MDXTag,{name:\"p\",components:components},\"This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For now, I will show an example of a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"spy\"),\" and a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"stub\"),\" (as this may the most relevant): \"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"For the Spy\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// in module Example\\n\\nexport default class Example {\\n    \\n    callout() {\\n        let a = 1;\\n        let b = 2;\\n\\n        return target(a,b);\\n    }\\n\\n}\\n\\n// in a test file\\n\\nimport Example from 'Example';\\n\\n// Test suite\\ndescribe('A test suite using sinon', () => {\\n\\n    // this function will run before every Test Spec\\n    before(function () {\\n        $ = jQuery;\\n        const params = ['param1', 'param2', 'param3']\\n\\n        // create instance\\n        const example = new Example(...params);\\n    });\\n\\n    // Test spec (unit test)\\n    it('Should return that the async func was called', () => {\\n        \\n        let targetSpy = sinon.spy(example, 'target');\\n\\n        // Now, any time we call the function, the spy logs information about it\\n        example.callout();\\n\\n        assert(targetSpy.calledOnce); // returns true\\n    });\\n});\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"For the Stub\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// in module Example\\n\\nexport default class Example {\\n    \\n    callout(param, callback) {\\n        $.ajax({\\n            // whatever it normally is\\n        }, callback);\\n    }\\n\\n}\\n\\n// in a test file\\n\\nimport Example from 'Example';\\n\\n// Test suite\\ndescribe('A test suite using sinon', () => {\\n\\n    // this function will run before every Test Spec\\n    before(function () {\\n        $ = jQuery;\\n        const params = ['param1', 'param2', 'param3']\\n\\n        // create instance\\n        const example = new Example(...params);\\n    });\\n\\n    // Test spec (unit test)\\n    it('Should call callback after saving', () => {\\n        \\n        //We'll stub $.post so a request is not sent\\n        const post = sinon.stub($, 'ajax');\\n        post.yields();\\n\\n        //We can use a spy as the callback so it's easy to verify\\n        var callback = sinon.spy();\\n\\n        example.callout(param, callback);\\n\\n        post.restore();\\n        sinon.assert.calledOnce(callback); // returns true\\n    });\\n});\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"jsdom\")),React.createElement(MDXTag,{name:\"p\",components:components},\"jsdom is a library that allows you to write a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"innerHTML\"),\" var for the test to use if you want to test out the jQuery values for a test.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"For an example, checkout yt \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"test/agegate_test.js\"),\".\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/okeeffe_d/Business/Documentation/manual/JavaScript/Testing-Cheat-Sheet.md"],"names":["React","MDXTag","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"testing\"}}>{`Testing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The test files are stored in the test folders and require the dev dependencies `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sinonjs, jsdom, mocha, chai`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Run `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`npm test`}</MDXTag>{` to view the tests files that are written in that folder.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`mocha and chai`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jsdom`}</MDXTag>{` library and import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jquery`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Below is a small example of a test set up.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n    let \\$;\n    let ageGateFilters;\n    jsdom();\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const moduleToTest = new ModuleToTest(...params);\n    });\n\n    // Test Spec (unit test)\n    it('This test should return ok', () => {\n        expect(true).to.be.ok;  // returns ok\n    });\n\n    // Test Spec (unit test)\n    it('This test should return true for the ModuleToTest function', () => {\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\n    });\n\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`sinon.js`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For now, I will show an example of a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`spy`}</MDXTag>{` and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stub`}</MDXTag>{` (as this may the most relevant): `}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`For the Spy`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout() {\n        let a = 1;\n        let b = 2;\n\n        return target(a,b);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should return that the async func was called', () => {\n        \n        let targetSpy = sinon.spy(example, 'target');\n\n        // Now, any time we call the function, the spy logs information about it\n        example.callout();\n\n        assert(targetSpy.calledOnce); // returns true\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`For the Stub`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout(param, callback) {\n        \\$.ajax({\n            // whatever it normally is\n        }, callback);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should call callback after saving', () => {\n        \n        //We'll stub \\$.post so a request is not sent\n        const post = sinon.stub(\\$, 'ajax');\n        post.yields();\n\n        //We can use a spy as the callback so it's easy to verify\n        var callback = sinon.spy();\n\n        example.callout(param, callback);\n\n        post.restore();\n        sinon.assert.calledOnce(callback); // returns true\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`jsdom`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`jsdom is a library that allows you to write a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`innerHTML`}</MDXTag>{` var for the test to use if you want to test out the jQuery values for a test.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For an example, checkout yt `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`test/agegate_test.js`}</MDXTag>{`.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}