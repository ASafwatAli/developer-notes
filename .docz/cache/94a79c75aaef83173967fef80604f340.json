{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Books/Mastering-Logical-Fallacies.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Books/Mastering-Logical-Fallacies.md","mtime":1562563032014},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1581496618588},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1578565694890},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1581496618277},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1580255490569}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Books/Mastering-Logical-Fallacies.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"mastering-logical-fallacies---michael-withey\"\n    }}>{`Mastering Logical Fallacies - Michael Withey`}</h1>\n    <h2 {...{\n      \"id\": \"ad-hominems\"\n    }}>{`Ad Hominems`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Abusive - claim someone to be a bigot/racist etc to discredit their argument`}</li>\n      <li parentName=\"ol\">{`Circumstantial - claim a circumstance to discredit their argument ie discrediting someone because \"they are just saying that to get permission\"`}</li>\n      <li parentName=\"ol\">{`Guilt by association - discredit an argument due to affiliation`}</li>\n      <li parentName=\"ol\">{`Tu quoque - discrediting an argument becaues the proponent engages in such an act. Ie someone might be a hypocrite for smoking and saying it is bad, but their argument is still valid.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"other-fallacies\"\n    }}>{`Other fallacies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Affirming the consequent: \"If I had a deadly disease, I would have a cough. I have a cough, therefore I have a deadly disease.\"`}</li>\n      <li parentName=\"ul\">{`Ambiguity: \"A is B, A is C, so B is C.\"`}</li>\n      <li parentName=\"ul\">{`Anonymous Authority: confirmation by someone who may not be an expert.`}</li>\n      <li parentName=\"ul\">{`Appeal to anger: appeals to the anger of the audience`}</li>\n      <li parentName=\"ul\">{`Appeal to authority: does not offer direct evidence for argument P, but an appeal to the testimony of an authority.`}</li>\n      <li parentName=\"ul\">{`Appeal to celebrity`}</li>\n      <li parentName=\"ul\">{`Appeal to common belief`}</li>\n      <li parentName=\"ul\">{`Appeal to desperation: demanding an action to be performed to resolve a situation, regardless of whether the proposed action will in fact resolve the situation`}</li>\n      <li parentName=\"ul\">{`Appeal to emotion: appeals to the emotions of the audience`}</li>\n      <li parentName=\"ul\">{`Appeal to faith`}</li>\n      <li parentName=\"ul\">{`Appeal to fear: playing off the audience's fear`}</li>\n      <li parentName=\"ul\">{`Appeal to heaven`}</li>\n      <li parentName=\"ul\">{`Appeal to the moon`}</li>\n      <li parentName=\"ul\">{`Appeal to nature: fallacy based on suggesting things are unnatural and therefore not valid`}</li>\n      <li parentName=\"ul\">{`Appeal to normality`}</li>\n      <li parentName=\"ul\">{`Appeal to pity`}</li>\n      <li parentName=\"ul\">{`Appeal to possibility`}</li>\n      <li parentName=\"ul\">{`Appeal to ridicule`}</li>\n      <li parentName=\"ul\">{`Appeal to tradition: claiming reasoning through traditional means`}</li>\n      <li parentName=\"ul\">{`Argument from ignorance: The argument and assumption that something is false due to a lack of evidence that it is true`}</li>\n      <li parentName=\"ul\">{`Base rate: information regarding probability is ignore when estimating how likely it is to occur in a particular case`}</li>\n      <li parentName=\"ul\">{`Begging the question: An argument based on the truth of its conclusion. \"People are always self-intested. Whenever speaking on welfare, they are for their own good. Hence, we see peope are always self-interested.`}</li>\n      <li parentName=\"ul\">{`Biased sample`}</li>\n      <li parentName=\"ul\">{`Blind authority: argument based on thing's like what a cult leader has suggested.`}</li>\n      <li parentName=\"ul\">{`Cherry-picking: Ignoring or choosing specific evidence to help the proponent's argument.`}</li>\n      <li parentName=\"ul\">{`Circular reasoning: arguing for a conclusion on the basic of a set of premises, where the truth of those premises assumes the truth of the conclusion.`}</li>\n      <li parentName=\"ul\">{`Complex question: Posing a question that contains a complex presupposition. While not stated, it is required for the question to make sense. Ie \"have you stopped beating your wife?\"`}</li>\n      <li parentName=\"ul\">{`Equivocation: think LOTR \"no man can kill me\", \"I am no man\".`}</li>\n      <li parentName=\"ul\">{`Fake precision: \"70% of stats you read in books are just made up by the author\"`}</li>\n      <li parentName=\"ul\">{`Fallacy of Composition`}</li>\n      <li parentName=\"ul\">{`Fallacy of Division`}</li>\n      <li parentName=\"ul\">{`False Analogy: A is C, B is C, A is P. Therefore B is P.`}</li>\n      <li parentName=\"ul\">{`False Dilemma: given that there is limited options, when in fact, there are more.`}</li>\n      <li parentName=\"ul\">{`Hasty Generalisation: A small sample has property X, therefore all have property X.`}</li>\n      <li parentName=\"ul\">{`Just Because: A propenent argues because it is his proposition.`}</li>\n      <li parentName=\"ul\">{`Lucid Fallacy: Argument based on circumstantial, specific parameters.`}</li>\n      <li parentName=\"ul\">{`Lying with Stats`}</li>\n      <li parentName=\"ul\">{`Magical Thinking: Debate based on the supernatural.`}</li>\n      <li parentName=\"ul\">{`Moralistic Fallcy. P ought to be the case, therefore P.`}</li>\n      <li parentName=\"ul\">{`Moving the Goalposts: Raising or lowering the standard of proof required for an argument after an argument has been provided.`}</li>\n      <li parentName=\"ul\">{`Multiple Comparisons Fallcy: Drawing significant statistical inferences from any positive or negative results gleaned from tests conduted on a multiplicity of groups or criteria.`}</li>\n      <li parentName=\"ul\">{`Naturalistic Fallacy: P is natural, therefore P ought to be done.`}</li>\n      <li parentName=\"ul\">{`Nirvana Fallacy: Something on the grounds that it does not resolve the problem completely.`}</li>\n      <li parentName=\"ul\">{`Non Sequitur: When one statement is presented as following from another, while it logically does not exist.`}</li>\n      <li parentName=\"ul\">{`Proving Nonexistence: Proof on that grounds that proving it's nonexistence cannot be proven.`}</li>\n      <li parentName=\"ul\">{`Red Herring: Attempting to derail an argument by bringing in considerations that are irrelevant or out-of-context.`}</li>\n      <li parentName=\"ul\">{`Reductio Ad Absurdum: Refuting an argument by drawing out allegedly absurd consequences from the argument.`}</li>\n      <li parentName=\"ul\">{`Reuctio Ad Hitlerum: Dismissing the opponent's grounds on the basis that an evil figure believed in it.`}</li>\n      <li parentName=\"ul\">{`Self-Sealing Argument: An argument presented in a way that is irrefutable.`}</li>\n      <li parentName=\"ul\">{`Shoehorning: When a contributor derails an argument by discussing his own favoured topic.`}</li>\n      <li parentName=\"ul\">{`Slippery Slope: Prediciting horrific consequences will follow seemingly innocuous action.`}</li>\n      <li parentName=\"ul\">{`Special Pleading: Establishing a general rule for the debate but pleading for an exception for a particular circumstance.`}</li>\n      <li parentName=\"ul\">{`Spiritual Fallacy: an argument based on \"enlightenment\"`}</li>\n      <li parentName=\"ul\">{`Straw Man Argument: Misrepresenting your opponent's argument, and taking this attack to refute your opponent's real position.`}</li>\n      <li parentName=\"ul\">{`Sunk Cost: A reluctance to let go of an initial investment, so you continue investing.`}</li>\n      <li parentName=\"ul\">{`Unfalsifiability: A substantive proposition expressed in such a way that it becomes, in principle, impossible to raise a counter-example to it.`}</li>\n      <li parentName=\"ul\">{`Use-Mention Error: Confusing the discussion of the word itself with discussig the concept the word denotes.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}