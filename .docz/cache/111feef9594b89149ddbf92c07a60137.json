{"remainingRequest":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Observer.md","dependencies":[{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Observer.md","mtime":1561002995091},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1561535530324},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1560300163820},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1561535530532},{"path":"/Users/okeeffe_d/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1548285283521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9va2VlZmZlX2QvUHJvamVjdC1JbXBvc3Rlci9kZXZlbG9wZXItbm90ZXMvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsvKiBAanN4IG1keCAqL2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7LyogQGpzeCBtZHggKi92YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17fTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsT2JqZWN0LmFzc2lnbih7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoib2JzZXJ2ZXIifSwiT2JzZXJ2ZXIiKSxtZHgoImgyIix7ImlkIjoiZXhhbXBsZSJ9LCJFeGFtcGxlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXR5cGVzY3JpcHQifSksImludGVyZmFjZSBPYnNlcnZlciB7XG4gIHVuaXF1ZUlEOiBzdHJpbmc7XG4gIHVwZGF0ZSgpOiB2b2lkO1xufVxuXG5jbGFzcyBDb25jcmV0ZU9ic2VydmVyIGltcGxlbWVudHMgT2JzZXJ2ZXIge1xuICBwdWJsaWMgdW5pcXVlSUQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IodW5pcXVlSUQ6IHN0cmluZykge1xuICAgIHRoaXMudW5pcXVlSUQgPSB1bmlxdWVJRDtcbiAgfVxuXG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhgJHt0aGlzLnVuaXF1ZUlEfSB1cGRhdGVzIHNvbWV0aGluZy4uLmApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRPYnNlcnZlcihvYnM6IE9ic2VydmVyW10sIHVuaXF1ZUlEOiBzdHJpbmcpIHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgY29uc3QgZXhpc3RlZCA9IG9icy5zb21lKChvYnNlcnZlciwgaWR4KSA9PiB7XG4gICAgaW5kZXggPSBpZHg7XG4gICAgcmV0dXJuIG9ic2VydmVyLnVuaXF1ZUlEID09PSB1bmlxdWVJRDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZXhpc3RlZCxcbiAgICBpbmRleFxuICB9O1xufVxuXG5jbGFzcyBTdWJqZWN0IHtcbiAgcHJpdmF0ZSBfb2JzZXJ2ZXJzOiBPYnNlcnZlcltdO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9vYnNlcnZlcnMgPSBbXTtcbiAgfVxuXG4gIHJlZ2lzdGVyT2JzZXJ2ZXIob2I6IE9ic2VydmVyKSB7XG4gICAgY29uc3QgaWQ6IHN0cmluZyA9IG9iLnVuaXF1ZUlEO1xuICAgIGlmIChmaW5kT2JzZXJ2ZXIodGhpcy5fb2JzZXJ2ZXJzLCBpZCkuZXhpc3RlZCkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGBPYnNlcnZlciAke2lkfSBpcyBhbHJlYWR5IGluIGxpc3RgKTtcbiAgICB9XG4gICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2gob2IpO1xuICAgIGNvbnNvbGUubG9nKGBPYnNlcnZlciAke29iLnVuaXF1ZUlEfSBpcyBwdXNoZWQgaW50byBsaXN0YCk7XG4gICAgY29uc29sZS5sb2codGhpcy5fb2JzZXJ2ZXJzKTtcbiAgfVxuXG4gIHJlbW92ZU9ic2VydmVyKHVuaXF1ZUlEOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IGV4aXN0ZWQsIGluZGV4IH0gPSBmaW5kT2JzZXJ2ZXIodGhpcy5fb2JzZXJ2ZXJzLCB1bmlxdWVJRCk7XG4gICAgaWYgKGV4aXN0ZWQpIHtcbiAgICAgIHRoaXMuX29ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY29uc29sZS5sb2coYE9ic2VydmVyICR7dW5pcXVlSUR9IGlzIHJlbW92ZWQgZnJvbSBsaXN0YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdPYnNlcnZlciBub3QgZXhpc3RlZCcpO1xuICAgIH1cbiAgfVxuXG4gIG5vdGlmeU9ic2VydmVycygpIHtcbiAgICBjb25zb2xlLmxvZygnU3ViamVjdCBub3RpZnkgYWxsIG9ic2VydmVycyA+PicpO1xuICAgIHRoaXMuX29ic2VydmVycy5tYXAoKG9ic2VydmVyKSA9PiB7XG4gICAgICBvYnNlcnZlci51cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG4oZnVuY3Rpb24gbWFpbigpIHtcbiAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3Qgb2JBID0gbmV3IENvbmNyZXRlT2JzZXJ2ZXIoJ0EnKTtcbiAgY29uc3Qgb2JCID0gbmV3IENvbmNyZXRlT2JzZXJ2ZXIoJ0InKTtcbiAgY29uc3Qgb2JDID0gbmV3IENvbmNyZXRlT2JzZXJ2ZXIoJ0MnKTtcblxuICBzdWJqZWN0LnJlZ2lzdGVyT2JzZXJ2ZXIob2JBKTtcbiAgc3ViamVjdC5yZWdpc3Rlck9ic2VydmVyKG9iQSk7IC8vIGFscmVhZHkgZXhpc3RlZFxuXG4gIHN1YmplY3QucmVnaXN0ZXJPYnNlcnZlcihvYkIpO1xuICBzdWJqZWN0LnJlZ2lzdGVyT2JzZXJ2ZXIob2JDKTtcblxuICBzdWJqZWN0Lm5vdGlmeU9ic2VydmVycygpO1xufSkoKTtcbiIpKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0Rlc2lnbi1QYXR0ZXJucy9PYnNlcnZlci5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/okeeffe_d/Project-Imposter/developer-notes/manual/Design-Patterns/Observer.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"4LAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,UADA,CAAR,YADK,CAIL,SAAQ,CACN,KAAM,SADA,CAAR,WAJK,CAOL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,ozDAAL,CAPK,CAAP,CAwFD,C,8QAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"observer\"\n    }}>{`Observer`}</h1>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Observer {\n  uniqueID: string;\n  update(): void;\n}\n\nclass ConcreteObserver implements Observer {\n  public uniqueID: string;\n  constructor(uniqueID: string) {\n    this.uniqueID = uniqueID;\n  }\n\n  update(): void {\n    console.log(\\`\\${this.uniqueID} updates something...\\`);\n  }\n}\n\nfunction findObserver(obs: Observer[], uniqueID: string) {\n  let index = 0;\n  const existed = obs.some((observer, idx) => {\n    index = idx;\n    return observer.uniqueID === uniqueID;\n  });\n  return {\n    existed,\n    index\n  };\n}\n\nclass Subject {\n  private _observers: Observer[];\n  constructor() {\n    this._observers = [];\n  }\n\n  registerObserver(ob: Observer) {\n    const id: string = ob.uniqueID;\n    if (findObserver(this._observers, id).existed) {\n      return console.log(\\`Observer \\${id} is already in list\\`);\n    }\n    this._observers.push(ob);\n    console.log(\\`Observer \\${ob.uniqueID} is pushed into list\\`);\n    console.log(this._observers);\n  }\n\n  removeObserver(uniqueID: string) {\n    const { existed, index } = findObserver(this._observers, uniqueID);\n    if (existed) {\n      this._observers.splice(index, 1);\n      console.log(\\`Observer \\${uniqueID} is removed from list\\`);\n    } else {\n      console.log('Observer not existed');\n    }\n  }\n\n  notifyObservers() {\n    console.log('Subject notify all observers >>');\n    this._observers.map((observer) => {\n      observer.update();\n    });\n  }\n}\n\n(function main() {\n  const subject = new Subject();\n\n  const obA = new ConcreteObserver('A');\n  const obB = new ConcreteObserver('B');\n  const obC = new ConcreteObserver('C');\n\n  subject.registerObserver(obA);\n  subject.registerObserver(obA); // already existed\n\n  subject.registerObserver(obB);\n  subject.registerObserver(obC);\n\n  subject.notifyObservers();\n})();\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}