{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Elixir-Course-Testing.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Elixir-Course-Testing.md","mtime":1566513419692},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJlbGl4aXItY291cnNlLXRlc3RpbmctYW5kLWRvY3VtZW50YXRpb24ifSwiRWxpeGlyIENvdXJzZSBUZXN0aW5nIEFuZCBEb2N1bWVudGF0aW9uIiksbWR4KCJoMiIseyJpZCI6ImRvY3VtZW50YXRpb24ifSwiRG9jdW1lbnRhdGlvbiIpLG1keCgicCIsbnVsbCwiVHdvIHR5cGVzOiIpLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIk1vZHVsZSBkb2N1bWVudGF0aW9uOiBwdXJwb3NlIG9mIG1vZHVsZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJGdW5jdGlvbiBkb2N1bWVudGF0aW9uOiBwdXJwb3NlIG9mIGluZGl2aWR1YWwgZnVuY3Rpb25zIikpLG1keCgicCIsbnVsbCwiVXNpbmcgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImV4X2RvYyIpLCIgYXMgdGhlIHJlcXVpcmVkIG1vZHVsZSwgYWRkICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJ7OmV4X2RvYywgXCJ+PiAwLjIxLjFcIn0sIiksIiB0byB5b3UgZGVwcyAob3IgdGhlIGxhdGVzdCB2ZXJzaW9uKSBhbmQgYWZ0ZXIgZmV0Y2hpbmcgZGVwcywgcnVuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJtaXggZG9jcyIpLCIgdG8gZ2VuZXJhdGUgdGhlIGRvY3VtZW50YXRpb24uIiksbWR4KCJwIixudWxsLCJEb2N1bWVudGF0aW9uIGNhbiB0aGVuIGJlIGZvdW5kIGF0ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkb2MvaW5kZXguaHRtbCIpLCIuIiksbWR4KCJwIixudWxsLCJFeGFtcGxlczoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZWxpeGlyIn0pLCJkZWZtb2R1bGUgTW9kdWxlTmFtZS5RdWVyaWVzIGRvXG4gIEBtb2R1bGVkb2MgXCJcIlwiXG4gIFByb3ZpZGVzIEVjdG8gcXVlcmllcyBmb3IgcXVlcnlpbmcgaW1wb3J0YW50IEFjdGlvbiBGcmFtZXdvcmsgcmVxdWlyZW1lbnQuXG4gIFwiXCJcIlxuXG4gIGltcG9ydCBFY3RvLlF1ZXJ5XG5cbiAgQGRvYyBcIlwiXCJcbiAgRG9lcyBhIHRoaW5nXG5cbiAgIyMgRXhhbXBsZXNcblxuICAgICAgaWV4PiBxdWVyeSA9IFwiSGVsbG8sIFdvcmxkIVwiXG4gICAgICBpZXg+IHF1ZXJ5XG4gICAgICBcIkhlbGxvLCBXb3JsZCFcIlxuICBcIlwiXCJcbiAgZGVmIGhlbGxvX3dvcmxkKCkgZG9cbiAgICBcIkhlbGxvLCBXb3JsZCFcIlxuICBlbmRcbmVuZFxuIikpLG1keCgiaDIiLHsiaWQiOiJlbGl4aXItdGVzdGluZyJ9LCJFbGl4aXIgVGVzdGluZyIpLG1keCgicCIsbnVsbCwiVGhlcmUgYXJlIHR3byBkaXN0aW5jdCB0eXBlcyBvZiB0ZXN0cyB3ZSBjYW4gd3JpdGU6IiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQXNzZXJ0aW9uIHRlc3RzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkRvYyB0ZXN0aW5nIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLXRlc3QifSwiRXhhbXBsZSBUZXN0IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWVsaXhpciJ9KSwiZGVmbW9kdWxlIENhcmRzIGRvXG4gIGRlZiBjcmVhdGVfZGVjayBkb1xuICAgIHZhbHVlcyA9IFtcIkFjZVwiLCBcIlR3b1wiXVxuICAgIHN1aXRzID0gW1wiU3BhZGVzXCIsIFwiQ2x1YnNcIl1cbiAgZW5kXG5cbiAgIyAuLi4gbW9yZVxuZW5kXG4iKSksbWR4KCJwIixudWxsLCJUZXN0aW5nIGNhbiBiZSBjb25zaWRlcmVkIGEgZmlyc3QtY2xhc3MgY2l0aXplbi4gSXQgY29tZXMgYnVpbHQgaW50byBFbGl4aXIuIiksbWR4KCJwIixudWxsLCJXaGVuIHlvdSBnZW5lcmF0ZSB0aGUgcHJvamVjdCB3aXRoICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJtaXgiKSwiLCB5b3UgZ2V0IGEgdGVzdCBmb2xkZXIgcHV0IGluIGF1dG9tYXRpY2FsbHkuIiksbWR4KCJwIixudWxsLCJUaGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNhcmRzX3Rlc3QuZXhzIiksIiBmaWxlIGlzIHNwZWNpZmljYWxseSBidWlsdCBmb3IgdGVzdGluZyB0aGUgZnVuY3Rpb25zIHVzZWQgaW4gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNhcmRzX3Rlc3QuZXhzIiksIi4iKSxtZHgoInAiLG51bGwsIk5vdGUgdGhhdCBydW5uaW5nICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJlbGl4aXIgdGVzdCIpLCIgd2lsbCBlbmQgdXAgd2l0aCB0d28gdGVzdHMgcnVuIHdpdGggMCBmYWlsdXJlcy4iKSxtZHgoInAiLG51bGwsIlRoZSBcIm15c3RlcnlcIiB0ZXN0IGNtZXMgZnJtIHRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiQGRvYyIpLCIgdGFnICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCIjIyBFeGFtcGxlcyIpLCIgLSBpdCB3aWxsIHJ1biB0aGF0IGNodW5rIG9mIGNvZGUgYXMgaWYgaXQgaXMgYSB0ZXN0ISIpLG1keCgicCIsbnVsbCwiRXhhbXBsZSwgdGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgcnVuIGFzIGEgdGVzdDoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZWxpeGlyIn0pLCJAZG9jIFwiXCJcIlxuICBEaXZpZGVzIGEgZGVjayBpdG8gYSBoYW5kIGFuZCB0aGUgcmVtYWluZGVyIG9mIHRoZSBkZWNrLlxuXG4jIyBFeGFtcGxlc1xuXG4gICAgaWV4PiBkZWNrID0gQ2FyZC5jcmVhdGVfZGVja1xuICAgIGlleD4ge2hhbmQsIGRlY2t9ID0gQ2FyZHMuZGVhbChkZWNrLCAxKVxuICAgIGlleD4gaGFuZFxuICAgIFtcIkFjZSBvZiBTcGFjZXNcIl1cblwiXCJcIlxuZGVmIGRlYWwoZGVjaywgaGFuZF9zaXplKSBkb1xuICBFbnVtLnNwbGl0KGRlY2ssIGhhbmRfc2l6ZSlcbmVuZFxuIikpLG1keCgiaDIiLHsiaWQiOiJpbXBvcnRhbnQtdGlkYml0cyJ9LCJJbXBvcnRhbnQgVGlkYml0cyIpLG1keCgicCIsbnVsbCwiV29ydGggbm90aW5nIGZvciBhIGJhc2ljIEVsaXhpciB0ZXN0IGV4YW1wbGU6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWVsaXhpciJ9KSwiZGVmbW9kdWxlIENhcmRzVGVzdCBkb1xuICB1c2UgRXhVbml0LkNhc2VcbiAgZG9jdGVzdCBDYXJkc1xuZW5kXG4iKSksbWR4KCJwIixudWxsLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZG9jdGVzdCIpLCIgaXMgdXNlZCBmb3IgdGVzdGluZyB0aGUgZG9jdW1lbnRhdGlvbiBleGFtcGxlcy4iKSxtZHgoImgyIix7ImlkIjoiY2FzZS10ZXN0cyJ9LCJDYXNlIFRlc3RzIiksbWR4KCJwIixudWxsLCJGb3IgdGhlIHRlcm1zICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJ1c2UgRXhVbml0LkNhc2UiKSwiOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1lbGl4aXIifSksImRlZm1vZHVsZSBDYXJkc1Rlc3QgZG9cbiAgdXNlIEV4VW5pdC5DYXNlXG4gIGRvY3Rlc3QgQ2FyZHNcblxuICB0ZXN0IFwiY3JlYXRlX2RlY2sgbWFrZXMgMjAgY2FyZHNcIiBkb1xuICAgIGRlY2tfbGVuZ3RoID0gbGVuZ3RoKENhcmRzLmNyZWF0ZV9kZWNrKVxuICAgIGFzc2VydCBkZWNrX2xlbmd0aCA9PSAyMFxuICBlbmRcbmVuZFxuIikpLG1keCgiaDIiLHsiaWQiOiJhc3NlcnQtdnMtcmVmdXRlIn0sIkFzc2VydCB2cyBSZWZ1dGUiKSxtZHgoInAiLG51bGwsIlRoZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwicmVmdXRlIiksIiBrZXl3b3JkIGlzIGp1c3QgdGhlIG9wcG9zaXRlIG9mICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJhc3NlcnQiKSwiLiIpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvRWxpeGlyL0VsaXhpci1Db3Vyc2UtVGVzdGluZy5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Elixir-Course-Testing.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,yCADA,CAAR,2CADK,CAIL,SAAQ,CACN,KAAM,eADA,CAAR,iBAJK,CAOL,0BAPK,CAQL,cACE,UAAI,UAAU,CAAC,IAAf,4CADF,CAEE,UAAI,UAAU,CAAC,IAAf,4DAFF,CARK,CAYL,sBAAa,kBAAY,UAAU,CAAC,GAAvB,WAAb,iCAAgG,kBAAY,UAAU,CAAC,GAAvB,8BAAhG,sEAAyO,kBAAY,UAAU,CAAC,GAAvB,aAAzO,mCAZK,CAaL,mDAA0C,kBAAY,UAAU,CAAC,GAAvB,mBAA1C,KAbK,CAcL,yBAdK,CAeL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,oXAAL,CAfK,CAsCL,SAAQ,CACN,KAAM,gBADA,CAAR,kBAtCK,CAyCL,mEAzCK,CA0CL,cACE,UAAI,UAAU,CAAC,IAAf,oBADF,CAEE,UAAI,UAAU,CAAC,IAAf,gBAFF,CA1CK,CA8CL,SAAQ,CACN,KAAM,cADA,CAAR,gBA9CK,CAiDL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,iJAAL,CAjDK,CA4DL,4FA5DK,CA6DL,mDAA0C,kBAAY,UAAU,CAAC,GAAvB,QAA1C,iDA7DK,CA8DL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,mBAAX,kEAAuI,kBAAY,UAAU,CAAC,GAAvB,mBAAvI,KA9DK,CA+DL,kCAAyB,kBAAY,UAAU,CAAC,GAAvB,gBAAzB,oDA/DK,CAgEL,kDAAuC,kBAAY,UAAU,CAAC,GAAvB,SAAvC,SAAgG,kBAAY,UAAU,CAAC,GAAvB,gBAAhG,yDAhEK,CAiEL,+DAjEK,CAkEL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,gSAAL,CAlEK,CAkFL,SAAQ,CACN,KAAM,mBADA,CAAR,qBAlFK,CAqFL,6DArFK,CAsFL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,sEAAL,CAtFK,CA6FL,aAAG,kBAAY,UAAU,CAAC,GAAvB,YAAH,oDA7FK,CA8FL,SAAQ,CACN,KAAM,YADA,CAAR,cA9FK,CAiGL,8BAAqB,kBAAY,UAAU,CAAC,GAAvB,oBAArB,KAjGK,CAkGL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,iBADe,CAA3B,oMAAL,CAlGK,CA8GL,SAAQ,CACN,KAAM,kBADA,CAAR,oBA9GK,CAiHL,oBAAW,kBAAY,UAAU,CAAC,GAAvB,WAAX,qCAAkG,kBAAY,UAAU,CAAC,GAAvB,WAAlG,KAjHK,CAAP,CAmHD,C,kRAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elixir-course-testing-and-documentation\"\n    }}>{`Elixir Course Testing And Documentation`}</h1>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Module documentation: purpose of module`}</li>\n      <li parentName=\"ol\">{`Function documentation: purpose of individual functions`}</li>\n    </ol>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`ex_doc`}</inlineCode>{` as the required module, add `}<inlineCode parentName=\"p\">{`{:ex_doc, \"~> 0.21.1\"},`}</inlineCode>{` to you deps (or the latest version) and after fetching deps, run `}<inlineCode parentName=\"p\">{`mix docs`}</inlineCode>{` to generate the documentation.`}</p>\n    <p>{`Documentation can then be found at `}<inlineCode parentName=\"p\">{`doc/index.html`}</inlineCode>{`.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule ModuleName.Queries do\n  @moduledoc \"\"\"\n  Provides Ecto queries for querying important Action Framework requirement.\n  \"\"\"\n\n  import Ecto.Query\n\n  @doc \"\"\"\n  Does a thing\n\n  ## Examples\n\n      iex> query = \"Hello, World!\"\n      iex> query\n      \"Hello, World!\"\n  \"\"\"\n  def hello_world() do\n    \"Hello, World!\"\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elixir-testing\"\n    }}>{`Elixir Testing`}</h2>\n    <p>{`There are two distinct types of tests we can write:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Assertion tests`}</li>\n      <li parentName=\"ol\">{`Doc testing`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-test\"\n    }}>{`Example Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule Cards do\n  def create_deck do\n    values = [\"Ace\", \"Two\"]\n    suits = [\"Spades\", \"Clubs\"]\n  end\n\n  # ... more\nend\n`}</code></pre>\n    <p>{`Testing can be considered a first-class citizen. It comes built into Elixir.`}</p>\n    <p>{`When you generate the project with `}<inlineCode parentName=\"p\">{`mix`}</inlineCode>{`, you get a test folder put in automatically.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{` file is specifically built for testing the functions used in `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{`.`}</p>\n    <p>{`Note that running `}<inlineCode parentName=\"p\">{`elixir test`}</inlineCode>{` will end up with two tests run with 0 failures.`}</p>\n    <p>{`The \"mystery\" test cmes frm the `}<inlineCode parentName=\"p\">{`@doc`}</inlineCode>{` tag `}<inlineCode parentName=\"p\">{`## Examples`}</inlineCode>{` - it will run that chunk of code as if it is a test!`}</p>\n    <p>{`Example, the following code will run as a test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`@doc \"\"\"\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spaces\"]\n\"\"\"\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"important-tidbits\"\n    }}>{`Important Tidbits`}</h2>\n    <p>{`Worth noting for a basic Elixir test example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`doctest`}</inlineCode>{` is used for testing the documentation examples.`}</p>\n    <h2 {...{\n      \"id\": \"case-tests\"\n    }}>{`Case Tests`}</h2>\n    <p>{`For the terms `}<inlineCode parentName=\"p\">{`use ExUnit.Case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test \"create_deck makes 20 cards\" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-vs-refute\"\n    }}>{`Assert vs Refute`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`refute`}</inlineCode>{` keyword is just the opposite of `}<inlineCode parentName=\"p\">{`assert`}</inlineCode>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}