{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Abstract-Factory-Pattern.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Abstract-Factory-Pattern.md","mtime":1562563032023},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJhYnN0cmFjdC1mYWN0b3J5In0sIkFic3RyYWN0IEZhY3RvcnkiKSxtZHgoInAiLG51bGwsIkhlcmUgd2Ugd2lsbCBjb3ZlciB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImNyZWF0aW9uYWwiKSwiIGRlc2lnbiBwYXR0ZXJuICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJBYnN0cmFjdCBGYWN0b3J5IiksIi4iKSxtZHgoInAiLG51bGwsIkFub3RoZXIgY3JlYXRpb25hbCBwYXR0ZXJuLCB0aGUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkZhY3RvcnkiKSwiIGRlc2lnbiBwYXR0ZXJuLCBkaWZmZXJzIGZyb20gQWJzdHJhY3QgRmFjdG9yeSBpbiB0aGF0IHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBhIHNpbmdsZSBtZXRob2QsIHdoZXJlYXMgYW4gYWJzdHJhY3QgZmFjdG9yeSBpcyBhbiBvYmplY3QuIiksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSwiLi4uIHRoZSBGYWN0b3J5IE1ldGhvZCBwYXR0ZXJuIHVzZXMgaW5oZXJpdGFuY2UgYW5kIHJlbGllcyBvbiBhIHN1YmNsYXNzIHRvIGhhbmRsZSB0aGUgZGVzaXJlZCBvYmplY3QgaW5zdGFudGlhdGlvbi4iKSksbWR4KCJwIixudWxsLCJUaGlzIHF1b3RlIGFzc3VtZXMgdGhlIG9iamVjdCBpcyBjYWxsaW5nIGl0cyBvd24gZmFjdG9yeSBtZXRob2QsIHRoZXJlZm9yZSB0aGUgb25seSB0aGluZyB0aGF0IGNvdWxkIGNoYW5nZSB0aGUgcmV0dXJuIHZhbHVlIHdvdWxkIGJlIGEgc3ViY2xhc3MuIiksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSwiLi4uIHdpdGggdGhlIEFic3RyYWN0IEZhY3RvcnkgcGF0dGVybiwgYSBjbGFzcyBkZWxlZ2F0ZXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIG9iamVjdCBpbnN0YW50aWF0aW9uIHRvIGFub3RoZXIgb2JqZWN0IHZpYSBjb21wb3NpdGlvbiAuLi4iKSksbWR4KCJwIixudWxsLCJIZXJlIHRoZXJlIGlzIGFuIG9iamVjdCBBIHdobyB3YW50cyB0byBtYWtlIGEgRm9vIG9iamVjdC4gSW5zdGVhZCBvZiBtYWtpbmcgdGhlIEZvbyBvYmplY3QgaXRzZWxmIChsaWtlIGluIHRoZSBmYWN0b3J5IG1ldGhvZCksIGl0J3MgZ29pbmcgdG8gZ2V0IGEgZGlmZmVyZW50IG9iamVjdCAodGhlIGFic3RyYWN0IGZhY3RvcnkpIHRvIGNyZWF0ZSB0aGUgRm9vIG9iamVjdC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YXNjcmlwdCJ9KSwiLy8gZGVmaW5pbmcgb3VyIGFic3RyYWN0IHByb2R1Y3RzXG5pbnRlcmZhY2UgUHJvY2Vzc29yIHtcbiAgICBwZXJmb3JtT3BlcmF0aW9uKCk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBIYXJkRGlzayB7XG4gICAgc3RvcmVEYXRhKCk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBNb25pdG9yIHtcbiAgICBkaXNwbGF5UGljdHVyZSgpOiB2b2lkO1xufVxuXG4vLyBkZWZpbmluZyBvdXIgY29uY3JldGUgcHJvZHVjdHNcbmNsYXNzIEV4cGVuc2l2ZVByb2Nlc3NvciBpbXBsZW1lbnRzIFByb2Nlc3NvciB7XG4gICAgcGVyZm9ybU9wZXJhdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ09wZXJhdGlvbiB3aWxsIHBlcmZvcm0gcXVpY2tseSEnKTtcbiAgICB9XG59XG5cbmNsYXNzIENoZWFwUHJvY2Vzc29yIGltcGxlbWVudHMgUHJvY2Vzc29yIHtcbiAgICBwZXJmb3JtT3BlcmF0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnT3BlcmF0aW9uIHdpbGwgcGVyZm9ybSBzbG93bHkhJyk7XG4gICAgfVxufVxuXG5jbGFzcyBFeHBlbnNpdmVIREQgaW1wbGVtZW50cyBIYXJkRGlzayB7XG4gICAgc3RvcmVEYXRhKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnRGF0YSB3aWxsIHRha2UgbGVzcyB0aW1lIHRvIHN0b3JlJyk7XG4gICAgfVxufVxuXG5jbGFzcyBDaGVhcEhERCBpbXBsZW1lbnRzIEhhcmREaXNrIHtcbiAgICBzdG9yZURhdGEoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdEYXRhIHdpbGwgdGFrZSBtb3JlIHRpbWUgdG8gc3RvcmUnKTtcbiAgICB9XG59XG5cbmNsYXNzIEhpZ2hSZXNNb25pdG9yIGltcGxlbWVudHMgTW9uaXRvciB7XG4gICAgZGlzcGxheVBpY3R1cmUoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdIaWdoIHBpY3R1cmUgcXVhbGl0eScpO1xuICAgIH1cbn1cblxuY2xhc3MgTG93UmVzTW9uaXRvciBpbXBsZW1lbnRzIE1vbml0b3Ige1xuICAgIGRpc3BsYXlQaWN0dXJlKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnTG93IHBpY3R1cmUgcXVhbGl0eScpO1xuICAgIH1cbn1cblxuLy8gZGVmaW5pbmcgdGhlIGFic3RyYWN0IGZhY3RvcnlcbmludGVyZmFjZSBNYWNoaW5lQWJzdHJhY3RGYWN0b3J5IHtcbiAgICAvLyBlYWNoIGZhY3RvcnkgbmVlZHMgdG8gaW1wbGVtZW50IHRoZXNlIG1ldGhvZHNcbiAgICBnZXRQcm9jZXNzb3IoKTogUHJvY2Vzc29yO1xuICAgIGdldEhhcmREaXNrKCk6IEhhcmREaXNrO1xuICAgIGdldE1vbml0b3IoKTogTW9uaXRvcjtcbn1cblxuLy8gZGVmaW5pbmcgb3VyIGNvbmNyZXRlIGZhY3Rvcmllc1xuY2xhc3MgSGlnaEJ1ZGdldE1hY2hpbmVGYWN0b3J5IGltcGxlbWVudHMgTWFjaGluZUFic3RyYWN0RmFjdG9yeSB7XG4gICAgZ2V0UHJvY2Vzc29yKCk6IFByb2Nlc3NvciB7XG4gICAgICAgIHJldHVybiBuZXcgRXhwZW5zaXZlUHJvY2Vzc29yKCk7XG4gICAgfVxuXG4gICAgZ2V0SGFyZERpc2soKTogSGFyZERpc2sge1xuICAgICAgICByZXR1cm4gbmV3IEV4cGVuc2l2ZUhERCgpO1xuICAgIH1cblxuICAgIGdldE1vbml0b3IoKTogTW9uaXRvciB7XG4gICAgICAgIHJldHVybiBuZXcgSGlnaFJlc01vbml0b3IoKTtcbiAgICB9XG59XG5cbmNsYXNzIExvd0J1ZGdldE1hY2hpbmVGYWN0b3J5IGltcGxlbWVudHMgTWFjaGluZUFic3RyYWN0RmFjdG9yeSB7XG4gICAgZ2V0UHJvY2Vzc29yKCk6IFByb2Nlc3NvciB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hlYXBQcm9jZXNzb3IoKTtcbiAgICB9XG5cbiAgICBnZXRIYXJkRGlzaygpOiBIYXJkRGlzayB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hlYXBIREQoKTtcbiAgICB9XG5cbiAgICBnZXRNb25pdG9yKCk6IE1vbml0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IExvd1Jlc01vbml0b3IoKTtcbiAgICB9XG59XG5cbi8vIGRlZmluaW5nIG91ciBjbGllbnQgYW5kIGZpbmFsIHByb2R1Y3RcbmludGVyZmFjZSBNYWNoaW5lIHtcbiAgICBwcm9jZXNzb3I6IFByb2Nlc3NvcjtcbiAgICBoZGQ6IEhhcmREaXNrO1xuICAgIG1vbml0b3I6IE1vbml0b3I7XG59XG5cbmNsYXNzIENvbXB1dGVyU2hvcCB7XG4gICAgLy8gY2hhbmdlIGFjY2VzcyBtb2RpZmllcnMgYXMgc3VpdHNcbiAgICBwdWJsaWMgY2F0ZWdvcnk6IE1hY2hpbmVBYnN0cmFjdEZhY3Rvcnk7XG5cbiAgICAvLyB3ZSdsbCBwYXNzIGEgZmFjdG9yeSBhcyBjYXRlZ29yeSBkdXJpbmcgaW5zdGFudGlhdGlvblxuICAgIGNvbnN0cnVjdG9yKGNhdGVnb3J5OiBNYWNoaW5lQWJzdHJhY3RGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICB9XG5cbiAgICBhc3NlbWJsZU1hY2hpbmUoKTogTWFjaGluZSB7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IHRoaXMuY2F0ZWdvcnkuZ2V0UHJvY2Vzc29yKCk7XG4gICAgICAgIGNvbnN0IGhkZCA9IHRoaXMuY2F0ZWdvcnkuZ2V0SGFyZERpc2soKTtcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IHRoaXMuY2F0ZWdvcnkuZ2V0TW9uaXRvcigpO1xuXG4gICAgICAgIC8vIHRvIGJlIGV4cGxpY2l0XG4gICAgICAgIGNvbnN0IG1hY2hpbmU6IE1hY2hpbmUgPSB7XG4gICAgICAgICAgICBwcm9jZXNzb3IsXG4gICAgICAgICAgICBoZGQsXG4gICAgICAgICAgICBtb25pdG9yXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hY2hpbmU7XG4gICAgfVxufVxuXG4vLyBydW5uaW5nIHRoZSBjb2RlIGluIGFjdGlvbiFcbmNvbnN0IGNoZWFwRmFjdG9yeSA9IG5ldyBMb3dCdWRnZXRNYWNoaW5lRmFjdG9yeSgpO1xuY29uc3QgZXhwZW5zaXZlRmFjdG9yeSA9IG5ldyBIaWdoQnVkZ2V0TWFjaGluZUZhY3RvcnkoKTtcblxuLy8gZW5zdXJlIHRvIHBhc3MgdGhlIGZhY3RvcnkgaW4gZHVyaW5nIGluc3RhbnRpYXRpb25cbi8vIHVzaW5nIGxldCB0byBzaG93IHZhcmlhYmlsaXR5LCBpbiBjb2RlIHRoZXNlXG4vLyB3b3VsZCBsaWtlbHkgYmUgZnVuY3Rpb25zIHRoYXQgdGFrZSBhIGZhY3Rvcnlcbi8vIGFyZyBhbmQgY29uc3RhbnRzIGZvciBzaG9wL21hY2hpbmVcbmxldCBzaG9wO1xubGV0IG1hY2hpbmU7XG5cbnNob3AgPSBuZXcgQ29tcHV0ZXJTaG9wKGNoZWFwRmFjdG9yeSk7XG5tYWNoaW5lID0gc2hvcC5hc3NlbWJsZU1hY2hpbmUoKTtcbm1hY2hpbmUuaGRkLnN0b3JlRGF0YSgpO1xubWFjaGluZS5wcm9jZXNzb3IucGVyZm9ybU9wZXJhdGlvbigpO1xubWFjaGluZS5tb25pdG9yLmRpc3BsYXlQaWN0dXJlKCk7XG5cbnNob3AgPSBuZXcgQ29tcHV0ZXJTaG9wKGV4cGVuc2l2ZUZhY3RvcnkpO1xubWFjaGluZSA9IHNob3AuYXNzZW1ibGVNYWNoaW5lKCk7XG5tYWNoaW5lLmhkZC5zdG9yZURhdGEoKTtcbm1hY2hpbmUucHJvY2Vzc29yLnBlcmZvcm1PcGVyYXRpb24oKTtcbm1hY2hpbmUubW9uaXRvci5kaXNwbGF5UGljdHVyZSgpO1xuIikpLG1keCgiaDIiLHsiaWQiOiJyZWZlcmVuY2VzIn0sIlJlZmVyZW5jZXMiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NzM5NjExL3doYXQtYXJlLXRoZS1kaWZmZXJlbmNlcy1iZXR3ZWVuLWFic3RyYWN0LWZhY3RvcnktYW5kLWZhY3RvcnktZGVzaWduLXBhdHRlcm5zIn0pLCJEaWZmZXJlbmNlIGJldHdlZW4gZmFjdG9yeSBhbmQgYWJzdHJhY3QgZmFjdG9yeSIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLE9iamVjdC5hc3NpZ24oe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzcxNjQxMy9GYWN0b3J5LU1ldGhvZC1QYXR0ZXJuLXZzLUFic3RyYWN0LUZhY3RvcnktUGF0dGVybiJ9KSwiQVNQLk5FVCBBYnN0cmFjdCBGYWN0b3J5IHZzIEZhY3RvcnkiKSkpKTt9aWYodHlwZW9mIE1EWENvbnRlbnQhPT0ndW5kZWZpbmVkJyYmTURYQ29udGVudCYmTURYQ29udGVudD09PU9iamVjdChNRFhDb250ZW50KSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1EWENvbnRlbnQsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6Ik1EWENvbnRlbnQiLGZpbGVuYW1lOiJtYW51YWwvRGVzaWduLVBhdHRlcm5zL0Fic3RyYWN0LUZhY3RvcnktUGF0dGVybi5tZCJ9fSk7fU1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Abstract-Factory-Pattern.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,kBADA,CAAR,oBADK,CAIL,uCAA8B,kBAAY,UAAU,CAAC,GAAvB,eAA9B,oBAAwG,kBAAY,UAAU,CAAC,GAAvB,qBAAxG,KAJK,CAKL,gDAAuC,kBAAY,UAAU,CAAC,GAAvB,YAAvC,2IALK,CAML,sBACE,SAAG,UAAU,CAAC,YAAd,yHADF,CANK,CASL,iKATK,CAUL,sBACE,SAAG,UAAU,CAAC,YAAd,8IADF,CAVK,CAaL,qOAbK,CAcL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,6zGAAL,CAdK,CA6JL,SAAQ,CACN,KAAM,YADA,CAAR,cA7JK,CAgKL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,2HAD+B,CAAvB,oDAApB,CADF,CAIE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,gGAD+B,CAAvB,wCAApB,CAJF,CAhKK,CAAP,CAyKD,C,8RAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"abstract-factory\"\n    }}>{`Abstract Factory`}</h1>\n    <p>{`Here we will cover the `}<inlineCode parentName=\"p\">{`creational`}</inlineCode>{` design pattern `}<inlineCode parentName=\"p\">{`Abstract Factory`}</inlineCode>{`.`}</p>\n    <p>{`Another creational pattern, the `}<inlineCode parentName=\"p\">{`Factory`}</inlineCode>{` design pattern, differs from Abstract Factory in that the factory method is a single method, whereas an abstract factory is an object.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`... the Factory Method pattern uses inheritance and relies on a subclass to handle the desired object instantiation.`}</p>\n    </blockquote>\n    <p>{`This quote assumes the object is calling its own factory method, therefore the only thing that could change the return value would be a subclass.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`... with the Abstract Factory pattern, a class delegates the responsibility of object instantiation to another object via composition ...`}</p>\n    </blockquote>\n    <p>{`Here there is an object A who wants to make a Foo object. Instead of making the Foo object itself (like in the factory method), it's going to get a different object (the abstract factory) to create the Foo object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// defining our abstract products\ninterface Processor {\n    performOperation(): void;\n}\n\ninterface HardDisk {\n    storeData(): void;\n}\n\ninterface Monitor {\n    displayPicture(): void;\n}\n\n// defining our concrete products\nclass ExpensiveProcessor implements Processor {\n    performOperation() {\n        console.log('Operation will perform quickly!');\n    }\n}\n\nclass CheapProcessor implements Processor {\n    performOperation() {\n        console.log('Operation will perform slowly!');\n    }\n}\n\nclass ExpensiveHDD implements HardDisk {\n    storeData() {\n        console.log('Data will take less time to store');\n    }\n}\n\nclass CheapHDD implements HardDisk {\n    storeData() {\n        console.log('Data will take more time to store');\n    }\n}\n\nclass HighResMonitor implements Monitor {\n    displayPicture() {\n        console.log('High picture quality');\n    }\n}\n\nclass LowResMonitor implements Monitor {\n    displayPicture() {\n        console.log('Low picture quality');\n    }\n}\n\n// defining the abstract factory\ninterface MachineAbstractFactory {\n    // each factory needs to implement these methods\n    getProcessor(): Processor;\n    getHardDisk(): HardDisk;\n    getMonitor(): Monitor;\n}\n\n// defining our concrete factories\nclass HighBudgetMachineFactory implements MachineAbstractFactory {\n    getProcessor(): Processor {\n        return new ExpensiveProcessor();\n    }\n\n    getHardDisk(): HardDisk {\n        return new ExpensiveHDD();\n    }\n\n    getMonitor(): Monitor {\n        return new HighResMonitor();\n    }\n}\n\nclass LowBudgetMachineFactory implements MachineAbstractFactory {\n    getProcessor(): Processor {\n        return new CheapProcessor();\n    }\n\n    getHardDisk(): HardDisk {\n        return new CheapHDD();\n    }\n\n    getMonitor(): Monitor {\n        return new LowResMonitor();\n    }\n}\n\n// defining our client and final product\ninterface Machine {\n    processor: Processor;\n    hdd: HardDisk;\n    monitor: Monitor;\n}\n\nclass ComputerShop {\n    // change access modifiers as suits\n    public category: MachineAbstractFactory;\n\n    // we'll pass a factory as category during instantiation\n    constructor(category: MachineAbstractFactory) {\n        this.category = category;\n    }\n\n    assembleMachine(): Machine {\n        const processor = this.category.getProcessor();\n        const hdd = this.category.getHardDisk();\n        const monitor = this.category.getMonitor();\n\n        // to be explicit\n        const machine: Machine = {\n            processor,\n            hdd,\n            monitor\n        }\n        return machine;\n    }\n}\n\n// running the code in action!\nconst cheapFactory = new LowBudgetMachineFactory();\nconst expensiveFactory = new HighBudgetMachineFactory();\n\n// ensure to pass the factory in during instantiation\n// using let to show variability, in code these\n// would likely be functions that take a factory\n// arg and constants for shop/machine\nlet shop;\nlet machine;\n\nshop = new ComputerShop(cheapFactory);\nmachine = shop.assembleMachine();\nmachine.hdd.storeData();\nmachine.processor.performOperation();\nmachine.monitor.displayPicture();\n\nshop = new ComputerShop(expensiveFactory);\nmachine = shop.assembleMachine();\nmachine.hdd.storeData();\nmachine.processor.performOperation();\nmachine.monitor.displayPicture();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/5739611/what-are-the-differences-between-abstract-factory-and-factory-design-patterns\"\n        }}>{`Difference between factory and abstract factory`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.codeproject.com/Articles/716413/Factory-Method-Pattern-vs-Abstract-Factory-Pattern\"\n        }}>{`ASP.NET Abstract Factory vs Factory`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}