{"remainingRequest":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js!/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md","dependencies":[{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md","mtime":1574497642682},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/cache-loader/dist/cjs.js","mtime":1564095360956},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1562568123838},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/@mdx-js/loader/index.js","mtime":1565139338792},{"path":"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/source-map-loader/index.js","mtime":1564095361765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIi9Vc2Vycy9kZW5uaXMub2tlZWZmZS9Qcm9qZWN0LUltcG9zdGVyL2RldmVsb3Blci1ub3Rlcy9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOy8qIEBqc3ggbWR4ICovaW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JzsvKiBAanN4IG1keCAqL3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXt9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxPYmplY3QuYXNzaWduKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJjbG91ZC12aXNpb24tdy1ub2RlanMifSwiQ2xvdWQgVmlzaW9uIHcvIE5vZGVqcyIpLG1keCgiaDIiLHsiaWQiOiJyZWZlcmVuY2VzIn0sIlJlZmVyZW5jZXMiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsT2JqZWN0LmFzc2lnbih7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiJodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vdmlzaW9uL2RvY3Mvb2NyI3Zpc2lvbl90ZXh0X2RldGVjdGlvbi1ub2RlanMifSksImh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS92aXNpb24vZG9jcy9vY3IjdmlzaW9uX3RleHRfZGV0ZWN0aW9uLW5vZGVqcyIpKSksbWR4KCJoMiIseyJpZCI6InByZXJlcXVpc2l0ZXMifSwiUHJlcmVxdWlzaXRlcyIpLG1keCgicCIsbnVsbCwiRW5zdXJlIHlvdSBoYXZlIHNldCB1cCBhIEdDUCBwcm9qZWN0IHdpdGggQ2xvdWQgVmlzaW9uIGVuYWJsZWQuIEZvbGxvdyB0aGUgbGluayBhYm92ZSBpZiB5b3UgbmVlZCBoZWxwLiIpLG1keCgicCIsbnVsbCwiTW92ZSB0aGUgcHJvamVjdCBjcmVkcyB0byB0aGUgcmlnaHQgZGlyZWN0b3J5IGFuZCBpbnN0YWxsICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJAZ29vZ2xlLWNsb3VkL3Zpc2lvbiIpLCIgZm9yIHRoZSBwcm9qZWN0LiIpLG1keCgiaDIiLHsiaWQiOiJ0eXBlc2NyaXB0LWV4YW1wbGUifSwiVHlwZVNjcmlwdCBFeGFtcGxlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixPYmplY3QuYXNzaWduKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXR5cGVzY3JpcHQifSksIi8vIHNyYy9pbmRleC50c1xuY29uc3QgdmlzaW9uID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC92aXNpb24nKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBzcyA9IHJlcXVpcmUoJ3N0cmluZy1zaW1pbGFyaXR5Jyk7XG5jb25zdCBjYyA9IHJlcXVpcmUoJ2xvZGFzaC5jYW1lbGNhc2UnKTtcbmNvbnN0IHVwID0gcmVxdWlyZSgnbG9kYXNoLmNhcGl0YWxpemUnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGNvbXBvbmVudHM6IHN0cmluZ1tdID0gW1xuICAnU2VsZWN0JyxcbiAgJ1RleHQnLFxuICAnQnV0dG9uJyxcbiAgJ1RleHRGaWVsZCcsXG4gICdJbWFnZScsXG4gICdJY29uJyxcbl07XG5cbmNvbnN0IHJ1biA9IGFzeW5jICgpID0+IHtcbiAgLy8gQ3JlYXRlcyBhIGNsaWVudFxuICBjb25zdCBjbGllbnQgPSBuZXcgdmlzaW9uLkltYWdlQW5ub3RhdG9yQ2xpZW50KCk7XG5cbiAgLy8gQmFzZSBmaWxlIHJlcXVpcmVkIGZvciB0aGUgc3JjIGZvbGRlciBkZXRlY3Rpb25cbiAgY29uc3QgZmlsZU5hbWUgPSAnLi9zcmMvaW1nL3Rlc3RGb3VyLmpwZyc7XG5cbiAgLy8gUGVyZm9ybXMgdGV4dCBkZXRlY3Rpb24gb24gdGhlIGxvY2FsIGZpbGVcbiAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBjbGllbnQudGV4dERldGVjdGlvbihmaWxlTmFtZSk7XG4gIGNvbnN0IGRldGVjdGlvbnMgPSByZXN1bHQudGV4dEFubm90YXRpb25zO1xuICBjb25zb2xlLmxvZygnPT09IFNUQVJUSU5HID09PScpO1xuICBjb25zdCBmdWxsRGV0ZWN0aW9uID0gZGV0ZWN0aW9uc1swXTtcbiAgY29uc3QgeyBkZXNjcmlwdGlvbiB9ID0gZnVsbERldGVjdGlvbjtcblxuICBjb25zb2xlLmxvZygnRGVzY3JpcHRpb246JywgZGVzY3JpcHRpb24pO1xuXG4gIGxldCByZXMgPSAnJztcblxuICBkZXNjcmlwdGlvbi5zcGxpdCgnXFxuJykubWFwKChsaW5lOiBzdHJpbmcpID0+IHtcbiAgICByZXMgKz0gJzxkaXY+XFxuJztcbiAgICBsaW5lLnNwbGl0KCcsJykubWFwKCh0ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7IGJlc3RNYXRjaCB9ID0gc3MuZmluZEJlc3RNYXRjaCh1cChjYyh0ZXh0KSksIGNvbXBvbmVudHMpO1xuICAgICAgcmVzICs9IGBcXHQ8JHtiZXN0TWF0Y2gudGFyZ2V0fSAvPlxcbmA7XG4gICAgfSk7XG4gICAgcmVzICs9ICc8L2Rpdj5cXG4nO1xuICB9KTtcbiAgY29uc29sZS5sb2coJz09PSBSRVMgPT09Jyk7XG4gIGNvbnNvbGUubG9nKHJlcyk7XG59O1xuXG5ydW4oKTtcbiIpKSxtZHgoInAiLG51bGwsIlJ1bm5pbmcgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIm5vZGUgLS1yZXF1aXJlIHRzLW5vZGUvcmVnaXN0ZXIgc3JjL2luZGV4LnRzIiksIiBzaG91bGQgcmVzdWx0IGluIHRoZSBvdXRwdXQgd2Ugd2FudC4iKSk7fWlmKHR5cGVvZiBNRFhDb250ZW50IT09J3VuZGVmaW5lZCcmJk1EWENvbnRlbnQmJk1EWENvbnRlbnQ9PT1PYmplY3QoTURYQ29udGVudCkmJk9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJNRFhDb250ZW50IixmaWxlbmFtZToibWFudWFsL0dvb2dsZS1DbG91ZC1QbGF0Zm9ybS9DbG91ZC1WaXNpb24tTm9kZWpzLm1kIn19KTt9TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"iMAAA,cACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CACA,cAGF,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,IAAI,QAAI,SAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHyB,EAA1B,CAKA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,MAGZ,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CADEN,KACF,+CACD,MAAO,KAAC,SAAD,kBAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GACL,SAAQ,CACN,KAAM,uBADA,CAAR,0BADK,CAIL,SAAQ,CACN,KAAM,YADA,CAAR,cAJK,CAOL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,uBAAG,UAAU,CAAC,IAAd,EAAuB,CACvC,OAAQ,uEAD+B,CAAvB,0EAApB,CADF,CAPK,CAYL,SAAQ,CACN,KAAM,eADA,CAAR,iBAZK,CAeL,uHAfK,CAgBL,0EAAiE,kBAAY,UAAU,CAAC,GAAvB,yBAAjE,qBAhBK,CAiBL,SAAQ,CACN,KAAM,oBADA,CAAR,sBAjBK,CAoBL,eAAK,0BAAM,UAAU,CAAC,KAAjB,EAA2B,CAC5B,YAAa,qBADe,CAA3B,2uCAAL,CApBK,CAuEL,wBAAe,kBAAY,UAAU,CAAC,GAAvB,iDAAf,yCAvEK,CAAP,CAyED,C,+RAEDD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"cloud-vision-w-nodejs\"\n    }}>{`Cloud Vision w/ Nodejs`}</h1>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs\"\n        }}>{`https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Ensure you have set up a GCP project with Cloud Vision enabled. Follow the link above if you need help.`}</p>\n    <p>{`Move the project creds to the right directory and install `}<inlineCode parentName=\"p\">{`@google-cloud/vision`}</inlineCode>{` for the project.`}</p>\n    <h2 {...{\n      \"id\": \"typescript-example\"\n    }}>{`TypeScript Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/index.ts\nconst vision = require('@google-cloud/vision');\nconst util = require('util');\nconst ss = require('string-similarity');\nconst cc = require('lodash.camelcase');\nconst up = require('lodash.capitalize');\nconst path = require('path');\n\nconst components: string[] = [\n  'Select',\n  'Text',\n  'Button',\n  'TextField',\n  'Image',\n  'Icon',\n];\n\nconst run = async () => {\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Base file required for the src folder detection\n  const fileName = './src/img/testFour.jpg';\n\n  // Performs text detection on the local file\n  const [result] = await client.textDetection(fileName);\n  const detections = result.textAnnotations;\n  console.log('=== STARTING ===');\n  const fullDetection = detections[0];\n  const { description } = fullDetection;\n\n  console.log('Description:', description);\n\n  let res = '';\n\n  description.split('\\\\n').map((line: string) => {\n    res += '<div>\\\\n';\n    line.split(',').map((text) => {\n      const { bestMatch } = ss.findBestMatch(up(cc(text)), components);\n      res += \\`\\\\t<\\${bestMatch.target} />\\\\n\\`;\n    });\n    res += '</div>\\\\n';\n  });\n  console.log('=== RES ===');\n  console.log(res);\n};\n\nrun();\n`}</code></pre>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`node --require ts-node/register src/index.ts`}</inlineCode>{` should result in the output we want.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}