{"version":3,"sources":["webpack:///./manual/Swift/Swift-3-API-Design-Guidelines.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href"],"mappings":"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","file":"static/js/manual-swift-swift-3-api-design-guidelines.2235427b.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"api-design-guidelines-in-swift-3\"}}>{`API Design Guidelines in Swift 3`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#api-design-guidelines-in-swift-3\"}}>{`API Design Guidelines in Swift 3`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-1-why-do-we-need-guidelines\"}}>{`SWD-1: Why do we need guidelines?`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-2-guidelines-for-naming-types\"}}>{`SWD-2: Guidelines for Naming Types`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-3-guidelines-for-naming-methods\"}}>{`SWD-3: Guidelines for Naming Methods`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-4-fluent-usage\"}}>{`SWD-4: Fluent Usage`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-5-prepositional-vs-grammatical-phrases\"}}>{`SWD-5: Prepositional vs Grammatical Phrases`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-6-recap-on-naming\"}}>{`SWD-6: Recap on Naming`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-7-side-effects-and-mutation\"}}>{`SWD-7: Side-Effects and Mutation`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#swd-8-conventions\"}}>{`SWD-8: Conventions`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-1-why-do-we-need-guidelines\"}}>{`SWD-1: Why do we need guidelines?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Initially when Swift was created, there were no real guidelines.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It still largely means working with Objective-C code.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the open sourcing in 2015, the Swift team worked towards a standard for the guidelines.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The most important rule with Swift is to correctly use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Point of Use`}</MDXTag>{`. Readability at call site is more important than point of definition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Methods and properties are written once and called and used many times, so the focus should be on the latter.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Secondly, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Clarity Over Brevity`}</MDXTag>{`. It is a non goal to enable to smallest possible code. With Objective-C, it was important to write with clarity for naming conventions. We want to stay on board with this clarity for naming.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-2-guidelines-for-naming-types\"}}>{`SWD-2: Guidelines for Naming Types`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`High level goal of naming things according to their role.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example for a quick variable:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var someValue = 12  // bad choice\nvar counter = 12    // better choice\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Rules for Naming`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Names of types properties, variables and constants should `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`read as nouns`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`class NetworkResponse`}</MDXTag>{` - we know from the name that it is for a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkReponse`}</MDXTag>{`. Therefore, we would decide that the responsibility for Network Connection is the responsibility for another class.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An example from the `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Swift Standard Library Names`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`BidirectionalCollection`}</MDXTag>{` - we know from the name that it is a collection that deals with both forward and backward traversal. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Sequence`}</MDXTag>{` protocol describes a type that provides sequential access to its elements.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The exceptions to this rule is for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Boolean`}</MDXTag>{` values - they should read as asserts. Eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isEmpty`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The second excepetion is the -able, -ible or -ing suffixes - used for protocols that model capabilities. Examples of this are `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Equatable`}</MDXTag>{` to distinguish between the same type, with other examples such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Comparable`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ExpressibleByStringLiteral`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-3-guidelines-for-naming-methods\"}}>{`SWD-3: Guidelines for Naming Methods`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We consider function names to be the base name plus the function list. Therefore, reading it will mean that it requires the base name and the arguments in order to understand it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For the function parameters themselves, they have both a external name and a local name.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func index(_ i: Self.Index, offsetBy n: Self.IndexDistance) -> Self.Index`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the second parametere, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`offsetBy`}</MDXTag>{` is the external name.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If there is just one parameter, then that will be both the external and local name. You can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`_`}</MDXTag>{` to offset the parameter external name.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Rule 1`}</MDXTag>{`\nWe should always check how functions read and use sites when we write them.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func insert(_ e: Element, atPosition: Int)`}</MDXTag>{` is better than `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`insert(element: \"a\", position: 1)`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Rule 2`}</MDXTag>{`\nAvoid Ambiguity`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func remove(atIndex: Int).`}</MDXTag>{` over `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func remove(_ index: Int)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, in the case of ambiguous type information, we preceed each weakly typed parameter with a noun describing it's role.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func addObserver(_ observer: AnyObject)`}</MDXTag>{` over `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func add(observer: AnyObject)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func update(value: Any, key: String)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here, Any and String both have weak type information.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func updateValue(_ value: Any, forKey key: String)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Summary`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Omit needless information`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Include all words need to avoid ambiguity`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Compensate for weak type information`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-4-fluent-usage\"}}>{`SWD-4: Fluent Usage`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The high level guidelines don't give too many details.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Fluent Usage`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Methods and functions should be read as grammatical English phrases at the use site.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func find(character: String, range: Range<String.Index>) -> Int`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This function takes as an argument a character which we'll define as a string defined. We also need the range, so we'll give it range.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We could use...`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func find(character: String, in range: Range<String.Index>) -> Int`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`But since it is ambiguous for weak type information, would be to omit the external label and the first argument of the name describing it's role:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func find(character: Character, in range: Range<String.Index>) -> Int`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-5-prepositional-vs-grammatical-phrases\"}}>{`SWD-5: Prepositional vs Grammatical Phrases`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is an exception for the grammatical phrases.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Eg. \"The laptop on the desk\" - `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`on`}</MDXTag>{` is the preposition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How does this relate?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Eg.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func move(position: Int)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Normally we would say \"move to position\", however if we need to use that preposition `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`to`}</MDXTag>{` then we give it an argument label that begins at the preposition.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func move(toPosition position: Int)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Another example would be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`x.removeBoxes(havingLength: 12)`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The exception to this would be that only one argument governed the function.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func move(toX: Int, y: Int)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We begin with the prepositional phrase, however both args are part of the abstraction. In that case, we move the preposition out of the arguments in to the base name.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func moveTo(x: Int, y: Int)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Another example for context:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func dismiss(animated: Bool)`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-6-recap-on-naming\"}}>{`SWD-6: Recap on Naming`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Prepositional Phrase: Exception`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view.fadeTo(red: a, green: b, blue: c)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Grammatical Phrase`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view.addSubview(y)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Neither Gammatical Nor Prepositional`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func dismiss(animated: Bool)`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Omit needless words`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Avoid ambiguity`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Avoid needless words`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`More Examples of Methods from the Swift SDK`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`func activate(_ constraints: [NSLayoutConstraint])\n// activate constraints - grammatical\n// omit needless words - so no need for activateConstraints\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`func max(_ x: Int, _ y: Int) -> Int\n// no meaningful to write more beyond the base\n// no need for naming arguments\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-7-side-effects-and-mutation\"}}>{`SWD-7: Side-Effects and Mutation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We want to name methods in accordance with their side effect.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is one that mutates the current state. If it effects the current state, it should be named using verb phrases.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An example would adding an element to the array. This effects the state of the array as it mutates it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func append(_ newElement: Element)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Nouns are used for when the state is not effected.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func distance(to point: Point)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`What if the operation is naturally described as a verb?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then we use the imperitive form for the verb.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`anArray.filter(isEven)`}</MDXTag>{` - filter being the verb mutating the array state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Mutating verse non-mutation of the state`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Mutating example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`anArray.sort()`}</MDXTag>{`\nNon-mutating example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`let sortedArray = anArray.sorted()`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Suffixes that can be used include `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`-ed`}</MDXTag>{` and when it doesn't sound right `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`-ing`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Mutation for nouns`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is simpler. We use noun for non-mutating and form prefix for mutating counterpart.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Mutating example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`anArray.formUnion(with: anotherArray)`}</MDXTag>{`\nNon-mutating: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`let union = anArray.union(with: anotherArray)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The exception arises for pairs of mutating and non-mutating counterparts.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If it best described using a verb, you use that for the mutating method.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For non-mutating, use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`-ed`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`-ing`}</MDXTag>{` suffix.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then noun form for non-mutating version of nouns and form prefix for mutating method.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"swd-8-conventions\"}}>{`SWD-8: Conventions`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Boolean Methods`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`func isInRange(of point: Point)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Parameters`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Choose parameter names that serve documentation.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use default values where possible to simplify function signatures.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`In Swift, default args are preferred to method families.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`let order = lastName.compare(royalFamilyName, options: [], range: nil, local: nil)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Keep parameters with default parameters to sit at the end of the function.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Same basenames are also fine if they operate within different domains.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}