(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{"./manual/Principles/Typography.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return f});var o=t("./node_modules/react/index.js"),a=t.n(o),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}function m(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function l(e,n){return!n||"object"!==s(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var f=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=l(this,i(n).call(this,e))).layout=null,t}var t,o,s;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,a.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.components;c(e,["components"]);return a.a.createElement(r.MDXTag,{name:"wrapper",components:n},a.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"fonts-cli"}},"Fonts CLI"),a.a.createElement(r.MDXTag,{name:"p",components:n},"This tool is a wrapper to help download/rename fonts to fit with the font naming conventions."),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"conventions"}},"Conventions"),a.a.createElement(r.MDXTag,{name:"p",components:n},"For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code)."),a.a.createElement(r.MDXTag,{name:"p",components:n},"We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition."),a.a.createElement(r.MDXTag,{name:"p",components:n},"To see the conventional name for font weights, ",a.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e"}},"Mozilla has a reference here.")),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"examples"}},"Examples"),a.a.createElement(r.MDXTag,{name:"table",components:n},a.a.createElement(r.MDXTag,{name:"thead",components:n,parentName:"table"},a.a.createElement(r.MDXTag,{name:"tr",components:n,parentName:"thead"},a.a.createElement(r.MDXTag,{name:"th",components:n,parentName:"tr",props:{align:null}},"Example name"),a.a.createElement(r.MDXTag,{name:"th",components:n,parentName:"tr",props:{align:null}},"After renaming"))),a.a.createElement(r.MDXTag,{name:"tbody",components:n,parentName:"table"},a.a.createElement(r.MDXTag,{name:"tr",components:n,parentName:"tbody"},a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"SourceSansPro-200.ttf"),a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"source-sans-pro-extra-light.ttf")),a.a.createElement(r.MDXTag,{name:"tr",components:n,parentName:"tbody"},a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"SourceSansPro-200italic.ttf"),a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"source-sans-pro-extra-light-italic.ttf")),a.a.createElement(r.MDXTag,{name:"tr",components:n,parentName:"tbody"},a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"SourceSansPro-regular.ttf"),a.a.createElement(r.MDXTag,{name:"td",components:n,parentName:"tr",props:{align:null}},"source-sans-pro-regular.ttf")))),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"renaming"}},"Renaming"),a.a.createElement(r.MDXTag,{name:"p",components:n},"Running the rename function will find the path of the fonts and return it in the condition we require for the convention."),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"const oldNames = [\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\n];\n\n/*\n    // ! after renaming oldNames through function\n\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\n*/\n")),a.a.createElement(r.MDXTag,{name:"p",components:n},"You can use something like the following to do this:"),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"const fs = require('fs-extra');\nconst cwd = process.cwd();\nconst recursive = require('recursive-readdir');\nconst kebabCase = require('lodash.kebabcase');\n\n/**\n * Replace names of fonts found within directory\n * with naming convention.\n *\n */\nconst updateFontNames = async() => {\n    /**\n     * ! Replace numeral with comment name - hack job.\n     *\n     * @param {string} name Name of the font to update\n     */\n    const commentWeightName = name => {\n        name = name.replace('100', 'thin');\n        name = name.replace('200', 'extra-light');\n        name = name.replace('300', 'light');\n        name = name.replace('400', 'normal');\n        name = name.replace('500', 'medium');\n        name = name.replace('600', 'semi-bold');\n        name = name.replace('700', 'bold');\n        name = name.replace('800', 'extra-bold');\n        name = name.replace('900', 'black');\n        return name;\n    }\n\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\n    for (const fontPath of fontFiles) {\n        try {\n            const fontDirArr = fontPath.split('/');\n            const fontNameFull = fontDirArr.pop();\n            const font = fontNameFull.replace('.ttf', '');\n            const fontDir = fontDirArr.join('/');\n            let kebabFontName = kebabCase(font);\n            const newFontName = commentWeightName(kebabFontName);\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n};\n")),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"convention-usage-for-web"}},"Convention usage for Web"),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-scss"}},"/* open sans - light */\n@font-face {\n    font-family: 'open-sans-regular';\n    font-style: normal;\n    font-weight: 300;\n    // local() just checks for local files first\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\n}\n\n// Font mixins\n@mixin f-opensans-regular {\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// optional - flexible usage\n@mixin f-primary-regular {\n    // option a)\n    @include f-opensans-regular;\n    // option b) - don't include the above mixin for this\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// usage for standard base class\np,\nli {\n    @include f-primary-regular;\n    font-size: 1.5rem;\n    line-height: 1.4;\n    margin-bottom: 10px;\n}\n")),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"convention-usage-for-react-native-not-expo"}},"Convention usage for React Native (not Expo)"),a.a.createElement(r.MDXTag,{name:"p",components:n},"For React Native, fonts MUST be kept at the root in ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"assets/fonts"),"."),a.a.createElement(r.MDXTag,{name:"p",components:n},"Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file)."),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e"}},"Check here for more information on what to do.")),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"convention-usage-for-expo"}},"Convention usage for Expo"),a.a.createElement(r.MDXTag,{name:"p",components:n},"For React Native, fonts MUST be kept at the root in ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"assets/fonts"),"."),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"import { Font } from 'expo';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    Font.loadAsync({\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\n    });\n  }\n\n  // ...\n}\n")))}}])&&m(t.prototype,o),s&&m(t,s),n}();f.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-principles-typography.305817e8304de77c75ce.js.map