{"version":3,"sources":["webpack:///./manual/Sketchup/naming.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className","src","alt","title"],"mappings":"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","file":"static/js/manual-sketchup-naming.004099b7.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"naming-conventions\"}}>{`Naming Conventions`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"sketchup-types\"}}>{`Sketchup Types`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This may change as changes are made to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sketchup`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// Set what types to set for specific names\n// in output yaml file depending on\n// program type and Sketch prefix name\nconst liftClassTypes = {\n    react: {\n        default: 'div',\n        page: 'page',\n        section: 'section',\n        container: 'div',\n        block: 'div',\n        button: 'button',\n        heading: 'h3',\n        text: 'p',\n        component: 'div',\n        nav: 'nav',\n        link: 'a',\n        img: 'img',\n        grid: 'div',\n        'grid-item': 'div',\n        icon: 'img',\n        bg: 'img',\n        input: 'input',\n        form: 'form'\n    },\n    'react-native': {\n        default: 'View',\n        screen: 'Screen',\n        list: 'FlatList',\n        view: 'View',\n        button: 'Button',\n        text: 'Text',\n        component: 'View'\n    },\n    static: {\n        default: 'div',\n        page: 'page',\n        section: 'section',\n        container: 'div',\n        block: 'div',\n        button: 'button',\n        heading: 'h3',\n        text: 'p',\n        component: 'div',\n        nav: 'nav',\n        link: 'a',\n        img: 'img',\n        grid: 'div',\n        'grid-item': 'div',\n        icon: 'img',\n        bg: 'img',\n        input: 'input',\n        form: 'form'\n    }\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`For properties that are eligible for children there is an array available:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// Name props eligible to have text value within tags\nconst propsEligible = ['Text', 'h1', 'h2', 'h3', 'p', 'button'];\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"controlling-new-pages-or-components\"}}>{`Controlling new pages, or components`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If a Sketch layer containers the words `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`helper`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ignore`}</MDXTag>{`, that will not be included in the final yml output.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If the type from the name is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`page`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`screen`}</MDXTag>{`, it will setup a brand new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`page`}</MDXTag>{` component.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If type is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`component`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`section`}</MDXTag>{`, it will set up a new file for the component/section.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Otherwise, if the type is included from above in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`liftClassTypes`}</MDXTag>{` then the logic will work to figure out what type to associate.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// within deconstruct() function\nif (l.name.includes('helper') || l.name.includes('ignore')) return;\n\n/**\n * Check key from types and apply type\n * for component. Ensure split layer name\n * array element 0 is exact to convention\n * declared above.\n */\nliftClassKeyList.map((d) => {\n    const lNameSplit = l.name.split('-');\n    const lType = lNameSplit[0];\n    if (lType === d) {\n        if (d === 'page' || d === 'screen') {\n            component = upperFirst(camelCase(l.name));\n        } else if (d === 'component' || d === 'section') {\n            component =\n                argv._[0] === 'static' ? l.name : upperFirst(camelCase(l.name));\n            firstChild =\n                typeof liftClassTypes[argv._[0]][d] !== 'undefined'\n                    ? liftClassTypes[argv._[0]][d]\n                    : null;\n            newFile = true;\n        } else if (typeof liftClassTypes[argv._[0]][d] !== 'undefined') {\n            component = liftClassTypes[argv._[0]][d];\n        }\n    }\n});\nif (!component) return;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"example-reference\"}}>{`Example reference`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following Sketch file has an example of the naming convention in use:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"assets/naming.png\",\"alt\":\"Example layout\",\"title\":\"Example Layout\"}}></MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}