(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{"./manual/Ruby/Ruby-Code-Guide.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("./node_modules/react/index.js"),r=a.n(t),o=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}function p(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function c(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,n){return(i=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=c(this,l(n).call(this,e))).layout=null,a}var a,t,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&i(e,n)}(n,r.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"ruby-basics-help-sheet"}},"Ruby Basics Help Sheet"),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-basics-help-sheet"}},"Ruby Basics Help Sheet"),r.a.createElement(o.MDXTag,{name:"ul",components:n,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-1-comments"}},"RUBY-1: Comments")))),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#this-is-an-example-comment"}},"This is an example comment"),r.a.createElement(o.MDXTag,{name:"ul",components:n,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-2-variables"}},"RUBY-2: Variables")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-3-console-puts"}},"RUBY-3: Console puts")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-4-call-a-method"}},"RUBY-4: Call a method")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-5-define-a-method"}},"RUBY-5: Define a method")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-6-equality"}},"RUBY-6: Equality")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-7-inequality"}},"RUBY-7: Inequality")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-8-decisions-with-if"}},"RUBY-8: Decisions with if")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-9-constants"}},"RUBY-9: Constants")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-10-strings"}},"RUBY-10: Strings")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-11-concatentation"}},"RUBY-11: Concatentation")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-12-substitute"}},"RUBY-12: Substitute")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-13-string-access"}},"RUBY-13: String Access")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-14-arrays"}},"RUBY-14: Arrays")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-15-add-an-array-element"}},"RUBY-15: add an array element")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ruby-16-hashes"}},"RUBY-16: Hashes")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#thruby-1-th-ruby-basics"}},"THRUBY-1: TH Ruby Basics")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#thruby-2-ruby-strings"}},"THRUBY-2: Ruby Strings")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#thruby-2-ruby-numbers"}},"THRUBY-2: Ruby Numbers")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#thruby-2-ruby-methods"}},"THRUBY-2: Ruby Methods"))))),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-1-comments"}},"RUBY-1: Comments"),r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"this-is-an-example-comment"}},"This is an example comment"),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-2-variables"}},"RUBY-2: Variables"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'variable = some_value\n\nname = "Tobi"\nname # => "Tobi"\n\nsum = 18 + 5\nsum # => 23\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-3-console-puts"}},"RUBY-3: Console puts"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'puts something\n\nputs "Hello World"\nputs [1, 5, "mooo"]\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-4-call-a-method"}},"RUBY-4: Call a method"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'object.method(args)\n\nstring.length\narray.delete_at(2)\nstring.gsub("ae", "\xe4")\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-5-define-a-method"}},"RUBY-5: Define a method"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'def name(parameter)\n    #method body\nend\n\ndef greet(name)\n    puts "Hi there " + name\nend\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-6-equality"}},"RUBY-6: Equality"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'object == other\n\ntrue == true # => true\n3 == 4 # => false\n"Hello" == "Hello" # => true\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-7-inequality"}},"RUBY-7: Inequality"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"object != other\n\ntrue != true # => false\n3 != 4 # => true\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-8-decisions-with-if"}},"RUBY-8: Decisions with if"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"if condition\n    # happens when true\nelse\n    # happens when false\nend\n\nif input == password\n    grant_access\nelse\n    deny_access\nend\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-9-constants"}},"RUBY-9: Constants"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"CONSTANT = some_value\n\nPI = 3.1415926535\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-10-strings"}},"RUBY-10: Strings"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"'This is a string'\n'This is a string with an #{expression}'\n\nexample = 'This is another string'\nexample.length\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-11-concatentation"}},"RUBY-11: Concatentation"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'string + string2\n"Hello " + "reader"\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-12-substitute"}},"RUBY-12: Substitute"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'string.gsub(a_string, substitute)\n"Bill".gsub("ill", "oo")\n# => "Boo"\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-13-string-access"}},"RUBY-13: String Access"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'string[position] "Hello"[1] # => "e"\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-14-arrays"}},"RUBY-14: Arrays"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'[contents]\n\n[]  # empty array\n["Rails", "fun", 5]\n\narray.size\n\n[].size # => 0\n[1,2,3].size # => 3\n["foo", "bar"].size # => 2\n\narray[position]\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-15-add-an-array-element"}},"RUBY-15: add an array element"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"array << element\n\narray = [1,2,3]\narray << 4\narray # => [1,2,3,4]\narray[4] = 5\n\narray.delete_at(i)\n\narray.each do |e| .. end\n\npersons.each do |p|\n    puts p.name\nend\n\nnumbers.each do |n|\n    n = n * 2\nend\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"ruby-16-hashes"}},"RUBY-16: Hashes"),r.a.createElement(o.MDXTag,{name:"p",components:n},'Hashes associate a key to some value. You may then retrieve the value based upon its key. This construct is called a dictionary in other languages, which is appropriate because you use the key to "look up" a value, as you would look up a definition for a word in a dictionary. Each key must be unique for a given hash but values can be repeated.'),r.a.createElement(o.MDXTag,{name:"p",components:n},"Hashes can map from anything to anything! You can map from Strings to Numbers, Strings to Strings, Numbers to Booleans... and you can mix all of those! Although it is common that at least all the keys are of the same class. Symbols are especially common as keys. Symbols look like this: :symbol. A symbol is a colon followed by some characters. You can think of them as special strings that stand for (symbolize) something! We often use symbols because Ruby runs faster when we use symbols instead of strings."),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"{key => value}\n{:hobby => 'programming'}\n\n{42 => 'answer', 'score' => 100, :name => 'Tobi'}\n\nhash[key]\n\nhash = {:key => 'value'}\nhash[:key] # =>  'value'\nhash[foo] # => nil\n\nhash[key] = value\n\nhash = {:a => \"b\"}\nhash[:key] = \"value\"\nhash # => {:a=>b, :key=>\"value\"}\n\nhash.delete(key)\nhash = {:a => 'b', :b => 10}\nhash.delete(:a)\nhash # => {:b=>10}\n")),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"thruby-1-th-ruby-basics"}},"THRUBY-1: TH Ruby Basics"),r.a.createElement(o.MDXTag,{name:"p",components:n},"Interactive environment: irb (in the terminal)"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'puts "hello world!"\n')),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Mathematics")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"3**2 // this means three to the square of two\nMath.sqrt(a+b)  // this is a static method\n")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Methods")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'def hi\n    puts "Hello World!"\nend\n')),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"if the method does not take parameters, then you do not need to define the curly braces")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Classes")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'class Greeter\n    attr_accessor :name\n    def initialize(name = "World")\n        @name = name\n    end\n    def say_hi\n        puts "Hi #{@name}!"\n    end\n    def say_bye\n        puts "Bye #{@name}, come back"\n    end\nend\n\ngreeter = Greeter.new("Pat")\n')),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"Using attr_accessor defined two new methods for us, name to get the value, and name= to set it.")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"LOOPING")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'@names.each do |name|\n  puts "Hello #{name}!"\nend\n\n# Say bye to everybody\ndef say_bye\n  if @names.nil?\n    puts "..."\n  elsif @names.respond_to?("join")\n    # Join the list elements with commas\n    puts "Goodbye #{@names.join(", ")}.  Come back soon!"\n  else\n    puts "Goodbye #{@names}.  Come back soon!"\n  end\nend\n')),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Input and Output")),r.a.createElement(o.MDXTag,{name:"p",components:n},"Giving input to the variable."),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"puts auto creates \n"),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"print does not")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'# name = "Jason"\n\nprint "Please enter your name: "\nname = gets # this is what is going to take the input\nputs "Hello #{name}!"\n')),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"thruby-2-ruby-strings"}},"THRUBY-2: Ruby Strings"),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"What are Strings?")),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"Using double quotes when creating a string will cause variables in the string to be interpolated.")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'# this will all print out as is\nname="Dennis"\nstring = <<-STRING\nHello\nMy name is #{name}\nWorkspaces is fun!\nSTRING\nthisAlsoWorks="This is\na multiline String\n"\n')),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Whitespace")),r.a.createElement(o.MDXTag,{name:"p",components:n},"\n -> new line\ns -> space\n\t -> new tab"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},'example = "New line \nhere"\n')),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"thruby-2-ruby-numbers"}},"THRUBY-2: Ruby Numbers"),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"thruby-2-ruby-methods"}},"THRUBY-2: Ruby Methods"))}}])&&p(a.prototype,t),m&&p(a,m),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-ruby-ruby-code-guide.305817e8304de77c75ce.js.map