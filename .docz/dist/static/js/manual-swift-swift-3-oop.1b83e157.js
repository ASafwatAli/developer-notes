(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{"./manual/Swift/Swift-3-OOP.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var a=t("./node_modules/react/index.js"),r=t.n(a),o=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}function m(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function i(e,n){return!n||"object"!==s(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=i(this,c(n).call(this,e))).layout=null,t}var t,a,s;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,r.a.Component),t=n,(a=[{key:"render",value:function(){var e=this.props,n=e.components;l(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"swift-3-oop"}},"Swift 3 OOP"),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#swift-3-oop"}},"Swift 3 OOP"),r.a.createElement(o.MDXTag,{name:"ul",components:n,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#structs"}},"Structs")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#instances-of-objects"}},"Instances of Objects")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#methods"}},"Methods")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#initialisers-and-self"}},"Initialisers and Self")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#class"}},"Class")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#inheritance"}},"Inheritance")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#structs-vs-classes"}},"Structs vs Classes"),r.a.createElement(o.MDXTag,{name:"ul",components:n,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----value-type-vs-reference-type"}},"---- Value type vs Reference type"))))))),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"structs"}},"Structs"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"let coordinate1: (x: Int, y: Int) = (1,0) //tuple\ncoordinate1.x\n\n// structs are the blueprints\nstruct Point {\n  let x: Int\n  let y: Int\n}\n\n// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\n")),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"instances-of-objects"}},"Instances of Objects"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\np1.x\np1.y\n\nstruct User {\n  let username: String\n  let password: String\n}\n\nlet Login = User(username: "example@mail.com", password: "123pass")\nLogin.username\nLogin.password\n')),r.a.createElement("div",{id:"newSection"}),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"methods"}},"Methods"),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"Declaring empty arrays that infer a type ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"var results: [Point] = []")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"Declaring it the preferred way ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"var results = [Point]()"))),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'struct PointTwo {\n  let x: Int\n  let y: Int\n\n  // three slashes helps with definitions\n\n  /// Returns the surrounding points in range of\n  /// the current one\n  func points(inRange range: Int = 1) -> [PointTwo] {\n    var results = [PointTwo]()\n\n    let lowerBoundOfXRange = x - range\n    let upperBoundOfXRange = x + range\n\n    let lowerBoundOfYRange = y - range\n    let upperBoundOfYRange = y + range\n\n    for xCoordinate in lowerBoundOfXRange...upperBoundOfXRange {\n      for yCoordinate in lowerBoundOfYRange...upperBoundOfYRange {\n        let coordinatePoint = PointTwo(x: xCoordinate, y: yCoordinate)\n        results.append(coordinatePoint)\n      }\n    }\n\n    return results\n  }\n}\n\nlet p2 = PointTwo(x: 1, y: 0)\np2.x\np2.y\n\nlet rangeReturn = p2.points(inRange: 3)\nrangeReturn[0].x\nrangeReturn[3].y\n\nstruct Person {\n    let firstName: String\n    let lastName: String\n\n    func fullName() -> String {\n      return firstName + " " + lastName\n    }\n}\n\nlet aPerson = Person(firstName: "Billy", lastName: "Bob")\nlet myFullName = aPerson.fullName()\n')),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"initialisers-and-self"}},"Initialisers and Self"),r.a.createElement(o.MDXTag,{name:"p",components:n},"Self is generally only used in Swift in the init method or when differentiating"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'struct Point {\n  let x: Int\n  let y: Int\n\n  init(x: Int, y: Int) {\n    self.x = x;\n    self.y = x;\n  }\n}\n\nstruct RGBColor {\n  let red: Double\n  let green: Double\n  let blue: Double\n  let alpha: Double\n\n  let description: String\n\n  // Add your code below\n  init(red: Double, green: Double, blue: Double, alpha: Double) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n    self.alpha = alpha\n\n    self.description = "red: (self.red), green: (self.green), blue: (self.blue), alpha: (self.alpha)"\n  }\n}\n\nlet test = RGBColor(red: 16.0, green: 5.0, blue: 4.3, alpha: 3.0)\ntest.description\n')),r.a.createElement("div",{id:"classes"}),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"class"}},"Class"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-swift"}},'class Enemy {\n  var life: Int = 2\n  let position: Point\n\n  init(x: Int, y: Int) {\n    self.position = Point(x: x, y: y)\n  }\n\n  func decreaseLife(by factor: Int) {\n    life -= factor\n  }\n\n}\n\nstruct Location {\n  let latitude: Double\n  let longitude: Double\n}\n\nclass Business {\n  var name: String\n  var location: Location\n\n  init(name: String, location: Location) {\n    self.name = name\n    self.location = location\n  }\n}\n\nlet someBusiness = Business(name: "Quiry", location: Location(latitude: 341, longitude: 82))\n')),r.a.createElement("div",{id:"inheritance"}),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"inheritance"}},"Inheritance"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"class SuperEnemy: Enemy {\n  let isSuper: Bool = true\n\n  override init(x: Int, y: Int) {\n    super.init(x: x, y: y)\n    self.life = 50\n  }\n}\n")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"class Vehicle {\n  var numberOfDoors: Int\n  var numberOfWheels: Int\n\n  init(withDoors doors: Int, andWheels wheels: Int) {\n      self.numberOfDoors = doors\n      self.numberOfWheels = wheels\n  }\n}\n\nclass Car: Vehicle {\n  var numberOfSeats: Int = 4\n\n  override init(withDoors doors: Int, andWheels wheels: Int) {\n    super.init(withDoors: doors, andWheels: wheels)\n  }\n\n}\n\nlet someCar = Car(withDoors: 4, andWheels: 4)\n")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'class Person {\n  let firstName: String\n  let lastName: String\n\n  init(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n\n  func fullName() -> String {\n    return "(firstName) (lastName)"\n  }\n}\n\n// Enter your code below\nclass Doctor: Person {\n\n  override init(firstName: String, lastName: String) {\n    super.init(firstName: firstName, lastName: lastName)\n  }\n\n  override func fullName() -> String {\n    return "Dr. (lastName)"\n  }\n}\n\nlet someDoctor = Doctor(firstName: "Sam", lastName: "Smith")\n')),r.a.createElement("div",{id:"final"}),r.a.createElement(o.MDXTag,{name:"hr",components:n}),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"structs-vs-classes"}},"Structs vs Classes"),r.a.createElement(o.MDXTag,{name:"p",components:n},"Distinct line in the sand."),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-swift"}},'import UIKit\n\nvar str = "Hello, playground"\n\n\nstruct User {\n  var fullName: String\n  var email: String\n  var age: Int\n}\n\nvar someUser = User(fullName: "Denis O\'Keeffe", email: "test@test", age: 24)\n\nvar anotherUser = someUser\n\nsomeUser.email = "newemail@email"\n\n// remains as test@test\nanotherUser.email\n\nclass Person {\n  var fullName: String\n  var email: String\n  var age: Int\n\n  init(name: String, email: String, age: Int) {\n    self.fullName = name\n    self.email = email\n    self.age = age\n  }\n}\n\nvar somePerson = Person(name: "Tim Cook", email: "tc@apple.com", age: 54)\n\nvar anotherPerson = somePerson\n\nsomePerson.email = "newemail@email"\n\n// newemail@email -> points to the same reference\nanotherPerson.email\n')),r.a.createElement("div",{id:"valuevsref"}),r.a.createElement(o.MDXTag,{name:"h3",components:n,props:{id:"-----value-type-vs-reference-type"}},"---- Value type vs Reference type"),r.a.createElement(o.MDXTag,{name:"p",components:n},"Values are copied across, references are not. All ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"structs")," are value types."))}}])&&m(t.prototype,a),s&&m(t,s),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-swift-swift-3-oop.305817e8304de77c75ce.js.map