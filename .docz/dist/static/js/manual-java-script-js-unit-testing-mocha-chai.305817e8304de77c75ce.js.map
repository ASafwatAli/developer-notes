{"version":3,"sources":["webpack:///./manual/JavaScript/JS-Unit-Testing-Mocha-Chai.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName"],"mappings":"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","file":"static/js/manual-java-script-js-unit-testing-mocha-chai.45f8989b.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><div id=\"section\"></div>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"getting-started\"}}>{`Getting Started`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`BDD - Behaviour Driven Development `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We want to put the test code in a file separate from the other code.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After install the dev dependency of mocha and chai, you can write a test.js file and then run \\`mocha test.js' and it will simply run the test!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To start making these tests, we `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`NEED`}</MDXTag>{` to make a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`test`}</MDXTag>{` file in the same directory as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`package.json`}</MDXTag></MDXTag>\n<div id=\"testSuite\"></div>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"-----building-a-test-suite\"}}>{`---- Building a test suite`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Write a test that will run the test using the npm task `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`test`}</MDXTag>{` and just reply an assertion to be true.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const expect = require('chai').expect;\n\n// Test suite\ndescribe('Mocha', () => {\n\n    // Test spec (unit test)\n    it('should run our test using npm', () => {\n        expect(true).to.be.ok;\n    });\n\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`spec`}</MDXTag>{` looks very similar to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`suite`}</MDXTag>{`. It takes 2 arguments.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`A string describing the desired behaviour.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`A function that wraps all the expectations together.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It's important to start guessing what the function might expect etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We do a lot of the guess work for setting the spec itself. It may feel awkward at the start, but it will help get some bearings.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once the spec is written, if we actually get `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{` returned, that is likely because the function hasn't been written and/or does not return anything.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`let expect = require('chai').expect;\n\ndescribe('checkForShip', () => {\n    const checkForShip = require('../path/to/src').checkForShip;\n    \n    // this is the test spec\n    it('should correctly report no ship at a given player's coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`// example in the /src/js/ship_methods.js`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`function checkForShip (player, coordinates) {`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`var shipPresent, ship;\n\nfor (var i = 0; i < player.ships.length; i++) {\n    ship = player.ships[i];\n\n    shipPresent = ship.locations.filter( (actualCoordinate) => {\n        return (actualCoordinate[0] === coordinates[0]) && (actualCoordinate[1] === coordinates[1]);\n    })[0];\n\n    if (!shipPresent) {\n        return false;\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`}`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}