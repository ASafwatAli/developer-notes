(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{"./manual/Terraform/Terraform.md":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return u});var t=n("./node_modules/react/index.js"),r=n.n(t),o=n("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function s(e,a){for(var n=0;n<a.length;n++){var t=a[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function l(e,a){return!a||"object"!==m(a)&&"function"!==typeof a?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):a}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,a){return(i=Object.setPrototypeOf||function(e,a){return e.__proto__=a,e})(e,a)}var u=function(e){function a(e){var n;return function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,a),(n=l(this,c(a).call(this,e))).layout=null,n}var n,t,m;return function(e,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),a&&i(e,a)}(a,r.a.Component),n=a,(t=[{key:"render",value:function(){var e=this.props,a=e.components;p(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:a},r.a.createElement(o.MDXTag,{name:"h1",components:a,props:{id:"terraform"}},"Terraform"),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"course-content"}},"Course Content"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash"}},"# Use this to get the content\n$ git clone https://github.com/wardviaene/terraform-course\n")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"useful-terraform-commands"}},"Useful Terraform Commands"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash"}},"$ terraform plan # plan\n$ terraform apply # shortcut for plan and apply - avoid in production\n$ terraform plan -out out.terraform # terraform and write the plan to out file\n$ terraform apply out.terraform # apply terraform plan using out file\n$ terraform show # show current state\n$ cat terraform.tfstate\n")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"what-is-terraform"}},"What is Terraform?"),r.a.createElement(o.MDXTag,{name:"ul",components:a},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"Infrastructure as ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"li"},"code")),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"li"},"Automation")," of infrastructure"),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"Keep our infrastructure in a certain state (compliant)",r.a.createElement(o.MDXTag,{name:"ul",components:a,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"e.g. 2 web instances with 2 volumes + 1 load balancer"))),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"Make infrastructure ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"li"},"auditable"),r.a.createElement(o.MDXTag,{name:"ul",components:a,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"You can keep your infrastructure change history in a ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"li"},"version control")," system like GIT"))),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"Terraform can automate provisioning of the ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"li"},"infrastructure itself"),". ")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"installation-of-terraform"}},"Installation of Terraform"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Head onto the Terraform website, download the .zip file and then move the binary after unzipping into your path to access it from the CLI."),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"hello-terraform"}},"Hello Terraform!"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Example hello using Terraform to spin up an EC2 micro instance."),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'provider "aws" {\n  access_key = "ACCESS_KEY_HERE"\n  secret_key = "SECRET_KEY_HERE"\n  region     = "ap-southeast-1"\n}\n\nresource "aws_instance" "example" {\n  ami           = "ami-0d729a60"\n  instance_type = "t2.micro"\n}\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"To initialise and spin up the instance, run the following:"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash"}},"$ terraform init\n$ terraform plan -out file.terraform\n$ terraform apply file.terraform\n$ terraform destory # tear down the instance\n")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"variables"}},"Variables"),r.a.createElement(o.MDXTag,{name:"p",components:a},"To create variables, we create two files ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"provider.tf")," and ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"vars.tf")," that we can commit and one git ignored file ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"terraform.tfvars")," to store these private variables in."),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# provider.tf\nprovider "aws" {\n    access_key="${var.AWS_ACCESS_KEY}"\n    secret_key="${var.AWS_SECRET_KEY}"\n    region="${var.AWS_REGION}"\n}\n\n# vars.tf\nvariable "AWS_ACCESS_KEY" {}\nvariable "AWS_SECRET_KEY" {}\nvariable "AWS_REGION" {\n    default = "ap-southeast-2"\n}\n\n# terraform.tfvars\nAWS_ACCESS_KEY=""\nAWS_SECRET_KEY=""\nAWS_REGION=""\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"For env vars: Terraform will read environment variables in the form of ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"TF_VAR_name")," to find the value for a variable. For example, the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"TF_VAR_access_key")," variable can be set to set the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"access_key")," variable."),r.a.createElement(o.MDXTag,{name:"h3",components:a,props:{id:"lookup-examples"}},"Lookup examples"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# instance.tf\nresource "aws_instance" "example" {\n  ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n  instance_type = "t2.micro"\n}\n\n# provider.tf\nprovider "aws" {\n    access_key = "${var.AWS_ACCESS_KEY}"\n    secret_key = "${var.AWS_SECRET_KEY}"\n    region = "${var.AWS_REGION}"\n}\n\n# vars.tf\nvariable "AWS_ACCESS_KEY" {}\nvariable "AWS_SECRET_KEY" {}\nvariable "AWS_REGION" {\n  default = "eu-west-1"\n}\nvariable "AMIS" {\n  type = "map"\n  default = {\n    us-east-1 = "ami-13be557e"\n    us-west-2 = "ami-06b94666"\n    eu-west-1 = "ami-0d729a60"\n  }\n}\n\n# terraform.tfvars\nAWS_ACCESS_KEY=""\nAWS_SECRET_KEY=""\nAWS_REGION=""\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"For info on which ami results from where, checkout ",r.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://cloud-images.ubuntu.com/locator/ec2/"}},"https://cloud-images.ubuntu.com/locator/ec2/"),"."),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"software-provisioning"}},"Software Provisioning"),r.a.createElement(o.MDXTag,{name:"p",components:a},"There are 2 ways to provision software:"),r.a.createElement(o.MDXTag,{name:"ol",components:a},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ol"},r.a.createElement(o.MDXTag,{name:"p",components:a,parentName:"li"},"Build your own custom AMI (ie Packer).")),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ol"},r.a.createElement(o.MDXTag,{name:"p",components:a,parentName:"li"},"Another way is to be standardized AMIs and then install the software you need on it: "),r.a.createElement(o.MDXTag,{name:"ul",components:a,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"p",components:a,parentName:"li"},"Use file uploads")),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"p",components:a,parentName:"li"},"Use remote exec")),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"p",components:a,parentName:"li"},"Use automation tools like chef, puppet, ansible"))))),r.a.createElement(o.MDXTag,{name:"h3",components:a,props:{id:"file-uploads"}},"File Uploads"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# instance.tf\nresource "aws_instance" "example" {\n    ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n    instance_type = "t2.micro"\n    \n    provisioner "file" {\n        source = "app.conf"\n        destination = "/etc/myapp.conf"\n    }\n}\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"The provisioner will have to use SSH etc."),r.a.createElement(o.MDXTag,{name:"p",components:a},"Another example with the connection:"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# instance.tf\nresource "aws_instance" "example" {\n    ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n    instance_type = "t2.micro"\n    # IF SSH\n    key_name = "${aws_key_pem.mykey.key_name}"\n    # ENDIF\n    \n    provisioner "file" {\n        source = "app.conf"\n        destination = "/etc/myapp.conf"\n        # ! FOR PASSWORD\n        connection {\n            user = "${var.instance_username}"\n            password = "${var.instance_password}"\n        }\n        \n        connection {\n            user = "${var.instance_username}"\n            private_key = "${file(${var.path_to_private_key})}"\n        }\n    }\n    \n    # IF YOU UPLOAD A .sh FILE AND WANT TO RUN IT\n    provisioner "remote-exec" {\n        inline = [\n            "chmod +x /path/to/script.sh",\n            "/path/to/script.sh arguments"\n        ]\n    }\n}\n')),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"attributes"}},"Attributes"),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"state"}},"State"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Terraform keeps state in ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"terraform.tfstate"),"."),r.a.createElement(o.MDXTag,{name:"p",components:a},"To configure, you add a file ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"backend.tf"),":"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'terraform {\n    # IF Consul\n    backend "consul" {\n        address = "demo.consul.io" # host name of consul cluster\n        path = "terraform/myproject"\n    }\n    \n    # ELSEIF S3\n    backend "s3" {\n        bucket = "bucket"\n        key = "terraform/myproject"\n        region = "ap-southeast-2"\n    }\n    \n    #ENDIF\n}\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"$ terraform init")," will do what you require for it all to work."),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"data-sources"}},"Data Sources"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Provide you with dynamic information."),r.a.createElement(o.MDXTag,{name:"ul",components:a},r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"A lot of data is available by AWS in a structured format using their API"),r.a.createElement(o.MDXTag,{name:"li",components:a,parentName:"ul"},"Terraform also exposes this info using data sources.")),r.a.createElement(o.MDXTag,{name:"p",components:a},"Examples include the list of AMIs, list of AZs etc."),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# provider.tf\nprovider "aws" { \n    region = "${var.AWS_REGION}"\n}\n\n# securitygroup.tf\ndata "aws_ip_ranges" "european_ec2" {\n  regions = [ "eu-west-1", "eu-central-1" ]\n  services = [ "ec2" ]\n}\n\nresource "aws_security_group" "from_europe" {\n name = "from_europe"\n\n  ingress {\n    from_port = "443"\n    to_port = "443"\n    protocol = "tcp"\n    cidr_blocks = [ "${data.aws_ip_ranges.european_ec2.cidr_blocks}" ]\n  }\n  tags {\n    CreateDate = "${data.aws_ip_ranges.european_ec2.create_date}"\n    SyncToken = "${data.aws_ip_ranges.european_ec2.sync_token}"\n  }\n\n}\n\n# vars.tf\nvariable "AWS_REGION" {\n  default = "eu-west-1"\n}\nvariable "AMIS" {\n  type = "map"\n  default = {\n    us-east-1 = "ami-13be557e"\n    us-west-2 = "ami-06b94666"\n    eu-west-1 = "ami-844e0bf7"\n  }\n}\n')),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"templates"}},"Templates"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Can help create ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"p"},"customized configuration files"),"."),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"modules"}},"Modules"),r.a.createElement(o.MDXTag,{name:"p",components:a},"Help to make your terraform more organised. "),r.a.createElement(o.MDXTag,{name:"p",components:a},"You can also use third party modules (like modules from Github)."),r.a.createElement(o.MDXTag,{name:"p",components:a},"It also helps to ",r.a.createElement(o.MDXTag,{name:"strong",components:a,parentName:"p"},"reuse")," parts of your code (eg set up network in AWS - VPC)."),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# Install form git\nmodule "module-example" {\n    source = "github.com/wardviaene/terraform-module-example"\n}\n\n# Use module from local folder\nmodule "module-example" {\n    source = "./module-example"\n}\n\n# A module passing arguments \nmodule "module-example" {\n    source = "./module-example"\n    region = "us-west-1"\n    ip-range = "10.0.0.0/8"\n    cluster-size = "3"\n}\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"Inside of the module folder, you can also have Terraform files:"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'# module-example/vars.tf\nvariable "region" {}\nvariable "ip-range" {}\nvariable "cluster-size" {}\n\n# module-example/cluster.tf\nresource "aws_instance" "instance-1" { ... }\nresource "aws_instance" "instance-2" { ... }\nresource "aws_instance" "instance-3" { ... }\n\n# module-example/output.tf\noutput "aws-cluster" {\n    value = "${aws_instance.instance-1.publicip}"\n}\n')),r.a.createElement(o.MDXTag,{name:"p",components:a},"You use the output from the module in the main part of your code!"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},'output "some-output" {\n    value = "${module.module-example.aws-cluster}"\n}\n')),r.a.createElement(o.MDXTag,{name:"h3",components:a,props:{id:"downloading-a-module"}},"Downloading a module"),r.a.createElement(o.MDXTag,{name:"pre",components:a},r.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-kotlin"}},"terraform get # this will fetch the modules and store it in .terraform/modules/\n")),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"terraform-command-overview"}},"Terraform Command Overview"),r.a.createElement(o.MDXTag,{name:"table",components:a},r.a.createElement(o.MDXTag,{name:"thead",components:a,parentName:"table"},r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"thead"},r.a.createElement(o.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"Command"),r.a.createElement(o.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"Description"))),r.a.createElement(o.MDXTag,{name:"tbody",components:a,parentName:"table"},r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"terraform apply"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Applies state.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"destroy"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Destroys all Terraform managed state.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"fmt"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Rewrite terraform config files to canonical format and style.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"get"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Download and update modules.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"graph"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Create a visual representation of a configuration or execution plan.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"import <options> <ADDRESS> <ID>")),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Find infrastructure resource identified with ID and import the state into terraform.tfstate with resource id ADDRESS.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},r.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"output <options> <NAME>")),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Output any of your resources.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"plan"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Show changes made to infrastructure.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"refresh"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Refresh the remote state. Can identify differences between state file and remote state.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"remote"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Configure remote state storage.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"show"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Show human readable output from a state or a plan.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"state"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Used for advanced state management eg rename resource")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"taint"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Destroy and recreate resource.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"validate"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Validate terraform syntax.")),r.a.createElement(o.MDXTag,{name:"tr",components:a,parentName:"tbody"},r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"untaint"),r.a.createElement(o.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Undo a taint.")))),r.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:""}}))}}])&&s(n.prototype,t),m&&s(n,m),a}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-terraform-terraform.305817e8304de77c75ce.js.map