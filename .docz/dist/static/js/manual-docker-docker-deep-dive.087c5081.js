(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{"./manual/Docker/Docker-Deep-Dive.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return g});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function s(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function p(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,n){return(l=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var g=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=p(this,i(n).call(this,e))).layout=null,a}var a,t,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&l(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;c(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"docker-deep-dive"}},"Docker Deep Dive"),o.a.createElement(r.MDXTag,{name:"hr",components:n}),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#docker-deep-dive"}},"Docker Deep Dive")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#docker-basics"}},"Docker Basics"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----working-with-multiple-images"}},"---- Working with Multiple Images")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----packaging-a-customized-container"}},"---- Packaging A Customized Container")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----container-commands"}},"---- Container Commands")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----exposing-ports"}},"---- Exposing ports")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#the-dockerfile-builds-and-network-configuration"}},"The Dockerfile, Builds and Network Configuration"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----user-and-run"}},"---- USER and RUN")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----env"}},"---- ENV")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----cmd-vs-run"}},"---- CMD vs RUN")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----entrypoint"}},"---- ENTRYPOINT")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----expose"}},"---- EXPOSE")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----container-volume-management"}},"---- Container Volume Management")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----docker-network-list-and-inspect"}},"---- Docker Network: List and Inspect")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----docker-network-assign-to-containers"}},"---- Docker Network: Assign to Containers")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#docker-commands-and-structures"}},"Docker commands and structures"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----inspect-container-processes"}},"---- Inspect Container Processes")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----previous-container-management"}},"---- Previous Container Management")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----controlling-port-exposure-on-containers"}},"---- Controlling Port Exposure on Containers")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----naming-containers"}},"---- Naming Containers")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----docker-events"}},"---- Docker Events")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----managing-and-removing-base-images"}},"---- Managing and Removing Base Images")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----saving-and-loading-docker-images"}},"---- Saving and Loading Docker Images")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----image-history"}},"---- Image History")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----take-control-of-our-tags"}},"---- Take Control of Our Tags")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----pushing-to-docker-hub"}},"---- Pushing to Docker Hub")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#integration-and-use-cases"}},"Integration and Use Cases"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#-----building-a-web-farm-for-development-and-testing"}},"---- Building a Web Farm for Development and Testing"))))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"docker-basics"}},"Docker Basics"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----working-with-multiple-images"}},"---- Working with Multiple Images"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# i: interactive, t: tty, d: daemon mode\ndocker run -i -t -d ubuntu:latest /bin/bash\n\n# to attach to the container and edit the container\ndocker attach container_name\n")),o.a.createElement(r.MDXTag,{name:"hr",components:n}),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----packaging-a-customized-container"}},"---- Packaging A Customized Container"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once you are attached to a container, anytime you create files, it is now part of that container!"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can do all of your updates etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"From here, we can commit to create a base image."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'docker commit -m "This is a new image" -a "dennis@presentcompany.co" dok/ubusshd:v1\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once this is commited, it is now put to a base container! Yay!"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Let's create a simple Dockerfile to give some info about us."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# Dockerfile - example Ubuntu example with SSH already installed\nFROM ubuntu:latest\nMAINTAINER okeeffed <dennis@presentcompany.co>\nRUN apt-get update\nRUN apt-get -y install telnet openssh-server\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"For building:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'# build a Dockerfile from the current location\ndocker build -t="dok/ubusshdonly:v2" .\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----container-commands"}},"---- Container Commands"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'top # shows the processes\ndocker logs container_name #shows history for container\ndocker exec container name /bin/cat /etc/profile\n\ndocker run container name /bin/bash -c "while true; do echo HELLO; sleep 1; done"\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----exposing-ports"}},"---- Exposing ports"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"docker run -d -p 80:80 nginx:latest\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"the-dockerfile-builds-and-network-configuration"}},"The Dockerfile, Builds and Network Configuration"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----user-and-run"}},"---- USER and RUN"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\nUSER user\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"To connect as the root, you just need to start the container and run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker exec -u 0 -it sleepy_allen /bin/bash")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Order of Execution")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We had to run a super user command to add the User. Now let's say we want to run another command."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n\nUSER user\n\n# below will give an issue - order of execution MATTERS\nRUN echo 'EXPORT 129.168.0.0/24' >> /etc/exports.list # making up exports.list\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----env"}},"---- ENV"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example, let's install Java through the Dockerfile!"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\n# this will not give an issue - order of execution MATTERS\nRUN echo \'EXPORT 129.168.0.0/24\' >> /etc/exports.list # making up exports.list\n\nRUN yum update -y\nRUN yum install -y net-tools wget\n\nRUN cd ~ && wget --no-cookies --no-check-certificate --header "url"\n\nRUN yum localinstall -y ~/java_file.rpm\n\nUSER user\n\nRUN cd ~ && echo "export JAVA_HOME=/usr/java/jdk1.8.0/jre" >> /home/user/.bashrc\n\n# generates env variable for everyone\nENV JAVA_BIN /usr/java/jdk1.8.0/jre/bin\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----cmd-vs-run"}},"---- CMD vs RUN"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Command generally sets the default command to run when there is nothing specified when container starts up."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# Dockerfile based on the latest CentOS 7 image - non-priviledged user entry\nMAINTAINER dok@email.com\nFROM centos:latest\n\nRUN useradd -ms /bin/bash user\n\nCMD 'echo' 'This is a custom container message'\n\nUSER user\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----entrypoint"}},"---- ENTRYPOINT"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The entrypoint itself will ALWAYS be the concrete default application everytime that the container is created."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CMD")," will only run when there is no argument, whereas ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ENTRYPOINT")," will always run."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN useradd -ms /bin/bash user\n\nENTRYPOINT echo "This command will display this message on EVERY container that is run from it"\n\nUSER user\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----expose"}},"---- EXPOSE"),o.a.createElement(r.MDXTag,{name:"p",components:n},"EXPOSE will allow us to expose our ports."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The follow image will allow us to build a webserver and run it from basics."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo "This is a custom index file built during the image creation" > /var/www/html/index.html\n\nENTRYPOINT apachectl "-DFOREGROUND"\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"However, if we don't expose any ports, then using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"-P")," won't automatically expose those ports. We can still forcably expose ports using `docker run --name apacheweb -d -p 8080:80 container"),o.a.createElement(r.MDXTag,{name:"p",components:n},"To auto-expose, we can do this..."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'FROM centos:latest\nMAINTAINER dok@email.com\n\nRUN yum update -y\nRUN yum install -y httpd net-tools\n\nRUN echo "This is a custom index file built during the image creation" > /var/www/html/index.html\n\nEXPOSE 80\n\nENTRYPOINT apachectl "-DFOREGROUND"\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----container-volume-management"}},"---- Container Volume Management"),o.a.createElement(r.MDXTag,{name:"p",components:n},"How do we work with mounts and file systems?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can mount using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"-v")," for mounting volumes."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Scenario One: Create a directory at launchtime called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mydata")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"docker run -it --name voltest1 -v /mydata centos:latest /bin/bash\n# once logged in\ndf -h # shows that there is a mounted file\n\n# back from host OS terminal\ncd /var/lib/docker # will show us the volumes folder\n\n# if we docker inspect the container\n# it will show us the volume and the source\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once we have things that are mounted, we can access them from the container and anything that we edit in the underlying host, we can see in the container!"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can't do this from the Dockerfile, because the base image is designed to be portable."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----docker-network-list-and-inspect"}},"---- Docker Network: List and Inspect"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Thanks to Docker Swarm and Kubernetes, it has become easier to manage the Docker Network."),o.a.createElement(r.MDXTag,{name:"p",components:n},"When you run a docker instance, it will auto pull the next available address."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# this will list all of the associated networks with the current host\ndocker network ls\n\ndocker network ls --no-trunc # to see the full address\n\ndocker network inspect bridge\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Creating Docker network configs")),o.a.createElement(r.MDXTag,{name:"p",components:n},"To see things like a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"man")," page for docker, you essential just put dashes between multi-word commands."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"man docker-network-create")," will bring up the network create manual."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01 # /24 is everything in that network\n\ndocker network ls\n# the new bridge adapter is now there\n\n# to remove the bridge\ndocker network rm mybridge01\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----docker-network-assign-to-containers"}},"---- Docker Network: Assign to Containers"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"# subnet itself can be 10.1.[1-254].[1-254] while ip-range is 10.1.4.[1-254]\n# that is class b and class c respectively\ndocker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range=10.1.4.0/24 --driver=bridge --label=host4network bridge04\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you then inspect the new above network config, it will have those settings within that inspect config."),o.a.createElement(r.MDXTag,{name:"p",components:n},"So how do we now use this new network?"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"docker run -it --name nettest1 --net bridge04 --ip 10.1.4.100 centos:latest /bin/bash\n\n# if we docker inspect nettest1 | grep IP we can see the address set at 10.1.4.100\n")),o.a.createElement(r.MDXTag,{name:"hr",components:n}),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"docker-commands-and-structures"}},"Docker commands and structures"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----inspect-container-processes"}},"---- Inspect Container Processes"),o.a.createElement(r.MDXTag,{name:"p",components:n},"From the outside, we can run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker exec")," to get some more details about the container itself."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker exec container_name /bin/ps aux | grep bash")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker top")," to see the top command run on a container."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker top container_name")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Let's execute a command to install ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sshd"),". We could attach to container and do so, but we have a few options. Instead of attaching, we could do the following:"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker exec -i -t container_name /bin/bash")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will ensure that the container doesn't stop, but will actually run two instances of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"bash"),". We can verify this by looking at the container processes."),o.a.createElement(r.MDXTag,{name:"p",components:n},"So far, this can give us a momentary snap shot."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"See the history of previous processes and performances")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker stats")," to see a live set of information for that container."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"dock stats container_name")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will keep a view that is constantly updated to see what is going on."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----previous-container-management"}},"---- Previous Container Management"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Just to see the previous containers not running with just their ids, we can run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker ps -a -q")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Of course, for removing older containers, we can ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker rm")," previous containers."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also remove containers from the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"/var/lib/docker")," folder as the super user. If you do it this way, you want to ensure that you have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"systemctl stop/restart docker")," to ensure that there aren't any issues with Docker."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----controlling-port-exposure-on-containers"}},"---- Controlling Port Exposure on Containers"),o.a.createElement(r.MDXTag,{name:"p",components:n},"In this example, start up a nginx container in daemon mode without remapping the ports."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Again, we can inspect this container to find the IP etc. We know that we can get anything remapped to the localhost currently because there is no remapping."),o.a.createElement(r.MDXTag,{name:"p",components:n},"In contrast, we can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"-P")," to expose the ports and it will auto remap to high port value."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"-p 8080:80")," will be use defining the port that we want to expose it to."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we want to define a certain interface eg. localhost..."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker run -itd -p 127.0.01:8081:80 nginx:latest")," would ONLY allow localhost to access this site."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----naming-containers"}},"---- Naming Containers"),o.a.createElement(r.MDXTag,{name:"p",components:n},"To rename containers, we can run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker rename currentname newname")," - you can even rename container IDs, although there is likely no point."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also rename running containers!"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----docker-events"}},"---- Docker Events"),o.a.createElement(r.MDXTag,{name:"p",components:n},"How can we monitor certain events?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Startup a few containers."),o.a.createElement(r.MDXTag,{name:"p",components:n},"When we interact with them, certain events are generated."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker events"),", it will begin a program to wait and register certain events."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker events --since '1h'"),", we can then see all the events that have happened in the last hour."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we run just ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker events")," and run a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"dok exec -it mycontainerid /bin/bash")," command, we will then see those events registered. This is useful for debugging and monitoring the entire host."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We may not care about every event though. What happens if we just care about an attachment?"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker events --filter <keyword>")," can then be used to filter for events we care about."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker events --filter event=attach")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also filter for multiple events with multiple ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"--filter event=<event>")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----managing-and-removing-base-images"}},"---- Managing and Removing Base Images"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you remove an image by name, then if there is a double up of the same ID, it will just remove the named image - however an ID removal will warn you if they share the ID. They only way to remove all of them is to use the force ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"-f")," flag."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----saving-and-loading-docker-images"}},"---- Saving and Loading Docker Images"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Saving")),o.a.createElement(r.MDXTag,{name:"p",components:n},"When we pull images, we can pull from local or from Docker Hub. You will use base of an official release usually etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"How can we manage our custom images? We can ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tar")," any file and migrate it to another compute etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker commit containername centos:mine")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will allow us to save the image but remove the containers!"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"docker save --output centos.latest.tar centos:latest\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ls")," the tar file, it will give you details about the image/container."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Restoring")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker load --input centos.latest.tar")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"gzip")," a tar file, we can also load it directly from the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".tar.gz")," file."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----image-history"}},"---- Image History"),o.a.createElement(r.MDXTag,{name:"p",components:n},"How can we get the history of the base image?"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker history imagename")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will give us a list of commands etc."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----take-control-of-our-tags"}},"---- Take Control of Our Tags"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Changes in the container is what is kept in storage layering."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker tag imageid mine/centos:v1.0")," - this will create a new image with the repo tag."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker tag mine/centos:v1.0 dok.example.com/centos:v1.0b")," will do the same."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----pushing-to-docker-hub"}},"---- Pushing to Docker Hub"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker login --username=name")," throw in the password and you'll be authenticated."),o.a.createElement(r.MDXTag,{name:"p",components:n},"One authenticated, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker push image")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Of course, to bring it back down, you will hit ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"docker pull name")),o.a.createElement(r.MDXTag,{name:"hr",components:n}),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"integration-and-use-cases"}},"Integration and Use Cases"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"-----building-a-web-farm-for-development-and-testing"}},"---- Building a Web Farm for Development and Testing"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"Prerequisites")),o.a.createElement(r.MDXTag,{name:"p",components:n},"So far, we have not had a specific purpose for Docker containers. These following examples are for real world use cases."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Set up a web farm with two Apache web nodes on port 80 - both sharing one or more file systems."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"Part One")))}}])&&s(a.prototype,t),m&&s(a,m),n}();g.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-docker-docker-deep-dive.305817e8304de77c75ce.js.map