(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{"./manual/React-Notes/react-style-guide.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return g});var t=a("./node_modules/react/index.js"),o=a.n(t),s=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e){return(r="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function p(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function c(e,n){return!n||"object"!==r(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,n){return(l=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var g=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=c(this,i(n).call(this,e))).layout=null,a}var a,t,r;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&l(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;m(e,["components"]);return o.a.createElement(s.MDXTag,{name:"wrapper",components:n},o.a.createElement(s.MDXTag,{name:"h1",components:n,props:{id:"react-native-style-guide"}},"React-Native Style Guide"),o.a.createElement(s.MDXTag,{name:"h3",components:n,props:{id:"react-native-style-guide-1"}},"React Native Style Guide"),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"general-guidelines"}},"General Guidelines"),o.a.createElement(s.MDXTag,{name:"ul",components:n},o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Every component should be treated as an API."),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"When in doubt, break up a component or function into smaller useful parts.")),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"es6-and-es7"}},"ES6 and ES7"),o.a.createElement(s.MDXTag,{name:"p",components:n},"The flavor of JS we use is based on ES5 but with ES6 and ES7 transforms. This means, that a large part of the syntax is based on the current version of JS, but is flavored with capabilities that come with ES6 and ES7. For example:"),o.a.createElement(s.MDXTag,{name:"ul",components:n},o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Object destructing (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Object spread (ES7)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Rest and spread params (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Promises (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Arrow Functions (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Object concise method (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Object short notation (ES6)"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"Classes (ES6)")),o.a.createElement(s.MDXTag,{name:"p",components:n},"For more information see ",o.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://facebook.github.io/react-native/docs/javascript-environment.html#content"}},"React Native JavaScript Environment")),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"component-creation"}},"Component Creation"),o.a.createElement(s.MDXTag,{name:"p",components:n},"Components should be created using ES6 classes and Object Short Notation."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"// Bad\n\nvar ChatBox = React.createClass({\n\n  getInitialState: function(){\n    return {toggle: 'on'};\n  },\n\n  render: function(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n})\n\n// Good\n\nclass ChatBox extends React.Component{\n\n  constructor(){\n    this.state = {toggle: 'on'}\n  }\n\n  render(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Component functions that are not life-cycle functions should be created with an underscore at the beginning of the function name."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"_fetchmessages(){\n  fetch(requestURL)\n    .then((response)=> response.json() )\n    .then((responseData)=> {\n      this.setState({messages: responseData})\n    })\n    .done();\n}\n\n_turnEditOn(){\n  this.setState({edit: true});\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Keep life-cycle functions at the top of the object constructor in logical order."),o.a.createElement(s.MDXTag,{name:"ol",components:n},o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"constructor")),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"componentWillMount")),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"componentDidMount")),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"componentWillReceiveProps")),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"render"))),o.a.createElement(s.MDXTag,{name:"p",components:n},"For more information see ",o.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://facebook.github.io/react/docs/component-specs.html"}},"Component Specs and Lifecycle")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Every component function should be as parsimonious as possible. If you find yourself creating a function that is doing more than two things at once, then break up the function into smaller functions."),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"using-bind"}},"Using Bind"),o.a.createElement(s.MDXTag,{name:"p",components:n},"When passing a function as prop to a child component, the use of bind is not necessary. React Native automatically binds ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"this")," to that function."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"// Bad\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage.bind(this)}\n    />\n  );\n}\n\n// Good\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage}\n    />\n  );\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"It necessary however to use bind, when passing a component function to an event prop. For example:"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"<ListView\n  renderRow={this.renderMessage.bind(this)}\n/>\n\n...\n\nrenderMessage(message) {\n  return (\n    <Message\n      message={message}\n      navigator={this.props.navigator}\n      fetchMessages={this.fetchMessages.bind}\n    />\n  );\n}\n")),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"passing-props"}},"Passing Props"),o.a.createElement(s.MDXTag,{name:"p",components:n},"Explicitly pass props if the number of props is small or if the prop is important enough that you want to be explicit about it."),o.a.createElement(s.MDXTag,{name:"p",components:n},"If there are a large number of props, pass in the whole thing or use destructuring to break it apart and pass them correctly."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"//Bad\n\n<MessageBody\n  content=this.props.message.content\n/>\n<MessageFooter\n  replies=this.props.message.replies\n  upvotes=this.props.message.upvotes\n  timestamp=this.props.message.timestamp\n  distance=this.props.message.distance\n/>\n\n// Good\n\nvar {content, ...footer} = this.props.message\n\n<MessageBody {content} />\n<MessageFooter {..footer} />\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Sometimes you want to combine objects and pass them as props. In that case use ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Object.assign"),"."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"_onPressMessage() {\n\n  var {message, ...props} = this.props;\n  var {votes, ...message} = this.props.message;\n  var fetchMessages = this._updateHearts;\n\n  this.props.navigator({\n    component: Comments,\n    passProps: Object.assign(\n      {..props},\n      {..message},\n      {fetchMessages}\n    ),\n  })\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"For more information on passing props, see React Native ",o.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://facebook.github.io/react/docs/transferring-props.html"}},"Transferring Props")),o.a.createElement(s.MDXTag,{name:"h4",components:n,props:{id:"state-and-props"}},"State and Props"),o.a.createElement(s.MDXTag,{name:"p",components:n},"Props are immutable. Do not mutate them."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"// Bad\n\nvar component = <Component />;\ncomponent.props.foo = x;\ncomponent.props.bar = y;\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"State is mutable."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"constructor(){\n  this.state = {messages:[]};\n}\n\n...\n\n_addMessages(data){\n  var messages = data.messages;\n  this.setState({\n    messages: this.state.messages.push(messages)\n  })\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Props can be passed into state, but be explicit that they are only 'initial values'"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"constructor(props){\n  var initialNum = this.props.numHearts;\n  this.state = {numHearts: initialNum};\n}\n\n...\n\n_handleClick(){\n  this.setState({numHearts: this.state.numHearts + 1});\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Be sure to  make use of ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"componentWillReceiveProps")," to sync state and props, if props are passed to state."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"componentWillReceiveProps(props){\n  this.setState({numHearts: props.numHearts});\n}\n")),o.a.createElement(s.MDXTag,{name:"h1",components:n,props:{id:"react-style-guide-cheet-sheet"}},"React Style Guide Cheet Sheet"),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"custom-classes"}},"Custom Classes"),o.a.createElement(s.MDXTag,{name:"ul",components:n},o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"place custom functions above the render function.")),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"React.createClass({\n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  _onChange : function() {},\n  _onCreate : function() {},\n  render : function() {}\n});\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"conditional-html"}},"Conditional html"),o.a.createElement(s.MDXTag,{name:"p",components:n},"In JSX, anything in {} will be evaluated in JavaScript"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"{this.state.show && 'This is Shown'}\n{this.state.on ? \u2018On\u2019 : \u2018Off\u2019}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"For anything more complicated, I have typically been creating a variable inside the render method, suffixed with \u2018Html\u2019:"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"var dinosaurHtml = '';\nif (this.state.showDinosaurs) {\n  dinosaurHtml = (\n    <section>\n      <DinosaurTable />\n      <DinosaurPager />\n    </section>\n  );\n}\n\nreturn (\n  <div>\n    ...\n    {dinosaurHtml}\n    ...\n  </div>\n);\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"jsx-as-variable-or-return-value"}},"JSX as variable or return value"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"var multilineJsx = (\n  <header>\n    <Logo />\n    <Nav />\n  </header>\n);\n\nvar singleLineJsx = <h1>Simple JSX</h1>;\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"self-closing-tags"}},"Self-closing tags"),o.a.createElement(s.MDXTag,{name:"p",components:n},"Components without children should simply close themselves"),o.a.createElement(s.MDXTag,{name:"p",components:n},o.a.createElement(s.MDXTag,{name:"strong",components:n,parentName:"p"}," correct ")),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"<Logo />\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},o.a.createElement(s.MDXTag,{name:"strong",components:n,parentName:"p"}," bad practise ")),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"<Logo></Logo>\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"list-iterations"}},"List Iterations"),o.a.createElement(s.MDXTag,{name:"p",components:n},"List iterations are better done inline, especially if each list item will be rendered as a component. You may even be able to reduce to one line with fat arrows."),o.a.createElement(s.MDXTag,{name:"p",components:n},o.a.createElement(s.MDXTag,{name:"strong",components:n,parentName:"p"}," Note ")," This does require the harmony flag on JSX to be included, which will toggle certain ES6 features (fat arrows, template strings, destructuring, and rest parameters)"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"render : function() {\n  return (\n    <ul>\n      {this.state.dinosaursList.map(dinosaur => <DinosaurItem item={dinosaur} />)}\n    </ul>\n  );\n}\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"forms"}},"Forms"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'<form onChange={this.inputHandler}>\n  ...\n    <input type="text" name="newDinosaurName" value={this.state.newDinosaurName} />\n  ...\n</form>\n\n// input handler\n\nfunction(event) {\n  actions.propagateValue({\n    field : event.target.name,\n    value : event.target.value\n  });\n}\n')),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"formatting-attributes"}},"Formatting Attributes"),o.a.createElement(s.MDXTag,{name:"p",components:n},"Preferable"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"<input\n  type=\"text\"\n  value={this.state.newDinosaurName}\n  onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"Alternative"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"<input type=\"text\"\n       value={this.state.newDinosaurName}\n       onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n")))}}])&&p(a.prototype,t),r&&p(a,r),n}();g.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-react-notes-react-style-guide.305817e8304de77c75ce.js.map