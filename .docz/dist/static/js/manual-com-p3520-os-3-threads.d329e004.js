(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"./manual/COMP3520-OS/3-Threads.md":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return d});var t=n("./node_modules/react/index.js"),o=n.n(t),r=n("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function c(e,a){for(var n=0;n<a.length;n++){var t=a[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function l(e,a){return!a||"object"!==s(a)&&"function"!==typeof a?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):a}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,a){return(i=Object.setPrototypeOf||function(e,a){return e.__proto__=a,e})(e,a)}var d=function(e){function a(e){var n;return function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,a),(n=l(this,p(a).call(this,e))).layout=null,n}var n,t,s;return function(e,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),a&&i(e,a)}(a,o.a.Component),n=a,(t=[{key:"render",value:function(){var e=this.props,a=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:a},o.a.createElement(r.MDXTag,{name:"h1",components:a,props:{id:"week-3---threads"}},"Week 3 - Threads"),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"processes-and-threads"}},"Processes and Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Processes have two characteristics:"),o.a.createElement(r.MDXTag,{name:"ol",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Resource Ownership ",o.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"process includes a virtual address space to hold the process image "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"the OS performs a protection function to prevent unwanted interference between processes with respect to resources"))),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Scheduling/Execution",o.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"follows an execution path that may be interleaved with other processes "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"a process has an execution state (Running, Ready, etc.) and a dispatching priority and is scheduled and dispatched by the OS")))),o.a.createElement(r.MDXTag,{name:"p",components:a},"These two characteristics are treated independently by modern operating systems:\n- the unit of dispatching is referred to as a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"thread")," or lightweight process\n- the unit of resource ownership is referred to as a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"process")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"task")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"multithreading"}},"Multithreading"),o.a.createElement(r.MDXTag,{name:"p",components:a},"The ability of an OS to support multiple, concurrect paths of execution within a single process"),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"process"}},"Process"),o.a.createElement(r.MDXTag,{name:"p",components:a},"The unit of resource allocation and a unit of protection."),o.a.createElement(r.MDXTag,{name:"p",components:a},"A process is associated with: "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"A virtual address space which holds the process image "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Protected access to\n- Processors\n- Other processes\n- Files\n- I/O resources ")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"multiple-threads-in-process"}},"Multiple threads in Process"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Each thread has:"),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Access to the memory and resources of its process (all threads of a process share this)"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"An execution state (running, ready, etc.)"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Saved thread context when not running "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"An execution stack "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Some per-thread static storage for local variables")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"single-threaded-vs-multi-threaded"}},"Single-Threaded vs multi threaded"),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Both have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"Process Control Block")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Both have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"User Address Space")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Single thread has a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"User Stack")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"Kernel Stack")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Multithread process has a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"User Stack"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"Kernel Stack"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"Thread Control Block")," within each thread")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"threads"}},"Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"In OS that supports threads: scheduling and dispatching done on thread basis "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Most of the state info dealing with execution is maintained in thread-level data structures "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Several actions that affect all of the threads in a process and that the OS must manage at the process level\n- Suspending process means all threads of a process\n- Terminates a process terminates all threads within the process "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Similar to processes, threads have execution states and may synchronize with one another.")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"thread-execution-states"}},"Thread Execution States"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Three basic states"),o.a.createElement(r.MDXTag,{name:"ol",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Running "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Ready "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Blocked ")),o.a.createElement(r.MDXTag,{name:"p",components:a},"Operations associated with a change in thread state "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Spawn (another thread)\n- allocate register context and stacks "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Block\n- move to an event queue waiting for the event\n- issue: will blocking a thread block other, or all, threads within the same process?"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Unblock\n- moved the the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"Ready")," queue for execution"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Finish (thread)\n- de-allocate register context and stacks ")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"thread-synchronization"}},"Thread Synchronization"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Necessity to sync activities of all threads and prevent interference between each other."),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"all threads of a process share the same address space and other resources "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"any alteration of a resource by one thread affects the other threads in the same process ")),o.a.createElement(r.MDXTag,{name:"p",components:a},"In general, the techniques used for thread sync are the same as those for process sync."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"types-of-threads"}},"Types of Threads"),o.a.createElement(r.MDXTag,{name:"ol",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"User Level Thread (ULT)"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Kernel Level Thread (KLT) ",o.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"also called kernel-supported threads or lightweight threads")))),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"user-level-threads"}},"User-Level Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Thread management all done by application."),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Multithreading is managed by a runtime threads lib ")),o.a.createElement(r.MDXTag,{name:"p",components:a},"The kernel is not aware of the existence of threads "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Only schedule the process as a unit and assigns a single execution state to that process ")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"disadvantages-of-ult"}},"Disadvantages of ULT"),o.a.createElement(r.MDXTag,{name:"p",components:a},"In a typical OS many system calls are blocking "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"as a result, when a ULT executes a system call, not only is the thread blocked, but all within the process are blocked ")),o.a.createElement(r.MDXTag,{name:"p",components:a},"In a pure ULT strategy, multithreaded applications cannot take advantage of multiprocessing."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"kernel-level-threads"}},"Kernel-Level Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Kernel maintains context information for the process and the threads. "),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"No thread management done by application ")),o.a.createElement(r.MDXTag,{name:"p",components:a},"Scheduling is done on a thread basis."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Windows is an example of this approach."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"advantages-of-klt"}},"Advantages of KLT"),o.a.createElement(r.MDXTag,{name:"p",components:a},"The kernel can simultaneously schedule multiple threads from the same process on multiple processors."),o.a.createElement(r.MDXTag,{name:"p",components:a},"If one thread is blocked, the kernel schedules another thread of the same process."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Kernel routines themselves can be multithreaded."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"multicore--multithreading"}},"Multicore & Multithreading"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Achieves concurrency without the overhead of using multiple processes."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Threads within the same process can exchange information through their common address space and have access to the shared resources of the process."),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Threads of any process can run on any processor"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Soft affinity:\n- dispatcher tries to assign a ready thread to the same processor it last ran on\n- helps reuse data still in that processor's memory caches from the previous execution of the thread "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Hard affinity:\n- an application restricts thread execution to certain processors")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"multicore-challenges"}},"Multicore Challenges"),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Dividing activities "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Balance "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Data splitting "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Data dependency "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Testing and debugging ")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"linux-threads"}},"Linux Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Linux uses the same internal representation for processes and threads; a thread is simply a new process (or task) that happens to share the same address space as its parent."),o.a.createElement(r.MDXTag,{name:"p",components:a},"A distinction is only made when a new thread is created by the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"clone")," system call\n- ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"fork")," creates a new process with its own entirely new process context\n- ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"clone")," creates a new process with its own identity, but that is allowed to share the data structures of its parent"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"clone")," gives the application fine-grained control over exactly what is shared between two threads."),o.a.createElement(r.MDXTag,{name:"table",components:a},o.a.createElement(r.MDXTag,{name:"thead",components:a,parentName:"table"},o.a.createElement(r.MDXTag,{name:"tr",components:a,parentName:"thead"},o.a.createElement(r.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"flag"),o.a.createElement(r.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"meaning"))),o.a.createElement(r.MDXTag,{name:"tbody",components:a,parentName:"table"},o.a.createElement(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"CLONE_FS")),o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"File-system info is shared")),o.a.createElement(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"CLONE_VM")),o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"The same mem space is shared")),o.a.createElement(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"CLONE_SIGHAND")),o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Signal handlers are shared")),o.a.createElement(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"CLONE_FILES")),o.a.createElement(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"The set of open files are shared")))),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"windows-threads"}},"Windows Threads"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Processes and servies provided by the Windows Kernel are relatively simple and general purpose."),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"implemented as objects "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"created as new process or a copy of an existing process "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"exec proc may contain one or more threads "),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"both procs and thread objects have built-in sync capabilities")),o.a.createElement(r.MDXTag,{name:"p",components:a},"Windows makes use of two types of process-related objects:"),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"p"},"Processes"),"\n\u2013 an entity corresponding to a user job or application that owns resources"),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"p"},"Threads"),"\n\u2013 a dispatchable unit of work that executes sequentially and is interruptible"))}}])&&c(n.prototype,t),s&&c(n,s),a}();d.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-com-p3520-os-3-threads.305817e8304de77c75ce.js.map