(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{"./manual/iOS/iOS-Delegation.md":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return d});var t=n("./node_modules/react/index.js"),o=n.n(t),r=n("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function m(e,a){for(var n=0;n<a.length;n++){var t=a[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function i(e,a){return!a||"object"!==s(a)&&"function"!==typeof a?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):a}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,a){return(p=Object.setPrototypeOf||function(e,a){return e.__proto__=a,e})(e,a)}var d=function(e){function a(e){var n;return function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i(this,l(a).call(this,e))).layout=null,n}var n,t,s;return function(e,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),a&&p(e,a)}(a,o.a.Component),n=a,(t=[{key:"render",value:function(){var e=this.props,a=e.components;c(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:a},o.a.createElement(r.MDXTag,{name:"h1",components:a,props:{id:"delegation-in-ios"}},"Delegation in iOS"),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#delegation-in-ios"}},"Delegation in iOS"),o.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#iosd-1-intro-to-design-patterns"}},"IOSD-1: Intro to Design Patterns")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#iosd-2-learning-by-example---racing-horses"}},"IOSD-2: Learning by example - Racing Horses")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#iosd-3-acting-as-a-delegate"}},"IOSD-3: Acting as a Delegate")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#iosd-4-examples---cllocation-manager"}},"IOSD-4: Examples - CLLocation Manager")),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"#iosd-5-examples---uitextfielddelegate"}},"IOSD-5: Examples - UITextFieldDelegate"))))),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"iosd-1-intro-to-design-patterns"}},"IOSD-1: Intro to Design Patterns"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Three common issues developers have come across:"),o.a.createElement(r.MDXTag,{name:"ol",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Avoiding inflexible objects"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Maintaining loose relationships"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Avoid tight coupling")),o.a.createElement(r.MDXTag,{name:"p",components:a},"We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain."),o.a.createElement(r.MDXTag,{name:"p",components:a},"An example - ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"The Delegate Pattern")),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"The Delegate Pattern")),o.a.createElement(r.MDXTag,{name:"p",components:a},"The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects."),o.a.createElement(r.MDXTag,{name:"p",components:a},"It is concerned with adding responsibilities to objects dynamically."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"iosd-2-learning-by-example---racing-horses"}},"IOSD-2: Learning by example - Racing Horses"),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"The Horse Class and Race Class")),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},'import Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass Horse {\n    let name: String\n    let maxSpeed: Double\n    var distanceTraveled = 0.0\n    var currentLap = 1\n\n    init(name: String, maxSpeed: Double) {\n        self.maxSpeed = maxSpeed\n        self.name = name\n    }\n\n    var currentSpeed: Double {\n        let random = Double(arc4random())\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\n    }\n}\n\nclass Race {\n    let laps: Int\n    let lapLength: Double = 300\n    let participants: [Horse]\n\n    weak var delegate: HorseRaceDelegate?\n\n    // since we want to use a delegate, we do not create instances\n    // let tracker = Tracker()\n    // let broadcaster = RaceBroadcaster()\n\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\n        self.updateProgress()\n    }\n\n    init(laps: Int, participants: [Horse]) {\n        self.laps = laps\n        self.participants = participants\n    }\n\n    func start() {\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\n        // tracker.updateRaceStart(with: Date())\n        delegate?.race(self, didStartAt: Date())\n        print("Race in progress...")\n    }\n\n    func updateProgress() {\n        print("....")\n        for horse in participants {\n            horse.distanceTraveled += horse.currentSpeed\n\n            if horse.distanceTraveled >= lapLength {\n                horse.distanceTraveled = 0\n\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\n\n                // let lapKey = "(Tracker.Keys.lapLeader) (horse.currentLap)"\n                // if !tracker.stats.keys.contains(lapKey) {\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\n                // }\n\n                horse.currentLap += 1\n\n                if horse.currentLap >= laps + 1 {\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\n                    stop()\n                    break\n                }\n            }\n        }\n    }\n\n    func stop() {\n        print("Race complete!")\n        // timer.invalidate()\n        // tracker.printRaceSummary()\n    }\n}\n\nlet jubilee = Horse(name: "Jubilee", maxSpeed: 16)\nlet sonora = Horse(name: "Sonora", maxSpeed: 17)\nlet jasper = Horse(name: "Jasper", maxSpeed: 17)\n\nlet participants = [jubilee, sonora, jasper]\n\nlet race = Race(laps: 1, participants: participants)\nrace.start()\n')),o.a.createElement(r.MDXTag,{name:"hr",components:a}),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"The Tracker Class")),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},'class Tracker: HorseRaceDelegate {\n\n    struct Keys {\n        static let raceStartTime = "raceStartTime"\n        static let lapLeader = "leaderForLap"\n        static let raceEndTime = "raceEndTime"\n        static let winner = "winner"\n    }\n\n    var stats = [String: Any]()\n\n    // func updateRaceStart(with time: Date) {\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\n    // }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        stats.updateValue(time, forKey: Keys.raceStartTime)\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        let lapLead = "Horse: (horse.name), time: (time)"\n        let lapLeadKey = "(Keys.lapLeader) (number)"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    // get rid of the below method\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\n        let lapLead = "Horse: (horse.name), time: (time)"\n        let lapLeadKey = "(Keys.lapLeader) (number)"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    // get rid of the below method\n    func updateRaceEndWith(winner: Horse, time: Date) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    func printRaceSummary() {\n        print("***********")\n\n        let raceStartTime = stats[Keys.raceStartTime]!\n        print("Race start time: (raceStartTime)")\n\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\n            print("(key): (value)")\n        }\n\n        let raceEndTime = stats[Keys.raceEndTime]!\n        print("Race end time: (raceEndTime)")\n\n        let winner = stats[Keys.winner]!\n        print("Winner: (winner)")\n\n        print("***********")\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:a},"In this example, we use the Tracker methods and Keys to help monitor the results of the race."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Now so far so good, but what if we want a live broadcast?"),o.a.createElement(r.MDXTag,{name:"p",components:a},"However, trackers should do more than one job."),o.a.createElement(r.MDXTag,{name:"p",components:a},'This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also "knows" about the Tracker and Broadcast class. This coupling is too tight.'),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{}},"class RaceBroadcaster {\n    // methods to try to help broadcast information on the Race object\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:a},"The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out."),o.a.createElement(r.MDXTag,{name:"p",components:a},"How do we do this? By implementing a delegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},'We will make a "contract" that uses a protocol.'),o.a.createElement(r.MDXTag,{name:"p",components:a},"This will implement the rules that anything that wants to interact with the Race class must adhere to."),o.a.createElement(r.MDXTag,{name:"p",components:a},o.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"HorseRaceDelegate Protocol")),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},"protocol HorseRaceDelegate: class {\n    // this will require any adhering class to use the didStartAt method\n    func race(_ race: Race, didStartAt time: Date)\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:a},'This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn\'t "need" to have to have a tracker, we will make it optional and also give it the "weak" var to prevent a reference cycle.'),o.a.createElement(r.MDXTag,{name:"p",components:a},"Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound."),o.a.createElement(r.MDXTag,{name:"p",components:a},"The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Once we have a class that implements a delegate, how do we then have a another class act as a delegate?"),o.a.createElement(r.MDXTag,{name:"p",components:a},"That means that for the class (eg Tracker), it needs to conform to the delegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!"),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},"let tracker = Tracker();\nrace.delegate = tracker;\n")),o.a.createElement(r.MDXTag,{name:"p",components:a},"This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects."),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"iosd-3-acting-as-a-delegate"}},"IOSD-3: Acting as a Delegate"),o.a.createElement(r.MDXTag,{name:"p",components:a},"So why do we need to decouple in the first place?"),o.a.createElement(r.MDXTag,{name:"p",components:a},"It will become far more manageable once you start creating Objects that focus on just one job."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Analogy:"),o.a.createElement(r.MDXTag,{name:"p",components:a},"You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Instead of doing it all yourself, you delegate it out to an assistant."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Beforehand, you need to define what they do. Think of the requirements as the protocol."),o.a.createElement(r.MDXTag,{name:"p",components:a},"If they have all these abilities, they conform to the protocol."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Now you hire and give the tasks to the employee - they are now your delegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},"However, if they quit - that's cool. You can look for another delegate that conforms."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Example, if you have a class ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"RaceManager")," that conforms, they can also have race of type Race as a property, we've created a strong relationship by default."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak."),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},"class RaceManager: HorseRaceDelegate {\n\n    let race: Race\n\n    init(race: Race) {\n        self.race = race\n        race.delegate = self\n        race.start()\n    }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        // some implementation\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        // some implementation\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        // some implementation\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"iosd-4-examples---cllocation-manager"}},"IOSD-4: Examples - CLLocation Manager"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Using the CoreLocation Framework, we can create a LocationManager class."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Once we create the class, we can request for authorization."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info."),o.a.createElement(r.MDXTag,{name:"p",components:a},"In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate."),o.a.createElement(r.MDXTag,{name:"p",components:a},"To use it, we can conform to the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"NSObject")," class and override the init() method since there already is one for ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"NSObject"),". This will allow us to give conformance for the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"CLLocationManagerDelegate"),". Swift does not have the option of optional protocols."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Then we can set the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"manager.delegate = self")),o.a.createElement(r.MDXTag,{name:"p",components:a},"This is an example of a circular dependence."),o.a.createElement(r.MDXTag,{name:"pre",components:a},o.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-swift"}},"import Foundation\nimport CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let manager = CLLocationManager()\n\n    override init() {\n        super.init()\n\n        manager.delegate = self\n        manager.requestWhenInUseAuthorization\n    }\n\n    // this is an example of a protocol method!\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            manager.requestLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(Error)\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        print(locations.first!)\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"iosd-5-examples---uitextfielddelegate"}},"IOSD-5: Examples - UITextFieldDelegate"),o.a.createElement(r.MDXTag,{name:"p",components:a},'In case of the UITextField, we can assign the ViewController that is "listening" as the delegate to recieve the broadcasts.'),o.a.createElement(r.MDXTag,{name:"p",components:a},"Then we can implement the methods from the protocol to the class to give us the results."))}}])&&m(n.prototype,t),s&&m(n,s),a}();d.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-i-os-i-os-delegation.305817e8304de77c75ce.js.map