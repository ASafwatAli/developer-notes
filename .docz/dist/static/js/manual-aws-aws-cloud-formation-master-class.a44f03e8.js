(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"./manual/AWS/AWS-CloudFormation-MasterClass.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function c(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function p(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,n){return(i=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=p(this,l(n).call(this,e))).layout=null,a}var a,t,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&i(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"cloudformation-master-class"}},"CloudFormation Master Class"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"what-is-cloudformation"}},"What is CloudFormation"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Having >50 services, CloudFormation was brought in to help develops scaffold out the requires AWS stack."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Eg. I want a security group, two EC2 machines with it, two elastic IPs, an S3 bucket + a load balancer in front."),o.a.createElement(r.MDXTag,{name:"p",components:n},"CloudFormation will create all of this in the right order with the exact config."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"benefits"}},"Benefits"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Infrastructure as code",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"No manual creation"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Can be version controlled"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Changes to infrastructure are reviewed through code"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Cost",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Each resource will be tagged so you can estimate the costs and figure out which costs what"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Great savings strategy"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Productivity",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Ability to destroy and re-create an infrastructure"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Automated generation of Diagram for templates"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"All declarative"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Separation of concern",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Many different stacks for many different layers"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Don't re-invent the wheel",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Already so many templates"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Leverage the docs")))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cloudformation-vs-ansible--terraform"}},"CloudFormation vs Ansible / Terraform"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"CF is native, and also contain the latest"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"CF is state based"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"The others are instruction based - difficult to orchestrate"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"For new services, Ansible / Terraform can take a long time")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"first-template"}},"First template"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"---\nResources:\n  MyInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The stack instance can be created, updated or destroyed."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You cannot edit the stack itself later, you need to just re-update the stack by uploading a new file."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The stack itself can clean up instances after itself too."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"yaml-intro"}},"YAML Intro"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can use YAML or JSON for writing it - but JSON is tough for it"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Array support:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"product:\n    - test  : 1\n      quantity: 2\n    - test  : 2\n      quantity: 4\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"creating-a-s3-bucket"}},"Creating a S3 Bucket"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Googling for the type, you will get the in depth docs from AWS."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'---\nResources: # always the start\n    MyS3Bucket: # template name\n        Type: "AWS::S3::Bucket"\n        Properties:\n            AccessControl: PublicRead\n            BucketName: "www.site.com"\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"types-of-updates"}},"Types of updates"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Updates with no interruption"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Replacements are breaking and need to replace the resource")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"properties"}},"Properties"),o.a.createElement(r.MDXTag,{name:"p",components:n},"On the properties under the docs, you can see info about the properties."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"deleting-the-stack"}},"Deleting the stack"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Just right click on the CloudFormation and delete the resources."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cloudformation-template-options"}},"CloudFormation template options"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You have a few template options:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Tags"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Permissions (IAM role)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Notifications Options (SNS topic)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Timeouts (minutes before calling failure)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Rollback on Failure"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Stack Policy")),o.a.createElement(r.MDXTag,{name:"p",components:n},'These (if you manually do it) all show up on the "create stack" part of CloudFormation.'),o.a.createElement(r.MDXTag,{name:"p",components:n},"The template review also gives you an opportunity to estimate cost."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cloudformation-designer"}},"CloudFormation Designer"),o.a.createElement(r.MDXTag,{name:"p",components:n},"A visual aid to help build the CF Stack. Ensure the template is also well written."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can drag and drop basically everything. Dropping it will give you options to selecting documentation etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"It's great for dragging and dropping templates and giving information on that template as well."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"building-blocks"}},"Building Blocks"),o.a.createElement(r.MDXTag,{name:"p",components:n},"There are a number of building blocks for each template:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Resources: your AWS resources declared in the template"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Parameters: the dynamic inputs for your template"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Mappings: the static variables for your template"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Outputs: References to what has been created"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Conditionals: List of conditions to perform resource creation"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Metadata")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"template-helpers"}},"Template helpers"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"References"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Functions")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cloudformation-parameters"}},"CloudFormation Parameters"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"overview"}},"Overview"),o.a.createElement(r.MDXTag,{name:"p",components:n},"What are they? The way to provide inputs to your AWS CloudFormation template."),o.a.createElement(r.MDXTag,{name:"p",components:n},"They're important to know about it:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"You want to reuse your templates across the company"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Some inputs can not be determined ahead of time")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The major benefit: you won't have to re-upload a template to change its content."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"theory-and-hands-on"}},"Theory and hands on"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Parameters can be controlled by all these settings:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Type:")),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"String"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Number"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"CommaDelimitedList"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"List<Type>")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"AWS Parameter (to help catch invalid values - match against existing values in the AWS Account)")),o.a.createElement(r.MDXTag,{name:"ol",components:n,props:{start:2}},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Description"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Constraints"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"ConstraintDescription (String)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Min/MaxLength"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Min/MaxValue"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Defaults"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AllowedValues (array)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AllowedPattern (regexp)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"NoEcho (Boolean)")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This can be found in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0-parameters-hands-on.yaml"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Again - check the docs."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To reference a parameter, you then go with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Key: !Ref Reference"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"!Select")," for a CommaDelimitedList, you need to go ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Key: !Select [ArrayNumber, !Ref Reference]"),"."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"how-to-reference-a-parameter"}},"How to reference a parameter"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Using the Fn::Ref function."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Shorthand in YAML is !Ref."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Can reference block, not just parameter")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"resources"}},"Resources"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Resources are the core of your CloudFormation template. They represent the different AWS Components that will be created and configured."),o.a.createElement(r.MDXTag,{name:"p",components:n},"They are declared and can be references by eachother. AWS figures out creation, updates, deletes etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"There are over 224 types of resources."),o.a.createElement(r.MDXTag,{name:"p",components:n},"They are identified using the form ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"AWS::aws-product-name::data-type-name"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"reading-the-docs-for-an-es2-instance"}},"Reading the docs for an ES2 Instance"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you look at the docs, if comes up with both JSON and YAML docs."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"optional-attributes-for-resources"}},"Optional Attributes for Resources"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"DependsOn: very useful to draw a dependency between two resources. For example, only create an ECS cluster after creating an ASG (auto scaling group)."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"DeletionPolicy: protect resource from being deleted even if cloudformation is deleted."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"CreationPolicy: more info on CFN"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Metadata: anything you want!")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"faq-for-resources"}},"FAQ for resources"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Can I create a dynamic a dynamic amount of resources? No you can perform code generation. The work around is the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"troposphere")," Python library."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Is every AWS Service supported? Almost. Only a select few niches are not there.")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"mappings"}},"Mappings"),o.a.createElement(r.MDXTag,{name:"p",components:n},"What are mappings? Fixed ariables within your CF Template. Great for dev vs prod, regions, AMI types etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Every mapping has top, middle and bottom."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Great to use when you know in advance:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Region"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"AZ"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"AWSAccount"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Environment (dev vs prod)")),o.a.createElement(r.MDXTag,{name:"p",components:n},"They allow safer control over the template. Use parameters when the values are ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"really")," user specific."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"fnfindinmap---accessing-mapping-values"}},"Fn::FindInMap - Accessing Mapping Values"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Use Fn::FindInMap to return a named value from a specific key."),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"!FindInMap ","[ MapName, TopLevelKey, SecondLevelKey ]")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      '32': 'ami-6411e20d'\n      '64': 'ami-7a11e213'\nResources:\n  myEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 32]\n      InstanceType: m1.small\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"mappings-in-practise"}},"Mappings in practise"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Parameters:\n  EnvironmentName:\n    Description: Environment Name\n    Type: String\n    AllowedValues: [development, production]\n    ConstraintDescription: must be development or production\n\nMappings:\n  AWSRegionArch2AMI:\n    us-east-1:\n      HVM64: ami-6869aa05\n  EnvironmentToInstantType:\n    development:\n      instanceType: t2.micro\n    production:\n      instanceType: t2.small\n\nResources:\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      InstanceType:\n        !FindInMap [\n          EnvironmentToInstanceType,\n          !Ref 'EnvironmentName',\n          instanceType,\n        ]\n      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"concept-pseudo-parameters"}},"Concept: Pseudo Parameters"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"AWS offers us pseudo params in any CF template."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"These can be used at any time and are enabled by default.")),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::AccountId"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::NotificationsARNs"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::NoValue"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::Region"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::StackId"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::StackName")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cloudformation-outputs"}},"CloudFormation Outputs"),o.a.createElement(r.MDXTag,{name:"p",components:n},"What are they? They are ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"optional")," values that we can import into other stacks."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also view the outputs in the AWS Console or in using the AWS CLI."),o.a.createElement(r.MDXTag,{name:"p",components:n},"They're very useful for example if you define a network CloudFormation, and output the variables such as VPC ID and your Subnet IDs."),o.a.createElement(r.MDXTag,{name:"p",components:n},"It's the best way to perform some collaboration cross stack. Let the expert handle their part and you handle yours."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"outputs-hands-on"}},"Outputs Hands-On"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Creating a SSH Security Group as part of one template. We can create an output that references that security group."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Outputs:\n  <Logical ID>:\n    Description: Information about the value\n    Value: Value to return\n    Export:\n      Name: Value to export\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"In 0-create-ssh-security-group.yaml"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Resources:\n  # here we define a SSH security group that will be used in the entire company\n  MyCompanyWideSSHSecurityGroup:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Enable SSH access via port 22\n      SecurityGroupIngress:\n        # we have a lot of rules because it's a perfect security group\n        # finance team network\n        - CidrIp: 10.0.48.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # marketing team network\n        - CidrIp: 10.0.112.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # application team support network\n        - CidrIp: 10.0.176.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n\nOutputs:\n  StackSSHSecurityGroup:\n    Description: The SSH Security Group for our Company\n    Value: !Ref MyCompanyWideSSHSecurityGroup\n    Export:\n      Name: SSHSecurityGroup\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"It is important to note that for an ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"output")," to be used anywhere, you need to define an ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"export")," value."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cross-stack-reference"}},"Cross Stack Reference"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Fn::ImportValue")," in a simple block:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Resources:\n  MySecureInstance:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      SecurityGroups:\n        # we reference the output here, using the Fn::ImportValue function\n        - !ImportValue SSHSecurityGroup\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"conditions"}},"Conditions"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Conditionals are used to control the creation of resources or outputs based on a condition."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Conditions can be whatever you want them to be, but common ones are:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Environment (dev/test/prod)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"AWS Region"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Any parameter value")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Each condition can reference another condition, parameter value or mapping."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"how-to-define-a-condition"}},"How to define a condition?"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Conditions:\n  [Logical ID]: [Intrinsic function]\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Logical ID is for you to choose. It's how you name the condition."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The intrinsic function (logical) can be any of the following: - Fn::And - Fn::Equals - Fn::If - Fn::Not - Fn::Or"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"conditional-hands-on"}},"Conditional Hands On"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},'Let\'s analyze a CF template that optionally creates a volume and mount point only if "prod" is specified as a parameter.'),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"It utilizes params, mappings, conditionals, outputs")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      AMI: 'ami-a4c7edb2'\n      TestAz: 'us-east-1a'\n    us-west-1:\n      AMI: 'ami-6df1e514'\n      TestAz: 'us-west-1a'\n    us-west-2:\n      AMI: 'ami-327f5352'\n      TestAz: 'us-west-2a'\n    eu-west-1:\n      AMI: 'ami-d7b9a2b1'\n      TestAz: 'eu-west-1a'\n    sa-east-1:\n      AMI: 'ami-87dab1eb'\n      TestAz: 'sa-east-1a'\n    ap-southeast-1:\n      AMI: 'ami-77af2014'\n      TestAz: 'ap-southeast-1a'\n    ap-southeast-2:\n      AMI: 'ami-10918173'\n      TestAz: 'ap-southeast-2a'\n    ap-northeast-1:\n      AMI: 'ami-e21cc38c'\n      TestAz: 'ap-northeast-1a'\nParameters:\n  EnvType:\n    Description: Environment type.\n    Default: test\n    Type: String\n    AllowedValues:\n      - prod\n      - test\n    ConstraintDescription: must specify prod or test.\n\nConditions:\n  CreateProdResources: !Equals [!Ref EnvType, prod]\n\nResources:\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]\n      InstanceType: t2.micro\n      AvailabilityZone: !FindInMap [RegionMap, !Ref 'AWS::Region', TestAz]\n\n  MountPoint:\n    Type: 'AWS::EC2::VolumeAttachment'\n    Condition: CreateProdResources\n    Properties:\n      InstanceId: !Ref EC2Instance\n      VolumeId: !Ref NewVolume\n      Device: /dev/sdh\n\n  NewVolume:\n    Type: 'AWS::EC2::Volume'\n    Condition: CreateProdResources\n    Properties:\n      Size: 100\n      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone\n\nOutputs:\n  VolumeId:\n    Condition: CreateProdResources\n    Value: !Ref NewVolume\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Note that ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"conditions")," can not be applied to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"parameters"),"."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"fngetatt"}},"Fn::GetAtt"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Get an attribute attached to any resource that exists. To know the attributes, check the docs."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cf-metadata"}},"CF Metadata"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This is any optional metadata section to include arbitrary YAML that provide details about the template or resource."),o.a.createElement(r.MDXTag,{name:"p",components:n},"There are 3 metadata keys that have special meaning:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::CloudFormation::Designer")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Describes how the resources are laid out in your template. This is automatically added by the AWS Designer. This helps the UI (x and y)"),o.a.createElement(r.MDXTag,{name:"ol",components:n,props:{start:2}},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::CloudFormation::Interface")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Define grouping and ordering of input parameters when they are displayed in the AWS Console."),o.a.createElement(r.MDXTag,{name:"ol",components:n,props:{start:3}},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"AWS::CloudFormation::Init")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Define configuration tasks for cfn-init. It's the most powerful usage of the metadata. This is very important and a lot to learn about it below."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"awscloudformationdesigner-hands-on"}},"AWS::CloudFormation::Designer hands on"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This is automatically added for you but worth deleting for online sharing and usage. When dragging and dropping each resource you will see a huge set of metadata left there. The metadata can also be added to each resource."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"awscloudformationinterface-hands-on"}},"AWS::CloudFormation::Interface hands on"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Define grouping and ordering of input parameteres when they are displayed in the AWS Console. This is meant when users must input params manually."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You provide them with grouping, or sorting, that allow them to input parameters efficiently."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example: Group all the EC2 related params together."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"---\nParameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  InstanceType:\n    Description: EC2 instance type.\n    Type: String\n    Default: t2.micro\n    AllowedValues:\n      - t2.micro\n      - t2.small\n      - t2.medium\n      - m3.medium\n      - m3.large\n      - m3.xlarge\n      - m3.2xlarge\n  SSHLocation:\n    Description: The IP address range that can SSH to the EC2 instance.\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\"\n    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n  VPCID:\n    Description: VPC to operate in\n    Type: AWS::EC2::VPC::Id\n  SubnetID:\n    Description: Subnet ID\n    Type: AWS::EC2::Subnet::Id\n  SecurityGroupID:\n    Description: Security Group\n    Type: AWS::EC2::SecurityGroup::Id\n\nResources:\n  MyEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: !Ref InstanceType\n      SecurityGroups:\n        - !Ref SecurityGroupID\n      SubnetID: !Ref SubnetID\n\nMetadata:\n  # This is the important part\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: 'Network Configuration'\n        Parameters:\n          - VPCID\n          - SubnetID\n          - SecurityGroupID\n      - Label:\n          default: 'Amazon EC2 Configuration'\n        Parameters:\n          - InstanceType\n          - KeyName\n    ParameterLabels:\n      VPCID:\n        default: 'Which VPC should this be deployed to?'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you deploy a new stack using the above, you will see that the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Parameters")," block will then drop you to questions about what configuration you are looking for."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cfn-init-and-ec2-user-data"}},"CFN Init and EC2 User Data"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"ec2-user-data-overview"}},"EC2 User Data Overview"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Many CF templates will be about provisioning computer resources in your AWS Cloud eg. EC2 instances, autoscaling."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Usually, you want to the instances to be self configured so that they can perform the job they are supposed to perform."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can fully automate the EC2 fleet with CF init."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example: an EC2 instance that has php and mysql installed on it."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We want a user-data script to get this up and going. From the EC2 management console, you can basically use the advanced section to add a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"/bin/bash")," section. This is already started to become more tedious than what we want."),o.a.createElement(r.MDXTag,{name:"p",components:n},"How can we do this in CloufFormation?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The following script can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"UserData")," to add the script:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Parameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  SSHLocation:\n    Description: The IP address range that can be used to SSH to the EC2 instances\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\"\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\n\nResources:\n  WebServer:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      KeyName: !Ref KeyName\n      SecurityGroups:\n        - !Ref WebServerSecurityGroup\n      UserData:\n        Fn::Base64: | # everything after will be kept as is\n          #!/bin/bash\n          yum update -y\n          yum install -y httpd24 php56 mysql55-server php56-mysqlnd\n          service httpd start\n          chkconfig httpd on\n          groupadd www\n          usermod -a -G www ec2-user\n          chown -R root:www /var/www\n          chmod 2775 /var/www\n          find /var/www -type d -exec chmod 2775 {} +\n          find /var/www -type f -exec chmod 0664 {} +\n          echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php\n\n  WebServerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Enable HTTP access via port 80 + SSH access'\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          FromPort: '80'\n          IpProtocol: tcp\n          ToPort: '80'\n        - CidrIp: !Ref SSHLocation\n          FromPort: '22'\n          IpProtocol: tcp\n          ToPort: '22'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Now that we see the power of this, let's have a look at CF Init."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cloudformation-init"}},"CloudFormation Init"),o.a.createElement(r.MDXTag,{name:"p",components:n},"What is the problem with EC2 user data? Well, what happens if we have a large configuration? What if we want to evolve the state without terminating it? How do we make it readable? How do we know or signal that our EC2 user-data script actually completed successfully?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Amazon creating CF helper scripts."),o.a.createElement(r.MDXTag,{name:"p",components:n},"There are 4 python scripts that come directly with Amazon Linux AMI or can be installed using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"yum")," on non-Amazon Linux. They are:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"cfn-init: Used to retrieve and interprety the resouce metadata, installing packages, creating files and starting services."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"cfn-signal: A simple wrapper to signal an AWS CloudFormation CreationPolicy or WaitCondition, enabling you to sync other resources in the stack with the application being ready. This can give us the yes/no if succssful."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"cfn-get-metadata: A wrapper script making it easy to retrieve either all metadata defined for a resource or path to a specific key or subtree of the resource metadata."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"cfn-hup: A daemon to check for updates to metadata and execute custom hooks when the changes are detected.")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The usual flow? cfn-init, then cfn-signal, then optionally cfn-hup."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"awscloudformationinit"}},"AWS::CloudFormation::Init"),o.a.createElement(r.MDXTag,{name:"p",components:n},"A config contains the following and is executed in that order:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Packages: install a list of packages on the Linux OS (mysql, wordpress, etc)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Groups: define user groups"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Users: define users, and which group they belong to"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Sources: download an archive file and place it on the ec2 instance (tar, zip, bz2)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Files: create files on the ec2 instance, using inline or can be pulled from a URL"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Commands: run a series of commands"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Services: launch a list of sysvinit")),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also have multiple configs and you can run them sequentially etc."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"packages"}},"Packages"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can install packages from the following repositories:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"apt"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"msi"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"python"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"rpm"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"rubygems"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"yum")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Packages are processed in the following order: rpm, yum/apt, and then rubygems and python."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also specify a version if you want."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    packages:\n      rpm:\n        epel: 'http://download....'\n      yum:\n        httpd: [] # means latest\n        php: []\n        wordpress: []\n      rubygems:\n        chef:\n          - '0.10.2' # get this version\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"groups-and-users"}},"Groups and Users"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you want to have multiple users and groups (with optional gid) in your ec2 instance, you can add groups and users to CF and metadata."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    groups:\n      groupeOne: {}\n      groupTwo:\n        gid: '45' #gid = group ID\n    users:\n      myUser:\n        groups:\n          - 'groupOne'\n          - 'groupTwo'\n        uid: '50'\n        homeDir: '/tmp'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the larger example..."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    groups:\n      apache: {} # assign any group ID\n    users:\n      'apache':\n        groups:\n          - 'apache' # user apache belongs to apache\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"sources"}},"Sources"),o.a.createElement(r.MDXTag,{name:"p",components:n},"These are conveninence for a compressed archieve."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    sources:\n      '/home/ec2-user/aws-cli': 'https://github.com/aws/aws-cli/tarball/master'\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"files"}},"Files"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Files can be the most used section. Almost all the full power. It can be a specific URL or written inline for what you are doing."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Base example:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      /tmp/setup.mysql:\n        content: !Sub |\n          CREATE DATABASE ${DBName};\n          CREATE USER '${DBUsername}'@'localhost' IDENTIFIED BY '${DBPassword}';\n          GRANT ALL ON ${DBName}.* TO '${DBUsername}'@'localhost';\n          FLUSH PRIVILEDGES;\n        mode: '000644'\n        owner: 'root'\n        group: 'root'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Full example:"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Note: !Sub is a function used for making substitution. ie where you see ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"${AWS::StackName}"),"."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      '/tmp/cwlogs/apacheaccess.conf':\n        content: !Sub |\n          [general]\n          state_file= /var/awslogs/agent-state\n          [/var/log/httpd/access_log]\n          file = /var/log/httpd/access_log\n          log_group_name = ${AWS::StackName}\n          log_stream_name = {instance_id}/apache.log\n          datetime_format = %d/%b/%Y:%H:%M:%S\n        mode: '000400'\n        owner: apache\n        group: apache\n      '/var/www/html/index.php':\n        content: !Sub |\n          <?php\n          echo '<h1>AWS CloudFormation sample PHP application for ${AWS::StackName}</h1>';\n          ?>\n        mode: '000644'\n        owner: apache\n        group: apache\n      '/etc/cfn/cfn-hup.conf':\n        content: !Sub |\n          [main]\n          stack=${AWS::StackId}\n          region=${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n      '/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n        content: !Sub |\n          [cfn-auto-reloader-hook]\n          triggers=post.update\n          path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n          action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"fnsub"}},"Fn::Sub"),o.a.createElement(r.MDXTag,{name:"p",components:n},"(Or as !Sub) is used to substitute variables from a text. It's a very handy function that will allow you to fully customize your templates."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For example, you can combine !Sub with References or AWS Pseudo variables."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Must be in the form ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"${VarName}"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Forms:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"# You can do this\n!Sub\n  - String\n  - { Var1Name: Var1Value, Var2Name: Var2Value }\n\n# or (more complicated and rarely seen)\n!Sub String\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"commands"}},"Commands"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can run commands one at a time in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"alphabetical order"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can set a directory from which that command is run, environment variables etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also provide a test to control whether the command is executed or not."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This should be a last resort. You can execute any of the scripts from the above files in this section."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example: call the echo command only if the file doesn't exist"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"commands:\n  test:\n    command: 'echo \"$MAGIC\" > test.txt'\n    env:\n      MAGIC: 'I come from the environment!'\n    cwd: '~'\n    test: 'test ! -e ~/test.txt' # check file exists\n    ignoreErrors: 'false' # fail if is doesn't work\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"services"}},"Services"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"AWS::CloudFormation::Init:\n  config:\n    services:\n      sysvinit:\n        httpd:\n          enabled: 'true'\n          ensureRunning: 'true'\n        sendmail:\n          enabled: 'false'\n          ensureRunning: 'false'\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cfn-init-and-signal"}},"CFN Init and Signal"),o.a.createElement(r.MDXTag,{name:"p",components:n},"First, we use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cfn-init")," to launch the config."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Then we use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cfn-signal")," to tell when the config is complete, which will let CF know that the resource creation has been successful."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This has to be used in conjuction with a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CreationPolicy"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This example means waiting a max of 5 minutes for the instance to come online and be self configured. If we don't hear back by ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cfn-signal")," by the, CF will fail and rollback."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"CreationPolicy:\n  ResourceSignal:\n    Timeout: PT5M\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This is useful in case of a bad update."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cfn-hup"}},"cfn-hup"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Cfn-hup can be used to tell your EC2 instance to look for Metadata changes every 15 minutes and apply the metadata configuration again."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"It's very powerful but you really need to try it out to understand how it works.")),o.a.createElement(r.MDXTag,{name:"p",components:n},'Example from the "files" declation:'),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"'/etc/cfn/cfn-hup.conf':\n  content: !Sub |\n    [main]\n    stack=${AWS::StackId}\n    region=${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n  group: 'root'\n'/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n  content: !Sub |\n    [cfn-auto-reloader-hook]\n    triggers=post.update\n    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cfn-init-hands-on"}},"CFN Init Hands-On"),o.a.createElement(r.MDXTag,{name:"p",components:n},"After loading the CFN Init yaml file into CF, it will go through a series of different events."),o.a.createElement(r.MDXTag,{name:"p",components:n},'You can under "status reason" if there is a success message sent back.'),o.a.createElement(r.MDXTag,{name:"p",components:n},"You need to practise your !Init skilles. It will be extremely handy for creating EC2 Instances or AutoScaling groups."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Remember logs for ec2-user data are in ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"/var/log/cloud-init-output.log")," and logs for cfn-init are in ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"/var/log/cfn-init.log"),", which is really helpful if commands don't complete like you want them to."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"advanced-cf-concepts"}},"Advanced CF Concepts"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Review of current standing:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"You can check AWS labs templates from ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"https://github/com/awslabs/aws-cloudformation-templates")," to see what you can understand/see good practise.")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The example with WordPress is what is shown in the course."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"using-the-aws-cli"}},"Using the AWS CLI"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use the AWS CLI to create, update or delete CF templates."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Super conventient for when you start automating your deployments."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once you've downloaded the AWS config, use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"aws configure --profile <profile_name>")," to configure a profile with the ID and Secret Access key."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To run a CF command, you can use something like the following ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"aws cloudformation create-stack --stack-name example-cli-stack --template-body file://0-sample-template.yaml --parameters file://0-parameters.json --profile cf-course --region us-east-1")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"parameters.json")," file to set ParameterKey and ParameterValue for all the keys and values we are looking to share."),o.a.createElement(r.MDXTag,{name:"p",components:n},"After running the command, what you get back is the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"StackId"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"using-troposphere-python-to-generate-cloudformation-templates"}},"Using Troposphere (Python) to generate CloudFormation templates"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Troposhere allows you to leverage Python write the templates."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This means you can start using types in your templates for safety."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You will also have valid CF and can dynamically generate CloudFormation."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This means you can also have very complex conditions."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The disadvantage is that the Python needs to generate the JSON for it to be."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"deletionpolicy"}},"DeletionPolicy"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This policy can prevent resources from being deleted, or in some cases, back them up before the deletion. This will help prevent doing something really, really bad."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Deletion Policy can take up the following values:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Delete: AWS CloudFormation will delete the resource and all its content if applicable during stack deletion (does not apply to S3)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted. You can add this deletion policy to any resource type."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Snapshot: For resources that support snapshots (AWS::EC2::Volume, AWS::ElasticCache::CacheCluster etc)")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yaml"}},"Resources:\n  myS3Bucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the above example, it will create the S3 Bucket, you will see the bucket created."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Now if we delete that stack and the deletion policy is retain, you will still have that bucket there."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"custom-resources-with-aws-lambda"}},"Custom Resources with AWS Lambda"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Custom resources enable you to write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update (if you changed the custom resource) or delete stacks."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For example, you might want to include resources that aren't available as AWS CloudFormation resource types."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Check online for a walkthrough of custom resources."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"best-practises-to-organize-your-cloudformation-templates"}},"Best practises to organize your CloudFormation templates"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How to organise templates: you can have a layered architecture (horizontal layers) vs service oriented architecture (vertical layers)."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Use cross stack references eg. to reference a VPC or subnet."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Make sure the template is environment agnostic to do dev / test / prod and across regions / accounts seemlessly."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Never embed credentials (use parameters with NoEcho or KMS)."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Use specific parameters types and constraints."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Use CFN Init (& latest version of the helper scripts)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Validate templates"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Don't do anything manual on the elements of the stack - that can cause a state mismatch."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Verify changes with changesets (and avoid disasters)."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Use stack policies to prevent critical components from being deleted after create (such as your most valuable RDS database).")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cost-estimate-for-templates"}},"Cost estimate for templates"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can estimate the cost of a stack very easily."),o.a.createElement(r.MDXTag,{name:"p",components:n},'For this, just upload the stack onto the AWS console, enter the params and click "cost".'))}}])&&c(a.prototype,t),m&&c(a,m),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-aws-aws-cloud-formation-master-class.305817e8304de77c75ce.js.map