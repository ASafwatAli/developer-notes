{"version":3,"sources":["webpack:///./manual/Timber/Timber-Cheat-Sheet.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className","href"],"mappings":"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","file":"static/js/manual-timber-timber-cheat-sheet.577a2c4a.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"timber-help-sheet\"}}>{`Timber Help Sheet`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here are some helpful conversions for functions you're probably well familiar with in WordPress and their Timber equivalents. These assume a PHP file with the Timber::get_context(); function at the top. For example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`\\$context = Timber::get_context();\n\\$context['post'] = new TimberPost();\nTimber::render('single.twig', \\$context);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"timber-example\"}}>{`Timber Example`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`RedBull home.php file`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`\\$data = Context::getDefaultContext();\t\t//standard include file at the top`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-php\"}}>{`<?php\n\n\\$data = Context::getDefaultContext();\n\nprint_r(\\$data);\nexit();\n\n// Set page title and other custom data\n\\$data['title'] = \\$data['site']->title;\n\\$data['events'] = Timber::get_posts([\n    'post_type' => 'event',\n    'orderby' => 'meta_value_num',\n  'meta_key' => 'event_date',\n    'order' => 'asc',\n    'posts_per_page' => -1,\n]);\n\n// render the twig file\nTimber::render('home.twig', \\$data);\n\n?>\n\n// this is the function context found in Redbull under functions > context.php\n\n<?php\n\nclass Context {\n\n    // Set up all of the Timber context stuff we need on every page\n    public static function getDefaultContext() {\n    global \\$wp;\n\n    \\$data = Timber::get_context();\n\n    // adding some extra meta to the data context\n    \\$data['meta'] = [\n      \"title\" => \\$data['site']->title,\n      \"description\" => \\$data['site']->description,\n      \"image\" => \\$data['theme']->link . \"/img/opengraph.png\",\n      \"url\" => home_url(add_query_arg(array(),\\$wp->request)) . \"/\"\n    ];\n\n        return \\$data;\n    }\n}\n\n?> // not actually included in the file\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"timber-blog-info\"}}>{`Timber Blog Info`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`blog_info('charset') => {{ site.charset }}\nblog_info('description') => {{ site.description }}\nblog_info('sitename') => {{ site.name }}\nblog_info('url') => {{ site.url }}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"timber-body-class\"}}>{`Timber Body Class`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`implode(' ', get_body_class()) => <body class=\"{{ body_class }}\">\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"timber-post\"}}>{`Timber Post`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`the_content() => {{ post.content }}\nthe_permalink() => {{ post.link }}\nthe_title() => {{ post.title }}\nget_the_tags() => {{ post.tags }}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"timber-theme\"}}>{`Timber Theme`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In WordPress parlance, stylesheet_directory = child theme, template directory = parent theme. Both WP and Timber functions safely return the current theme info if there's no parent/child going on.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`get_template_directory_uri() => {{ theme.link }} (Parent Themes)\nget_template_directory_uri() => {{ theme.parent.link }} (Child Themes)\nget_stylesheet_directory_uri() => {{ theme.link }}\nget_template_directory() => {{ theme.parent.path }}\nget_stylesheet_directory() => {{ theme.path }}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"wp-functions\"}}>{`WP Functions`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`wp_footer() => {{ wp_footer }}\nwp_head() => {{ wp_head }}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"wp-integrations\"}}>{`WP Integrations`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/timber/timber/wiki/WP-Integration\"}}>{`https://github.com/timber/timber/wiki/WP-Integration`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the_content\"}}>{`the_content`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You're probably used to calling the_content() in your theme file. This is good. Before outputting, WordPress will run all the filters and actions that your plugins and themes are using. If you want to get this into your new Timber theme (and you probably do). Call it like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<div class=\"my-article\">\n   {{post.content}}\n</div>\n\n//This differs from {{post.post_content}} which is the raw text stored in your database\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"hooks\"}}>{`hooks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Timber hooks to interact with WordPress use this/style/of_hooks instead of this_style_of_hooks. This matches the same methodology as Advanced Custom Fields.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Full documentation to come`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"scripts--stylesheets\"}}>{`Scripts + Stylesheets`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What happened to wp_head() and wp_footer()? Don't worry, they haven't gone away. In fact, they have a home now in the Timber::get_context() object. When you setup your PHP file, you should do something like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-php\"}}>{`/* single.php */\n\\$data = Timber::get_context();\n\\$data['post'] = new TimberPost();\nTimber::render('single.twig', \\$data);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now in the corresponding Twig file:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-html\"}}>{`{# single.twig #}\n<html>\n    <head>\n    <!-- Add whatever you need in the head, and then...-->\n    {{wp_head}}\n    </head>\n\n    <!-- etc... -->\n\n    <footer>\n        Copyright &copy; {{\"now\"|date('Y')}}\n    </footer>\n    {{wp_footer}}\n    </body>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`WordPress will inject whatever output had been loaded into wp_head() and wp_footer() through these variables.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"functions\"}}>{`Functions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But my theme/plugin has some functions I need! Do I really have to re-write all of them?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`No.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's say you modified twentyeleven and need some of the functions back. Here's the quick-and-dirty way:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<div class=\"posted-on\">{{function(\"twentyeleven_posted_on\")}}</div>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Oh. That's not so bad. What if there are arguments? Easy:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{# single.twig #}\n<div class=\"admin-tools\">\n    {{function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>')}}\n</div>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Nice! Any gotchas? Unfortunately yes. While the above example will totally work in a single.twig file it will not in a loop. Why? Single.twig/single.php retain the context of the current post. Thus for a function like edit_post_link (which will try to guess the ID# of the post you want to edit, based on the current post in the loop), the same function requires some modification in a file like archive.twig or index.twig. There, you will need to explicitly set the post ID:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{# index.twig #}\n<div class=\"admin-tools\">\n    {{function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>', post.ID)}}\n</div>\n\n// You can also use fn('my_function') as an alias.\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`For a less quick-and-dirty way, you can use the TimberFunctionWrapper. This class sets up your PHP functions as functions you can use in your Twig templates. It will execute them only when you actually call them in your template. You can quickly set up a TimberFunctionWrapper using TimberHelper:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`/**`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`@param string \\$function_name`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`@param array (optional) \\$defaults`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`@param bool (optional) \\$return_output_buffer Return function output instead of return value (default: false)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`@return \\TimberFunctionWrapper\n*/\nTimberHelper::function_wrapper( \\$function_name, \\$defaults = array(), \\$return_output_buffer = false );\nSo if you want to add edit_post_link to your context, you can do something like this:`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`/* single.php */\n\\$data = Timber::get_context();\n\\$data['post'] = new TimberPost();\n\\$data['edit_post_link'] = TimberHelper::function_wrapper( 'edit_post_link', array( __( 'Edit' ), '<span class=\"edit-link\">', '</span>' ) );\nTimber::render('single.twig', \\$data);\n\n// Now you can use it like a 'normal' function:\n\n{# single.twig #}\n<div class=\"admin-tools\">\n    {{edit_post_link}}\n</div>\n{# Calls edit_post_link using default arguments #}\n\n{# single-my-post-type.twig #}\n<div class=\"admin-tools\">\n    {{edit_post_link(null, '<span class=\"edit-my-post-type-link\">')}}\n</div>\n{# Calls edit_post_link with all defaults, except for second argument #}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"actions\"}}>{`Actions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Call them in your Twig template...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{% do action('my_action') %}\n{% do action('my_action_with_args', 'foo', 'bar') %}\n... in your functions.php file:\n\nadd_action('my_action', 'my_function');\n\nfunction my_function(\\$context){\n    //\\$context stores the template context in case you need to reference it\n    echo \\$context['post']->post_title; //outputs title of yr post\n}\nadd_action('my_action_with_args', 'my_function_with_args', 10, 2);\n\nfunction my_function_with_args(\\$foo, \\$bar){\n    echo 'I say '.\\$foo.' and '.\\$bar;\n}\nYou can still get the context object when passing args, it's always the last argument...\n\nadd_action('my_action_with_args', 'my_function_with_args', 10, 3);\n\nfunction my_function_with_args(\\$foo, \\$bar, \\$context){\n    echo 'I say '.\\$foo.' and '.\\$bar;\n    echo 'For the post with title '.\\$context['post']->post_title;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Please note the argument count that WordPress requires for add_action`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"filters\"}}>{`Filters`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{{ post.content|apply_filters('my_filter') }}\n{{ \"my custom string\"|apply_filters('my_filter',param1,param2,...) }}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"widgets\"}}>{`Widgets`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Everyone loves widgets! Of course they do...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`\\$data['footer_widgets'] = Timber::get_widgets('footer_widgets');\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`...where 'footer_widgets' is the registered name of the widgets you want to get(in twentythirteen these are called sidebar-1 and sidebar-2 )`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then use it in your template:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{# base.twig #}\n<footer>\n    {{footer_widgets}}\n</footer>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using Timber inside your own widgets`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also use twig templates for your widgets! Let's imagine we want a widget that shows a random number each time it is rendered.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Inside the widget class, the widget function is used to show the widget:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`public function widget(\\$args, \\$instance) {\n    \\$number = rand();\n    Timber::render('random-widget.twig', array('args' => \\$args, 'instance' => \\$instance, 'number' => \\$number));\n}\nThe corresponding template file random-widget.twig looks like this:\n\n{{ args.before_widget | raw }}\n{{ args.before_title | raw }}{{ instance.title | apply_filters('widget_title') }}{{ args.after_title | raw }}\n\n<p>Your magic number is: <strong>{{ number }}</strong></p>\n\n{{ args.after_widget | raw }}\nThe raw filter is needed here to embed the widget properly.\n\nYou may also want to check if the Timber plugin was loaded before using it:\n\npublic function widget(\\$args, \\$instance) {\n    if (!class_exists('Timber')) {\n        // if you want to show some error message, this is the right place\n        return;\n    }\n    \\$number = rand();\n    Timber::render('random-widget.twig', array('args' => \\$args, 'instance' => \\$instance, 'number' => \\$number));\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"shortcodes\"}}>{`Shortcodes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Well, if it works for widgets, why shouldn't it work for shortcodes ? Of course it does !`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's implement a `}{`[youtube]`}{` shorttag which embeds a youtube video. For the desired usage of `}{`[youtube id=xxxx]`}{` we only need a few lines of code:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// should be called from within an init action hook\nadd_shortcode('youtube', 'youtube_shorttag');\n\nfunction youtube_shorttag(\\$atts) {\n    if(isset(\\$atts['id'])) {\n        \\$id = sanitize_text_field(\\$atts['id']);\n    } else {\n        \\$id = false;\n    }\n    // this time we use Timber::compile since shorttags should return the code\n    return Timber::compile('youtube-short.twig', array('id' => \\$id));\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In youtube-short.twig we have the following template:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{% if id %}\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/{{ id }}\" frameborder=\"0\" allowfullscreen></iframe>\n{% endif %}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now, when the YouTube embed code changes, we only need to edit the youtube-short.twig template. No need to search your PHP files for this one particular line.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"layouts-with-shortcodes\"}}>{`Layouts with Shortcodes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Timber and Twig can process your shortcodes by using the {% filter shortcodes %} tag. Let's say you're using a `}{`[tab]`}{` shortcode, for example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{% filter shortcodes %}\n    [tabs tab1=\"Tab 1 title\" tab2=\"Tab 2 title\" layout=\"horizontal\" backgroundcolor=\"\" inactivecolor=\"\"]\n        [tab id=1]\n            Something something something\n        [/tab]\n\n        [tab id=2]\n            Tab 2 content here\n        [/tab]\n    [/tabs]\n{% endfilter %}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}