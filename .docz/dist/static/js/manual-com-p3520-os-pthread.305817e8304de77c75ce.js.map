{"version":3,"sources":["webpack:///./manual/COMP3520-OS/Pthread.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"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","file":"static/js/manual-com-p3520-os-pthread.c50dcaae.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"pthreads\"}}>{`Pthreads`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"pthreads-api\"}}>{`Pthreads API`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Defined in the ANSI/IEEE Posix 1003.1 - 1995 standard`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Subroutines comprise the Pthreads API can be informally grouped into three major classes:`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread management`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Mutexes `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Condition variables`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"1-thread-management\"}}>{`1: Thread Management`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`first class of functions work directly on threads - creating, detatching, joining etc `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`also include funcs to set/query thread attributes (joinable, scheduling etc)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Create Threads`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`initially, single default thread - others must be explicitly created`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`pthread_create(thread, attr, startRoutine, arg)\n// thread - unique identifier for the new thread (pthread_t)\n// attr - attr object used to set thread attributes (pthread_attr) - you can specify a thread attributes object, or NULL for the default values\n// startRoutine - C routine that the thread will execute \n// arg - single arg that may be passed to startRoutine - it must be passed by reference (pointer to struct) and NULL may be used if no arg is to be passed\n\n/*\n    If successful, the pthread_create() function shall return zero; otherwise, an error number shall be returned to indicate the error\n */\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Thread Attributes`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`By default, a thread is created with certain attributes.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`pthread_attr_init(attr) and pthread_attr_destroy(attr) are used to initialize/destroy the thread attribute object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Other routines are then used to query/set specific attributes in the thread attribute object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Terminating Thread`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread makes call to the pthread_exit() subroutine `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Thread is cancelled by another thread via pthread_cancel() routine `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Entire process is terminated due to call to exit subroutine `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Routine: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_exit(status)`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`used to explicitly exit the thread`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`programmer may optionalyl specify a termination status, which is stored as a void pointer for any thread that may join the calling thread`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Cleanup: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_exit()`}</MDXTag>{` does not close files; any files opened inside the thread will remain open after the thread is terminated.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n    int *tid;\n    tid = (int *)threadid;\n    printf(\"Hello World! It's me, thread #%d!\\n\", *tid);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t threads[NUM_THREADS];\n    int rc, t, tids[NUM_THREADS];\n    for (t=0; t< NUM_THREADS; t++) {\n        printf(\"In main: creating thread %d\\n\", t);\n        tids[t] = t;\n        rc = pthread_create(&threads[t], NULL, PrintHello, (void *)&tids[t]);\n\n        if (rc) {\n            printf(\"ERROR; return code from pthread_create() is %d\\n\", rc);\n            exit(-1);\n        }\n    }\n    pthread_exit(NULL); \n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"passing-arguments-to-threads\"}}>{`Passing Arguments to Threads`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_create()`}</MDXTag>{` routine permits the programmer to pass one argument to the thread start routine.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For cases where multiple args must be passed, we can create a struct and use the reference pointer as an arg.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`All args passed by reference must be cast to (void *)`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`struct two_args {\n    int arg1;\n    int arg2;   \n};\n\nvoid *needs_2_args(void *ap) {\n    struct two_args *argp;\n    int a1, a2;\n\n    argp = (struct two_args *) ap;\n\n    // do stuff here\n    \n    a1 = argp->arg1;\n    a2 = argp->arg2;\n    \n    // do stuff here \n\n    free(argp);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t t;\n    struct two_args *ap;\n    int rc;\n\n    // do stuff here \n\n    ap = (struct two_args *)malloc(sizeof(struct two_args));\n    ap->arg1 = 1;\n    ap->arg2 = 2;\n    rc = pthread_create(&t, NULL, needs_2_args, (void *) ap);\n\n    // do stuff here \n\n    pthread_exit(NULL);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"joining-and-detatching-threads\"}}>{`Joining and Detatching Threads`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Routines`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_join(threadid, status)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_detach(threadit, status)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_attr_setdatachstate(attr, detachstate)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`pthread_attr_getdetachstate(attr, detachstate)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`\"joining\" is one way to accomplish synchronization between threads`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_join()`}</MDXTag>{` subroutine blocks the calling thread until the specified threadid thread terminates`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The programmer is able to obtain the target thread's termination return status if it was specified in the target thread's call to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_exit()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`When a thread if created, one of its attributes defines whether it is joinable or detached.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Only threads that are create as joinable can be joined.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To explicitly create a thread as joinable or detached, the attr argument in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_create()`}</MDXTag>{` routine is used:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Declare a pthread attribute ariable of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_t data`}</MDXTag>{` type `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Initialize the attribute ariable with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_init()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Set the attribute detached status with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_setdetachedstate()`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`When done, ree library resources used by the attribute with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_attr_destroy()`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`void *BusyWork(void *null) {\n    // do stuff \n    pthread_exit((void *) 0);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_attr_t attr;\n    int rc, t;\n    void *status;\n\n    /* init and set thread detached attribute */\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n    /* free attribute and wait for the other threads */\n    pthread_attr_destory(&attr);\n    for (t=0; t< NUM_THREADS; t++) {\n        rc = pthread_join(thread[t], &status);\n        // do stuff \n        printf(\"Completed join with thred %d status = %ld\\n\", t, (long)status);\n    }\n    pthread_exit(NULL);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"syncronisation-issues\"}}>{`Syncronisation Issues`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When multiple threads attempt to manipulate the same data item, the results can often be incoherent if proper care is not take ie. race conditions.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"2-mutexes\"}}>{`2: Mutexes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The second class of functions deal with synchronization - called a \"mutex\", which is an abbreviation for mutual exclusion.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-and-destroying-mutexes\"}}>{`Creating and Destroying Mutexes`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_init(mutex, attr)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_destroy(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutexattr_init(attr)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutexattr_destroy(attr)`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A mutex must be declared with type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_t`}</MDXTag>{`, and must be initialized before they can be used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are two ways to init a mutex variable:\n1. Statically, when declared eg `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER`}</MDXTag>{`\n2. Dynamically, with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_init()`}</MDXTag>{` routine. This method permits setting mutex object attributes, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`attr`}</MDXTag>{` (which my be specified as NULL to accept defaults).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The mutex is initially unlocked.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"locking--unlocking-mutexes\"}}>{`Locking & Unlocking Mutexes`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines-1\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_lock(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_unlock(mutex)`}</MDXTag>\n<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_mutex_trylock(mutex)`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_lock(mutex)`}</MDXTag>{` will lock the specified mutex`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_unlock(mutex)`}</MDXTag>{` will unlock a mutex if called by the owning thread\n- throws an error if already unlocked or owned by another thread`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_trylock(mutex)`}</MDXTag>{` will attempt to lock a mutex, however if the mutex is already locked it will return a \"EBUSY\" error code.\n- May be useful to prevent deadlocks!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example 1`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can now write our previously incorrect code segment as...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t min_value_lock;\n\nmain() {\n    ...\n    pthread_mutex_init(&min_value_lock, NULL);\n    ...\n}\n\nvoid *find_min(void *list_ptr) {\n    ...\n    pthread_mutex_lock(&min_value_lock);\n    if (my_cost < best_cost) {\n        best_cost = my_cost;\n    }   \n    pthread_mutex_unlock(&min_value_lock);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example 2`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`producer-consumer`}</MDXTag>{` scenario imposes the following constraints:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The producer thread must not overwrite the shared buffer when the previous task has no been picked up by a consumer thread.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The consumer threads must not pick up tasks until there is something present in the shared data structure.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Individual consumer threads should pick up tasks one at a time.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t task_queue_lock;\nint task_available;\n\nmain() {\n    task_available = 0;\n    pthread_mutex_init(&task_queue_lock, NULL);\n}\n\nvoid *producer(void *producer_thread_data) {\n    ...\n    while (!done()) {\n        inserted = 0;\n        create_task(&my_task);\n        while (inserted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 0) {\n                insert_into_queue(my_task);\n                task_available = 1;\n                inserted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    ...\n    while (!done()) {\n        extracted = 0;\n        while (extracted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 1) {\n                extract_from_queue(&my_task);\n                task_available = 0;\n                extracted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n        process_task(my_task);\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"overheads-of-locking\"}}>{`Overheads of Locking`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Locks represent serialization points since critical sections must be executed by threads one after another.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Encapsulating large segments of the program within locks can lead to significant performance degradation.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`It is often possible to reduce the idling overhead associated with locks using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_mutex_trylock`}</MDXTag>{`.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Alleviating Locking Overhead`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_mutex_t tryLock_lock = PTHREAD_MUTEX_INITIALIZER;\n\nlock_status = pthread_mutex_trylock(&tryLock_lock)\nif (lock_status == EBUSY) {\n    /* do something else */\n    ...\n} else {\n    /* do one thing */\n    ...\n    pthread_mutex_unlock(&tryLock_lock);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"monitors\"}}>{`Monitors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Mutexes provide powerful sync tools, but...`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`lock() and unlock() are scatteed among several threads, therefore it is difficult to understand their effects`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`usage must be correct in all the threads `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`one bad thread (or one programming error) can kill the whole system`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`monitor`}</MDXTag>{` is a high-level abstraction that may provide a convenient and effective mechanism for thread synchronization.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`local data variables are accessible only by the monitor `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`thread enters monitor by invoking one of its procedures `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`only one thread may be executing in a the monitor at a time`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Monitor and Condition Variables`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Monitor does not need to code certain sync constraints explicitly.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`However, it is not sufficiently powerful for modeling some other synchronization schemes.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`An additional sync mechanism ie `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`condition variable`}</MDXTag>{` is required.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Condition Variables`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The third class of functions address communications between threads that share a mutex`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A condition variable allows a thread to block itself until specified data reaches a predefined state.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A condition variable indicates an event and has no value\n- One cannot store a value into nor retrieve a value from a condition variable.\n- If a thread must wait for an event to occur, that tread waits on the corresponding condition variable.\n- A condition variable has a queue for those threads that are waiting the corresponding event to occur to wait on.\n- If another thread causes the event to occur, that thread simply signal the corresponding condition variable.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`This class includes funcs to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`create`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`destroy`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`wait`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`signal`}</MDXTag>{` based on specified variable values.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Funcs to set/quey cond variable attrs are also included.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Cond variable is always used in conjunction with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`mutex lock`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"create--destroying-cond-variables\"}}>{`Create & Destroying Cond Variables`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"routines-2\"}}>{`Routines`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`pthread_cond_init(condition, attr)\npthread_cond_destroy(condition)\npthread_condattr_init(attr)\npthread_condattr_destroy(attr)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Condition variables must be declared with type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cont_t`}</MDXTag>{`, and must be initialized before they can be used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`2 Ways to declare:\n1. Statically\n2. Dynamically `}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"waiting-and-signaling-on-condition-variable\"}}>{`Waiting and Signaling on Condition Variable`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_signal()`}</MDXTag>{` is used to signal (or wake up) another thread which is waiting on the condition variable and should be called after the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutex`}</MDXTag>{` is locked.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It must unlock `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutex`}</MDXTag>{` in order for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_wait()`}</MDXTag>{` routine to complete.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pthread_cond_broadcast()`}</MDXTag>{` routine unlocks all of the threads blocked on the condition variable.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Proper locking and unlocked of mutex is essential for these routines\n- Failing to lock may cause it NOT to block\n- Failing to unlock the mutex may not allow a matching `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pthread_cond_wait()`}</MDXTag>{` routine to complete (it will remain blocked)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"producer-consumer-using-condition-variables\"}}>{`Producer-Consumer Using Condition Variables`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-c\"}}>{`pthread_cond_t cond_queue_empty, cond_queue_full;\npthread_mutex_t task_queue_cond_lock;\nint task_available;\n// other data structures here \n\nmain() {\n    // declarations and initializations \n    task_available = 0;\n    pthread_cond_init(&cond_queue_empty, NULL);\n    pthread_cond_init(&cond_queue_full, NULL);\n    pthread_mutex_init(&task_queue_cond_lock, NULL);\n    // create and join producer and consumer threads\n}\n\nvoid *producer(void *producer_thread_data) {\n    while(!done()) {\n        create_task();\n        pthread_mutex_lock(&task_queue_cond_lock);\n        \n        while (task_available == 1) {\n            pthread_cond_wait(&cond_queue_empty,\n                &task_queue_cond_lock);\n        }\n\n        insert_into_queue();\n        task_available = 1;\n        pthread_cond_signal(&cond_queue_full);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    while(!done()) {\n        pthread_mutex_lock(&task_queue_cond_lock);\n        while (task_available == 0) {\n            pthread_cond_wait(&cond_queue_full,\n                &task_queue_cond_lock);\n        }\n\n        my_task = extract_from_queue();\n        task_available = 0;\n        pthread_cond_signal(&cond_queue_empty);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n        process_task(my_task);\n    }\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}