(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./manual/Amplify/Graphql-Setup.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function p(e){return(p="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function m(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function i(e,n){return!n||"object"!==p(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,n){return(l=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=i(this,c(n).call(this,e))).layout=null,t}var t,a,p;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&l(e,n)}(n,o.a.Component),t=n,(a=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"graphql-setup"}},"GraphQL Setup"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"links"}},"Links"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2"}},"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2"),o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde"}},"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"to-get-it-running"}},"To get it running"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash"}},"amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Not that you can preset a schema to have used for Amplify."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example, create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"schema.graphql")," file with following and pass the path during setup:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"example-schema"}},"Example schema"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"example-mutation"}},"Example mutation"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = `\n  mutation($name: String!, $description: String) {\n    createPet(input: {\n      name: $name\n      description: $description\n  }) {\n    id\n    name\n    description\n  }\n}`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"example-query"}},"Example query"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"// define query\nconst listPets = `\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"autogenerating-code-for-the-schema"}},"Autogenerating code for the schema"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash"}},"amplify codegen add\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"1-many-many-to-many-relationship-schemas"}},"1-many, many-to-many relationship schemas"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: "PostEditors")\n}\n# Create a join model and disable queries as you don\'t need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: "PostEditors")\n  editor: User! @connection(name: "UserEditors")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: "UserEditors")\n}\n')))}}])&&m(t.prototype,a),p&&m(t,p),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-amplify-graphql-setup.305817e8304de77c75ce.js.map