{"version":3,"sources":["webpack:///./manual/Machine-Learning/ML-Random-Forest-Regression.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"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","file":"static/js/manual-machine-learning-ml-random-forest-regression.d8faadcf.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"random-forest-regression\"}}>{`Random Forest Regression`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"intuition\"}}>{`Intuition`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Random forest is a version of ensemble learning.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It's when you take the same algorithm multiple times and create something more powerful.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Steps`}</MDXTag></MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Pick at random K data points from the Training Set.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Build the Decision Tree associated to these K data points.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Choose the number Ntree of trees you want to build and repeat steps 1 and 2.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`For a new data point, make each one of your Ntree trees predict the value of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Y`}</MDXTag>{` for the data point in question, and assign the new data point the average across all the predicted `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Y`}</MDXTag>{` values.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Doing this allows you to improve the accuracy of your prediction.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`How many lollies in a jar? Imagine taking notes of every guess - getting around 1000 and then beginning to average them out or take the median. Statistically speaking, you have a highly likelihood of being closer to the truth.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once you hit the middle of the normal distribution, you are more likely to be on the money for the guess.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"python\"}}>{`PYTHON`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is the last regression model. If you understand decision tree regression, you'll understand random forest.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`From decision tree, we know that we will need the visualisation using the non-continuous result.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For the regressor, we use RandomForestRegressor library.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\"}}>{`# Prediciting the Random Forest results\n# Create the Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(random_state=0)\nregressor.fit(X, y)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Simply, with these lines, we can already determine that the graph is no longer continuous.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`By having several decision trees, we end up with a lot more \"steps\" than we had with just one decision tree.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`More tree !== more steps. The more trees you have, the more the average will converge towards the same average.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Generally the steps will become better placed depending on the average.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}