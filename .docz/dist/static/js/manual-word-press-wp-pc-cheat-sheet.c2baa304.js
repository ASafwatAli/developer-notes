(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{"./manual/WordPress/WP-PC-Cheat-Sheet.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("./node_modules/react/index.js"),r=a.n(t),o=a("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}function i(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function c(e,n){return!n||"object"!==s(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,n){return(m=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=c(this,l(n).call(this,e))).layout=null,a}var a,t,s;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&m(e,n)}(n,r.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;p(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"wp-pres-company-cheat-sheet"}},"WP PRES COMPANY CHEAT SHEET"),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wp-pres-company-cheat-sheet"}},"WP PRES COMPANY CHEAT SHEET"),r.a.createElement(o.MDXTag,{name:"ul",components:n,parentName:"li"},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wppres-1-faq"}},"WPPRES-1: FAQ")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wppres-2-custom-type-relationships"}},"WPPRES-2: Custom Type Relationships")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wppres-3-example-of-rendering-a-twig-file-using-timber-wp-functions"}},"WPPRES-3: Example of Rendering a .twig file using Timber WP functions")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wppres-4-example-php-functionsphp"}},"WPPRES-4: Example PHP functions.php")),r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#wppres-5-creating-ajax-loading-example"}},"WPPRES-5: Creating AJAX (Loading example)"))))),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-1-faq"}},"WPPRES-1: FAQ"),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Q: I'm having a database connection failure through MAMP")),r.a.createElement(o.MDXTag,{name:"p",components:n},"A: Double check the wp_options in the siteurl and home settings and that they correctly match MAMP. If you are on the default MAMP ports, you may need localhost:8888 in both addresses. Also check the wp_config.php file in your text editor to ensure the content URL is also correct."),r.a.createElement(o.MDXTag,{name:"p",components:n},"Also be sure to check your /etc/hosts file to see what address and terms are set up and that you restart the mySQL daemon, MAMP and Sequel Pro."),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Q: Adjust get_posts posts_per_page for a data",'["term"]'," request")),r.a.createElement(o.MDXTag,{name:"p",components:n},"A: Add it as an argument in twig or create a custom function adjusting the posts_per_page. You can pass any get_posts properties as arguments here."),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Q: Where can I find what I need?")),r.a.createElement(o.MDXTag,{name:"p",components:n},"A: Check against the staging website if it is up to grab things like taxonomies, types, and to figure out the layout."),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-2-custom-type-relationships"}},"WPPRES-2: Custom Type Relationships"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"// in author-articles.php\n\n// be sure to require it in the functions.php file!\n\n<?php\n\nclass AuthorArticles {\n\n    // Get all locations w/ recent posts\n    public static function getAuthorArticles($author) {\n\n        $args = new WP_Query([\n            'post_type' => 'post',\n            'no_found_rows' => true,\n            'fields' => 'ids',\n            'orderby' => 'date',\n            'order' => 'desc',\n            'meta_query' => [\n                    [\n                        'key' => 'article_author',\n                        'value' => $author,\n                        'compare' => 'LIKE'\n                    ]\n                ]\n        ]);\n\n        $postIds = $args->get_posts();\n\n        $results = Timber::get_posts($postIds);\n\n        return Timber::get_posts($postIds);\n    }\n\n}\n\n?>\n\n// example in use\n// Author Template - single-authors.php file\n\n<?php\n\n/* Template Name: Author */\n\n$data = Context::getDefaultContext();\n\n$data['author'] = Timber::get_post();\n\n$data['posts'] = AuthorArticles::getAuthorArticles($data['author']->id);\n\n$data['breadcrumbs'] = [\n    [\n        'text' => 'Authors',\n        'url' => $data['site']->url .'/authors'\n    ]\n];\n\n\nTimber::render('author.twig', $data);\n\n?>\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-3-example-of-rendering-a-twig-file-using-timber-wp-functions"}},"WPPRES-3: Example of Rendering a .twig file using Timber WP functions"),r.a.createElement(o.MDXTag,{name:"ul",components:n},r.a.createElement(o.MDXTag,{name:"li",components:n,parentName:"ul"},"using the above examples")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-html"}},'// __author.twig__\n\n{% if post.article_author %}\n{% set author = TimberPost(post.get_field(\'article_author\')) %}\n<div class="author-container">\n    <p>Article By</p>\n    <div class="author">\n        <div class="image">\n            {% set image = TimberImage(author.get_thumbnail) %}\n            {% include \'partials/image.twig\' with {\n                image: image,\n                size: \'square_400\'\n            } %}\n        </div>\n        <div class="info">\n            <h3 class="title">{{ author.title }}</h3>\n            {% for social in author.get_field(\'social\') %}\n                <div class=\'social\'>\n                    <a href=\'{{ social.url }}\' target="_blank" class=\'icon\'>\n                        <i class=\'{{ socialIcons[social.network] }}\'></i>\n                    </a>\n                    <a href=\'{{ social.url }}\' target="_blank">\n                        <span>{{ social.display }}</span>\n                    </a>\n                </div>\n            {% endfor %}\n            <a class="authorlink" href="{{ author.link }}">View Author Page</a>\n        </div>\n    </div>\n</div>\n{% endif %}\n\n***\n\n// __list.twig__\n\n<div class="list -post">\n    <ul class="list-items">\n    {% for post in posts %}\n        {% include \'partials/post/list-item.twig\' %}\n    {% else %}\n        <p>Sorry, no posts matched your criteria</p>\n    {% endfor %}\n    </ul>\n</div>\n\n***\n\n__list-item.twig__\n\n<li class="list-item -post tile">\n    <a href="#">\n        <div class="image">\n            <img src="{{ post.get_thumbnail }}" alt="">\n        </div>\n        <div class="info">\n            <h3 class="title">{{ post.title }}</h3>\n            <p>{{ post.intro }}</p>\n            <div class="read-more">\n                <a href="{{ post.link }}">read more ></a>\n            </div>\n        </div>\n    </a>\n</li>\n')),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-4-example-php-functionsphp"}},"WPPRES-4: Example PHP functions.php"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"<?php\n\nadd_filter('show_admin_bar', '__return_false');\n\nrequire_once('functions/routes.php');\nrequire_once('functions/twig.php');\nrequire_once('functions/theme_support.php');\nrequire_once('functions/enqueue_scripts.php');\nrequire_once('functions/acf.php');\nrequire_once('functions/timber.php');\nrequire_once('functions/context.php');\nrequire_once('functions/locations.php');\nrequire_once('functions/author_articles.php');\nrequire_once('functions/infobox.php');\n\nif (!is_admin()) {\n    require_once('functions/post_filters.php');\n}\n\n?>\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-5-creating-ajax-loading-example"}},"WPPRES-5: Creating AJAX (Loading example)"),r.a.createElement(o.MDXTag,{name:"p",components:n},"Using twig, variables were passed down to be used for things such as ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"loadmore.twig"),", while a PHP class, routes and functions were set up to interact with the JS file."),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"function.php")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"<?php\n...\nrequire_once('functions/load_more.php');\n...\n?>\n")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"loadmore.php")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"<?php\n\nclass LoadMore {\n    public function loadNextSet($params) {\n        $perPage = 6;\n        $page = $params['page'];\n        $category = $params['cat'];\n        $data = Context::getDefaultContext();\n        $data['category'] = new TimberTerm($category);\n        $data['tag'] = 'tag';\n\n        $posts = $data['category']->get_posts([\n          'posts_per_page' => $perPage,\n          'orderby' => 'date',\n          'order' => 'DESC',\n          'offset' => ($perPage*$page) + 3,\n        ]);\n\n        $data['posts'] = $posts;\n\n        Timber::render('partials/post/grid.twig', $data);\n        exit();\n    }\n}\n\n?>\n")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"routes.php")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"...\n// $params are the :section, :cat and :page args\nRoutes::map(':section/:cat/:page', function($params){\n    $articles = new LoadMore();\n    echo $articles->loadNextSet($params);\n});\n...\n")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"__loadmore.twig__\n\n```html\n<div class=\"loadmore-container\" data-page='1' data-section='{{ section }}' data-category='{{ category }}'>\n    <a>Load More</a>\n</div>\n")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"load-more.js")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"var titleTagline = require('./title-tagline.js');\n\nvar loadMore = {\n    $loadMoreContainer: $('.loadmore-container'),\n    category: $('.loadmore-container').data('category'),\n    section: $('.loadmore-container').data('section'),\n    search: $('.loadmore-container').data('search'),\n    page: $('.loadmore-container').data('page'),\n    base_url: $('meta[name=base_url]').attr('content'),\n    perPage: 6,\n\n    init: function() {\n        // Show mega-menu when mega-menu link is focused\n        loadMore.$loadMoreContainer.on('click', function(e) {\n            e.preventDefault();\n            if ($('ul.grid').length > 0) {\n                loadMore.loadNextSection();\n            } else {\n                loadMore.loadNextSearch();\n            }\n        });\n    },\n\n    loadNextSection: function() {\n        return $.ajax({\n            url:\n                loadMore.base_url +\n                '/section/' +\n                loadMore.section +\n                '/' +\n                loadMore.category +\n                '/' +\n                loadMore.page,\n            type: 'GET',\n            success: loadMore.resultsSection,\n            error: loadMore.outputError\n        });\n    },\n\n    loadNextSearch: function() {\n        var urlString = loadMore.search;\n        urlString = urlString.replace(' ', '+');\n        console.log(urlString);\n        return $.ajax({\n            url:\n                loadMore.base_url +\n                '/search/' +\n                urlString +\n                '/' +\n                loadMore.page,\n            type: 'GET',\n            success: loadMore.resultsSearch,\n            error: loadMore.outputError\n        });\n    },\n\n    resultsSection: function(data) {\n        var numPosts = $(data).find('li.-post').length;\n        loadMore.page = parseInt(loadMore.page) + 1;\n        var render = $(data)\n            .find('li.-post')\n            .unwrap();\n        $('ul.grid')\n            .last()\n            .append(render);\n\n        if (numPosts < loadMore.perPage) {\n            loadMore.hideViewAll();\n        }\n\n        titleTagline.init();\n        titleTagline.doneResizing();\n    },\n\n    resultsSearch: function(data) {\n        console.log(data);\n\n        var numPosts = $(data).find('li.list-item').length;\n        loadMore.page = parseInt(loadMore.page) + 1;\n\n        var render = $(data)\n            .find('li.list-item')\n            .unwrap();\n        $('ul.list')\n            .last()\n            .append(render);\n\n        if (numPosts < loadMore.perPage) {\n            loadMore.hideViewAll();\n        }\n    },\n\n    hideViewAll: function() {\n        loadMore.$loadMoreContainer.css('display', 'none');\n    }\n};\n\nmodule.exports = {\n    init: loadMore.init\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"loadmore.php")),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"<?php\n\nclass LoadMore {\n    public function loadNextLocationsSet($params) {\n        $perPage = 6;\n        $page = $params['page'];\n        $category = $params['cat'];\n        $data = Context::getDefaultContext();\n        $data['category'] = new TimberTerm($category);\n        $data['tag'] = 'tag';\n\n        $posts = $data['category']->get_posts([\n          'posts_per_page' => $perPage,\n          'orderby' => 'date',\n          'order' => 'DESC',\n          'offset' => ($perPage*$page) + 3,\n        ]);\n\n        $data['posts'] = $posts;\n\n        Timber::render('partials/post/grid.twig', $data);\n        exit();\n    }\n\n    public function loadNextSearchSet($params) {\n        $perPage = 6;\n        $page = (int)$params['page'];\n        $field = $params['search'];\n        $offset = ($perPage*$page) + 4;\n        $data = Context::getDefaultContext();\n        $search = get_query_var('s');\n        $searchTerm = htmlspecialchars($field);\n\n        $data['posts'] = SearchTerms::getSearchArticles($field, $offset, $perPage);\n\n        Timber::render('partials/post/list.twig', $data);\n        exit();\n    }\n\n    public function loadNextInspirationsSet($params) {\n\n        $exclusion = [];\n\n        $perPage = 6;\n        $page = $params['page'];\n        $category = $params['cat'];\n        $data = Context::getDefaultContext();\n        $data['category'] = new TimberTerm($category);\n        $data['tag'] = 'tag';\n\n        if($featuredIds = $data['category']->featured) {\n            $data['categoryFeatured'] = Timber::get_posts($featuredIds);\n            $exclusion = self::updateExclusionList($data['categoryFeatured'], $exclusion);\n        }\n\n        $posts = $data['category']->get_posts([\n            'posts_per_page' => $perPage,\n            'orderby' => 'date',\n            'order' => 'DESC',\n            'offset' => ($perPage*$page) + 4,\n            'post__not_in' => $exclusion,\n        ]);\n\n        $data['posts'] = $posts;\n\n        Timber::render('partials/post/grid.twig', $data);\n        exit();\n    }\n\n    static function updateExclusionList($original, $exclusion) {\n        foreach($original as $post) {\n            if($post) {\n                array_push($exclusion, $post->id);\n            }\n        }\n        return $exclusion;\n    }\n}\n\n?>\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"wppres-6-custom-search-terms"}},"WPPRES-6: Custom Search Terms"),r.a.createElement(o.MDXTag,{name:"p",components:n},"This example was taken from YAC when it was required to search for a CPT ID and then use it to get some post ids returned with the latest meta data values."),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-php"}},"// from functions > search_term.php\n\nglobal $wpdb;\n\n$park_ids = [];\n$meta_arrays = [];\n$posts_park = [];\n\nif (strlen($search_term) > 3) {\n\n    $park_post_type='parks';\n    $park_post_status='publish';\n\n    // get the park ids that relate to the search\n    $park_args = $wpdb->get_col( $wpdb->prepare(\n            \"\n            SELECT ID\n            FROM $wpdb->posts WP\n            WHERE WP.post_title LIKE '%%%s%%'\n            AND post_type='%s'\n            AND post_status='%s'\n            \",\n            esc_sql($search_term),\n            esc_sql($park_post_type),\n            esc_sql($park_post_status)\n        )\n    );\n\n    $park_ids = $park_args;\n\n    if ($park_ids != null ) {\n\n        $park_ids = esc_sql( $park_ids );\n        $park_ids_str = \"'[^0-9]*\" . implode( \"[^0-9]*'|'[^0-9]*\", $park_ids ) . \"[^0-9]*'\";\n        $park = 'park';\n\n        //find the parks\n        $init_park = $wpdb->get_col( $wpdb->prepare(\n                \"\n                SELECT WP.ID\n                FROM $wpdb->posts WP\n                INNER JOIN $wpdb->postmeta PM\n                ON ( WP.ID = PM.post_id )\n                WHERE 1=1\n                AND ( ( PM.meta_key = %s\n                AND PM.meta_value REGEXP {$park_ids_str} ) )\n                AND WP.post_type = 'post'\n                AND (WP.post_status = 'publish')\n                GROUP BY WP.ID\n                ORDER BY WP.post_title DESC, WP.post_date DESC\n                \",\n                esc_sql($park)\n            )\n        );\n\n        // grab post results to allow metadata\n        // comparison for park\n        $results = Timber::get_posts($init_park);\n\n        // filter the results to ensure posts are associated with\n        // the latest and correct `park` value\n        if ($results) {\n            foreach ($results as $result) {\n                if (array_intersect($result->custom['park'], $park_ids)) {\n                    $posts_park[] = $result->id;\n                }\n            }\n        }\n    }\n}\n")))}}])&&i(a.prototype,t),s&&i(a,s),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-word-press-wp-pc-cheat-sheet.305817e8304de77c75ce.js.map