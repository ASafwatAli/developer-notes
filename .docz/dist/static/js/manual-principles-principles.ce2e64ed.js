(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{"./manual/Principles/Principles.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return d});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function l(e){return(l="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function i(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function m(e,n){return!n||"object"!==l(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var d=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=m(this,c(n).call(this,e))).layout=null,a}var a,t,l;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#styling-guidelines-and-principles"}},"Styling Guidelines and Principles"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#challenges"}},"Challenges"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#current-challenges"}},"Current challenges")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#naming-challenges"}},"Naming challenges")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#naming-conventions"}},"Naming conventions"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#links"}},"Links")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#types"}},"Types")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ordering"}},"Ordering")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#example-layout"}},"Example layout"))))),o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"styling-guidelines-and-principles"}},"Styling Guidelines and Principles"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"challenges"}},"Challenges"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"current-challenges"}},"Current challenges"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Standardising style configuration:",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"themes"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"colours"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"animation"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"elevation"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"typography"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"grid"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"breakpoints"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"iconography"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"naming conventions"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"style order"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"rules for classing"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"relation to design"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Standardising file system layout:",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"themes"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"flexibility"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"subdirectory structure (images, fonts, utils)"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Code quality",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"documentaiton"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"testing"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"reusability"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"callback ability when updating repos"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"accessibility"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"dependency abuse"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"Resources",o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"references and direction"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"onboarding")))),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"naming-challenges"}},"Naming challenges"),o.a.createElement(r.MDXTag,{name:"p",components:n},"A list of challeneges when thinking of naming conventions:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can styling conventions apply between frameworks?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"What conventions do we need to sacrifice between different frameworks?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How is this consumable for both the dev and designer ecosystem?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"What file structures do we incorporate between partials to make them easily reusable."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can we define class names that work for all the different types of code we write?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can we efficiently document and test our code?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can we maintain consistency in the way we write our styling?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can we enforce accessible, high standards for our HTML?"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},"How can we decouple and standardise things such as grids, animation speeds, iconography etc.?")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"naming-conventions"}},"Naming conventions"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"links"}},"Links"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"http://thesassway.com/advanced/modular-css-naming-conventions"}},"Modular Sass")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"http://rscss.io/"}},"RSCSS")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"http://a11y-style-guide.com/style-guide/"}},"A11y Style Guide"))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"types"}},"Types"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Predetermined types by level:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yml"}},"body:\n  header: # @classname header\n    # @children\n  # Top level for each section\n  section: # @classname section-name\n    # @children\n    container: # @classname container-name\n      # Base selection of rules\n      ? block\n      # @children\n      grid:\n        ? grid-item\n        # @children\n      table:\n        # @children\n        table-header:\n          # @children\n        table-data:\n          # @chidlren\n      list:\n        # react native only\n        list-item:\n          # @children\n      # ... more, maybe article etc\n      nav:\n        nav-item:\n          # @children\n  component: # @classname component-name\n    # Specific component based styling\n    # @children\n    # Base selection of rules\n    ? block\n    # @children\n    grid:\n      ? grid-item\n      # @children\n    table:\n      # @children\n      table-header:\n        # @children\n      table-data:\n        # @chidlren\n    list:\n      # react native only\n      list-item:\n        # @children\n    # ... more, maybe article etc\n    nav:\n      nav-item:\n        # @children\n  footer: # @classname footer - but maybe should be more specific\n    # @children\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"ordering"}},"Ordering"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-scss"}},".selector {\n    /* Mixins + Extends */\n    @extend .selector-to-extend-from;\n    @include mixin;\n\n    /* Positioning */\n    position: absolute;\n    z-index: 10;\n    top: 0;\n    right: 0;\n\n    /* Display & Box Model */\n    display: inline-block;\n    overflow: hidden;\n    box-sizing: border-box;\n    padding: 10px;\n    border: 10px solid #333;\n    margin: 10px;\n\n    /* Sizing */\n    max-width: 100px;\n    width: 100%;\n    height: 100px;\n\n    /* Background */\n    background-color: #000;\n\n    /* Text */\n    font-family: sans-serif;\n    font-size: 16px;\n    line-height: 1.4;\n    text-align: right;\n    color: #fff\n\n    /* Transitions */\n    transition: all $speed ease-out;\n\n    /* Other */\n    cursor: pointer;\n\n    /* Modifiers */\n    &:last-of-type {\n        // Repeat Ordering Rules\n    }\n\n    &:hover,\n    &:focus {\n        // Repeat Ordering Rules\n    }\n\n    /* Media Breaks */\n    @include grid-media($mobile-grid) {\n        // Repeat Ordering Rules\n    }\n\n    /* Second-tier elements */\n    .selector-child {\n        // Repeat Ordering Rules\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"example-layout"}},"Example layout"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"img",components:n,parentName:"p",props:{src:"../assets/example-layout.png",alt:"Example layout",title:"Example Layout"}})),o.a.createElement(r.MDXTag,{name:"p",components:n},"The aim is that regardless of whether or not we are using a template engine, JSX, html or whatever that uses/doesn't use partials or components of some form that we are able to maintain consistency."),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the above image, let's look at how we would implement in a template engine like twig and then in React:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-html"}},'\x3c!-- Section partial ~/partials/page-offers/section-offers.twig (TODO: decide naming strutures?) --\x3e\n<section class="section-offers">\n    <div class="container-content">\n        <div class="block-content"></div>\n        <div class="block-header"></div>\n        <div class="grid-offers">\n            {% for offer in offers %}\n                <div class="grid-offer">\n                    {% include \'partials/component-offer/offer.twig\' with {offer: offer} %}\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n</section>\n\n\x3c!-- Section partial ~/partials/page-offers/component-offer.twig (TODO: decide naming strutures?) --\x3e\n<div class="component-offer">\n    <div class="block-image">\n        <img src="{{ offer.imgSource }}" alt="{{ offer.alt }}" class="offer-image">\n    </div>\n    <div class="block-title">\n        <h3 class="offer-title">{{ offer.title }}</h3>\n    </div>\n</div>\n')),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'// components/SectionOffers/index.js\nimport React, { Component } from \'react\';\nimport Images from \'img/Image\';\nimport Offer from \'components/Offer\';\n\nclass SectionOffers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers = [...]\n        };\n    }\n\n    /**\n     * Render the <Home /> component\n     * @return {Home} Home page component\n     */\n    render() {\n        const { membershipCardId, profile } = this.props;\n\n        console.log(this.state.renderCode);\n        return (\n            <section className="section-offers">\n                <div className="container-content">\n                    <div className="block-content"></div>\n                    <div className="block-header"></div>\n                    <div className="grid-offers">\n                        {offers.map(d, i) => (\n                            <div className="grid-offer">\n                                <Offer offer={d} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default SectionOffers;\n\n// components/Offer/index.js\n// ENSURE THAT ANY COMPONENT WE BUILD FOR\n// IS STATELESS\nimport React, { Component } from \'react\';\nimport { Link } from \'react-router\';\nimport Images from \'img/Image\';\n\nexport default Offer = (props) => (\n    <div className="component-offer">\n        <div className="block-image">\n            <img src={props.imgSource} alt={props.imgAlt} className="offer-image">\n        </div>\n        <div className="block-title">\n            <h3 className="offer-title">{props.offerTitle</h3>\n        </div>\n    </div>\n);\n')),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-scss"}},"// in other base files\n// base/_container.scss\n.container {\n  // keep vars elsewhere\n  max-width: $max-width;\n  // center\n  margin: 0 auto;\n  // set base padding rules\n  // containers should only have padding\n  padding: 80px 20px;\n\n  // set base overrides\n  @include grid-media($mobile) {\n    padding: 10px;\n  }\n}\n\n// base/_block.scss\n.block {\n  // if blocks get basic rules\n}\n\n// base/_grid.scss\n.grid {\n  // our base grid rules\n  // given we are enforcing STANDARD rules\n  // ensure you use the direct child selector\n  > .grid-item {\n    // item rules\n  }\n}\n\n// Component or partial: SectionOffers\n// sections/_section-offers.scss\n// every file should only go three levels deep\n// level one: parent\n// level two: any child of parent (parent should prevent bleed through)\n// level three: modifiers, sibling classes, media breaks\n.section-offers {\n  // should handle:\n  // padding\n  // background color\n  padding: 80px 20px;\n\n  @include grid-media($mobile) {\n    padding: 40px 20px;\n  }\n\n  .container-content {\n    // should handle central gutter\n    @extend .container;\n    // ^ brings in things like margin: 0 auto;\n  }\n\n  .block-content {\n    // blocks should only have margin-bottom\n    margin-bottom: 20px;\n\n    @include grid-media($mobile) {\n    }\n  }\n\n  .block-header {\n  }\n\n  // another pre-determined type\n  .grid-offers {\n    @extend .grid;\n  }\n\n  // note that this is still level two\n  // and doesn't fall in component scss\n  .grid-offer {\n    @extend .grid-item;\n  }\n}\n\n// components or react level styling\n// components/_offers.scss\n.component-offer {\n  // begin rules again\n  position: relative;\n  // ...\n\n  .block-image {\n    // ...\n  }\n\n  .offer-image {\n    // ...\n  }\n\n  .block-title {\n    // ...\n  }\n\n  .offer-title {\n    // ...\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the case of a React Native app, set the styles object to be equivalent but without nesting:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'// Component or partial: SectionOffers\n// sections/_section-offers.scss\n// every file should only go three levels deep\n// level one: parent\n// level two: any child of parent (parent should prevent bleed through)\n// level three: modifiers, sibling classes, media breaks\nconst sectionOffers = {\n    containerContent {\n        @extend .container;\n    }\n\n    blockContent {\n        // blocks should only have margin-bottom\n        margin-bottom: 20px;\n\n        @include grid-media($mobile) {\n        }\n    }\n\n    blockHeader {\n    }\n\n    // another pre-determined type\n    gridOffers {\n        @extend .grid;\n    }\n\n    // note that this is still level two\n    // and doesn\'t fall in component scss\n    gridOffer {\n        @extend .grid-item;\n    }\n}\n\n// Offer component\nconst styles = {\n    // components or react level styling\n    // components/_offers.scss\n    offer: {\n        // begin rules again\n        position: "relative";\n        // ...\n    }\n\n    offerimage: {\n        // ...\n    }\n\n    offerTitle {\n        // ...\n    }\n}\n')))}}])&&i(a.prototype,t),l&&i(a,l),n}();d.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-principles-principles.305817e8304de77c75ce.js.map