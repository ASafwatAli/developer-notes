(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{"./manual/JavaScript/Enzyme-Testing.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("./node_modules/react/index.js"),r=t.n(o),a=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}function i(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function m(e,n){return!n||"object"!==s(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,n){return(l=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=m(this,c(n).call(this,e))).layout=null,t}var t,o,s;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&l(e,n)}(n,r.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.components;p(e,["components"]);return r.a.createElement(a.MDXTag,{name:"wrapper",components:n},r.a.createElement(a.MDXTag,{name:"h1",components:n,props:{id:"testing-with-enzyme"}},"Testing with Enzyme"),r.a.createElement(a.MDXTag,{name:"p",components:n},"React components allow unit tests in JS to be much easier."),r.a.createElement(a.MDXTag,{name:"p",components:n},"These exampes require ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sinonjs"),", ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"jsdom"),", ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"enzyme"),", ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mocha"),", ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chai")),r.a.createElement(a.MDXTag,{name:"p",components:n},"These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"shallow"),"."),r.a.createElement(a.MDXTag,{name:"p",components:n},"Testing lifecycle events, use ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mount"),"."),r.a.createElement(a.MDXTag,{name:"p",components:n},"If you need to test a component that gets rendered or returns just HTML, you can use ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"render"),"."),r.a.createElement(a.MDXTag,{name:"p",components:n},r.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"File structure")),r.a.createElement(a.MDXTag,{name:"ul",components:n},r.a.createElement(a.MDXTag,{name:"li",components:n,parentName:"ul"},"test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js"),r.a.createElement(a.MDXTag,{name:"li",components:n,parentName:"ul"},"scripts\n- mocha_runner.js"),r.a.createElement(a.MDXTag,{name:"li",components:n,parentName:"ul"},"package.json"),r.a.createElement(a.MDXTag,{name:"li",components:n,parentName:"ul"},"src\n- components\n- repositories.js")),r.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"enz-1-testing-with-shallow"}},'ENZ-1: Testing with "Shallow"'),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a `node-intercept` that allows you to tap into Chrome Dev tools\n\n"scripts": {\n    ...\n    "test": "mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js",\n    ...\n}\n...\n')),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n")),r.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"enz-2-testing-with-mount"}},'ENZ-2: Testing with "Mount"'),r.a.createElement(a.MDXTag,{name:"p",components:n},"This requires use of ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"js-dom")),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n")),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n")),r.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"enz-3-testing-with-render"}},'ENZ-3: Testing with "Render"'),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n")))}}])&&i(t.prototype,o),s&&i(t,s),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-java-script-enzyme-testing.305817e8304de77c75ce.js.map