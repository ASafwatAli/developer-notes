(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{"./manual/Python/Python-Intro-To-Data-Science.md":function(n,e,a){"use strict";a.r(e),a.d(e,"default",function(){return h});var t=a("./node_modules/react/index.js"),r=a.n(t),p=a("./node_modules/@mdx-js/tag/dist/index.js");function o(n){return(o="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function s(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},p=Object.keys(n);for(t=0;t<p.length;t++)a=p[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(n);for(t=0;t<p.length;t++)a=p[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}function i(n,e){for(var a=0;a<e.length;a++){var t=e[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function m(n,e){return!e||"object"!==o(e)&&"function"!==typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function l(n){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function c(n,e){return(c=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}var h=function(n){function e(n){var a;return function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(a=m(this,l(e).call(this,n))).layout=null,a}var a,t,o;return function(n,e){if("function"!==typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&c(n,e)}(e,r.a.Component),a=e,(t=[{key:"render",value:function(){var n=this.props,e=n.components;s(n,["components"]);return r.a.createElement(p.MDXTag,{name:"wrapper",components:e},r.a.createElement(p.MDXTag,{name:"h1",components:e,props:{id:"python-intro-to-data-science"}},"Python Intro to Data Science"),r.a.createElement(p.MDXTag,{name:"ul",components:e},r.a.createElement(p.MDXTag,{name:"li",components:e,parentName:"ul"},r.a.createElement(p.MDXTag,{name:"a",components:e,parentName:"li",props:{href:"#python-intro-to-data-science"}},"Python Intro to Data Science"),r.a.createElement(p.MDXTag,{name:"ul",components:e,parentName:"li"},r.a.createElement(p.MDXTag,{name:"li",components:e,parentName:"ul"},r.a.createElement(p.MDXTag,{name:"a",components:e,parentName:"li",props:{href:"#numpy"}},"Numpy"),r.a.createElement(p.MDXTag,{name:"ul",components:e,parentName:"li"},r.a.createElement(p.MDXTag,{name:"li",components:e,parentName:"ul"},r.a.createElement(p.MDXTag,{name:"a",components:e,parentName:"li",props:{href:"#-----2d-numpy-arrays"}},"---- 2D Numpy Arrays")))),r.a.createElement(p.MDXTag,{name:"li",components:e,parentName:"ul"},r.a.createElement(p.MDXTag,{name:"a",components:e,parentName:"li",props:{href:"#basic-statistics"}},"Basic Statistics")))),r.a.createElement(p.MDXTag,{name:"li",components:e,parentName:"ul"},r.a.createElement(p.MDXTag,{name:"a",components:e,parentName:"li",props:{href:"#args-for-the-3-params-goes-dist-mean-dist-sd-number-of-samples"}},"args for the 3 params goes dist mean, dist sd, number of samples"))),r.a.createElement(p.MDXTag,{name:"hr",components:e}),r.a.createElement(p.MDXTag,{name:"h2",components:e,props:{id:"numpy"}},"Numpy"),r.a.createElement(p.MDXTag,{name:"p",components:e},"Once we know about lists, how do we analyse data in R?"),r.a.createElement(p.MDXTag,{name:"p",components:e},"We can instead use a Numpy array - which is both easy and fast!"),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},">>> import numpy as np\n>>> height = [181.5,182.4,183,165.4]\n>>> np_height = np.array(height)\n>>> np_height\narray([ 181.5,  182.4,  183. ,  165.4])\n>>> np_height ** 2\narray([ 32942.25,  33269.76,  33489.  ,  27357.16])\n\n>>> np_height > 170\narray([ True,  True,  True, False], dtype=bool)\n\n>>> np_height[np_height < 170]\narray([ 165.4])\n")),r.a.createElement(p.MDXTag,{name:"p",components:e},"Numpy for lists that have more than one data type however should be noted that it will convert the list to strings."),r.a.createElement(p.MDXTag,{name:"p",components:e},"Numpy arrays are just another Python type that comes with their own methods."),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Import the numpy package as np\nimport numpy as np\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))\n\n<script.py> output:\n    [180 215 210 210 188 176 209 200]\n\n<script.py> output:\n    <class 'numpy.ndarray'>\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# height is available as a regular list\n\n# Import numpy\nimport numpy as np\n\n# Create a Numpy array from height: np_height\nnp_height = np.array(height)\n\n# Print out np_height\nprint(np_height)\n\n# Convert np_height to m: np_height_m\nnp_height_m = np_height * 0.0254\n\n# Print np_height_m\nprint(np_height_m)\n\n<script.py> output:\n    [74 74 72 ..., 75 75 73]\n    [ 1.8796  1.8796  1.8288 ...,  1.905   1.905   1.8542]\n\n# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg\nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m**2\n\n# Print out bmi\nprint(bmi)\n\n<script.py> output:\n    [ 23.11037639  27.60406069  28.48080465 ...,  25.62295933  23.74810865\n      25.72686361]\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height) * 0.0254\nnp_weight_kg = np.array(weight) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])\n\n<script.py> output:\n    [False False False ..., False False False]\n    [ 20.54255679  20.54255679  20.69282047  20.69282047  20.34343189\n      20.34343189  20.69282047  20.15883472  19.4984471   20.69282047\n      20.9205219 ]\n")),r.a.createElement(p.MDXTag,{name:"p",components:e},"Printing out Array Values"),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 50\nprint(weight[50])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[100:111])\n\n<script.py> output:\n    200\n    [73 74 72 73 69 72 73 75 75 73 72]\n")),r.a.createElement(p.MDXTag,{name:"h3",components:e,props:{id:"-----2d-numpy-arrays"}},"---- 2D Numpy Arrays"),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},">>> array_2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n>>> array_2d\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[1][3]\n9\n>>> array_2d[1][:]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1:]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[1:2]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[0:1]\narray([[1, 2, 3, 4, 5]])\n>>> array_2d[0:]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[0:2]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    <class 'numpy.ndarray'>\n    (4, 2)\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    (1015, 2)\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123,0])\n\n<script.py> output:\n    [ 70 195]\n    [ 73 194]\n\n<script.py> output:\n    [ 70 195]\n    75\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# baseball is available as a regular list of lists\n# update is available as 2D Numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and update\nprint(np_baseball + update)\n\n# Create Numpy array: conversion\nconversion = [0.0254, 0.453592, 1]\n\n# Print out product of np_baseball and conversion\nprint(np_baseball*conversion)\n\n<script.py> output:\n    [[  75.2303559   168.83775102   23.99      ]\n     [  75.02614252  231.09732309   35.69      ]\n     [  73.1544228   215.08167641   31.78      ]\n     ...,\n     [  76.09349925  209.23890778   26.19      ]\n     [  75.82285669  172.21799965   32.01      ]\n     [  73.99484223  203.14402711   28.92      ]]\n    [[  1.8796   81.64656  22.99   ]\n     [  1.8796   97.52228  34.69   ]\n     [  1.8288   95.25432  30.78   ]\n     ...,\n     [  1.905    92.98636  25.19   ]\n     [  1.905    86.18248  31.01   ]\n     [  1.8542   88.45044  27.92   ]]\n")),r.a.createElement(p.MDXTag,{name:"hr",components:e}),r.a.createElement(p.MDXTag,{name:"h2",components:e,props:{id:"basic-statistics"}},"Basic Statistics"),r.a.createElement(p.MDXTag,{name:"p",components:e},r.a.createElement(p.MDXTag,{name:"strong",components:e,parentName:"p"},"Generating Data for stubbing")),r.a.createElement(p.MDXTag,{name:"h1",components:e,props:{id:"args-for-the-3-params-goes-dist-mean-dist-sd-number-of-samples"}},"args for the 3 params goes dist mean, dist sd, number of samples"),r.a.createElement(p.MDXTag,{name:"p",components:e},"height = np.round(np.random.normal(1.75, 0.20, 5000), 2)\nweight = np.round(np.random.normal(60.32, 15, 5000), 2)\nnp_city = np.column_stack((height, weight))"),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height from np_baseball\nnp_height = np_baseball[:,0]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))\n\n<script.py> output:\n    1586.46108374\n    74.0\n")),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},'# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint("Average: " + str(avg))\n\n# Print median height. Replace \'None\'\nmed = np.median(np_baseball[:,0])\nprint("Median: " + str(med))\n\n# Print out the standard deviation on height. Replace \'None\'\nstddev = np.std(np_baseball[:,0])\nprint("Standard Deviation: " + str(stddev))\n\n# Print out correlation between first and second column. Replace \'None\'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint("Correlation: " + str(corr))\n\n<script.py> output:\n    Average: 73.6896551724\n    Median: 74.0\n    Standard Deviation: 2.31279188105\n    Correlation: [[ 1.          0.53153932]\n     [ 0.53153932  1.        ]]\n')),r.a.createElement(p.MDXTag,{name:"pre",components:e},r.a.createElement(p.MDXTag,{name:"code",components:e,parentName:"pre",props:{}},"# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\n\nnp_heights = np.array(heights)\nnp_positions = np.array(positions)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))\n\n# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))\n\n<script.py> output:\n    Median height of goalkeepers: 188.0\n    Median height of other players: 181.0\n")))}}])&&i(a.prototype,t),o&&i(a,o),e}();h.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-python-python-intro-to-data-science.305817e8304de77c75ce.js.map