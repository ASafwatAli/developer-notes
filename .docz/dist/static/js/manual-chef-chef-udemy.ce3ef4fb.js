(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{"./manual/Chef/Chef-Udemy.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return g});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function p(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function s(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,n){return(i=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var g=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=s(this,l(n).call(this,e))).layout=null,a}var a,t,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&i(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;c(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"chef---udemy-course"}},"Chef - Udemy Course"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#chef---udemy-course"}},"Chef - Udemy Course"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#configuration-management"}},"Configuration Management")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#infrastructure-as-code"}},"Infrastructure as Code")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#your-first-chef-recipe"}},"Your First Chef Recipe")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#chef-resources"}},"Chef Resources")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#exploring-system-resources"}},"Exploring system resources")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#convergence-and-desired-state"}},"Convergence and Desired State")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#creating-an-exercise-work-station"}},'Creating an "Exercise Work Station"')),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#organising-resources-with-ruby"}},"Organising Resources with Ruby")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#cookbooks"}},"Cookbooks"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#how-do-you-keep-track-of-changes-to-the-recipes"}},"How do you keep track of changes to the recipes?")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#cookbook-components"}},"Cookbook Components")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#tracking-changes-to-the-cookbooks"}},"Tracking changes to the Cookbooks")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#setting-up-an-apache-cookbook"}},"Setting up an Apache Cookbook")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#chef-client"}},"Chef Client"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#include_recipe"}},"include_recipe")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#defaultrb-example"}},"default.rb example")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#ohai"}},"Ohai"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#an-object-called-node"}},"An object called 'node'"))))))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"configuration-management"}},"Configuration Management"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Maintaining consistency for server integrity."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The process of configuration can be automated by some extent. When you reach scale, this automation is at the heart of configuration management (IT orchetration)."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Imagine we are deploying a web server. If we have a config management solution, this could take minutes instead of hours."),o.a.createElement(r.MDXTag,{name:"p",components:n},"System auditing will also be a hassle for disaster recovery too."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Revision control systems can also be version controlled with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"infrastructure as code")," by having these environments scripted."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"infrastructure-as-code"}},"Infrastructure as Code"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Examples:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"version control"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"testing")),o.a.createElement(r.MDXTag,{name:"p",components:n},"These all helps to validate infrastructure code."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can manage multiple cloud platforms etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The three things covered:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"chef development kit"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"chef client"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"chef server")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The Chef DK allows you to run local tools to write code and then upload it to a chef server. A node will be a server or machine managed by Chef."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You will get the desired state from the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cookbooks")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"recipes"),"."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"your-first-chef-recipe"}},"Your First Chef Recipe"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Create a new file ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"hello.rb")," and add ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"hello.txt")," with Hello World."),o.a.createElement(r.MDXTag,{name:"p",components:n},"First, give Chef a file."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Inside of the file:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"file '/hello.txt' do\n    content 'Hello world!'\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Running ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sudo chef-client --client-mode hello.rb")," will then build that file and update the content."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"chef-resources"}},"Chef Resources"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Chef Resources are the fundamental building blocks of working with Chef."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The aim is to build the load balancer."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Resources describe the smallest piece we can configure in the system."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"exploring-system-resources"}},"Exploring system resources"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Example 1: Package Resource")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"## Install the http package\npackage 'httd' do\n    action :install\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Example 2: Service Resource")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"## Run the ntp service\nservice 'ntp' do\n    action [ :enable, :start ]\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Example 3: File Resource")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"## Create the /etc/motd file\nfile 'etc/motd' do\n    content 'This computer is the property ...'\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Example 4: File Resource")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"## Remove a file\nfile 'etc/php.ini.default' do\n    action :delete\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Looking back at the definition of a recipe. ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"hello.rb")," was an example of a recipe file."),o.a.createElement(r.MDXTag,{name:"p",components:n},'The "type" (eg file, service, package) and "name" (filename, filepath) should be action\'d with "properties" (eg content \'Hello World!\'). When we list a resource, we take ',o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"action")," on that resource (eg ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"action :create"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"action :delete"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"action :enable"),"). The default action is taken if you do not list the action. The default is more of a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"create")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"install")," - it is important to know about what it is as you are writing out recipes."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"convergence-and-desired-state"}},"Convergence and Desired State"),o.a.createElement(r.MDXTag,{name:"p",components:n},"With the command ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sudo chef-client --local-mode hello.rb"),", when we run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"--local-mode")," we did it because the default mode is to talk to a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef server"),". Once we have a Chef server to work with, we can not use this mode."),o.a.createElement(r.MDXTag,{name:"p",components:n},"What happens if you modify the content of the file that we create directly, what happens when Chef runs again?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Chef will then attempt to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"repair")," the file changes."),o.a.createElement(r.MDXTag,{name:"p",components:n},'If we change the ownership for a file, Chef will only take action when it needs to. It will only take action if something is "out of policy".'),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"creating-an-exercise-work-station"}},'Creating an "Exercise Work Station"'),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"# creating tree and ntp\npackage 'tree' do\n    action :install\nend\n\npackage 'ntp'\n\n# /etc/motd - content ownership\nfile '/etc/motd' do\n    content 'This is the property of me'\n    action :create\n    owner 'root'\n    group 'root'\nend\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also build an array and pass it into a package resource, but if we do that we won't have access to things like versions etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Then we can just run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sudo chef-client -z setup.rb"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we re-run the script, no actions will be taken if nothing needs to be modified."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"organising-resources-with-ruby"}},"Organising Resources with Ruby"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also call recipes from other recipes."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Chef also runs the Ruby files synchronously."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"cookbooks"}},"Cookbooks"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Ways to group recipes and put them into useful configurations."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Instead of a single recipe being sent to a server, we send a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cookbook"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"how-do-you-keep-track-of-changes-to-the-recipes"}},"How do you keep track of changes to the recipes?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Cookbooks allow a way to package up the recipes and give it a version number and track changes."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"A fundamental unit of configuration and policy distribution")),o.a.createElement(r.MDXTag,{name:"p",components:n},"When creating the cookbook, is describes a config for a particular scenario."),o.a.createElement(r.MDXTag,{name:"p",components:n},"What to use cookbooks for:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Specifiy resources to use and in which order they are applied"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Attribute values"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"File distributions"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Templates"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Extensions to Chef (lib, definitions and custom resources)"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Version Control")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Cookbook components:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"README"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"metadata"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"recipes"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"testing directories (spec + test)")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"cookbook-components"}},"Cookbook Components"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can create cookbooks by using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef generate [cookbook|other]"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"When we generate a cookbook, we should give the cookbook a relevant name. Example ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef generate cookbooks/workstation")," to create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"workstation")," book in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"cookbooks")," folder."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"tracking-changes-to-the-cookbooks"}},"Tracking changes to the Cookbooks"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Inside of a single repository, changes are generally tracked for a single cook book."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"setting-up-an-apache-cookbook"}},"Setting up an Apache Cookbook"),o.a.createElement(r.MDXTag,{name:"p",components:n},"First, create a new cookbook in the cookbooks foler using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef generate cookbook cookbooks/apache")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"# Server\n\n# 1. http package install (redhat)\npackage 'httpd' do\n    action :install\nend\n\n# 2. configure default apache server file /var/www/html\nfile '/var/www/html/index.html' do\n    content '<h1>Hello from Apache</h1>'\nend\n\n# 3. download apache, enable and start the apache service\npackage 'apache' do\n    action :install\nend\n\nservice 'httpd' do\n    action [ :enable, :start ]\nend\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"chef-client"}},"Chef Client"),o.a.createElement(r.MDXTag,{name:"p",components:n},"How do we apply the recipes from the cookbooks from the Chef client? How do we call multiple recipes at once?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use a cook book to define the scenarios here."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Say we want to call a cookbook from a particular recipe."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also do ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'sudo chef-client -z --runlist "recipe[cookbook::recipe]"')," to run a particular recipe."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For running multiple cookbook recipes, we could do ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'sudo chef-client -z --runlist "recipe[cookbook::recipe],recipe[another-cookbook::recipe]"'),". This will do a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef-client")," run in order."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The runlist DOES NOT HAVE A SPACE between recipe declarations."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"include_recipe"}},"include_recipe"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"include_recipe")," method allows you to include a recipe from either the online cookbook stores or from one of our own cookbooks."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This is a great way to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"wrap")," cookbooks."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Each of the cookbooks that we generate come with a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"default.rb")," recipe. This default recipe can help us call other recipes."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"# in the default.rb file for a recipe\n\n# example 'cookbook::recipe'\ninclude_recipe 'workstation::setup'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If we now run ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'sudo chef-client -z -r "recipe[workstation]"')," and omit the specific recipe, then the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"default.rb")," recipe will be used."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"defaultrb-example"}},"default.rb example"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Including the server recipe from the apache cookbook."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ruby"}},"include_recipe 'apache::server'\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},'Now we can call sudo chef-client -z -r "recipe',"[apache]",'"`.'),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"ohai"}},"Ohai"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We need to think about distribution of the cookbooks to many different nodes."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We may need to know a bit of information about that ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"node"),". That's where ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ohai")," comes in."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"an-object-called-node"}},"An object called 'node'"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can now begin to start thinking of scale - how to deal with 100s or 1000s or similar servers."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This webserver code that we have could be distributed to thousands of nodes, but the config might need to be different on each of these nodes."),o.a.createElement(r.MDXTag,{name:"p",components:n},"What happens if a host specific config needs to be different? Eg. hostname, memory available, IP address etc. These things may very from system to system."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Ohai")," is a system discovery tool. It's a command line tool that is required by ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef-client"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ohai")," gives back all the node system data in JSON. Everytime ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"chef-client")," is run, it automatically executes an ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ohai")," and allows this object (known as the node object) to be accessed. We call these attributes available as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"node attributes"),". Each ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"attribute")," also has ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sub-attributes"),"."))}}])&&p(a.prototype,t),m&&p(a,m),n}();g.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-chef-chef-udemy.305817e8304de77c75ce.js.map