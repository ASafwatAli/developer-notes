{"version":3,"sources":["webpack:///./manual/Sketch/Principles.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName"],"mappings":"06CAKqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,yPADmBO,IAAMC,kDAKnC,IAAAC,EAC0BP,KAAKH,MAA9BW,EADDD,EACCC,WADDC,EAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,eAAvD,cACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,uBAAvD,sBACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sDACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,uBAAvD,sBACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,6DAAuGE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,wBAAvG,sGAAgTN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,KAAhT,iDACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,qBAA+DE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,KAA/D,8DACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2EACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,yBAAvD,wBACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sKACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B","file":"static/js/manual-sketch-principles.0b1ffeb6.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"principles\"}}>{`Principles`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"organising-symbols\"}}>{`Organising symbols`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use the symbol organiser to auto-organise symbols.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"naming-conventions\"}}>{`Naming conventions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When it comes to naming principles, use the convention of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Button/Primary/Light`}</MDXTag>{` with aims that the first word can be parsed by sketch up for type and the following elements of a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/`}</MDXTag>{` split array can be use to denote classnames.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Anything split by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/`}</MDXTag>{` itself becomes a classname when converted using sketchup.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When naming pages and components, just use camel casing with no splits.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-new-symbols\"}}>{`Creating new symbols`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For the sake of creating base components, just use the basic colours and treat it like a wireframe. These components can then take on the naming convention above.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When designing a new set of components, then detach the symbol in the page workflow. From here, you make create it as a new symbol as required.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}