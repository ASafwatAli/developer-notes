{"version":3,"sources":["webpack:///./manual/GraphQL/GraphQL.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href","className","align"],"mappings":"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","file":"static/js/manual-graph-ql-graph-ql.15b639dc.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"graphql---udemy\"}}>{`GraphQL - Udemy`}</MDXTag>\n{/* TOC */}\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#graphql---udemy\"}}>{`GraphQL - Udemy`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#restful-router-primer\"}}>{`RESTful Router Primer`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#the-shortcomings-of-restful-routing\"}}>{`The shortcomings of RESTful routing`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#complex-example\"}}>{`Complex example`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#starting-with-graphql\"}}>{`Starting with GraphQL`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#working-with-graphql\"}}>{`Working with GraphQL`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#registering-graphql-with-express\"}}>{`Registering GraphQL with Express`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#graphql-schemas\"}}>{`GraphQL Schemas`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#the-graphiql-tool\"}}>{`The Graphiql tool`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#a-realistic-data-source\"}}>{`A realistic data source`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#async-resolve-functions\"}}>{`Async Resolve functions`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#how-do-we-hook-up-relating-a-company-to-a-user\"}}>{`How do we hook up relating a company to a user?`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#updating-the-schema\"}}>{`Updating the Schema`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#multiple-root-query-points\"}}>{`Multiple Root Query Points`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#bidirectional-relations\"}}>{`Bidirectional Relations`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#query-fragments\"}}>{`Query Fragments`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#mutations\"}}>{`Mutations`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#non-null-fields-and-mutations\"}}>{`Non-null fields and Mutations`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#deleting-mutations\"}}>{`Deleting mutations`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#editing-mutations\"}}>{`Editing mutations`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#graphql-clients---apollo-vs-relay\"}}>{`GraphQL Clients - Apollo vs Relay`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#apollo-server-vs-graphql-server\"}}>{`Apollo Server vs GraphQL Server`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#setting-up-mongolab\"}}>{`Setting up MongoLab`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#running-the-project\"}}>{`Running the project`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#setting-up-apollo-client\"}}>{`Setting up Apollo Client`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#gql-queries-in-react\"}}>{`GQL Queries in React`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#bonding-queries-with-components\"}}>{`Bonding queries with components`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#handling-pending-queries\"}}>{`Handling Pending Queries`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-react-router\"}}>{`Adding React Router`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#mutations-in-react\"}}>{`Mutations in React`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#query-params\"}}>{`Query Params`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#passing-variables-in-react\"}}>{`Passing variables in React`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#refetching-lists\"}}>{`Refetching Lists`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#deletion-mutations\"}}>{`Deletion mutations`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#fetching-a-particular-item\"}}>{`Fetching a particular item`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#adding-fetchsong-to-the-component\"}}>{`Adding fetchSong to the component`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#watching-for-data\"}}>{`Watching for Data`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#more-action-submitting\"}}>{`More action submitting`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#submitting-the-lyrics\"}}>{`Submitting the lyrics`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#extending-queries\"}}>{`Extending Queries`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#caching-with-dataidfromobject\"}}>{`Caching with dataIdFromObject`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#more-on-mutations\"}}>{`More on Mutations`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#optimistic-mutations\"}}>{`Optimistic mutations`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#authentication-applications---concerned-with-both-the-front-and-back-end\"}}>{`Authentication Applications - concerned with both the front and back end`}</MDXTag>{`\n- `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#delegating-to-an-authentication-service\"}}>{`Delegating to an Authentication Service`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#handling-errors-gracefully\"}}>{`Handling Errors Gracefully`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"#handling-errors-around-signup\"}}>{`Handling Errors Around Signup`}</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n{/* /TOC */}\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"restful-router-primer\"}}>{`RESTful Router Primer`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Given a collection of records on a server, there should be a uniform URL and HTTP request method used to utilize that collection of records.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Having the ability to use CRUD requests to interact with data on the server.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are more than just POST, GET, PUT and DELETE methods, but they are the most common.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So far, we have just looked at how to manipulate single records.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Handling users may look like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/users`}</MDXTag>{`, handling posts from that user may be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/users/23/posts`}</MDXTag>{` - get may then start deepening even further.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-shortcomings-of-restful-routing\"}}>{`The shortcomings of RESTful routing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are no hardcoded set of rules, just a set of conventions.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"complex-example\"}}>{`Complex example`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Think of a Facebook grid where the users are lined up with things like a user image, name, company name and position name. How might we store this data in the table?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Maybe create a User model? But also maybe no the ideal way to do it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It would not be obvious to get all the company names back.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Maybe as an alternative schema, we would start build out a relational schema.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Given that, how do we now build out a URL RESTful route in order to get all of this data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So far for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Current User > Friend > Company || Position`}</MDXTag>{`, we might be able to start with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/users/23/friends`}</MDXTag>{` - but then how do we get the company or the position for the deeper nested URL?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Maybe we could do `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`users/1/companies`}</MDXTag>{` which could get back the ID for the company, a similiar thing for the position etc. Alternatively, maybe `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/users/23/friends/[companies|positions]`}</MDXTag>{`. The problem with these endpoints is that they are all very particular.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How about if we broke all conventions and went with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/users/23/friends_with_companies_and_positions`}</MDXTag>{`? We are definitely breaking conventions here.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we even do make the particular request, we might get a bunch of data from the tables that we don't even care about. This could be dramatically overserving or we may need to continually add or edit the RESTful end points.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"starting-with-graphql\"}}>{`Starting with GraphQL`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we've seen the shortfalls of RESTful routing, let's see how GraphQL can help us out.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's now imagine we know all the data in this theoretical database. When we think about the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graph`}</MDXTag>{` that all the relations between all this data makes and the relations between them (nodes and edges), understanding how the data fits into the structure is key to understanding how GraphQL works. NOTE we can still use any database we want - use this as an understanding.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now, if we take this graph and assign an ID to each of our users and organised the data, we can query it using GraphQL.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// start with user 23 - find all their friends\n// and all the companies that those friends work at\n\n1. Tell GraphQL find user 23\n2. Find all friends of user 23\n3. Tell GraphQL to find the company associated\n\n// the query that could do this\n// crawl along the query\nquery {\n    user(id: \"23\") {\n        friends {\n            company {\n                name\n            }\n        }\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"working-with-graphql\"}}>{`Working with GraphQL`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How can we get this to come together?`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Make an Express server and hook it up to a datastore`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Hook it up to a prebuilt app called GraphiQL to make a couple of test queries`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For installation on the test `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`users`}</MDXTag>{` project, let's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`yarn add express express-graphql graphql lodash`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"registering-graphql-with-express\"}}>{`Registering GraphQL with Express`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once you have set up a basic Express server, we can look at how to make GraphQL work with Express.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Process of the app`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`1. Web page makes a request to the Server\n2. Server decides whether it asks for Graphql\n    - if yes, GraphQL before 3\n    - if no, go to 3\n3. Respond\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`GraphQL is just one little part of the Express app.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// hooking up GraphQL\nconst express = require('express');\nconst expressGraphQL = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', expressGraphQL({\n    graphiql: true\n}));\n\napp.listen(4000, () => {\n    console.log('listening on 4000');\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"graphql-schemas\"}}>{`GraphQL Schemas`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using this middleware (using the \"use\" Express instance method), we passed in an options object. We need to also pass a schema along with these options.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can do all this inside of a schema js file.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we decide the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` schema as such that is has an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id, firstName company_id, position_id and users [id]`}</MDXTag>{`, we can the picture our relational shema.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Writing the schema`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Not the easiest the write, but as we continual to work with GraphQL, it'll start to become more and more of the same.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// schema.js\n\nconst graphql = require('graphql');\n\nconst {\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLInt\n} = graphql;\n\nconst UserType = new GraphQLObjectType({\n    name: 'User',\n    fields: {\n        id: { type: GraphQLString },\n        firstName: { type: GraphQLString },\n        age: { type: GraphQLInt }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Root Query`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We need to pass something into the root query eg. \"Hey, give me the user with id 23\". We can think of it like an \"entry point\" into our data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can tell the 'root query' what we can ask about.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Below with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`resolve()`}</MDXTag>{` function, the parentValue is not used often, and the args are the args that we provide.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in GraphQL\nconst RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Querying for data`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Instead of using a database, we're just going to hard code some users for now.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// top of the schema.js file\n\nconst users = [\n    { id: '23', firstName: 'Bill', age: 20 },\n    { id: '47', firstName: 'Sam', age: 21 }\n];\n\n// in the query\nconst RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                // use lodash to find\n                return _.find(users, { id: args.id });\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`To pass this schema back to express, we destructure import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLSchema`}</MDXTag>{` and at the bottom of the file we pass the root query.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`new GraphQLSchema({\n    query: RootQuery\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-graphiql-tool\"}}>{`The Graphiql tool`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This tool has been given to us by the GraphQL team. On the left hand side, we can write a query and run it to see what happens.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`docs`}</MDXTag>{` auto generates docs for us to see the type of queries we can make.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// making the query\n// note: this is not JS\n{\n  user(id: \"23\") {\n    id,\n    firstName,\n    age\n  }\n}\n\n// what is returns\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"23\",\n      \"firstName\": \"Bill\",\n      \"age\": 20\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`So with the query, it heads to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`RootQueryType`}</MDXTag>{` and enter into the graph of data. Since we declared `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` on the query, it checks the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` field in the RootQuery below.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the args, we say that it expects an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of type string of what we did, so what it then does with the lodash find method we added is that it looks within users for the id that matches the argument ID.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Lodash returns a raw JSON object directly since the return handles objects for us.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                // use lodash to find\n                return _.find(users, { id: args.id });\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the query, we can also now reduce and only call for the data that we want.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we do not find an valid `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`, we will get null back. If there is no arg to the query, we get an error where it expects the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`name of an argument`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"a-realistic-data-source\"}}>{`A realistic data source`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So we don't really want to use a static list of users - because that's not realistic. So let's use some different architectures that we can use to use GraphQL with.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We could the server which hosts GraphQL and then any database.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If it's any small sized project, we could use Express etc. With larger companies, you won't use a single monolithic store, but the same Express/GraphQL Server will touch bases with a variety of databases and can act as a proxy of sorts to go and collect this data from those different datasources.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What we can do is have an outside server to give us some data in our current approach.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That way, we will need to spin up a second server. We can use JSON server to act as another source of data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For the outside API, we can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`json-server`}</MDXTag>{`. Spin up a server create a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`db.json`}</MDXTag>{` file in order to do so.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"async-resolve-functions\"}}>{`Async Resolve functions`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios.get(\\`http://localhost:3000/users/\\${args.id}\\`)\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"how-do-we-hook-up-relating-a-company-to-a-user\"}}>{`How do we hook up relating a company to a user?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Given a schema of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id, name and description`}</MDXTag>{`, how can we relate a user and their company?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First with db.json, update the file to have companies.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we have...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-json\"}}>{`{\n    \"users\": [\n        { \"id\": \"23\", \"firstName\": \"Bill\", \"age\": 20, \"companyId\": \"1\" },\n        { \"id\": \"47\", \"firstName\": \"Sam\", \"age\": 21, \"companyId\": \"2\" },\n        { \"id\": \"41\", \"firstName\": \"Milly\", \"age\": 41, \"companyId\": \"2\" }\n    ],\n    \"companies\": [\n        { \"id\": \"1\", \"name\": \"Apple\", \"description\": \"iPhone\" },\n        { \"id\": \"2\", \"name\": \"Google\", \"description\": \"Search\" }\n    ]\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can now see the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/companies`}</MDXTag>{` url can give us a company. To get JSON server to show us who works where, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`json-server`}</MDXTag>{` works the relationship out at `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`companies/1/users`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"updating-the-schema\"}}>{`Updating the Schema`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now in the schema we can update to have the following.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const CompanyType = new GraphQLObjectType({\n    name: 'Company',\n    fields: {\n        id: { type: GraphQLString },\n        name: { type: GraphQLString },\n        description: { type: GraphQLString }\n    }\n});\n\nconst UserType = new GraphQLObjectType({\n    name: 'User',\n    fields: {\n        id: { type: GraphQLString },\n        firstName: { type: GraphQLString },\n        age: { type: GraphQLInt },\n        // note: this is from the previously declared type\n        company: { type: CompanyType }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Why can we get away with saying a related `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`company`}</MDXTag>{` and not `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`companyId`}</MDXTag>{`. Where the difference is, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`resolve`}</MDXTag>{` function will help with the resolution.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"multiple-root-query-points\"}}>{`Multiple Root Query Points`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Currently, we cannot just find a company by itself. Only the user using the id.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can adjust this with adding to the Root Query.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const RootQuery = new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n        user: {\n            type: UserType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios\n                    .get(\\`http://localhost:3000/users/\\${args.id}\\`)\n                    .then((res) => res.data);\n            }\n        },\n        company: {\n            type: CompanyType,\n            args: { id: { type: GraphQLString } },\n            resolve(parentValue, args) {\n                return axios\n                    .get(\\`http://localhost:3000/companies/\\${args.id}\\`)\n                    .then((res) => res.data);\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"bidirectional-relations\"}}>{`Bidirectional Relations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Given the one-to-many relationship we can find between companies and users, how can find the users that work for a company?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can use a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLList`}</MDXTag>{` to return a list of different entities.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The circular reference order of operations issue requires a little work around. We can use a lexical arrow function to give lexical scope. Using this, it will ensure the entire file is executed beforehand.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The issue itself is more of closures and closure scopes.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const CompanyType = new GraphQLObjectType({\n    name: 'Company',\n    fields: () => ({\n        id: { type: GraphQLString },\n        name: { type: GraphQLString },\n        description: { type: GraphQLString },\n        users: {\n            // UserType may not yet be defined error may occur\n            // because of a circular reference\n            type: new GraphQLList(UserType),\n            resolve(parentValue, args) {\n                return axios\n                    .get(\n                        \\`http://localhost:3000/companies/\\${\n                            parentValue.id\n                        }/users\\`\n                    )\n                    .then((res) => res.data);\n            }\n        }\n    })\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we have circular relations, we can build back nested circular relations as we go.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"query-fragments\"}}>{`Query Fragments`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How does the syntax work and how can we expand upon it?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You could also add the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`query`}</MDXTag>{` to a query to acknowledge`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`query findCompany {\n    company(id: \"2\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the Root Query, each field is like an optional query to make.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can also ask for as many companies as we like, however we need to name the response so there are no JSON duplicate keys on the return:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  apple: company(id: \"1\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  },\n  google: company(id: \"2\") {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Query Fragments`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the above, we list out the name, users etc twice.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A query fragment is a list of different properties we want to get back. These are seen a lot on the front end.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n    google: company(id: \"2\") {\n    ...companyDetails\n  },\n  apple: company(id: \"1\") {\n    ...companyDetails\n  }\n}\n\nfragment companyDetails on Company {\n    name\n    users {\n      id,\n      firstName\n        company {\n          name\n        }\n\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mutations\"}}>{`Mutations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we've set up the ability to read data, we haven't spent anything on modifying the datastore.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`They're notorious for being a bit more challenging to work with.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`json-server`}</MDXTag>{` has support for updating records.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order for updating, we create completely separate objects that we can manipulate in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema.js`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {}\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"non-null-fields-and-mutations\"}}>{`Non-null fields and Mutations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Given our application at the moment, it probably makes sense that all of these users we add with this mutation have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`firstName`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`age`}</MDXTag>{`. We can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLNonNull`}</MDXTag>{` as a wrapper object to ensure the value is non-null.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Make sure you import it.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As for using the mutation:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in graphiql\nmutation {\n    addUser(firstName: \"Stan\", age: \"26\") {\n        // we must ask for some property coming back\n        id,\n        firstName,\n        age\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"deleting-mutations\"}}>{`Deleting mutations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will be different since you should take a shot.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        },\n        deleteUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            resolve(parentValue, { id }) {\n                return axios.delete(\\`http://localhost:3000/users/\\${id}\\`, { id })\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"editing-mutations\"}}>{`Editing mutations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Reminder: difference between a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`put`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`patch`}</MDXTag>{` request.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`put`}</MDXTag>{` request is used when we want to `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`completely`}</MDXTag>{` replace a record, whereas a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`patch`}</MDXTag>{` request does not replace it completely, but forms the updates.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const mutation = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n        addUser: {\n            // not always returning the same type\n            // that we work on\n            type: UserType,\n            args: {\n                firstName: { type: new GraphQLNonNull(GraphQLString) },\n                age: { type: new GraphQLNonNull(GraphQLInt) },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, { firstName, age }) {\n                return axios.post(\\`http://localhost:3000/users\\`, {\n                    firstName,\n                    age\n                }).then(res => res.data);\n            }\n        },\n        deleteUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            resolve(parentValue, { id }) {\n                return axios.delete(\\`http://localhost:3000/users/\\${id}\\`, { id })\n                    .then(res => res.data);\n            }\n        },\n        editUser: {\n            type: UserType,\n            args: {\n                id: { type: new GraphQLNonNull(GraphQLString) } ,\n                firstName: { type: GraphQLString },\n                age: { type: GraphQLInt },\n                companyId: { type: GraphQLString }\n            },\n            resolve(parentValue, args) {\n                return axios.patch(\\`http://localhost:3000/users/\\${args.id}\\`, args)\n                    .then(res => res.data);\n            }\n        }\n    }\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As for the mutation itself for editing:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`mutation {\n    editUser(id: \"23\", age: 10) {\n        id,\n        firstName,\n        age\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"graphql-clients---apollo-vs-relay\"}}>{`GraphQL Clients - Apollo vs Relay`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So far we've limited everything to a client, but we haven't been able to put this data to the end user.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's take what we know and integrate it with a frontend framework.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In Graphiql, we can actually watch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`xhr`}</MDXTag>{` requests in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Network`}</MDXTag>{` tab and can see everything that we get back etc. That way the data we get back it just the plain, raw data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we go down to request payload on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Headers`}</MDXTag>{` tab, we can see the payload that we make. We can notice that even the query itself is the same as what we write in Graphiql.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The idea of having a front end app with a client is to do basically the same exact thing as we are currently seeing in the Graphiql client. The client itself should be that bonding layer.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With clients, there are basically three main ones we will discuss. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Lokka`}</MDXTag>{` being the simplest, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Apollo`}</MDXTag>{` built by the guys at Meteor JS - good balance between features and complexity. The downside of this is that they have huge experience with GraphQL clients. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Relay`}</MDXTag>{` is by far the most complex. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Relay`}</MDXTag>{` is officially used by the Facebook team. Things like mutations etc are 10x more difficult for mutations than what we've previously discussed. It makes sense for larger teams, although maybe not so much for smaller teams.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As of the current writing, it is at version one - they are in progress with version two.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this course, the focus will be on `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Apollo`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"apollo-server-vs-graphql-server\"}}>{`Apollo Server vs GraphQL Server`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We are using GraphQL tech on both the frontend and the backend. There is an Apollo server you can make use of, but instead we will used `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`express-graphql`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When is comes to the Apollo server \"schema\" set up, they split what we do in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQL Express`}</MDXTag>{` into a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Types`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Resolves`}</MDXTag>{` file (for the server side).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The FOLLOWING section is about how to set up GraphQL on the client side before getting them to communicate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This app will use the Mongo Lab custom URL.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"setting-up-mongolab\"}}>{`Setting up MongoLab`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Head onto MongoLab and then create a new free sandbox, then go find the address URI that we need from the info.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ensure that you also add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`User`}</MDXTag>{` for the database.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"running-the-project\"}}>{`Running the project`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Start by adding a song using a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutation`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`mutation {\n    addSong(title:\"I want to know what love is\") {\n    id\n  }\n}\n\n// once we have the songId, add a lyric in\nmutation {\n    addLyricToSong(content:\"I want to know what loves is, I want you to show me!\", songId:\"5933a3ebcac9e6b57aad7f76\") {\n    id\n    title\n    lyrics {\n      id\n    }\n  }\n}\n\n// now we can query something!\nquery {\n    songs {\n    id,\n    title,\n    lyrics {\n      content\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"setting-up-apollo-client\"}}>{`Setting up Apollo Client`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the front end, how do we wrap our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`React`}</MDXTag>{` application with helpers from the Apollo library?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The React app will have an Apollo Provider that talks back and forth with the Apollo Store. That in turn will talk to the GraphQL Server. The store will also `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` the data that comes back from the GraphQL Server.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The Apollo Store also doesn't care about the fact that we are using React. The Apollo Provider is what helps provide the data to the React application. Think of it as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`glue`}</MDXTag>{` layer.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For future projects, you will need to install `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`apollo-client`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-apollo`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graphql-tag`}</MDXTag>{` and maybe `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect-mongo`}</MDXTag>{` if you are using a third party store. The following imports are required for the app.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the code below, we have even passed an empty object to the ApolloClient - it can make assumptions. The store assumes that you are using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/graphql`}</MDXTag>{` route if you are passing in the object. If you deviate, you will need to start updating the config of this object.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`import ApolloClient from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <div>Lyrical</div>\n        </ApolloProvider>\n    );\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In opposition, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Relay`}</MDXTag>{` requires a bunch of configuration to start up and have a working provider.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can create a basic `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SongList`}</MDXTag>{` component.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"gql-queries-in-react\"}}>{`GQL Queries in React`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So the benefit of GraphQL again, you don't have to \"overfetch\".`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GraphQL + Apollo take care of everything for us - we just need to bond the query and the component!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we have the query that we want, we can add the query into the component. That being said, queries are not valid JS. So what we will do is use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graphql-tag`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`gql`}</MDXTag>{` is a helper to help us write files.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Making a query will look like so...`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const query = gql\\`\n    {\n        songs {\n            title\n        }\n    }\n\\`;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"bonding-queries-with-components\"}}>{`Bonding queries with components`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the component, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`import { graphql } from 'react-apollo';`}</MDXTag>{`. After wrapping the export, we should have a component that may look like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\n\nclass SongList extends Component {\n    render() {\n        return (\n            <div>\n                SongList\n            </div>\n        );\n    }\n}\n\nconst query = gql\\`\n    {\n        songs {\n            title\n        }\n    }\n\\`;\n\n// first parenthesis returns a function\n// that is immediately invocated again\nexport default graphql(query)(SongList);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now when the component is rendered, it will show up with no data until the query completes and then the data is resolved.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The data return is then kept within the component `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`props`}</MDXTag>{` field.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"handling-pending-queries\"}}>{`Handling Pending Queries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The props handed in is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-apollo`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graphql`}</MDXTag>{` and we can access the return values from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.props.data.[name]`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We need to set some initial props value before we gets our GraphQL results back.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"adding-react-router\"}}>{`Adding React Router`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note: ApolloProvider wraps the Router itself.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, hashHistory, IndexRoute } from 'react-router';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport SongList from './components/SongList';\nimport App from './components/App';\n\nconst client = new ApolloClient({});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router history={hashHistory}>\n                <Route path=\"/\" component={App}>\n                    <IndexRoute component={SongList} />\n                </Route>\n            </Router>\n        </ApolloProvider>\n    );\n};\n\nReactDOM.render(\n  <Root />,\n  document.querySelector('#root')\n);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mutations-in-react\"}}>{`Mutations in React`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When adding a track using a component, we want to use a form a submit action to post that data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That being said, how can we create the mutation on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onSubmit`}</MDXTag>{` event?`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"query-params\"}}>{`Query Params`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order to complete our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`gql`}</MDXTag>{` mutation constant, we can make use of query variables.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A mutation that takes params can be like so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`mutation AddSong(\\$title: String) {\n    addSong(title: \\$title) {\n        id\n        title\n    }\n}\n\n// in Graphql under query varibles, we can pass an object\n{\n    \"title\": \"Desperado\"\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"passing-variables-in-react\"}}>{`Passing variables in React`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First, set the mutation.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`const mutation = gql\\`\n    mutation addSong(\\$title: String) {\n        addSong(title: \\$title) {\n            id,\n            title\n        }\n    }\n\\`;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Second, we can use a GraphQL helper like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`export default graphql(mutation)(SongCreate);`}</MDXTag>{` - however, when we wrap a mutation, it forms a mutate function as part of this.props under `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutate`}</MDXTag>{`. Now, for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onSubmit`}</MDXTag>{` function we have:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`onSubmit(e) {\n    e.preventDefault();\n    console.log(this.props);\n    // point of time when we\n    // want to add a new song\n    this.props.mutate({\n        variables: {\n            title: this.state.title\n        }\n    });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"refetching-lists\"}}>{`Refetching Lists`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do we get Apollo to refetch the query?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can actually do it after the mutation. Using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.props.mutate`}</MDXTag>{` takes variables but can also take `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`refetchQueries`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In practice, we do not refetch queries. What we will do is pull out queries from the component files and import it from another queries file.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`onSubmit(e) {\n        e.preventDefault();\n        console.log(this.props);\n        // point of time when we\n        // want to add a new song\n        this.props.mutate({\n            variables: {\n                title: this.state.title\n            },\n            // need to pass in the exact query\n            // can also pass variables: {} if we need them\n            refetchQueries: [{ query: fetchSongsQuery }]\n        }).then(() => hashHistory.push('/'));\n    }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The GraphQL helper also knows not to rerun the same query twice too.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"deletion-mutations\"}}>{`Deletion mutations`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`mutation DeleteSong(\\$id: ID) {\n    deleteSong(id: \\$id) {\n        id\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`export default grahpql`}</MDXTag>{` can only take query at a time. So we need to create multiple instances of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graphql`}</MDXTag>{` helper.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export default compose(\n    graphql(deleteSongQuery),\n    graphql(fetchSongsQuery)\n)(SongList);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Setting this as our class allows for deletion:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`class SongList extends Component {\n    onSongDelete(id) {\n        // refetch will fetch any queries\n        // with this component\n        this.props\n            .mutate({ variables: { id } })\n            .then(() => this.props.data.refetch());\n    }\n\n    renderSongs() {\n        return this.props.data.songs.map(({ title, id }) => {\n            return (\n                <li key={id} className=\"collection-item\">\n                    {title}\n                    <i\n                        className=\"material-icons\"\n                        onClick={() => this.onSongDelete(id)}\n                    >\n                        delete\n                    </i>\n                </li>\n            );\n        });\n    }\n\n    render() {\n        console.log(this.props);\n        if (this.props.data.loading) {\n            return <div>Loading...</div>;\n        }\n        return <ul className=\"collection\">{this.renderSongs()}</ul>;\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Why `}<MDXTag name=\"inlineCode\" components={components} parentName=\"strong\">{`refetch`}</MDXTag>{` vs `}<MDXTag name=\"inlineCode\" components={components} parentName=\"strong\">{`refetchQueries`}</MDXTag>{`?`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Depends on how you're trying to update your query. If you refetch something not associated with the component, you would use refecthQueries. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`refetch`}</MDXTag>{` function would not have been available.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"fetching-a-particular-item\"}}>{`Fetching a particular item`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After creating a new song component, just in React Router and throw in the new route `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`songs/:id`}</MDXTag>{` - id being the wildcard.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now in GraphiQL, just like mutations, we can make queries with query variables.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In a similar pattern:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`query SongQuery(\\$id: ID!) {\n    song(id: \\$id) {\n        id\n        title\n  }\n}\n\n// query var\n{\n  \"id\": \"5933a3ebcac9e6b57aad7f76\"\n}\n\n// query js file\nimport gql from 'graphql-tag';\n\nexport default gql\\`\nquery FetchSong(\\$id: ID!) {\n    song(id: \\$id) {\n    id\n    title\n  }\n}\n\\`;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`To get the access to React Router parameters, we can see how `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`React Router`}</MDXTag>{` wraps the entire app. If we `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`console.log(this.props)`}</MDXTag>{` and check `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`params`}</MDXTag>{`, we will see that the params are in fact stored there.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"adding-fetchsong-to-the-component\"}}>{`Adding fetchSong to the component`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport FetchSong from '../queries/fetchSong';\n\nclass SongDetail extends Component {\n    render() {\n        console.log(this.props);\n        return (\n            <div>\n                <h3>SongDetail!</h3>\n            </div>\n        );\n    }\n}\n\nexport default graphql(FetchSong)(SongDetail);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`So one gotcha we run into with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`graphql()()`}</MDXTag>{` wrapper is that we need an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The problem is that GraphQL makes fetch queries automatically, as opposed to mutations.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With GraphQL React-Apollo, we can do the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export default graphql(FetchSong, {\n    options: (props) => { return { variables: { id: props.params.id } } }\n})(SongDetail);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will allow us to map `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-router`}</MDXTag>{` to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-apollo`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"watching-for-data\"}}>{`Watching for Data`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First, handle if no song yet exists.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { Link } from 'react-router';\nimport FetchSong from '../queries/fetchSong';\n\nclass SongDetail extends Component {\n    render() {\n        console.log(this.props);\n        const { song } = this.props.data;\n        if (!song) {\n            return <div />;\n        }\n\n        return (\n            <div>\n                <Link to=\"/\">Back</Link>\n                <h3>{song.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default graphql(FetchSong, {\n    options: (props) => {\n        return { variables: { id: props.params.id } };\n    }\n})(SongDetail);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"more-action-submitting\"}}>{`More action submitting`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import React, { Component } from 'react';\n\nclass LyricCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { content: '' };\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form action=\"\">\n                <label>Add a lyric</label>\n                <input\n                    value={this.state.content}\n                    onChange={(event) =>\n                        this.setState({ content: event.target.value })\n                    }\n                    // onSubmit={ (event) => this.onSubmit(event) }\n                />\n            </form>\n        );\n    }\n}\n\nexport default LyricCreate;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"submitting-the-lyrics\"}}>{`Submitting the lyrics`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import gql from 'graphql-tag';\n\nexport default gql\\`\n    mutation AddLyricToSong(\\$content: String!, \\$songId: ID!) {\n        addLyricToSong(content: \\$content, songId: \\$songId) {\n            id\n            title\n            lyrics {\n                content\n            }\n        }\n    }\n\\`;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using the mutations, we cannot just do this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`onSubmit(event) {\n    event.preventDefault();\n    this.props.mutate({\n        variables: {\n            content: this.state.content,\n            // contrary to what you may expect\n            songId: this.props.params.id\n        }\n    });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We in fact need to pass the ID down as a prop from the other component.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`onSubmit(event) {\n    event.preventDefault();\n    this.props.mutate({\n        variables: {\n            content: this.state.content,\n            songId: this.props.songId\n        }\n    });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"extending-queries\"}}>{`Extending Queries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do we extend queries for something like a Lyric List? What we can do is enhance the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SongDetail`}</MDXTag>{` query to grab all the lyrics associated with it.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`query FetchSong(\\$id: ID!) {\n    song(id: \\$id) {\n        id\n        title\n        lyrics {\n            id\n            content\n        }\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now we can simply pass down the lyric value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Given that the refresh also again won't automatically happen, we can do something similar to what we did with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`refetchQueries`}</MDXTag>{`, but this time let's try something different.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`How it all works`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Each time you make a response using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`apollo`}</MDXTag>{` client, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`apollo`}</MDXTag>{` returns a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`typeName`}</MDXTag>{` in the response.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, Apollo does not no what data is set within each of these data stores. It doesn't know the data and what attributes that it has. That's where the root of the current problem is.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To fix this issue, we can use a piece of Apollo Client config. What we can do is \"associate\" an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` with each data state. That way, it can `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bond`}</MDXTag>{` with React just that little bit better.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Apollo`}</MDXTag>{` can see that the song with an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` has been updated, Apollo can then itself tell React to update its components.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"caching-with-dataidfromobject\"}}>{`Caching with dataIdFromObject`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const client = new ApolloClient({\n    dataIdFromObject: (obj) => obj.id\n});\n\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router history={hashHistory}>\n                <Route path=\"/\" component={App}>\n                    <IndexRoute component={SongList} />\n                    <Route path=\"songs/new\" component={SongCreate} />\n                    <Route path=\"songs/:id\" component={SongDetail} />\n                </Route>\n            </Router>\n        </ApolloProvider>\n    );\n};\nReactDOM.render(<Root />, document.querySelector('#root'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"more-on-mutations\"}}>{`More on Mutations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Liking a lyric`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const mutation = gql\\`\n    mutation LikeLyric(\\$id: ID) {\n        likeLyric(id: \\$id) {\n            id\n            likes\n        }\n    }\n\\`;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"optimistic-mutations\"}}>{`Optimistic mutations`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`onLike(id, likes) {\n    this.props.mutate({\n        variables: { id },\n        optimisticResponse: {\n            _typename: 'Mutation',\n            likeLyric: {\n                id: id,\n                _typename: 'LyricType',\n                likes: likes + 1\n            }\n        }\n    });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"authentication-applications---concerned-with-both-the-front-and-back-end\"}}>{`Authentication Applications - concerned with both the front and back end`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Challenges`}</MDXTag></MDXTag>\n<MDXTag name=\"table\" components={components}>\n<MDXTag name=\"thead\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"thead\">\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Challenge`}</MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Solution`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"tbody\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Multiple pages`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`React Router`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Data store`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`MongoDB`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Authentication`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`PassportJS`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But Passport isn't designed with GraphQL in mind.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Auth with GraphQL`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are two approaches that we can take to auth with GraphQL and Passport.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Decoupled approach`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Coupled approach`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Coupled vs Decoupled`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we do not use a changed `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutation`}</MDXTag>{`, we are using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decoupled approach`}</MDXTag>{`. In the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`coupled`}</MDXTag>{` approach, we have GraphQL work as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`middleman`}</MDXTag>{` between the application and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`passport`}</MDXTag>{`. It's about whether or not use GraphQL to process the request or not.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So, which one? Why would we ever have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Passport`}</MDXTag>{` involved with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQL`}</MDXTag>{`? You could make a strong case for either approach.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Coupled`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pros:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`using Graphql in the way it was intended`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Decoupled`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pros:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Once authenticated, you do not need to continue the authentication process.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Cons:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`part of the React app would not use GraphQL at all`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the example given, they are used together - however, usually the argument is that maybe they should remain decoupled.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"delegating-to-an-authentication-service\"}}>{`Delegating to an Authentication Service`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"handling-errors-gracefully\"}}>{`Handling Errors Gracefully`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"handling-errors-around-signup\"}}>{`Handling Errors Around Signup`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`apollo`}</MDXTag>{` client, you can also `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`catch`}</MDXTag>{` after a mutation.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`this.props.mutate({\n    variables: { email, password }\n}).catch(res => {\n    const errors = res.graphQLErrors.map(err => err.message);\n    this.setState({ errors });\n});\n\n### The Needs for a HOC\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}