{"version":3,"sources":["webpack:///./manual/JavaScript/Testing-Cheat-Sheet.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"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","file":"static/js/manual-java-script-testing-cheat-sheet.f3707aca.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"testing\"}}>{`Testing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The test files are stored in the test folders and require the dev dependencies `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sinonjs, jsdom, mocha, chai`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Run `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`npm test`}</MDXTag>{` to view the tests files that are written in that folder.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`mocha and chai`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jsdom`}</MDXTag>{` library and import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jquery`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Below is a small example of a test set up.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n    let \\$;\n    let ageGateFilters;\n    jsdom();\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const moduleToTest = new ModuleToTest(...params);\n    });\n\n    // Test Spec (unit test)\n    it('This test should return ok', () => {\n        expect(true).to.be.ok;  // returns ok\n    });\n\n    // Test Spec (unit test)\n    it('This test should return true for the ModuleToTest function', () => {\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\n    });\n\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`sinon.js`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For now, I will show an example of a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`spy`}</MDXTag>{` and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stub`}</MDXTag>{` (as this may the most relevant): `}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`For the Spy`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout() {\n        let a = 1;\n        let b = 2;\n\n        return target(a,b);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should return that the async func was called', () => {\n        \n        let targetSpy = sinon.spy(example, 'target');\n\n        // Now, any time we call the function, the spy logs information about it\n        example.callout();\n\n        assert(targetSpy.calledOnce); // returns true\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`For the Stub`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout(param, callback) {\n        \\$.ajax({\n            // whatever it normally is\n        }, callback);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        \\$ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should call callback after saving', () => {\n        \n        //We'll stub \\$.post so a request is not sent\n        const post = sinon.stub(\\$, 'ajax');\n        post.yields();\n\n        //We can use a spy as the callback so it's easy to verify\n        var callback = sinon.spy();\n\n        example.callout(param, callback);\n\n        post.restore();\n        sinon.assert.calledOnce(callback); // returns true\n    });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`jsdom`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`jsdom is a library that allows you to write a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`innerHTML`}</MDXTag>{` var for the test to use if you want to test out the jQuery values for a test.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For an example, checkout yt `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`test/agegate_test.js`}</MDXTag>{`.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}