(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{"./manual/Unity/How-To-Make-A-Video-Game.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return g});var t=a("./node_modules/react/index.js"),o=a.n(t),r=a("./node_modules/@mdx-js/tag/dist/index.js");function i(e){return(i="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function p(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function s(e,n){return!n||"object"!==i(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,n){return(c=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var g=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=s(this,l(n).call(this,e))).layout=null,a}var a,t,i;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&c(e,n)}(n,o.a.Component),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"how-to-make-a-video-game"}},"How to make a video game"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#how-to-make-a-video-game"}},"How to make a video game")," - ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#what-is-a-game-engine"}},"What is a game engine?"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#part-2"}},"Part 2"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#unity-interface"}},"Unity Interface"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#prefabs"}},"Prefabs")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#setup-the-project"}},"Setup the project")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#navigating-the-scene-view"}},"Navigating the Scene View")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#position-the-camera"}},"Position the camera")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#image-effects-and-asset-stores"}},"Image effects and asset stores")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#programming-games"}},"Programming Games"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#programming-with-c-with-unity"}},"Programming with C# with Unity")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#gather-player-input"}},"Gather Player Input")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#moving-a-player-with-animation"}},"Moving a player with animation")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#quaternions"}},"Quaternions"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#target-rotation"}},"Target rotation")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#making-a-follow-camera"}},"Making a follow camera")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#section-3"}},"Section 3"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#adding-the-flies-to-the-swamp"}},"Adding the flies to the swamp")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#adding-the-fly-pickup"}},"Adding the Fly Pickup"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#pickup-particles"}},"Pickup Particles")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#creating-the-enemy-in-the-game"}},"Creating the enemy in the game")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#monitor-player-health"}},"Monitor Player Health")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#managing-the-game-state"}},"Managing the game state")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#adding-audio"}},"Adding Audio"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#game-audio"}},"Game audio")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#controlling-sounds-on-game-objects"}},"Controlling sounds on game objects")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#audio-mixing"}},"Audio mixing")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#exporting-the-game"}},"Exporting the game"))))))),o.a.createElement(r.MDXTag,{name:"p",components:n},"How are games made?"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Game designers"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Game artists"),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Game developers")),o.a.createElement(r.MDXTag,{name:"p",components:n},"These roles can be between one or thousands of people."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Game artists deal with what you see and hear in the game."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"what-is-a-game-engine"}},"What is a game engine?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Game engines help deal with things like the physics and rendering graphics."),o.a.createElement(r.MDXTag,{name:"p",components:n},"A game engine is a framework for building games that helps coordinate things like assets and gives you all the tools you need to start coding."),o.a.createElement(r.MDXTag,{name:"p",components:n},"A game engine is not a 3D art engine."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We are Unity as it is easier to learn when you are just getting started."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"part-2"}},"Part 2"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"unity-interface"}},"Unity Interface"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"_Scenes")," folder."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Game assets are ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"a piece of media for the game"),". This could be sounds, scripts or models etc."),o.a.createElement(r.MDXTag,{name:"h4",components:n,props:{id:"prefabs"}},"Prefabs"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Stores several objects together. An example ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"prefab")," is the frog which contains the 3d model, the texture and the animation together."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"setup-the-project"}},"Setup the project"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Games use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"real time rendering")," where it is drawn at the frame rate. Generally you want to aim for 60fps or higher. This will make is look as smooth as possible."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can go to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Window > Lighting > Settings")," to adjust things about how the scene is lit."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To adjust the player settings go to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Edit > Project Settings > Player"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For quality, go to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Edit > Project Settings > Quality"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"navigating-the-scene-view"}},"Navigating the Scene View"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"environment")," prefab links a bunch of Maya elements and groups them as a prefab."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Our environment prefab already has a light associated with it. Ensure after adding that you re-generate the light in the settings."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Anything with a green square is outlining a game object."),o.a.createElement(r.MDXTag,{name:"p",components:n},"After selecting an object, you can use the 3d axis to change the transform of the axis."),o.a.createElement(r.MDXTag,{name:"p",components:n},"On the top left, we can change the tools from position to rotation etc and with similar methods to before, we can rotate the axis."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also just use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"qwer")," keys to change between tools."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also switch between ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"global")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"local")," space to help move things around."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"position-the-camera"}},"Position the camera"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The scenes looks good so far, but it we need to update the camera."),o.a.createElement(r.MDXTag,{name:"p",components:n},"At the top of the scene window, we have ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"scene"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"game")," tabs. If we select ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"game"),", we get to see how the game will look when we play it. We can either write code to control to camera or change the transform."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"image-effects-and-asset-stores"}},"Image effects and asset stores"),o.a.createElement(r.MDXTag,{name:"p",components:n},"An image effect can change things like colours etc."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once we click on the asset store, we can build or share models to use."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Unity is component based so we can add things that way. We can now create a post processing profile to use."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"programming-games"}},"Programming Games"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"programming-with-c-with-unity"}},"Programming with C# with Unity"),o.a.createElement(r.MDXTag,{name:"p",components:n},"JavaScript is also able to be used, but far less adopted by the Unity commmunity."),o.a.createElement(r.MDXTag,{name:"p",components:n},"After creating a file, you will run into the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Start")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Update")," methods that are able to run at each frame so that we can edit the code to do specific things."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Public and private are differing ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"accessibility levels"),". The second keyword in a declaration is the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"type"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"gather-player-input"}},"Gather Player Input"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We need to record which button they are pressing in each frame."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw("Horizontal");\n        moveVertical = Input.GetAxisRaw("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"moving-a-player-with-animation"}},"Moving a player with animation"),o.a.createElement(r.MDXTag,{name:"p",components:n},"After adding the script to update the script, we need to animate the frog."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The animator components with now be on the inspector for the player."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We will use the playerAnimator to access to Animator component."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n        // special method to get the "Animator" component\n        playerAnimator = GetComponent<Animator>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw("Horizontal");\n        moveVertical = Input.GetAxisRaw("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the `update` method\n    // this method doesn\'t run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat("Speed", 3f);\n        } else {\n            playerAnimator.SetFloat("Speed", 0);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"So far we haven't told the frog how to change direction or to have the camera follow the movement."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"quaternions"}},"Quaternions"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Behind the scenes, Unity stores the rotational values as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Quaternions"),". Most games ending will use these to solve rotational issues."),o.a.createElement(r.MDXTag,{name:"h4",components:n,props:{id:"target-rotation"}},"Target rotation"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The rigid body and box collider is how the objects like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Player")," can interact with the physics and turning."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n    private float turningSpeed = 20f;\n    private Rigidbody playerRigidBody;\n\n    // Use this for initialization\n    void Start () {\n        // Gather components from the player object\n        // special method to get the "Animator" component\n        playerAnimator = GetComponent<Animator> ();\n        playerRigidBody = GetComponent<Rigidbody> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw ("Horizontal");\n        moveVertical = Input.GetAxisRaw ("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the `update` method\n    // this method doesn\'t run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat ("Speed", 3f);\n        } else {\n            playerAnimator.SetFloat ("Speed", 0);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"We need to perform a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Lerp")," to change the variable from one to another over time."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Unity also doesn't save any change settings when you are playing the game."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"making-a-follow-camera"}},"Making a follow camera"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will have the camera to always follow the parent."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"[SerializeField]")," to expose fields from the code into the inspector."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FollowCamera : MonoBehaviour {\n\n    [SerializeField]\n    private Transform player;\n    [SerializeField]\n    private Vector3 offset;\n    private float cameraFollowSpeed = 5f;\n\n    // Update is called once per frame\n    void Update () {\n        Vector3 newPosition = player.position + offset;\n\n        // Smooth transition\n        transform.position = Vector3.Lerp(transform.position, newPosition, cameraFollowSpeed + Time.deltaTime);\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"section-3"}},"Section 3"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"adding-the-flies-to-the-swamp"}},"Adding the flies to the swamp"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Let's add an objective to the game (pickup)."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyMovement : MonoBehaviour {\n    [SerializeField]\n    private Transform center;\n    private float flySpeed;\n\n    // Use this for initialization\n    void Start () {\n        flySpeed = Random.Range (300f, 700f);\n    }\n\n    // Update is called once per frame\n    void Update () {\n        transform.RotateAround (center.position, Vector3.up, flySpeed * Time.deltaTime);\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"adding-the-fly-pickup"}},"Adding the Fly Pickup"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            Destroy (gameObject);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"h4",components:n,props:{id:"pickup-particles"}},"Pickup Particles"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Particle systems are a game object which generates multiple systems."),o.a.createElement(r.MDXTag,{name:"p",components:n},"As for their destruction:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PickupParticlesDestruction : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n        Destroy (gameObject, 5f);\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also create scripts that aren't attached to a 3d model in the scene view."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can create an empty object from the left hand sidebar. Reset the transform and rename."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'// Fly Spawner\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'// Fly Pickup\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"creating-the-enemy-in-the-game"}},"Creating the enemy in the game"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The bird game object needs to know where the player is. It's known as path finding."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Unity makes path finding very easy."),o.a.createElement(r.MDXTag,{name:"p",components:n},"With the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Nav Mesh Agent"),", you can set the following for the bird:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"Speed: 5\nAngular Speed: 720\nStopping Distance: 5\nRadius: 1\nHeight: 4\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We now need to create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Nav Mesh"),". The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"NavMeshAgent"),' allows us to set a destination target that the "enemy" can follow. It is a component that can be attached to a game object so that it can interact with the ',o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"NavMesh"),"."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"// BirdMovement.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BirdMovement : MonoBehaviour {\n\n    [SerializeField]\n    private Transform target;\n    private UnityEngine.AI.NavMeshAgent birdAgent;\n    private Animator birdAnimator;\n\n    // Use this for initialization\n    void Start () {\n        birdAgent = GetComponent<UnityEngine.AI.NavMeshAgent> ();\n        birdAnimator = GetComponent<Animator> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // Set the bird's destination\n        birdAgent.SetDestination (target.position);\n\n        // Measure the magnitude of the NavMeshAgent's velocity\n        float speed = birdAgent.velocity.magnitude;\n\n        // Pass the velocity to the animator component\n        birdAnimator.SetFloat(\"Speed\", speed);\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"monitor-player-health"}},"Monitor Player Health"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerHealth : MonoBehaviour {\n    public bool alive;\n    [SerializeField]\n    private GameObject pickupPrefab;\n    // Use this for initialization\n    void Start () {\n        alive = true;\n    }\n\n    void OnTriggerEnter(Collider other) {\n        if (other.CompareTag ("Enemy") && alive == true) {\n            alive = false;\n\n            // Create the pickup particles\n            Instantiate(pickupPrefab, transform.position, Quaternion.identity);\n        }\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"managing-the-game-state"}},"Managing the game state"),o.a.createElement(r.MDXTag,{name:"p",components:n},"How do we know when the game has started and when we need to restart?"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\n\npublic class GameState : MonoBehaviour {\n    private bool gameStarted = false;\n    [SerializeField]\n    private Text gameStateText;\n    [SerializeField]\n    private GameObject player;\n    [SerializeField]\n    private BirdMovement birdMovement;\n    [SerializeField]\n    private FollowCamera followCamera;\n    private float restartDelay = 3f;\n    private float restartTimer;\n    private PlayerMovement playerMovement;\n    private PlayerHealth playerHealth;\n\n    // Use this for initialization\n    void Start () {\n        Cursor.visible = false;\n\n        playerMovement = player.GetComponent<PlayerMovement> ();\n        playerHealth = player.GetComponent<PlayerHealth> ();\n\n        // do not allow player to move before the game\n        playerMovement.enabled = false;\n        // prevent bird\n        birdMovement.enabled = false;\n        // prevent follow camear\n        followCamera.enabled = false;\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // If the game is not sarted and the player presses the space bar...\n        if (gameStarted == false && Input.GetKeyUp(KeyCode.Space)) {\n            // ... start the game\n            StartGame();\n        }\n\n        // If player is no longer alive ...\n        if (playerHealth.alive == false) {\n            // ...end the game\n            EndGame();\n\n            // ... increment timer to count up to restarting...\n            restartTimer = restartTimer + Time.deltaTime;\n\n            // ...and if it reaches the restart delay...\n            if (restartTimer >= restartDelay) {\n                // reload scene\n                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            }\n        }\n    }\n\n    private void StartGame() {\n        gameStarted = true;\n\n        // set main text to see through\n        gameStateText.color = Color.clear;\n\n        // allow player to move\n        playerMovement.enabled = true;\n        birdMovement.enabled = true;\n        followCamera.enabled = true;\n    }\n\n    private void EndGame() {\n        gameStarted = false;\n\n        gameStateText.text = "Game Over";\n        // set main text to see through\n        gameStateText.color = Color.white;\n\n        // remove player from game\n        player.SetActive (false);\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"adding-audio"}},"Adding Audio"),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"game-audio"}},"Game audio"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can add the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Audio Source")," component and select the sounds."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can also randomly generate a sound to help add something natural."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-csharp"}},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RandomSoundPlayer : MonoBehaviour {\n    private AudioSource audioSource;\n    [SerializeField]\n    private List<AudioClip> soundClips = new List<AudioClip>();\n    [SerializeField]\n    private float soundTimerDelay = 3f;\n    private float soundTimer;\n\n    // Use this for initialization\n    void Start () {\n        audioSource = GetComponent<AudioSource>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // incredment a timer to count up to restarting\n        soundTimer = soundTimer + Time.deltaTime;\n\n        // if the timer reaches the delay...\n        if (soundTimer >= soundTimerDelay) {\n            soundTimer = 0f;\n            // choose a random sound\n            AudioClip randomSound = soundClips[Random.Range(0, soundClips.Count)];\n            audioSource.PlayOneShot (randomSound);\n        }\n    }\n}\n")),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"controlling-sounds-on-game-objects"}},"Controlling sounds on game objects"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Add another empty game child and add the audio but select ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"play on awake")," off."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To make sounds 3d, we need to change the spatial blend. We also need to make sure the game camera and distance are set correctly."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We need to update the scripts to ensure that these clips play at the appropriate time."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"audio-mixing"}},"Audio mixing"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Use the audio mixer, create groups and assign these groups via the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"AudioComponent")," on the hierarchy or prefab."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"exporting-the-game"}},"Exporting the game"))}}])&&p(a.prototype,t),i&&p(a,i),n}();g.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=manual-unity-how-to-make-a-video-game.305817e8304de77c75ce.js.map