(window.webpackJsonp=window.webpackJsonp||[]).push([[386],{"./manual/Python/Writing-CSV-Files.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return o});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},a="wrapper";function o(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)(a,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"writing-csv-files"},"Writing CSV Files"),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-python"}),"\"\"\"\nBasic example to read and write a csv file\n\"\"\"\nimport random\nimport csv\nimport threading\ncsv_writer_lock = threading.Lock()\n\ndef handle_event(event):\n    try:\n    event_id: random.randrange(0,100) # used for example\n    issue_id: random.randrange(0,100)\n        row_dict = {\n            'issue_id': issue_id,\n            'event_id': event_id,\n            'console_output': ''\n        }\n\n    row_dict['console_output'] = crumb\n    with csv_writer_lock:\n      writer.writerow(row_dict)\n\ntry:\n    with open('./fetch_events_by_issue.csv', 'w') as output_file:\n        fieldnames = ['issue_id', 'event_id', 'console_output']\n        writer = csv.DictWriter(output_file, fieldnames=fieldnames)\n\n    # pretending we are reading another file\n        with open('./project_issues.csv', 'r') as file:\n            data = file.read().splitlines()\n            for value in data:\n        handle_event(value)\n")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Python/Writing-CSV-Files.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-python-writing-csv-files.101a1afd2417ec7a4a77.js.map