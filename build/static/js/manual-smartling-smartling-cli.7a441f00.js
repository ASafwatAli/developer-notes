(window.webpackJsonp=window.webpackJsonp||[]).push([[450],{"./manual/Smartling/Smartling-CLI.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return s});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},o="wrapper";function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)(o,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"smartling-cli"},"Smartling CLI"),Object(l.b)("h2",{id:"tldr"},"tl;dr"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object.assign({parentName:"tr"},{align:null}),"Command"),Object(l.b)("th",Object.assign({parentName:"tr"},{align:null}),"Action"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object.assign({parentName:"tr"},{align:null}),"smartling-cli files pull --locale=en-AU"),Object(l.b)("td",Object.assign({parentName:"tr"},{align:null}),"Pull AU locale translations")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object.assign({parentName:"tr"},{align:null}),"smartling-cli files push path/to/original/translations.yml"),Object(l.b)("td",Object.assign({parentName:"tr"},{align:null}),"Push file to be translated")))),Object(l.b)("h2",{id:"pull-command"},"Pull Command"),Object(l.b)("p",null,"The result of the files pulled is that they will written to the folders dictated by the push directory."),Object(l.b)("p",null,"Output file depends purely on the ",Object(l.b)("inlineCode",{parentName:"p"},"smartling.yml")," output:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"# (optional) Additional file-specific settings for push and pull commands.\nfiles:\n  # (optional) Special default section will apply configuration to all file\n  # types except files, which URIs match following rules.\n  default:\n    # (optional) Defines pull-specific options.\n    pull:\n      # (optional) Format, which will be used to format file name.\n      #\n      # If not set, then default format will be used or format,\n      # that is set via command line options.\n      format: '{{name .FileURI}}{{with .Locale}}_{{.}}{{end}}{{ext .FileURI}}'\n")),Object(l.b)("p",null,"You can also pass format as a flag ",Object(l.b)("inlineCode",{parentName:"p"},"--format")," but note that there can be issues if regulations are not followed from ",Object(l.b)("a",Object.assign({parentName:"p"},{href:"https://golang.org/pkg/text/template/"}),"the Golang documentation"),"."))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Smartling/Smartling-CLI.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-smartling-smartling-cli.101a1afd2417ec7a4a77.js.map