(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{"./manual/Kotlin/Kotlin-Study-Group.md":function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return c});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),b={},i="wrapper";function c(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(r.b)(i,Object.assign({},b,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"kotlin-study-group"},"Kotlin Study Group"),Object(r.b)("h2",{id:"shortcuts"},"Shortcuts"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Shortcut"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Action"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"shift ","*"," 3"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Search for shortcuts")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + mousewheel"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Zoom. Option must be enabled.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + option + h"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Tree of calls")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + h"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Creation hierarchy")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"option + up"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Extend selection")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + backspace"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Destroy line")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + shift + p"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Shows you what highlighted text is")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"shift ","*",'3 > "Add inferred type arguments'),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Types inferred")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + f12"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"All methods defined")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + space (maybe + shift)"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Code completion")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + p"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Arguments required")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + space + up"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Suggestions through codebase")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + shift + enter"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Finish line, put me on next one")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"option + enter (on classes with interface implementations)"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Interface member inference")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + click"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Navigate to definition")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"option + f6"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Rename")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + d"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Diff window")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + f6"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Refactor functions")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"TODO: extract to parameter"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Extract to function param")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"cmd + shift + t"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Go to spec (may need Kotlin test plugin)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"ctrl + shift + j"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Refactor lines")))),Object(r.b)("h2",{id:"toy-robot-notes"},"Toy Robot notes"),Object(r.b)("p",null,"Robot on infinite plane."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'import kotlin.math.absoluteValue\nfun main() {\n    val instructions = "R3L2R7L4"\n    val distance = robotDistance(instructions)\n    println("hello world $distance")\n}\nenum class Direction {\n    NORTH {\n        override fun right() = EAST\n        override fun left() = WEST\n    },\n    SOUTH {\n        override fun right() = WEST\n        override fun left() = EAST\n    },\n    EAST {\n        override fun right() = SOUTH\n        override fun left() = NORTH\n    },\n    WEST {\n        override fun right() = NORTH\n        override fun left() = SOUTH\n    };\n    abstract fun right(): Direction\n    abstract fun left(): Direction\n}\ndata class RobotState(val x: Int = 0, val y: Int = 0, val direction: Direction = Direction.NORTH) {\n    fun right(): RobotState = this.copy(direction = direction.right())\n    fun left(): RobotState = this.copy(direction = direction.left())\n    fun move(distance: Int) = when(direction) {\n        Direction.NORTH -> copy(y = y + distance)\n        Direction.EAST -> copy(x = x + distance)\n        Direction.SOUTH -> copy(y = y - distance)\n        Direction.WEST -> copy(x = x - distance)\n    }\n}\nfun robotDistance(instructions: String): Int {\n    val regex = Regex("(R|L|\\\\d+)")\n    val tokens = regex.findAll(instructions).map { it.groupValues[1] }\n    val finalState = tokens.fold(RobotState()) { acc: RobotState, token: String ->\n        when (token) {\n            "R" -> acc.right()\n            "L" -> acc.left()\n            else -> acc.move(token.toInt())\n        }\n    }\n    return finalState.x.absoluteValue + finalState.y.absoluteValue\n}\n')),Object(r.b)("h2",{id:"preferences"},"Preferences"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Can update to show definition on hover")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Kotlin/Kotlin-Study-Group.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-kotlin-kotlin-study-group.101a1afd2417ec7a4a77.js.map