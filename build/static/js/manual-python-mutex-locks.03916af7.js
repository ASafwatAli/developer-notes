(window.webpackJsonp=window.webpackJsonp||[]).push([[377],{"./manual/Python/Mutex-Locks.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),a={},i="wrapper";function r(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)(i,Object.assign({},a,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"mutex-locks"},"Mutex Locks"),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-python"}),'"""\nThis is a short example demoing how it works, but this example isn\'t realistic.\n\nWorth thinking about when using thread pools though and accessing shared resources.\n"""\nimport random\nimport csv\nimport threading\nlock = threading.Lock()\n\nsum = 0\ndata = list(range(1000))\n\nfor element in data:\n  with locks:\n    sum += element\n')))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Python/Mutex-Locks.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-python-mutex-locks.101a1afd2417ec7a4a77.js.map