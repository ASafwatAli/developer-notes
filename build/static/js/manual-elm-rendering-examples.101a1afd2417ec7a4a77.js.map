{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Rendering-Examples.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"wXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0BADR,0BAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oCADR,oCAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,mdAiBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0CADR,0CAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,0MAMLP,OAAAE,EAAA,EAAAF,CAAA,2CACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mBADR,mBAGAL,OAAAE,EAAA,EAAAF,CAAA,iEAA4DA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAA5D,oCAAmJN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAAnJ,KACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,8dAkBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2CADR,2CAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,gJAWLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uCADR,uCAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,6aAYTX,EAAWY,gBAAiB","file":"static/js/manual-elm-rendering-examples.1f1bd35d.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elm-rendering-examples\"\n    }}>{`Elm Rendering Examples`}</h1>\n    <h2 {...{\n      \"id\": \"rendering-via-anonymous-function\"\n    }}>{`Rendering via anonymous function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`view model =\n    div [ class \"content\" ]\n        [ h1 [] [ text \"Photo Groove\" ]\n        , div [ id \"thumbnails\" ]\n            -- anonymous function mapping photos\n            (List.map (\\\\photo -> viewThumbnail model.selectedUrl photo)\n                model.photos\n            )\n        , img                 #A\n            [ class \"large\"   #A\n            , src (urlPrefix ++ \"large/\" ++ model.selectedUrl)\n            ]\n            []\n        ]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"anon-function-with-partial-application\"\n    }}>{`Anon function with partial application`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Before: List.map (\\\\photo -> viewThumbnail model.selectedUrl photo) model.photos \n# Partial application is known as curried in Elm\nAfter: List.map (viewThumbnail model.selectedUrl) model.photos\n`}</code></pre>\n    <p>{`All Elm functions are curried.`}</p>\n    <h2 {...{\n      \"id\": \"update-function\"\n    }}>{`Update function`}</h2>\n    <p>{`To update the model, we need to have the appropriate `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` function and expose the correct `}<inlineCode parentName=\"p\">{`Html.Events`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick)\n\nupdate msg model =\n    if msg.description == \"ClickedPhoto\" then\n        { model | selectedUrl = msg.data }\n    else model\n\nviewThumbnail selectedUrl thumb =\n    img\n        [ src (urlPrefix ++ thumb.url)\n        , classList [ ( \"selected\", selectedUrl == thumbnail.url ) ]\n        , onClick { description = \"ClickedPhoto\", data = thumb.url } ]\n        []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implementing-the-model-view-update-loop\"\n    }}>{`Implementing the Model-View-Update Loop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Browser\n\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , view = view\n        , update = update\n        }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multi-argument-function-annotations\"\n    }}>{`Multi-Argument Function Annotations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`> String.padLeft\n<function:padLeft> : Int -> Char -> String -> String\n> String.padLeft 9\n<function> : Char -> String -> String\n> String.padLeft 9 '.' <function> : String -> String\n> String.padLeft 9 '.' \"not!\" \".....not!\" : String\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}