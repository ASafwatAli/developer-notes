(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{"./manual/Design-Patterns/Observer.md":function(e,n,s){"use strict";s.r(n),s.d(n,"default",function(){return b});var r=s("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),t=(s("./node_modules/react/index.js"),s("./node_modules/@mdx-js/react/dist/index.es.js")),o={},i="wrapper";function b(e){var n=e.components,s=Object(r.a)(e,["components"]);return Object(t.b)(i,Object.assign({},o,s,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"observer"},"Observer"),Object(t.b)("h2",{id:"example"},"Example"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface Observer {\n  uniqueID: string;\n  update(): void;\n}\n\nclass ConcreteObserver implements Observer {\n  public uniqueID: string;\n  constructor(uniqueID: string) {\n    this.uniqueID = uniqueID;\n  }\n\n  update(): void {\n    console.log(`${this.uniqueID} updates something...`);\n  }\n}\n\nfunction findObserver(obs: Observer[], uniqueID: string) {\n  let index = 0;\n  const existed = obs.some((observer, idx) => {\n    index = idx;\n    return observer.uniqueID === uniqueID;\n  });\n  return {\n    existed,\n    index\n  };\n}\n\nclass Subject {\n  private _observers: Observer[];\n  constructor() {\n    this._observers = [];\n  }\n\n  registerObserver(ob: Observer) {\n    const id: string = ob.uniqueID;\n    if (findObserver(this._observers, id).existed) {\n      return console.log(`Observer ${id} is already in list`);\n    }\n    this._observers.push(ob);\n    console.log(`Observer ${ob.uniqueID} is pushed into list`);\n    console.log(this._observers);\n  }\n\n  removeObserver(uniqueID: string) {\n    const { existed, index } = findObserver(this._observers, uniqueID);\n    if (existed) {\n      this._observers.splice(index, 1);\n      console.log(`Observer ${uniqueID} is removed from list`);\n    } else {\n      console.log('Observer not existed');\n    }\n  }\n\n  notifyObservers() {\n    console.log('Subject notify all observers >>');\n    this._observers.map((observer) => {\n      observer.update();\n    });\n  }\n}\n\n(function main() {\n  const subject = new Subject();\n\n  const obA = new ConcreteObserver('A');\n  const obB = new ConcreteObserver('B');\n  const obC = new ConcreteObserver('C');\n\n  subject.registerObserver(obA);\n  subject.registerObserver(obA); // already existed\n\n  subject.registerObserver(obB);\n  subject.registerObserver(obC);\n\n  subject.notifyObservers();\n})();\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/Observer.md"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-design-patterns-observer.101a1afd2417ec7a4a77.js.map