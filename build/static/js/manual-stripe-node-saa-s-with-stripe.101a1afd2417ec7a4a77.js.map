{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Stripe/Node-SaaS-With-Stripe.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"8XAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,mCACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,gDACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,qBACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,mCACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wCACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,iCACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yCACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,mEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kDAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,8DADR,8DAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,i6EAyHTX,EAAWY,gBAAiB","file":"static/js/manual-stripe-node-saa-s-with-stripe.b02733f2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"nodejs-saas-with-stripe\"\n    }}>{`Node.js SaaS with Stripe`}</h1>\n    <p>{`The basics plan is to:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a test customer for the subscription.`}</li>\n      <li parentName=\"ol\">{`Create a product.`}</li>\n      <li parentName=\"ol\">{`Create a plan for that product.`}</li>\n      <li parentName=\"ol\">{`Create a subscription for that plan.`}</li>\n      <li parentName=\"ol\">{`Repeating for a few products.`}</li>\n      <li parentName=\"ol\">{`Writing a test script to do all this.`}</li>\n      <li parentName=\"ol\">{`Fetching back a list of subscriptions for that particular user.`}</li>\n      <li parentName=\"ol\">{`Writing out an example using Express servers.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"building-out-the-base-functions-to-use-for-the-express-app\"\n    }}>{`Building out the base functions to use for the Express app`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// controllers/stripe/index.js\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n/**\n * Create a new customer based off an email address.\n *\n * @param {string} email\n * @returns {Promise} Result of attempting to create a customer.\n */\nfunction customerCreate(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const customer = await stripe.customers.create({ email: email });\n      resolve(customer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Register a new product.\n * @example\n * {\n * name: 'My SaaS Platform',\n * type: 'service'\n * }\n *\n * @param {Object} data Name and type of product\n * @returns {Promise} Request to create new product\n */\nfunction productCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.products.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new plan with a product.\n * @example\n * {\n * currency: 'usd',\n * interval: 'month',\n * product: 'prod_id',\n * nickname: 'Pro Plan',\n * amount: 12\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction planCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.plans.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new subscription for a user based on * a plan.\n * @example\n * {\n * customer: 'customer_id',\n * items: [\n *   {\n *     plan: 'plan_abc',\n *     quantity: 2\n *   }\n * ]\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Fetch the subscription list.\n * @example\n * {\n * { limit: 99 },\n * customer: 'cus_id'\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionList(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.list(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}