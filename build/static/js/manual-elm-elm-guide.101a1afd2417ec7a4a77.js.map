{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elm/Elm-Guide.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/manual-elm-elm-guide.4477f9c2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elm-guide\"\n    }}>{`Elm Guide`}</h1>\n    <p>{`This is a basic Elm guide that follows on from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://guide.elm-lang.org/core_language.html\"\n      }}>{`core language tour`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n'a'   : Char\n\"abc\" : String\n\n-- multi-line String\n\"\"\"\nThis is useful for holding JSON or other\ncontent that has \"quotation marks\".\n\"\"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`The following are equivocal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditionals\"\n    }}>{`Conditionals`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`if powerLevel > 9000 then \"Over 9000!\" else \"dbz joke not applicable\"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`square n =\n  n^2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"records\"\n    }}>{`Records`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipes\"\n    }}>{`Pipes`}</h2>\n    <p>{`Note: \"Pipes\" is not the technical term in Elm.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`viewNames1 names =\n  String.join \", \" (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join \", \"\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-expressions\"\n    }}>{`Let Expressions`}</h2>\n    <p>{`This is useful once expressions get too big.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in \"let\" expressions\nlet\n  name : String\n  name =\n    \"Hermann\"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"applying-functions\"\n    }}>{`Applying Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elm-modules\"\n    }}>{`Elm Modules`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations--aliases\"\n    }}>{`Type Annotations + Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  (\"Steve\", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type User\n  = Regular String Int\n  | Visitor String\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interoperability-with-js-and-porting\"\n    }}>{`Interoperability with JS and Porting`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg\n`}</code></pre>\n    <p>{`To use this port from JS, you use this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}