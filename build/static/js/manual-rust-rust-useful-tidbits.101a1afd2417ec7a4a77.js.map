{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Rust-Useful-Tidbits.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"0XAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kBADR,kBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,+BADR,+BAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,oHAQLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,sDAAiDA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAAjD,mFAAqLN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAArL,KACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,0IAWLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,sXAeLP,OAAAE,EAAA,EAAAF,CAAA,oBACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,+gBA2BLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,yJACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,wJAaLP,OAAAE,EAAA,EAAAF,CAAA,oBACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,sYAUTX,EAAWY,gBAAiB","file":"static/js/manual-rust-rust-useful-tidbits.77760bcb.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useful-tidbits\"\n    }}>{`Useful Tidbits`}</h1>\n    <h2 {...{\n      \"id\": \"importing-crates-vs-std-lib\"\n    }}>{`Importing crates vs std lib`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// for extenal dependencies\nextern crate clap;\nuse clap::App;\n// for standard Rust libraries\nuse std::fs;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-yaml\"\n    }}>{`Reading YAML`}</h2>\n    <p>{`Note that this is being done by using the `}<inlineCode parentName=\"p\">{`clap`}</inlineCode>{` crate that is used for CLI tools - may need to update for appropraite use with `}<inlineCode parentName=\"p\">{`rust-yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n  let yaml = load_yaml!(\"cli.yml\");\n  println!(\"{:#?}\", yaml);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-json\"\n    }}>{`Reading JSON`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate serde_json;\n\nuse std::path::Path;\nuse std::fs::File;\n\nfn main() {\n    let json_file_path = Path::new(\"src/test.json\");\n    let json_file = File::open(json_file_path).expect(\"file not found\");\n    let json: serde_json::Value = serde_json::from_reader(json_file).expect(\"JSON was not well-formatted\");\n    println!(\"{:#?}\", json);\n}\n`}</code></pre>\n    <p>{`Output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Object(\n    {\n        \"id\": String(\n            \"1234\"\n        ),\n        \"object\": Object(\n            {\n                \"array\": Array(\n                    [\n                        Number(\n                            1\n                        ),\n                        Number(\n                            2\n                        ),\n                        Number(\n                            3\n                        )\n                    ]\n                )\n            }\n        )\n    }\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"logging\"\n    }}>{`Logging`}</h2>\n    <p>{`You want to implement the Debug trait on your struct. Using #`}{`[derive(Debug)]`}{` is the easiest solution. Then you can print it with {:?}:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Debug)]\nstruct MyStruct{\n    a: i32,\n    b: i32\n}\n\nfn main() {\n    let x = MyStruct{ a: 10, b: 20 };\n    println!(\"{:?}\", x);\n}\n`}</code></pre>\n    <p>{`In use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// assuming matches is a struct or array\nprintln!(\"{:?}\", matches); // logging out structs or arrays\nprintln!(\"{:#?}\", matches); // pretty print\nprintln!(\"{}\", matches.occurrences_of(\"verbose\"));\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}