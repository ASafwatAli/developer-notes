(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{"./manual/Docker/Docker-Quick-Start.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return i});var t=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),c={},o="wrapper";function i(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(r.b)(o,Object.assign({},c,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"docker-quickstart"},"Docker Quickstart"),Object(r.b)("hr",null),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#docker-quickstart"}),"Docker Quickstart"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#basic-commands"}),"Basic commands")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#running-the-whalesay-container"}),"Running the whalesay container")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#inspecting-docker-images"}),"Inspecting Docker images")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#container-lifecycle"}),"Container Lifecycle")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#image-and-container-management"}),"Image and Container Management")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#redirection---ports-and-volumes"}),"Redirection - Ports and Volumes")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"#the-dockerfile"}),"The Dockerfile"))))),Object(r.b)("h2",{id:"basic-commands"},"Basic commands"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container, image or task\n    kill      Kill one or more running containers\n    load      Load an image from a tar archive or STDIN\n    login     Log in to a Docker registry.\n    logout    Log out from a Docker registry.\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    node      Manage Docker Swarm nodes\n    pause     Pause all processes within one or more containers\n    port      List port mappings or a specific mapping for the container\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\n    search    Search the Docker Hub for images\n    service   Manage Docker services\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop one or more running containers\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within one or more containers\n    update    Update configuration of one or more containers\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code\n")),Object(r.b)("h2",{id:"running-the-whalesay-container"},"Running the whalesay container"),Object(r.b)("p",null,"Pull the image, run the image!"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),'docker pull docker/whalesay:latest\ndocker images\n\n### lists the images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\n\ndocker run docker/whalesay cowsay ayyyyyy mate\n ___________\n< ayyy mate >\n -----------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /""""""""""""""""___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/\n')),Object(r.b)("h2",{id:"inspecting-docker-images"},"Inspecting Docker images"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),'docker inspect whalesay\n[\n    {\n        "Id": "sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4",\n        "RepoTags": [\n            "docker/whalesay:latest"\n        ],\n        "RepoDigests": [\n            "docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b"\n        ],\n        "Parent": "",\n        "Comment": "",\n        "Created": "2015-05-25T22:04:23.303454458Z",\n        "Container": "5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f",\n        "ContainerConfig": {\n            "Hostname": "9ec8c01a6a48",\n            "Domainname": "",\n            "User": "",\n            "AttachStdin": false,\n            "AttachStdout": false,\n            "AttachStderr": false,\n            "Tty": false,\n            "OpenStdin": false,\n            "StdinOnce": false,\n            "Env": [\n                "PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n            ],\n            "Cmd": [\n                "/bin/sh",\n                "-c",\n                "#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n            ],\n            "Image": "5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee",\n            "Volumes": null,\n            "WorkingDir": "/cowsay",\n            "Entrypoint": null,\n            "OnBuild": [],\n            "Labels": {}\n        },\n        "DockerVersion": "1.6.0",\n        "Author": "",\n        "Config": {\n            "Hostname": "9ec8c01a6a48",\n            "Domainname": "",\n            "User": "",\n            "AttachStdin": false,\n            "AttachStdout": false,\n            "AttachStderr": false,\n            "Tty": false,\n            "OpenStdin": false,\n            "StdinOnce": false,\n            "Env": [\n                "PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n            ],\n            "Cmd": [\n                "/bin/bash"\n            ],\n            "Image": "5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee",\n            "Volumes": null,\n            "WorkingDir": "/cowsay",\n            "Entrypoint": null,\n            "OnBuild": [],\n            "Labels": {}\n        },\n        "Architecture": "amd64",\n        "Os": "linux",\n        "Size": 247049019,\n        "VirtualSize": 247049019,\n        "GraphDriver": {\n            "Name": "aufs",\n            "Data": null\n        },\n        "RootFS": {\n            "Type": "layers",\n            "Layers": [\n                "sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a",\n                "sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd",\n                "sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31",\n                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",\n                "sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d",\n                "sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca",\n                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",\n                "sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d",\n                "sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f",\n                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"\n            ]\n        }\n    }\n]\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"container-lifecycle"},"Container Lifecycle"),Object(r.b)("p",null,"There is a lifecycle associated with starting, stopping, restarting etc."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"docker run -d --name LifeCycle1 nginx:latest\ndocker attach LifeCycle1\n\n// exec if the container started indirectly\ndocker exec -it LifeCycle1 /bin/bash\n")),Object(r.b)("p",null,"We don't have to attach to the container with the ",Object(r.b)("inlineCode",{parentName:"p"},"exec")," command. We can just connect to is just to execute a command - like a ",Object(r.b)("inlineCode",{parentName:"p"},"ssh")," prompt!"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"image-and-container-management"},"Image and Container Management"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"# remove the image\ndocker rmi image-name\n\n# remove all containers\ndocker rm `docker ps -a -q`\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"redirection---ports-and-volumes"},"Redirection - Ports and Volumes"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Ports")),Object(r.b)("p",null,"Ports are exposed in a container so that you can connect via the container IP but must be exposed via the ",Object(r.b)("inlineCode",{parentName:"p"},"dockerfile"),"."),Object(r.b)("p",null,"We can direct the port for a http container to a port on the underlying host."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"docker run -d -P --name:webserver nginx:latest")),Object(r.b)("p",null,"To find all the address redirection, we can write ",Object(r.b)("inlineCode",{parentName:"p"},"docker port WebServer1 $CONTAINERPORT")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"okeeffe_d@dok ~$ docker port WebServer1 $CONTAINERPORT\n\n443/tcp -> 0.0.0.0:32768\n80/tcp -> 0.0.0.0:32769\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"docker run -d -p 8080:80 --name=webserver nginx:latest")," is also useful for a variety of reasons."),Object(r.b)("p",null,"We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing."),Object(r.b)("p",null,"No we can pass stuff to the host without having to copy it."),Object(r.b)("p",null,"This means we can mount underlying directories."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data\n")),Object(r.b)("p",null,"Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration."),Object(r.b)("p",null,"// 15 min mark"),Object(r.b)("p",null,"If we create a basic file and create a HTML page, we could then run"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\n\n// this will mount the file and mount it to that directory. We can push multiple mounts!\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"the-dockerfile"},"The Dockerfile"),Object(r.b)("p",null,"Very few times will you start with a generic list of packages for a base image and creating it from nothing."),Object(r.b)("p",null,"You'll base on it on things like ",Object(r.b)("inlineCode",{parentName:"p"},"debian, ubuntu")," etc."),Object(r.b)("p",null,"The Dockerfile is an easy to read, easy to write script to build an image following instructions."),Object(r.b)("p",null,"You can name it whatever, but will probably just be stored in ",Object(r.b)("inlineCode",{parentName:"p"},"Dockerfile")," anyway."),Object(r.b)("p",null,"Note, things will cache if they've already been done!"),Object(r.b)("p",null,"Example Dockerfile:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n")),Object(r.b)("p",null,"Then docker run!"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"docker run -it dockerhubid/myapache:latest /bin/bash\n\n> echo MYVALUE\nmy-value\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Exposing or preventing exposing ports")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),'# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n\nEXPOSE 80\nEXPOSE 22\n\nCMD ["/usr/sbin/apache2tl","-D","FOREGROUND"]\n')),Object(r.b)("p",null,"Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!"))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Docker/Docker-Quick-Start.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-docker-docker-quick-start.101a1afd2417ec7a4a77.js.map