{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Bridge-Pattern.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"gYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kBADR,kBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,m+BAsDLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,s/BA6DLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,omDAiETX,EAAWY,gBAAiB","file":"static/js/manual-design-patterns-bridge-pattern.9ad4910c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"bridge-pattern\"\n    }}>{`Bridge Pattern`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface Executive {\n  operate(): void;\n}\n\nclass Pilot implements Executive {\n  operate(): void {\n    console.log('Fly');\n  }\n}\n\nclass Soldier implements Executive {\n  operate(): void {\n    console.log('Shoot');\n  }\n}\n\nclass Commander {\n  executeObject: Executive;\n\n  constructor(executeObject: Executive) {\n    this.executeObject = executeObject;\n  }\n\n  order(): void {\n    this.executeObject.operate();\n  }\n}\n\nclass AirForceCommander extends Commander {\n  order(): void {\n    console.log('Air Force commander make order');\n    // extra logics here\n    super.order();\n  }\n}\n\nclass SpecialForceCommander extends Commander {\n  order(): void {\n    console.log('Special Force commander make order');\n    // extra logics here\n    super.order();\n  }\n}\n\n(function main() {\n  const commanderA = new AirForceCommander(new Pilot());\n  const commanderB = new SpecialForceCommander(new Soldier());\n\n  commanderA.order();\n  commanderB.order();\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"c-example\"\n    }}>{`C# Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// Helps in providing truly decoupled architecture\npublic interface IBridge\n{\n    void Function1();\n    void Function2();\n}\n\npublic class Bridge1 : IBridge\n{\n    public void Function1()\n    {\n        Console.WriteLine(\"Bridge1.Function1\");\n    }\n\n    public void Function2()\n    {\n        Console.WriteLine(\"Bridge1.Function2\");\n    }\n}\n\npublic class Bridge2 : IBridge\n{\n    public void Function1()\n    {\n        Console.WriteLine(\"Bridge2.Function1\");\n    }\n\n    public void Function2()\n    {\n        Console.WriteLine(\"Bridge2.Function2\");\n    }\n}\n\npublic interface IAbstractBridge\n{\n    void CallMethod1();\n    void CallMethod2();\n}\n\npublic class AbstractBridge : IAbstractBridge\n{\n    public IBridge bridge;\n\n    public AbstractBridge(IBridge bridge)\n    {\n        this.bridge = bridge;\n    }\n\n    public void CallMethod1()\n    {\n        this.bridge.Function1();\n    }\n\n    public void CallMethod2()\n    {\n        this.bridge.Function2();\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"java-example\"\n    }}>{`Java Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Logger has two implementations: info and warning\ninterface Logger {\n  public void log(String message);\n\n  static Logger info() {\n    return message -> System.out.println(\"info: \" + message);\n  }\n  static Logger warning() {\n    return message -> System.out.println(\"warning: \" + message);\n  }\n}\n\nabstract class AbstractAccount {\n  private Logger logger = Logger.info();\n\n  public void setLogger(Logger logger) {\n    this.logger = logger;\n  }\n\n  // the logging part is delegated to the Logger implementation\n  protected void operate(String message, boolean result) {\n    logger.log(message + \" result \" + result);\n  }\n}\n\nclass SimpleAccount extends AbstractAccount {\n  private int balance;\n\n  public SimpleAccount(int balance) {\n    this.balance = balance;\n  }\n\n  public boolean isBalanceLow() {\n    return balance < 50;\n  }\n\n  public void withdraw(int amount) {\n    boolean shouldPerform = balance >= amount;\n    if (shouldPerform) {\n      balance -= amount;\n    }\n    operate(\"withdraw \" + amount, shouldPerform);\n  }\n}\n\npublic class BridgeDemo {\n  public static void main(String[] args) {\n    SimpleAccount account = new SimpleAccount(100);\n    account.withdraw(75);\n\n    if (account.isBalanceLow()) {\n      // you can also change the Logger implementation at runtime\n      account.setLogger(Logger.warning());\n    }\n\n    account.withdraw(10);\n    account.withdraw(100);\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}