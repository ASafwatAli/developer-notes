(window.webpackJsonp=window.webpackJsonp||[]).push([[528],{"./manual/Zeit-Now/Typescript-Github-Example.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},s="wrapper";function r(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)(s,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"typescript--github-example"},"TypeScript + Github Example"),Object(a.b)("p",null,"In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed."),Object(a.b)("h2",{id:"setting-up"},"Setting up"),Object(a.b)("p",null,"Initialise a project in a folder ",Object(a.b)("inlineCode",{parentName:"p"},"yarn init -y"),"."),Object(a.b)("p",null,"Prerequisites:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n")),Object(a.b)("h2",{id:"api-setup"},"API Setup"),Object(a.b)("p",null,"Add the following to ",Object(a.b)("inlineCode",{parentName:"p"},"api/example.ts"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n")),Object(a.b)("h2",{id:"tsconfig"},"TSConfig"),Object(a.b)("p",null,"Add this is tsconfig.json (taken from ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json"}),"this Zeit Now example"),"):"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "target": "es5",\n    "module": "commonjs",\n    "lib": ["es2015"],\n    "strict": true,\n    "noImplicitAny": true,\n    "strictNullChecks": true,\n    "strictFunctionTypes": true,\n    "strictBindCallApply": true,\n    "strictPropertyInitialization": true,\n    "noImplicitThis": true,\n    "alwaysStrict": true,\n    "esModuleInterop": true\n  }\n}\n')),Object(a.b)("h2",{id:"git-ignore"},"Git Ignore"),Object(a.b)("p",null,"Ignore npm modules + .env where we will store the local key in our ",Object(a.b)("inlineCode",{parentName:"p"},".gitignore")," file:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"node_modules/\n.env\n")),Object(a.b)("h2",{id:"dotenv"},"Dotenv"),Object(a.b)("p",null,"In the ",Object(a.b)("inlineCode",{parentName:"p"},".env")," file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API."),Object(a.b)("p",null,"If you need to create one, ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"}),"follow this article from the GitHub site"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"GITHUB_TOKEN=TOKEN_VALUE\n")),Object(a.b)("h2",{id:"nowjson"},"Now.json"),Object(a.b)("p",null,"We will use ",Object(a.b)("inlineCode",{parentName:"p"},"now.json")," to help define some env variables."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-github"}),'{\n  "name": "project-name",\n  "version": 2,\n  "env": {\n    "GITHUB_TOKEN": "@github-token"\n  }\n}\n')),Object(a.b)("h2",{id:"test-json"},"Test JSON"),Object(a.b)("p",null,"For what we will upload, add this to ",Object(a.b)("inlineCode",{parentName:"p"},"test.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "hello": "world"\n}\n')),Object(a.b)("h2",{id:"local-development"},"Local Development"),Object(a.b)("p",null,"Now we can develop locally. Run ",Object(a.b)("inlineCode",{parentName:"p"},"now dev")," to get localhost running on port 3000."),Object(a.b)("p",null,"Once the port is running, we can ping ",Object(a.b)("inlineCode",{parentName:"p"},"http://localhost:3000/api/example")," and pass some params to generate a new repo and add some JSON."),Object(a.b)("p",null,"In this example, I am using ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://httpie.org/doc#json"}),"HTTPie")," and running ",Object(a.b)("inlineCode",{parentName:"p"},"http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json")," on the command line will lead to the creation of a new private repo ",Object(a.b)("inlineCode",{parentName:"p"},"temp-zeit-a")," with content from the ",Object(a.b)("inlineCode",{parentName:"p"},"test.json")," local file saved into the ",Object(a.b)("inlineCode",{parentName:"p"},"hello.json")," file on the repo."),Object(a.b)("p",null,"Hooray!"),Object(a.b)("h2",{id:"production"},"Production"),Object(a.b)("p",null,"To deploy to production, we simply run ",Object(a.b)("inlineCode",{parentName:"p"},"now"),"."),Object(a.b)("h2",{id:"moving-forward"},"Moving forward"),Object(a.b)("p",null,"Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues."))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Zeit-Now/Typescript-Github-Example.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-zeit-now-typescript-github-example.101a1afd2417ec7a4a77.js.map