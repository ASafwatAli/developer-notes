{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React/Lead-Debouncing-With-Hooks.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"kYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,8BADR,8BAGAL,OAAAE,EAAA,EAAAF,CAAA,0BAAqBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAArB,KACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,okEA2ETX,EAAWY,gBAAiB","file":"static/js/manual-react-lead-debouncing-with-hooks.79f42847.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"lead-debouncing-with-hooks\"\n    }}>{`Lead Debouncing with Hooks`}</h1>\n    <p>{`Example using `}<inlineCode parentName=\"p\">{`Lodash`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from \"react\"\nimport { useState, useEffect, useRef } from \"react\"\nimport { debounce } from \"lodash\"\n\nconst ExampleComponent = ({initTeam}) => {\n  const [selectedTeam, setSelectedTeam] = useState<Option | undefined>(initTeam)\n  \n  // this is to be used to set a default value\n  const updateSelect = (value: Option) => {\n    setSelectedTeam(value)\n    setFields(fields => ({\n      ...fields,\n      // @ts-ignore\n      teamId: value.value,\n      owners: initOwners\n    }))\n  }\n\n  // Fire immediate use of useEffect for initTeam\n  // but then push off any other effects for the next 5s.\n  // This prevents the deletion of an owner being overriden\n  // when initTeam fires again during inital component mounting.\n  const throttleSelectedTeam = useRef(\n    debounce(\n      (initTeam: Option) => {\n        updateSelect(initTeam)\n      },\n      5000,\n      { leading: true, trailing: false }\n    )\n  )\n\n  // the throttle will debounce changes through useEffect\n  useEffect(() => {\n    if (!disabled && initTeam) {\n      throttleSelectedTeam.current(initTeam)\n    }\n  }, [initTeam])\n\n  // the example component is really here to display what the end usecase was\n  return (<>\n    <UserSearchField\n      owners={owners}\n      disabled={selectedTeam === null ? true : false}\n      teamId={selectedTeam ? selectedTeam.value : \"\"}\n      setFields={(user: User) => {\n        setFields(fields => ({\n          ...fields,\n          owners: [...fields.owners, user]\n        }))\n      }}\n    />\n    <div>\n      {owners.map(user => (\n        <UserCard\n          key={user.id}\n          disabled={disabled}\n          user={user}\n          onRemove={evt => {\n            setFields(fields => ({\n              ...fields,\n              owners: fields.owners.filter(o => o.id !== user.id)\n            }))\n          }}\n        />\n      ))}\n    </div>\n  </>)\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}