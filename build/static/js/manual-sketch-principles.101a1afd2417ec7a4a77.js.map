{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Sketch/Principles.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent"],"mappings":"mXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,sBADR,sBAGAL,OAAAE,EAAA,EAAAF,CAAA,+DACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,sBADR,sBAGAL,OAAAE,EAAA,EAAAF,CAAA,sEAAiEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,wBAAjE,sGAAwON,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,KAAxO,iDACAN,OAAAE,EAAA,EAAAF,CAAA,8BAAyBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,KAAzB,8DACAN,OAAAE,EAAA,EAAAF,CAAA,oFACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wBADR,wBAGAL,OAAAE,EAAA,EAAAF,CAAA,+KACAA,OAAAE,EAAA,EAAAF,CAAA,8UAIJJ,EAAWW,gBAAiB","file":"static/js/manual-sketch-principles.e01dfbb8.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h1>\n    <h2 {...{\n      \"id\": \"organising-symbols\"\n    }}>{`Organising symbols`}</h2>\n    <p>{`Use the symbol organiser to auto-organise symbols.`}</p>\n    <h2 {...{\n      \"id\": \"naming-conventions\"\n    }}>{`Naming conventions`}</h2>\n    <p>{`When it comes to naming principles, use the convention of `}<inlineCode parentName=\"p\">{`Button/Primary/Light`}</inlineCode>{` with aims that the first word can be parsed by sketch up for type and the following elements of a `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` split array can be use to denote classnames.`}</p>\n    <p>{`Anything split by `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` itself becomes a classname when converted using sketchup.`}</p>\n    <p>{`When naming pages and components, just use camel casing with no splits.`}</p>\n    <h2 {...{\n      \"id\": \"creating-new-symbols\"\n    }}>{`Creating new symbols`}</h2>\n    <p>{`For the sake of creating base components, just use the basic colours and treat it like a wireframe. These components can then take on the naming convention above.`}</p>\n    <p>{`When designing a new set of components, then detach the symbol in the page workflow. From here, you make create it as a new symbol as required.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}