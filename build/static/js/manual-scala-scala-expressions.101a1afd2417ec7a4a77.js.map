{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Scala/Scala-Expressions.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mCADR,mCAGAL,OAAAE,EAAA,EAAAF,CAAA,6EAAwEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAAxE,kEACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,gEAA2DA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAA3D,oCAAgJN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAAhJ,mFACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,eADR,eAGAL,OAAAE,EAAA,EAAAF,CAAA,4GACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,sIAYLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4CADR,4CAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,0PAsBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,gnBAoBTX,EAAWY,gBAAiB","file":"static/js/manual-scala-scala-expressions.a4c3e50d.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"scala-expressions-and-functions\"\n    }}>{`Scala Expressions and Functions`}</h1>\n    <p>{`As opposed to instructions, everything in Scala is considered an `}<inlineCode parentName=\"p\">{`expression`}</inlineCode>{`. Even if/else statements themselves in Scala are expressions.`}</p>\n    <h2 {...{\n      \"id\": \"for-loops\"\n    }}>{`For Loops`}</h2>\n    <p>{`For loops are not recommended in Scala. They return `}<inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` which in itself is equivalent to`}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. This is the case for side effects - an intergral part of understanding Scala.`}</p>\n    <h2 {...{\n      \"id\": \"code-blocks\"\n    }}>{`Code Blocks`}</h2>\n    <p>{`Note that if you write a code block, the last value in the code block is returned as the value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`val codeBlock = {\n    val a = 1\n    val b = 2\n\n    if(a < b) \"hi\" else \"bye\"\n}\n\nprintln(codeBlock)\n// evaluates to \"hi\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples-of-expressions-and-side-effects\"\n    }}>{`Examples of Expressions and Side Effects`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`\"hello\" // type String\nprintln(\"hello\") // type Unit\n\n// type Boolean\nval a = {\n    2 < 3\n}\n\n// type Int value 10\nval b = {\n    if(a) 123 else 321\n    10\n}\n\n// c is of type Unit\nvar i = 0\nval c = while (i < 10) {\n    i += 1\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Functions extends App {\n    // this works because we know everything is an expression\n    def functionExample(a: String, b: Int): String = a + \" \" + b\n\n    def parameterlessFunc(): Int = 42\n    println(parameterlessFunc())\n    // also valid in Scala to call func\n    println(parameterlessFunc)\n\n    def repeterFunc(a: String, n: Int): String  = {\n        if (n == 1) a\n        else a + repeterFunc(a, n-1)\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}