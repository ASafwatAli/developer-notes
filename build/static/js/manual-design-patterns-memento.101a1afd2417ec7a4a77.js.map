{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Memento.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,yJACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kGACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,qEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,sDAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,4mEAuGTX,EAAWY,gBAAiB","file":"static/js/manual-design-patterns-memento.98fc98f9.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"memento\"\n    }}>{`Memento`}</h1>\n    <p>{`Capture and externalise an object's internal state allowing the object to be restored to this state later (without violating encapsulation).`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Memento (stores internal state of Originator object - may store as much or little as possible)`}</li>\n      <li parentName=\"ul\">{`Originator (creates memento containing snapshot of current state)`}</li>\n      <li parentName=\"ul\">{`Caretaker (responsible for memento's safekeeping)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class State {\n  private _value: String;\n\n  constructor(value) {\n    this._value = value;\n  }\n\n  public set value(newValue: String) {\n    this._value = newValue;\n  }\n\n  public get value() {\n    return this._value;\n  }\n}\n\ninterface StateInterface {\n  state: State;\n}\n\nclass Memento implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    this._state = state;\n  }\n\n  public set state(newState: State) {\n    this._state = newState;\n  }\n\n  public get state() {\n    return this._state;\n  }\n}\n\nclass Originator implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    console.log(\\`\"\\${state.value}\"\\`);\n    this._state = state;\n  }\n\n  public set state(state: State) {\n    console.log(state.value);\n    this._state = state;\n  }\n\n  public get state() {\n    return this._state;\n  }\n\n  public createMemento() {\n    console.log(\\`create \"\\${this._state.value}\" memento\\`);\n    return new Memento(this._state);\n  }\n\n  public restoreMemento(memento: Memento) {\n    console.log(\\`restore \"\\${memento.state.value}\"\\`);\n    this._state = memento.state;\n  }\n}\n\nclass CareTaker {\n  private _memento: Memento;\n\n  public set memento(memento: Memento) {\n    // memento saved\n    this._memento = memento;\n  }\n\n  public get memento() {\n    return this._memento;\n  }\n}\n\n(function main() {\n  // Save check point\n  const oldState = new State('check point');\n  const originator = new Originator(oldState);\n  const careTaker = new CareTaker();\n  careTaker.memento = originator.createMemento();\n\n  // Player dies\n  const currentState = new State('die');\n  originator.state = currentState;\n\n  // Player reset to check point\n  originator.restoreMemento(careTaker.memento);\n\n  // Player gain medel\n  const medalState = new State('get medal');\n  originator.state = medalState;\n  // Save\n  careTaker.memento = originator.createMemento();\n})();\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}