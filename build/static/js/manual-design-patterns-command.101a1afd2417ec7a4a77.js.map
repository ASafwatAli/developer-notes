{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Command.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,kBACEA,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,cAAd,yKAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,eADR,eAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wBAA6CN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,YAA7C,gCAAmIN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,YAAnI,kIACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,gCAAqDN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,aAArD,iBAA6HN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAA7H,YACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,iLACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,qBAA0CN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAA1C,gBAA+GN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,YAA/G,wCAA6MN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAA7M,gGAAkWN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAlW,kBAAyaN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAza,aAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,uBAGAL,OAAAE,EAAA,EAAAF,CAAA,0EAAqEA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACvFC,KAAQ,4FADyD,yBAArE,2CAGAP,OAAAE,EAAA,EAAAF,CAAA,6CAAwCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAAxC,+EACAN,OAAAE,EAAA,EAAAF,CAAA,4MACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,wBADZ,2/EA0HLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,4FADQ,qCAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,kDADQ,gNAO1BX,EAAWa,gBAAiB","file":"static/js/manual-design-patterns-command.2ebc0880.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"command\"\n    }}>{`Command`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. -- Wikipedia`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"terminology\"\n    }}>{`Terminology`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Command: Knows about `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{` and invokes a method of the `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{`. Values for params of the receiver method are stored in the command. Values for receiver method params are stored in command.`}</li>\n      <li parentName=\"ul\">{`Receiver: Does the work when `}<inlineCode parentName=\"li\">{`execute()`}</inlineCode>{` is called in `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ul\">{`Invoker: Knows how to execute a command and optionally does bookkeeping about command execution. Does not know anything about a concrete command, only the command interface.`}</li>\n      <li parentName=\"ul\">{`Client: Holds the `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` objects and `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{` objects and assigns commands to the `}<inlineCode parentName=\"li\">{`invoker`}</inlineCode>{`. The client is also responsible for executing which commands at which points. It passes the `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` object to the `}<inlineCode parentName=\"li\">{`invoker`}</inlineCode>{` object.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"github-repo-example\"\n    }}>{`GitHub Repo Example`}</h2>\n    <p>{`This example is an extension to some code taken directly from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts\"\n      }}>{`gztchan's GitHub repo`}</a>{` as it gives a nice and simple example.`}</p>\n    <p>{`An extension made it to create a `}<inlineCode parentName=\"p\">{`FireCommand`}</inlineCode>{` to emulate how something like the Command Design could be used for a game.`}</p>\n    <p>{`This simpler example focuses on the main participants: Handler (command interface), ConcreteHandler (commands), CommandReceiver (receiver), Invoker (invoker class), Client (invoker instance).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Receiver\ninterface Receive {\n  action(): void;\n}\n\nclass CommandReceiver implements Receive {\n  action(): void {\n    console.log('Receiver takes action');\n  }\n}\n\n// Command\ninterface Command {\n  execute(): void;\n}\n\n// ConcreteCommands\nclass LaunchCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Launch!!!');\n    this.receiver.action();\n  }\n}\n\nclass FireCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Fire!');\n    this.receiver.action();\n  }\n}\n\nclass StopCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Stop!!!');\n    this.receiver.action();\n  }\n}\n\n// Invoker\ninterface Invoke {\n  runCommand(command?: Command): void;\n}\n\nclass Invoker implements Invoke {\n  private commands: Command[];\n\n  constructor() {\n    this.commands = [];\n  }\n\n  addCommand(command: Command) {\n    this.commands.push(command);\n  }\n\n  runCommand(command?: Command) {\n    if (command) {\n      this.commands.push(command);\n    }\n    const command = this.commands.shift();\n    command.execute();\n  }\n}\n\n(function main() {\n  // 1. We create a receiver\n  const receiver = new CommandReceiver();\n\n  // 2. We create commands that implement the base command interface and pass the receiver object to the command\n  const launch = new LaunchCommand(receiver);\n  const fire = new FireCommand(receiver);\n  const stop = new StopCommand(receiver);\n\n  // 3. We create the invoker client to add commands to\n  const invoker = new Invoker();\n\n  // Example of adding and then running a command\n  invoker.addCommand(launch);\n  invoker.runCommand();\n\n  invoker.addCommand(fire);\n  invoker.runCommand();\n\n  invoker.addCommand(stop);\n  invoker.runCommand();\n\n  // Example of adding multiple commands and then running multiple executions\n  invoker.addCommand(launch);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(stop);\n\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts\"\n        }}>{`Command Design Pattern on Github`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Command_pattern\"\n        }}>{`Wikipedia Resource`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}