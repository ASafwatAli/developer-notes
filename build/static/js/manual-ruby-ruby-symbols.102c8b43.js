(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{"./manual/Ruby/Ruby-Symbols.md":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return l});var t=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},b="wrapper";function l(e){var a=e.components,n=Object(t.a)(e,["components"]);return Object(s.b)(b,Object.assign({},o,n,{components:a,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"ruby-symbols-colon-variables"},"Ruby Symbols (Colon Variables)"),Object(s.b)("h2",{id:"tldr"},"tl;dr"),Object(s.b)("p",null,"A ruby symbol is like an Enum constant in Java or C++."),Object(s.b)("p",null,"Symbols are immutable. Their value remains constant during the entirety of the program. They never appear on the left side of an assignment. You'll never see this:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),':myname = "steve"\n\n# Symbols ARE used like this:\nmystring = :steveT\nmystring = :steveT.to_s\nmyint = :steveT.to_i\nclass Example\n  attr_reader :steveT\nend\n')),Object(s.b)("h2",{id:"more-info"},"More info"),Object(s.b)("p",null,"Colon variable refers to :abc type variables you might have seen in Ruby."),Object(s.b)("p",null,"They are called Ruby symbols."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"A Ruby symbol is not a variable because it cannot be assigned a value."),Object(s.b)("li",{parentName:"ul"},"It is not a reference to another variable nor is it a pointer to a memory location."),Object(s.b)("li",{parentName:"ul"},"Has a value and whenever the name of the symbol is same, its value is the same.")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),'# It is trivial to assign a value to a variable.\nabc = "1"\n=> "1"\n\n# But a symbol cannot be assigned any value.\n:a = "1"\n# SyntaxError: A symbol cannot be assigned a value\n\n# Can use a variable as a map-key (You know already)\nm = {abc => "1"}\n=> {"1"=>"1"}\n\n# Can use a string as a map-key (You know already)\nm = {"def" => "1"}\n=> {"def"=>"1"}\n\n# Can also use a symbol as a map-key (Most common use case)\nm = {:a => "1"}\n=> {:a=>"1"}\n\n# Can use same symbol as key in another map\nm2 = {:a => "2"}\n=> {:a=>"2"}\n\n# And it won\'t affect the previous map.\nm\n=> {:a=>"1"}\n\nm2\n=> {:a=>"2"}\n')))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Ruby/Ruby-Symbols.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-ruby-ruby-symbols.101a1afd2417ec7a4a77.js.map