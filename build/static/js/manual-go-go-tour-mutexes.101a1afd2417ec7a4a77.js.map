{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Tour-Mutexes.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"oXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mBADR,mBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,kFACAA,OAAAE,EAAA,EAAAF,CAAA,8JACAA,OAAAE,EAAA,EAAAF,CAAA,iIACAA,OAAAE,EAAA,EAAAF,CAAA,iEAA4DA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAA5D,yBACAN,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,QACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,WAEFN,OAAAE,EAAA,EAAAF,CAAA,8GAAyGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAAzG,QAAkKN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAlK,gCACAN,OAAAE,EAAA,EAAAF,CAAA,4BAAuBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAvB,mDAA4HN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAA5H,YACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,uBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,imCA+CTX,EAAWY,gBAAiB","file":"static/js/manual-go-go-tour-mutexes.fa636377.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"go-tour-mutexes\"\n    }}>{`Go Tour Mutexes`}</h1>\n    <h2 {...{\n      \"id\": \"syncmutex\"\n    }}>{`sync.Mutex`}</h2>\n    <p>{`We've seen how channels are great for communication among goroutines.`}</p>\n    <p>{`But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?`}</p>\n    <p>{`This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.`}</p>\n    <p>{`Go's standard library provides mutual exclusion with `}<inlineCode parentName=\"p\">{`sync.Mutex`}</inlineCode>{` and its two methods:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Lock`}</li>\n      <li parentName=\"ul\">{`Unlock`}</li>\n    </ul>\n    <p>{`We can define a block of code to be executed in mutual exclusion by surrounding it with a call to `}<inlineCode parentName=\"p\">{`Lock`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Unlock`}</inlineCode>{` as shown on the Inc method.`}</p>\n    <p>{`We can also use `}<inlineCode parentName=\"p\">{`defer`}</inlineCode>{` to ensure the mutex will be unlocked as in the `}<inlineCode parentName=\"p\">{`Value`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"basic-mutex-example\"\n    }}>{`Basic Mutex Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    fmt.Println(c.v) // map[]\n\n    for i := 0; i < 1000; i++ {\n        go c.Inc(\"somekey\")\n    }\n\n    time.Sleep(time.Second) // delay during async goroutine\n    fmt.Println(c.Value(\"somekey\")) // 1000\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}