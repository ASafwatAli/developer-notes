(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{"./manual/Algorithms/String-Scramble.md":function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return i});var n=r("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(r("./node_modules/react/index.js"),r("./node_modules/@mdx-js/react/dist/index.es.js")),s={},l="wrapper";function i(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(a.b)(l,Object.assign({},s,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"string-scramble"},"String Scramble"),Object(a.b)("h2",{id:"resources"},"Resources"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://www.coderbyte.com/editor/String%20Scramble:JavaScript"}),"CoderByte"))),Object(a.b)("h2",{id:"question"},"Question"),Object(a.b)("p",null,'Have the function StringScramble(str1,str2) take both parameters being passed and return the string true if a portion of str1 characters can be rearranged to match str2, otherwise return the string false. For example: if str1 is "rkqodlw" and str2 is "world" the output should return true. Punctuation and symbols will not be entered with the parameters.'),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'Input: "cdore" & str2= "coder"\nOutput: true\n')),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'Input: "h3llko" & str2 = "hello"\nOutput: false\n')),Object(a.b)("h2",{id:"answer"},"Answer"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"function StringScramble(str1, str2) {\n  // for each element of str2, remove the punctuation and symbols\n  // this is more for robustness\n  let filteredStr1 = str1.replace(/[^0-9a-zA-Z]/gi, '');\n  let filteredStr2 = str2.replace(/[^0-9a-zA-Z]/gi, '');\n\n  for (let i = 0; i < filteredStr2.length; i++) {\n    // replace element if it exists in filteredStr1\n    if (filteredStr1.indexOf(filteredStr2[i]) === -1) {\n      return false;\n    }\n\n    filteredStr1 = filteredStr1.replace(filteredStr2[i], '');\n  }\n\n  return true;\n}\n")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Algorithms/String-Scramble.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-algorithms-string-scramble.101a1afd2417ec7a4a77.js.map