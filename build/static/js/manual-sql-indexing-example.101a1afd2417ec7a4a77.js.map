{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/SQL/Indexing-Example.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"sXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oBADR,oBAGAL,OAAAE,EAAA,EAAAF,CAAA,qDACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,+BADQ,eAItBP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oBADR,oBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,iBADZ,kfAsBLR,OAAAE,EAAA,EAAAF,CAAA,oCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,iBADZ,mrBAeLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,iBADZ,kfAsBLR,OAAAE,EAAA,EAAAF,CAAA,oCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,iBADZ,krBAcTZ,EAAWa,gBAAiB","file":"static/js/manual-sql-indexing-example.949a8fce.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"indexing-example\"\n    }}>{`Indexing Example`}</h1>\n    <p>{`The following is done on PostgresSQL 12.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.db-fiddle.com/\"\n        }}>{`DB Fiddle`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"without-indexing\"\n    }}>{`Without Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Merge Join (cost=317.01..711.38 rows=25538 width=16) (actual time=0.050..0.052 rows=3 loops=1)\nMerge Cond: (test.id = test_two.id)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.029..0.030 rows=3 loops=1)\nSort Key: test.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.005..0.005 rows=3 loops=1)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.018..0.018 rows=3 loops=1)\nSort Key: test_two.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test_two (cost=0.00..32.60 rows=2260 width=8) (actual time=0.006..0.006 rows=3 loops=1)\nPlanning Time: 0.301 ms\nExecution Time: 0.132 ms\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"with-indexing\"\n    }}>{`With Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Hash Join (cost=1.07..42.48 rows=34 width=16) (actual time=0.058..0.059 rows=3 loops=1)\nHash Cond: (test.id = test_two.id)\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.003..0.004 rows=3 loops=1)\n-> Hash (cost=1.03..1.03 rows=3 width=8) (actual time=0.011..0.011 rows=3 loops=1)\nBuckets: 1024 Batches: 1 Memory Usage: 9kB\n-> Seq Scan on test_two (cost=0.00..1.03 rows=3 width=8) (actual time=0.001..0.002 rows=3 loops=1)\nPlanning Time: 0.443 ms\nExecution Time: 0.121 ms\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}