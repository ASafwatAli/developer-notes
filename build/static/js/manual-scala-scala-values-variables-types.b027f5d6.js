(window.webpackJsonp=window.webpackJsonp||[]).push([[444],{"./manual/Scala/Scala-Values-Variables-Types.md":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return o});var t=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},s="wrapper";function o(e){var a=e.components,n=Object(t.a)(e,["components"]);return Object(l.b)(s,Object.assign({},i,n,{components:a,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"scala-values-variables-and-types"},"Scala Values, Variables and Types"),Object(l.b)("p",null,"The presumes you have Scala installed on the local system."),Object(l.b)("p",null,"This is just the basics on declaring variables in Scala and what data types are available."),Object(l.b)("h2",{id:"declaring-variables"},"Declaring Variables"),Object(l.b)("p",null,"Create file ",Object(l.b)("inlineCode",{parentName:"p"},"src/main/scala/Playground.scala")," with the following."),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x: Int = 42\n  println(x)\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"println")," will allow us to print to the console."),Object(l.b)("li",{parentName:"ul"},"Extending ",Object(l.b)("inlineCode",{parentName:"li"},"App")," allows us to run the file in the command line correctly."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"val")," are immutable - this is the Scala and functional programming way.")),Object(l.b)("p",null,"Say we remove the explicit type:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x = 42\n  println(x)\n}\n")),Object(l.b)("p",null,"This still works as the compiler infers the type to be an ",Object(l.b)("inlineCode",{parentName:"p"},"Int"),"."),Object(l.b)("h2",{id:"declaring-various-types"},"Declaring various types"),Object(l.b)("p",null,"Below we will run through a declaration of each type."),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x: Int = 42\n  val y: String = \"Hello, Friend!\"\n  val z: Boolean = true\n  val a: Char = 'a' // Note single quotes\n  val b: Short = 1234\n  val c: Long = 1234123412341234L // Note the L - similar to Java longs\n  val d: Float = 2.0f // Note the f - similar to Java\n  val e: Double = 2.14 // No marker needed\n\n  /* in order to mutate a variable */\n  var f: Int = 1\n  f = 2 // this is known as a side effect\n}\n")),Object(l.b)("p",null,"Note that the ",Object(l.b)("inlineCode",{parentName:"p"},"val")," and ",Object(l.b)("inlineCode",{parentName:"p"},"var")," keywords have different meanings. ",Object(l.b)("inlineCode",{parentName:"p"},"val")," is a constant and follows functional, immutable conventions while ",Object(l.b)("inlineCode",{parentName:"p"},"var")," is mutable and changing a mutable variable is known as a side effect."))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Scala/Scala-Values-Variables-Types.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-scala-scala-values-variables-types.101a1afd2417ec7a4a77.js.map