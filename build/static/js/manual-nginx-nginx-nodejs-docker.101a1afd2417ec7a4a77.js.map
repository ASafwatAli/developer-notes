{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nginx/Nginx-Nodejs-Docker.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent"],"mappings":"2XAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0CADR,0CAGAL,OAAAE,EAAA,EAAAF,CAAA,8CAAyCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAzC,QAAmGN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAnG,KACAN,OAAAE,EAAA,EAAAF,CAAA,6CAAwCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAAxC,+EACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,gOASLN,OAAAE,EAAA,EAAAF,CAAA,mCAA8BA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,+BAC9BN,OAAAE,EAAA,EAAAF,CAAA,4EAAuEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,uDAAvE,KACAN,OAAAE,EAAA,EAAAF,CAAA,0EAAqEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,oCAArE,6EACAN,OAAAE,EAAA,EAAAF,CAAA,mBAAcA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAd,0BAA0FN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,gBAA1F,uCACAN,OAAAE,EAAA,EAAAF,CAAA,kFACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,ucAeLN,OAAAE,EAAA,EAAAF,CAAA,iCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,uDAGLN,OAAAE,EAAA,EAAAF,CAAA,2CAAsCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,+BAAtC,KACAN,OAAAE,EAAA,EAAAF,CAAA,wBAAmBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,2EACnBN,OAAAE,EAAA,EAAAF,CAAA,0QAIJJ,EAAWW,gBAAiB","file":"static/js/manual-nginx-nginx-nodejs-docker.b345cae5.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"docker-container-with-nginx-and-nodejs\"\n    }}>{`Docker container with Nginx and Nodejs`}</h1>\n    <p>{`First create a directory for both `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`nodejs`}</inlineCode>{`.`}</p>\n    <p>{`Within the Node folder, create a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` that contains the following to expose an app running on a particular port:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM mhart/alpine-node\n# Pretend to copy the node app entry\n# from current folder\nCOPY index.js .\n# Expose the port that it is running on\nEXPOSE 3000\n# Run node - chances are you want pm2 here\nCMD node index.js\n`}</code></pre>\n    <p>{`Then we can build with `}<inlineCode parentName=\"p\">{`docker built -t foo/node .`}</inlineCode></p>\n    <p>{`After the build, run the container with port 3000 exposed using `}<inlineCode parentName=\"p\">{`docker run -d -p 3000:3000 --name node-app foo/node`}</inlineCode>{`.`}</p>\n    <p>{`First, we can test the Nginx latest container container using `}<inlineCode parentName=\"p\">{`docker run --rm -p 8000:80 nginx`}</inlineCode>{` to test out nginx:latest. This just removes the container after running.`}</p>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode>{` folder, we can create `}<inlineCode parentName=\"p\">{`default.conf`}</inlineCode>{` file to overwrite the initial one.`}</p>\n    <p>{`If settings are not defined below, Nginx will use the default values.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# config\nserver {\n    location / {\n        # host name first\n        proxy_set_header Host $host;\n        # extra headers for host IP address\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        # passing protocol used (http | https)\n        proxy_set_header X-Forwarded-Proto $scheme;\n        # where to proxy reqs to\n        proxy_pass http://app:3000;\n    }\n}\n`}</code></pre>\n    <p>{`For the Docker file.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM nginx\nCOPY default.cong /etc/nginx/conf.d/\n`}</code></pre>\n    <p>{`Then build out this file using `}<inlineCode parentName=\"p\">{`docker built -t foo/nginx .`}</inlineCode>{`.`}</p>\n    <p>{`Running it: `}<inlineCode parentName=\"p\">{`docker run -p 8000:80 --link node-app:app --name nginx-proxy foo/nginx`}</inlineCode></p>\n    <p>{`Since we expose 3000 for the node-app, we do not need to redo that.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}