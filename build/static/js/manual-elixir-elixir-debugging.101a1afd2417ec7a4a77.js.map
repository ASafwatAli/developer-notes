{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Elixir-Debugging.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,uBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,gBAAWA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAAX,OAAyEN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAzE,KACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,sMAeLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mBADR,mBAGAL,OAAAE,EAAA,EAAAF,CAAA,4CAAuCA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACzDE,KAAQ,2DAD2B,2DAGvCR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,uBAAkBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kCAAlB,sIACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,8RAqBLP,OAAAE,EAAA,EAAAF,CAAA,qBACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,mBADZ,6IAcLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,8BAAyBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAAzB,qCACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,2PAUTX,EAAWa,gBAAiB","file":"static/js/manual-elixir-elixir-debugging.a5213f23.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"debugging-in-elixir\"\n    }}>{`Debugging In Elixir`}</h1>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`IO.inspect`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`IEx.pry`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`# inspect\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# pry\ndef some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-resources\"\n    }}>{`Other Resources`}</h2>\n    <p>{`Other resources can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://elixir-lang.org/getting-started/debugging.html\"\n      }}>{`https://elixir-lang.org/getting-started/debugging.html`}</a></p>\n    <h2 {...{\n      \"id\": \"ioinspect2\"\n    }}>{`IO.Inspect/2`}</h2>\n    <p>{`What makes `}<inlineCode parentName=\"p\">{`IO.inspect(item, opts \\\\\\\\ [])`}</inlineCode>{` really useful in debugging is that it returns the item argument passed to it without affecting the behavior of the original code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`(1..10)\n|> IO.inspect\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect\n|> Enum.sum\n|> IO.inspect\n\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# 3\ndef some_fun(a, b, c) do\n  IO.inspect binding()\n  ...\nend\n`}</code></pre>\n    <p>{`Outputs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# 1\n1..10\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n110\n\n# 2\nbefore: [1, 2, 3]\nafter: [2, 4, 6]\n\n# 3\n[a: :foo, b: \"bar\", c: :baz]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iexpry0\"\n    }}>{`IEx.pry/0`}</h2>\n    <p>{`Similar to Ruby's `}<inlineCode parentName=\"p\">{`binding.pry`}</inlineCode>{`. Will open an interactive shell.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}