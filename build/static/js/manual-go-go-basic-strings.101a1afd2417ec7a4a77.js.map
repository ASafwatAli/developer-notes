{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Basic-Strings.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"qXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0BADR,0BAGAL,OAAAE,EAAA,EAAAF,CAAA,6FAAwFA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAxF,iBAA6JN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAA7J,iDACAN,OAAAE,EAAA,EAAAF,CAAA,qFACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,0EASLP,OAAAE,EAAA,EAAAF,CAAA,gCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,2DAQLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,ulBA4BLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,ydAsBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,2XAmBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,gcAqBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iCADR,iCAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,qoBA0BTX,EAAWY,gBAAiB","file":"static/js/manual-go-go-basic-strings.ff5d9a5e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-string-functions\"\n    }}>{`Basic String Functions`}</h1>\n    <p>{`This is a simple example of the implementation of some basic functions using the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` package. The `}<inlineCode parentName=\"p\">{`unicode`}</inlineCode>{` package is used for the example using runes.`}</p>\n    <p>{`If building a file, ensure to have the correct imports and package name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"strings\"\n    \"unicode\"\n)\n`}</code></pre>\n    <p>{`...and for testing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"testing\"\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compare\"\n    }}>{`Compare`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestStringsCompare(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World!\"\n    if CompareStrings(a, b) != 0 {\n        t.Fatalf(\"Expected 0\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, Worl!\"\n    if CompareStrings(a, b) != 1 {\n        t.Fatalf(\"Expected 1\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, World!!\"\n    if CompareStrings(a, b) != -1 {\n        t.Fatalf(\"Expected -1\")\n    }\n}\n\n// CompareStrings compares two string values and returns an int\nfunc CompareStrings(a string, b string) int {\n    return strings.Compare(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"contains\"\n    }}>{`Contains`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestContainsString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World\"\n    if ContainsString(a, b) != true {\n        t.Fatalf(\"Expected true\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hway\"\n    if ContainsString(a, b) != false {\n        t.Fatalf(\"Expected false\")\n    }\n}\n\n// ContainsString checks if string contains substr\nfunc ContainsString(s string, substr string) bool {\n    return strings.Contains(s, substr)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"join\"\n    }}>{`Join`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestJoinString(t *testing.T) {\n    a := []string{\"Hello\", \"World!\"}\n    b := \"Hello, World!\"\n\n    res := JoinString(a, \", \")\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// JoinString turns a string slice into a string\nfunc JoinString(str []string, de string) string {\n    return strings.Join(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split\"\n    }}>{`Split`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestSplitString(t *testing.T) {\n    a := \"Hello World!\"\n    b := []string{\"Hello\", \"World!\"}\n\n    res := SplitString(a, \" \")\n\n    for i, v := range res {\n        if v != b[i] {\n            t.Fatalf(\"Expected string %s but got %s\", v, b[i])\n        }\n    }\n}\n\n// SplitString turns a string in a []string with delimiter\nfunc SplitString(str string, de string) []string {\n    return strings.Split(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lower-case-a-string-using-map\"\n    }}>{`Lower case a string using Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestMapToLowerString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"hello, world!\"\n\n    res := MapOverStringToLower(a)\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// MapOverStringToLower uses map to lower case a string\nfunc MapOverStringToLower(str string) string {\n    toLower := func(r rune) rune {\n        return unicode.ToLower(r)\n    }\n\n    return strings.Map(toLower, str)\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}