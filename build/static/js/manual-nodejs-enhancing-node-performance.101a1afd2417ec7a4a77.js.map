{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Nodejs/Enhancing-Node-Performance.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","align","isMDXComponent"],"mappings":"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","file":"static/js/manual-nodejs-enhancing-node-performance.b9f6e76e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"enhancing-nodejs-performance\"\n    }}>{`Enhancing Nodejs Performance`}</h1>\n    <p>{`We're going to look at two ways to improve performance:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Using Node in 'Cluster' Mode`}</li>\n      <li parentName=\"ol\">{`Using Worker Threads`}</li>\n    </ol>\n    <p>{`The recommended approach would be using `}<inlineCode parentName=\"p\">{`cluster`}</inlineCode>{` mode, whereas worker threads are way more experimental.`}</p>\n    <h2 {...{\n      \"id\": \"test-app\"\n    }}>{`Test App`}</h2>\n    <p>{`We'll use a tiny express server for playing around.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst express = require('express');\nconst app = express();\n\nfunction doWork(duration) {\n  const start = new Date.now();\n  while (Date.now() - start < duration) {\n    // do nothing else\n  }\n}\n\napp.get('/', (req, res) => {\n  doWork(5000);\n  res.send('Hello');\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`This app will be continually updated to show the performance updates.`}</p>\n    <h2 {...{\n      \"id\": \"blocking-the-event-loop\"\n    }}>{`Blocking the Event Loop`}</h2>\n    <p>{`Keep in mind:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[Single Thread]\nRequest => Node Server => Response\n`}</code></pre>\n    <p>{`We start to run into issues here when our request requires a lot of processing power (in the example app, this will be the function `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{`).`}</p>\n    <p>{`Note that with the `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{` function call, we are blocking the entire event loop. `}<strong parentName=\"p\">{`This blocks the entire server from handling other requests.`}</strong></p>\n    <h2 {...{\n      \"id\": \"clustering-in-theory\"\n    }}>{`Clustering in Theory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Cluster Manager\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster manager`}</inlineCode>{` is only responsible for monitoring the health of individual `}<inlineCode parentName=\"p\">{`node server`}</inlineCode>{` instances. It will still be up to the instances to handle the request handling and processing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# RUN node app.js\n└── app.js  ===================> Worker Instance\n    └──  Cluster Manager\n        └── cluster.fork() # forks app.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forking-children-with-cluster\"\n    }}>{`Forking Children With Cluster`}</h2>\n    <p>{`When running the manager, note that Node will first run all the JavaScript code in the file and then startup the `}<inlineCode parentName=\"p\">{`Cluster Manager`}</inlineCode>{`. We want to ensure there is at least one scenario with the forked app running as expected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const express = require('express');\n  const app = express();\n\n  function doWork(duration) {\n    const start = new Date.now();\n    while (Date.now() - start < duration) {\n      // do nothing else\n    }\n  }\n\n  app.get('/', (req, res) => {\n    doWork(5000);\n    res.send('Hello');\n  });\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we add multiple `}<inlineCode parentName=\"p\">{`cluster.fork()`}</inlineCode>{` calls, we can have multiple instances of the server ready to run.`}</p>\n    <h2 {...{\n      \"id\": \"benchmarking-server-performance\"\n    }}>{`Benchmarking Server Performance`}</h2>\n    <p>{`For benchmarking, we will use a program called `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. (Available for MacOS)`}</p>\n    <p>{`Usage: `}<inlineCode parentName=\"p\">{`ab -c 50 -n 500 localhost:3000/fast`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`-c`}</inlineCode>{` is 50 concurrent requests and `}<inlineCode parentName=\"p\">{`-n`}</inlineCode>{` indicates 500 requests.`}</p>\n    <p>{`In the bottom code, we're going show how you can get diminishing returns by adding more children. It is important that we keep a threadpool size of `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` for this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nprocess.env.UV_THREADPOOL_SIZE = 1; // just for benchmarking purposes\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const crypto = require('crypto');\n  const express = require('express');\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n      res.send('Hello');\n    })\n});\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` we will see that we get a `}<inlineCode parentName=\"p\">{`Time taken for tests`}</inlineCode>{` to be ~1000ms.`}</p>\n    <p>{`We can see the timing of this is similar to the example for `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` we had in `}<inlineCode parentName=\"p\">{`Nodejs/Node Interals`}</inlineCode>{` when demoing the `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` module.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{`, we see that one requests took 1s, while the other took 2s. This is similar to what we saw in `}<inlineCode parentName=\"p\">{`Node Internals`}</inlineCode>{`. Given the one thread, we see that the second request needs to wait for the first request to be released from the threadpool.`}</p>\n    <p>{`If we update our code to add another child process using `}<inlineCode parentName=\"p\">{`cluster.fork();`}</inlineCode>{`, we will notice that both the requests now get processed in the two child processes (STILL USING ONE THREAD) and have come back with the expected time ~1000ms.`}</p>\n    <h3 {...{\n      \"id\": \"what-happens-with-too-many-children\"\n    }}>{`What happens with too many children?`}</h3>\n    <p>{`If we forked six processes and ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{` we will see that for some reason, we are now taking 3.5 seconds for each of the 6 requests across the board.`}</p>\n    <p>{`Why is this? It depends on the kind of computer that you have. Note that for the example above, it was run on a dual-core CPU. That's because the CPU is now trying to do a little bit of work on all 6 threads. So although we could now process the children in parallel, we have overallocated our resources.`}</p>\n    <p>{`If we now reduced the forked processes to 2 and still ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{`, we will notice that the slowest request is still around 3.4s, while our fastest request is now ~1s. This is because at a cluster with two children, we know that we can at most handle two requests at the same time. `}</p>\n    <p>{`Essentially, the first two requests are processed in the first second, the next two in the second, the last two in the third - this makes perfect sense. This means that we have ended with a far better performance profile.`}</p>\n    <h2 {...{\n      \"id\": \"pm2-configuration\"\n    }}>{`PM2 Configuration`}</h2>\n    <p>{`PM2 can supercharge our clustering setup. PM2 makes cluster management super easy for Nodejs. It can be installed through `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` globally using `}<inlineCode parentName=\"p\">{`npm i -g pm2`}</inlineCode>{`.`}</p>\n    <p>{`To run the script in `}<inlineCode parentName=\"p\">{`pm2`}</inlineCode>{`, we need to update our app once again.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\n\n// Child - operate as normal server\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n   res.send('Hello');\n })\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`pm2 start index.js -i 0`}</inlineCode>{` will tell pm2 to auto-configure how many instances to setup based on the amount of logical cores (physical * virtual cores) are available.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Call`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 monit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Show pm2 monitor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List all pm2 processes`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 start index.js -i 0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Start index.js with auto-configured instances`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 delete index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Delete all index children`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`pm2`}</inlineCode>{` is generally used in production environments only.`}</p>\n    <h2 {...{\n      \"id\": \"web-worker-threads\"\n    }}>{`Web Worker Threads`}</h2>\n    <p>{`At the time of writing - these were in experimental phase.`}</p>\n    <p>{`In this example, we are using the module `}<inlineCode parentName=\"p\">{`webworker-threads`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Our App\n└── Worker Interface (communicates with Worker)\n    └── postMessage <===> onmessage (Worker)\n    └── onmessage <===> postMessage (Worker)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Worker`}</inlineCode>{` itself is working on its own thread. Remember: a lot of the Nodejs standard lib functions ALREADY work on their own thread. You only really want to use it for your own heavy-duty business logic.`}</p>\n    <p>{`Note: any function passed to the worker cannot access the parent scoped variables. It is also important to use the function keyword on purpose.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst Worker = require('webworker-threads').Worker;\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const worker = new Worker(function() {\n    this.onmessage = function() {\n      // emulate heavy work\n      let counter = 0;\n      whilte (counter < 1e9) {\n        counter++;\n      }\n\n      postMessage(counter);\n    }\n  });\n\n  worker.onmessage = function(counter) {\n    console.log(counter);\n    res.send('' + message.data); // casting as send requires string\n  }\n\n  worker.postMessage();\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`For benchmarking these workers, we can again use `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{` should run with similar results on a dual-core Mac. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}