(window.webpackJsonp=window.webpackJsonp||[]).push([[417],{"./manual/ReasonML/Reason-Hello-World.md":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return c});var n=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),b=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),l={},r="wrapper";function c(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(b.b)(r,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"reasonml-hello-world"},"ReasonML Hello World"),Object(b.b)("h2",{id:"tldr"},"tl;dr"),Object(b.b)("p",null,"Reason comes by default with ",Object(b.b)("inlineCode",{parentName:"p"},"BuckleScript"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"npm install -g bs-platform\nbsb -init my-new-project -theme basic-reason\ncd my-new-project\nyarn build # or npm run build, for npm\nnode src/Demo.bs.js\n")),Object(b.b)("h2",{id:"let-binding"},"Let Binding"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"const x = 5;")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let x = 5;"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"var x = y;")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"No equivalent (thankfully)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let x = 5; x = x + 1;")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let x = ref(5); x := x^ + 1;"))))),Object(b.b)("h2",{id:"string--char"},"String & Char"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'"Hello world!"')),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"'Hello world!'")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Strings must use ",Object(b.b)("inlineCode",{parentName:"td"},'"'))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Characters are strings"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"'a'"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'"hello " + "world"')),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'"hello " ++ "world"'))))),Object(b.b)("h2",{id:"boolean"},"Boolean"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"true"),", ",Object(b.b)("inlineCode",{parentName:"td"},"false")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"!true")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("code",null,"|","|"),", ",Object(b.b)("inlineCode",{parentName:"td"},"&&"),", ",Object(b.b)("inlineCode",{parentName:"td"},"<="),", ",Object(b.b)("inlineCode",{parentName:"td"},">="),", ",Object(b.b)("inlineCode",{parentName:"td"},"<"),", ",Object(b.b)("inlineCode",{parentName:"td"},">")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"a === b"),", ",Object(b.b)("inlineCode",{parentName:"td"},"a !== b")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"No deep equality (recursive compare)"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"a == b"),", ",Object(b.b)("inlineCode",{parentName:"td"},"a != b"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"a == b")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"No equality with implicit casting (thankfully)")))),Object(b.b)("h2",{id:"number"},"Number"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"3")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same ","*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"3.1415")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"3 + 4")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"3.0 + 4.5")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"3.0 +. 4.5"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"5 % 3")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"5 mod 3"))))),Object(b.b)("p",null,"*"," JS has no distinction between integer and float."),Object(b.b)("h2",{id:"objectrecord"},"Object/Record"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"no static types"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"type point = {x: int, mutable y: int}"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"{x: 30, y: 20}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same ","*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"point.x")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"point.y = 30;")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"{...point, x: 30}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")))),Object(b.b)("p",null,"*"," This is the Reason spiritual equivalent; it doesn't mean it compiles to JS' object! To compile to the latter, see ",Object(b.b)("a",Object.assign({parentName:"p"},{href:"object.md#tip-tricks"}),"here"),"."),Object(b.b)("h2",{id:"array"},"Array"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"[1, 2, 3]")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("code",null,"[|","1, 2, 3","|]"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"myArray[1] = 10")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'[1, "Bob", true]')," ","*"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'(1, "Bob", true)'))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"No immutable list"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"[1, 2, 3]"))))),Object(b.b)("p",null,"*"," We can simulate tuples in JavaScript with arrays, because JavaScript arrays can contain multiple types of elements."),Object(b.b)("h2",{id:"null"},"Null"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"null"),", ",Object(b.b)("inlineCode",{parentName:"td"},"undefined")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"None")," ","*")))),Object(b.b)("p",null,"*"," Again, only a spiritual equivalent; Reason doesn't have nulls, nor null bugs! But it does have ",Object(b.b)("a",Object.assign({parentName:"p"},{href:"newcomer-examples.md#using-the-option-type"}),"an option type")," for when you actually need nullability."),Object(b.b)("h2",{id:"function"},"Function"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"arg => retVal")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"(arg) => retVal"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"function named(arg) {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let named = (arg) => ..."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"const f = function(arg) {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let f = (arg) => ..."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"add(4, add(5, 6))")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")))),Object(b.b)("h3",{id:"blocks"},"Blocks"),Object(b.b)("p",null,"JavaScript:"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n")),Object(b.b)("p",null,"Reason:"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-reason"}),"let myFun = (x, y) => {\n  let doubleX = x + x;\n  let doubleY = y + y;\n  doubleX + doubleY\n};\n")),Object(b.b)("h3",{id:"currying"},"Currying"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let add = a => b => a + b")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let add = (a, b) => a + b"))))),Object(b.b)("p",null,"Both JavaScript and Reason support currying, but Reason currying is ",Object(b.b)("strong",{parentName:"p"},"built-in and optimized to avoid intermediate function allocation & calls"),", whenever possible."),Object(b.b)("h2",{id:"if-else"},"If-else"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"if (a) {b} else {c}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same ","*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"a ? b : c")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"switch")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"switch")," but ",Object(b.b)("a",Object.assign({parentName:"td"},{href:"pattern-matching.md"}),"super-powered!"))))),Object(b.b)("p",null,"*"," Reason conditionals are always expressions!"),Object(b.b)("h2",{id:"destructuring"},"Destructuring"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"const {a, b} = data")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let {a, b} = data"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"const [a, b] = data")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("code",null,"let ","[|","a, b","|]"," = data")," ","*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"const {a: aa, b: bb} = data")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"let {a: aa, b: bb} = data"))))),Object(b.b)("p",null,"*"," Gives good compiler warning that ",Object(b.b)("inlineCode",{parentName:"p"},"data")," might not be of length 2. Switch to pattern-matching instead."),Object(b.b)("h2",{id:"loop"},"Loop"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"for (let i = 0; i <= 10; i++) {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"for (i in 0 to 10) {...}"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"for (let i = 10; i >= 0; i--) {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"for (i in 10 downto 0) {...}"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"while (true) {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")))),Object(b.b)("h2",{id:"jsx"},"JSX"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},'<Foo bar=1 baz="hi" onClick={bla} />')),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<Foo bar=bar />")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<Foo bar />")," ","*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<input checked />")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<input checked=true />"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"No children spread"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<Foo>...children</Foo>"))))),Object(b.b)("p",null,"*"," Argument punning!"),Object(b.b)("h2",{id:"exception"},"Exception"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"throw new SomeError(...)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"raise(SomeError(...))"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"try {a} catch (Err) {...} finally {...}")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("code",null,"try (a) { ","|"," Err => ...}")," ","*")))),Object(b.b)("p",null,"*"," No finally."),Object(b.b)("h2",{id:"blocks-1"},"Blocks"),Object(b.b)("p",null,'In Reason, "sequence expressions" are created with ',Object(b.b)("inlineCode",{parentName:"p"},"{}")," and evaluate to their last statement. In JavaScript, this can be simulated via an immediately-invoked function expression (since function bodies have their own local scope)."),Object(b.b)("p",null,"JavaScript:"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY;\n};\n")),Object(b.b)("p",null,"Reason:"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-reason"}),"let myFun = (x, y) => {\n  let doubleX = x + x;\n  let doubleY = y + y;\n  doubleX + doubleY\n};\n")),Object(b.b)("h2",{id:"comments"},"Comments"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"JavaScript"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Reason"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"/* Comment */")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Same")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"// Line comment")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"Coming soon")))))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/ReasonML/Reason-Hello-World.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-reason-ml-reason-hello-world.101a1afd2417ec7a4a77.js.map