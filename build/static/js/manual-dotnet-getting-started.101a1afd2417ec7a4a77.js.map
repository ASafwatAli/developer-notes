{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Dotnet/Getting-Started.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/manual-dotnet-getting-started.54e9fbc5.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-start-with-dotnet\"\n    }}>{`Getting Start with Dotnet`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro\"\n        }}>{`Dotnet in 10 Minutes`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codeburst.io/how-to-set-up-a-modern-full-stack-net-web-development-environment-on-mac-os-542dcd43a564\"\n        }}>{`Setting up full stack .NET web on MacOS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/download\"\n        }}>{`Dotnet install`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/53030531/dotnet-command-not-found-in-mac\"\n        }}>{`Symlinking Dotnet to /usr/local/bin post-installation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/learn/aspnet/hello-world-tutorial/intro\"\n        }}>{`First web application`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio\"\n        }}>{`Building a web API`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <p>{`Follow resources `}{`[3]`}{` and `}{`[4]`}{` for getting installation going (installation example above is for MacOS).`}</p>\n    <p>{`Afterwards, run `}<inlineCode parentName=\"p\">{`dotnet`}</inlineCode>{` to confirm things are working. If nothing happens after installation, ensure you have followed resource `}{`[4]`}{` to symlink the installation to your path (or add the folder to path).`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-console-app\"\n    }}>{`Creating a Console App`}</h2>\n    <p>{`We simply run the following to start a new console app.`}</p>\n    <p>{`The following creates new app of type console into the `}<inlineCode parentName=\"p\">{`myApp`}</inlineCode>{` folder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet new console -o myApp\ncd myApp\n`}</code></pre>\n    <p>{`The above code will also generate a file named `}<inlineCode parentName=\"p\">{`Program.cs`}</inlineCode>{` into `}<inlineCode parentName=\"p\">{`myApp`}</inlineCode>{`, along with `}<inlineCode parentName=\"p\">{`myApp.csproj`}</inlineCode>{` config for library usage and an `}<inlineCode parentName=\"p\">{`obj`}</inlineCode>{` folder.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// Program.cs\nusing System;\n\nnamespace myApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n`}</code></pre>\n    <p>{`If we now fire `}<inlineCode parentName=\"p\">{`dotnet run`}</inlineCode>{` from the command line, we will see our `}<inlineCode parentName=\"p\">{`Hello World!`}</inlineCode>{` response. Hooray!`}</p>\n    <p>{`Moving further, we could add more lines into our `}<inlineCode parentName=\"p\">{`Main`}</inlineCode>{` program like `}<inlineCode parentName=\"p\">{`Console.WriteLine(\"The current time is \" + DateTime.Now);`}</inlineCode>{` to update what we get.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-web-application\"\n    }}>{`Creating a Web application`}</h2>\n    <p>{`The following initialises a web application in the folder `}<inlineCode parentName=\"p\">{`myWebApp`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# note that we are specifying not to enable https in this particular instance\ndotnet new webApp -o myWebApp --no-https\n`}</code></pre>\n    <p>{`Several files were created in the myWebApp directory, to give you a simple web application that is ready to run.`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Startup.cs`}</inlineCode>{` contains all the settings and configurations.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`myWebApp/Pages`}</inlineCode>{` directory contains some example web pages for the application.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`myWebApp.csproj`}</inlineCode>{` defines what libraries are referenced etc.`}</li>\n    </ol>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`dotnet run`}</inlineCode>{` we will have a local development environment open up at port `}<inlineCode parentName=\"p\">{`5000`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-code-in-the-application\"\n    }}>{`Updating the code in the application`}</h2>\n    <p>{`Editing `}<inlineCode parentName=\"p\">{`Pages/Index.cshtml`}</inlineCode>{` with the following will edit the application to show the server time:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n<div class=\"text-center\">\n    <h1>Hello, world!</h1>\n    <p>The time on the server is @DateTime.Now</p>\n</div>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}