(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{"./manual/Elixir/Elixir-Debugging.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return s});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),b={},r="wrapper";function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)(r,Object.assign({},b,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"debugging-in-elixir"},"Debugging In Elixir"),Object(a.b)("h2",{id:"tldr"},"tl;dr"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"IO.inspect")," or ",Object(a.b)("inlineCode",{parentName:"p"},"IEx.pry"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'# inspect\n[1, 2, 3]\n|> IO.inspect(label: "before")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: "after")\n|> Enum.sum\n\n# pry\ndef some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n')),Object(a.b)("h2",{id:"other-resources"},"Other Resources"),Object(a.b)("p",null,"Other resources can be found at ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://elixir-lang.org/getting-started/debugging.html"}),"https://elixir-lang.org/getting-started/debugging.html")),Object(a.b)("h2",{id:"ioinspect2"},"IO.Inspect/2"),Object(a.b)("p",null,"What makes ",Object(a.b)("inlineCode",{parentName:"p"},"IO.inspect(item, opts \\\\ [])")," really useful in debugging is that it returns the item argument passed to it without affecting the behavior of the original code."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'(1..10)\n|> IO.inspect\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect\n|> Enum.sum\n|> IO.inspect\n\n[1, 2, 3]\n|> IO.inspect(label: "before")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: "after")\n|> Enum.sum\n\n# 3\ndef some_fun(a, b, c) do\n  IO.inspect binding()\n  ...\nend\n')),Object(a.b)("p",null,"Outputs:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'# 1\n1..10\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n110\n\n# 2\nbefore: [1, 2, 3]\nafter: [2, 4, 6]\n\n# 3\n[a: :foo, b: "bar", c: :baz]\n')),Object(a.b)("h2",{id:"iexpry0"},"IEx.pry/0"),Object(a.b)("p",null,"Similar to Ruby's ",Object(a.b)("inlineCode",{parentName:"p"},"binding.pry"),". Will open an interactive shell."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),"def some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Elixir/Elixir-Debugging.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-elixir-elixir-debugging.101a1afd2417ec7a4a77.js.map