{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Lambdas.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"uXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kBADR,kBAGAL,OAAAE,EAAA,EAAAF,CAAA,uIACAA,OAAAE,EAAA,EAAAF,CAAA,2CACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,kMAWLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oBADR,oBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,iNAeLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wBADR,wBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,scAsBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qCADR,qCAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,kGAOLP,OAAAE,EAAA,EAAAF,CAAA,yEAAoEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAApE,UACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,0EAILP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2CADR,2CAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,oKAaLP,OAAAE,EAAA,EAAAF,CAAA,yCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,gtBA6BTX,EAAWY,gBAAiB","file":"static/js/manual-kotlin-kotlin-lambdas.95b7cfb2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-lambdas\"\n    }}>{`Kotlin Lambdas`}</h1>\n    <p>{`Also known as anonymous functions - name deriving from lambda calculus of Alonzo Church where all functions are anonymous.`}</p>\n    <p>{`Also synonymous with closures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// declaration of a var that can hold a lambda\nvar multiplyLambda: (Int, Int) -> Int\n\nmultiplyLambda = { a: Int, b: Int -> Int\n  a*b\n}\n\nval lambdaResult = multiplyLambda(4, 2) // 8\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shorthand-syntax\"\n    }}>{`Shorthand Syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`multiplyLambda = { a, b ->\n  a*b\n}\n\n// using it keyword for argument\nvar doubleLambda = { a: Int ->\n  2*a\n}\ndoubleLambda = { 2 * it }\n\n// in declaration\nval square: (Int) -> Int = { it * it }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-as-arguments\"\n    }}>{`Lambdas As Arguments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): Int {\n  val result = operation(a, b)\n  println(result)\n  return result\n}\n\n// in use\nval addLambda = { a: Int, b: Int ->\na+b }\noperateOnNumbers(4, 2, operation = addLambda) // 6\n\n// more usual\nfun addFunction(a: Int, b:Int) = a + b\noperateOnNumbers(4, 2, operation = ::addFunction) // 6\n\n// or even\noperateOnNumbers(4, 2, operation = { a: Int, b: Int ->\n  a+b\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-with-no-meaningful-return\"\n    }}>{`Lambdas with no meaningful return`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var unitLambda: () -> Unit = {\n  println(\"Kotlin Apprentice is awesome!\")\n}\nunitLambda()\n`}</code></pre>\n    <p>{`If you literally want no value returnedm you need to use the `}<inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nothingLambda: () -> Nothing = { throw NullPointerException() }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-over-collections-with-lambdas\"\n    }}>{`Iterating over collections with lambdas`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val values = listOf(1, 2, 3, 4, 5, 6)\nvalues.forEach {\n  println(\"$it: \\${it * it}\")\n}\n// > 1: 1\n// > 2: 4\n// > 3: 9\n// > 4: 16\n// > 5: 25\n// > 6: 36\n`}</code></pre>\n    <p>{`To filter some of these out:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var prices = listOf(1.5, 10.0, 4.99, 2.30, 8.19)\nval largePrices = prices.filter {\n  it > 5.0\n}\n\n// the above function looks like so\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean):\nList<T>\n\nval userInput = listOf(\"0\", \"11\", \"haha\", \"42\")\nval numbers = userInput.map {\n  it.toIntOrNull()\n}\nprintln(numbers) // > [0, 11, null, 42]\n\n// array [1,2,3,4]\nsum = prices.reduce { a, b ->\n  a + b\n}\nprintln(sum) // 10\n\n// similar but takes initial value\nvar sum = prices.fold(0.0) { a, b -> a + b }\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}