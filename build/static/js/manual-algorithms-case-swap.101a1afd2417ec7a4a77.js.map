{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Case-Swap.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"oXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,wDADQ,wBAItBP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,8BAAyBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAAzB,0HAA6MN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAA7M,oDACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,mBADZ,4CAKLR,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,mBADZ,gDAKLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,2BACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,wBADZ,iVAiBLR,OAAAE,EAAA,EAAAF,CAAA,uBACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,oBADZ,8xBA2BTZ,EAAWa,gBAAiB","file":"static/js/manual-algorithms-case-swap.5cad269b.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"case-swap\"\n    }}>{`Case Swap`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.coderbyte.com/editor/Swap%20Case:Kotlin\"\n        }}>{`CoderByte - Kotlin`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function `}<inlineCode parentName=\"p\">{`SwapCase(str)`}</inlineCode>{` take the str parameter and swap the case of each character. For example: if str is \"Hello World\" the output should be `}<inlineCode parentName=\"p\">{`hELLO wORLD`}</inlineCode>{`. Let numbers and symbols stay the way they are.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Hello-LOL\"\nOutput: hELLO-lol\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Sup DUDE!!?\"\nOutput: sUP dude!!?\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`In JavaScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function SwapCase(str) {\n  let retStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[a-z]/.test(str[i])) {\n      retStr += str[i].toUpperCase();\n    } else if (/[A-Z]/.test(str[i])) {\n      retStr += str[i].toLowerCase();\n    } else {\n      retStr += str[i];\n    }\n  }\n  // code goes here\n  return retStr;\n}\n`}</code></pre>\n    <p>{`In Kotlin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun SwapCase(str: String): String {\n  val regexLower = Regex(pattern = \"[a-z]\")\n  val regexUpper = Regex(pattern = \"[A-Z]\")\n  val list = mutableListOf<String>()\n\n  for (i in str.indices) {\n    if (regexLower.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toUpperCase())\n    } else if (regexUpper.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toLowerCase())\n    } else {\n      list.add(str[i].toString())\n    }\n  }\n  // code goes here\n  return list.joinToString(\"\").trim();\n}\n\nfun main(args: Array<String>) {\n  println(SwapCase(readLine()))\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}