{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Go/Go-Fizz-Buzz.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"iXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,uBAGAL,OAAAE,EAAA,EAAAF,CAAA,gFACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,uBAGAL,OAAAE,EAAA,EAAAF,CAAA,mBAAcA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,qBAAd,6BACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,iuDAuDLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,uDAAkDA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAAlD,aAAgHN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAhH,aACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,gVAoBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,kCAA6BA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAA7B,qLAIJV,EAAWY,gBAAiB","file":"static/js/manual-go-go-fizz-buzz.5d241043.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"fizz-buzz-in-golang\"\n    }}>{`Fizz Buzz in Golang`}</h1>\n    <p>{`A basic implementation of the infamous Fizz Buzz with unit testing.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-the-test\"\n    }}>{`Setting up the test`}</h2>\n    <p>{`Set up `}<inlineCode parentName=\"p\">{`fizz_buzz_test.go`}</inlineCode>{` with the following file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"testing\"\n\nfunc TestReturnString(t *testing.T) {\n    expected := \"2\"\n    if observed := FizzBuzz(2); observed != expected {\n        t.Fatalf(\"FizzBuzz(2)) = %v, want %v\", observed, expected)\n    }\n}\nfunc TestFizz(t *testing.T) {\n    expected := \"Fizz\"\n    if observed := FizzBuzz(3); observed != expected {\n        t.Fatalf(\"FizzBuzz(3)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestBuzz(t *testing.T) {\n    expected := \"Buzz\"\n    if observed := FizzBuzz(5); observed != expected {\n        t.Fatalf(\"FizzBuzz(5)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestFizzBuzz(t *testing.T) {\n    expected := \"FizzBuzz\"\n    if observed := FizzBuzz(15); observed != expected {\n        t.Fatalf(\"FizzBuzz(15)) = %v, want %v\", observed, expected)\n    }\n}\n\n// BenchmarkFizzBuzz() is a benchmarking function. These functions follow the\n// form \\`func BenchmarkXxx(*testing.B)\\` and can be used to test the performance\n// of your implementation. They may not be present in every exercise, but when\n// they are you can run them by including the \\`-bench\\` flag with the \\`go test\\`\n// command, like so: \\`go test -v --bench . --benchmem\\`\n//\n// You will see output similar to the following:\n//\n// BenchmarkFizzBuzz    2000000000           0.46 ns/op\n//\n// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.\n//\n// While benchmarking can be useful to compare different iterations of the same\n// exercise, keep in mind that others will run the same benchmarks on different\n// machines, with different specs, so the results from these benchmark tests may\n// vary.\nfunc BenchmarkFizzBuzz(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        FizzBuzz(15)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fizz-buzz-implementation\"\n    }}>{`Fizz Buzz implementation`}</h2>\n    <p>{`We will use the interger-to-ASCII function `}<inlineCode parentName=\"p\">{`itoa`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"strconv\"\n\n// FizzBuzz should have a comment documenting it.\nfunc FizzBuzz(i int) string {\n    switch true {\n    case i%15 == 0:\n        return \"FizzBuzz\"\n    case i%3 == 0:\n        return \"Fizz\"\n    case i%5 == 0:\n        return \"Buzz\"\n    default:\n        return strconv.Itoa(i)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running Tests`}</h2>\n    <p>{`In the directory, run `}<inlineCode parentName=\"p\">{`go test`}</inlineCode>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}