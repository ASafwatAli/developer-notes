(window.webpackJsonp=window.webpackJsonp||[]).push([[452],{"./manual/SQL/Indexing-Example.md":function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return a});var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},c="wrapper";function a(t){var e=t.components,n=Object(o.a)(t,["components"]);return Object(s.b)(c,Object.assign({},i,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"indexing-example"},"Indexing Example"),Object(s.b)("p",null,"The following is done on PostgresSQL 12."),Object(s.b)("h2",{id:"resources"},"Resources"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://www.db-fiddle.com/"}),"DB Fiddle"))),Object(s.b)("h2",{id:"without-indexing"},"Without Indexing"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n")),Object(s.b)("p",null,"The QUERY PLAN returns:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-sql"}),"Merge Join (cost=317.01..711.38 rows=25538 width=16) (actual time=0.050..0.052 rows=3 loops=1)\nMerge Cond: (test.id = test_two.id)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.029..0.030 rows=3 loops=1)\nSort Key: test.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.005..0.005 rows=3 loops=1)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.018..0.018 rows=3 loops=1)\nSort Key: test_two.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test_two (cost=0.00..32.60 rows=2260 width=8) (actual time=0.006..0.006 rows=3 loops=1)\nPlanning Time: 0.301 ms\nExecution Time: 0.132 ms\n")),Object(s.b)("h2",{id:"with-indexing"},"With Indexing"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n")),Object(s.b)("p",null,"The QUERY PLAN returns:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-sql"}),"Hash Join (cost=1.07..42.48 rows=34 width=16) (actual time=0.058..0.059 rows=3 loops=1)\nHash Cond: (test.id = test_two.id)\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.003..0.004 rows=3 loops=1)\n-> Hash (cost=1.03..1.03 rows=3 width=8) (actual time=0.011..0.011 rows=3 loops=1)\nBuckets: 1024 Batches: 1 Memory Usage: 9kB\n-> Seq Scan on test_two (cost=0.00..1.03 rows=3 width=8) (actual time=0.001..0.002 rows=3 loops=1)\nPlanning Time: 0.443 ms\nExecution Time: 0.121 ms\n")))}a&&a===Object(a)&&Object.isExtensible(a)&&Object.defineProperty(a,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/SQL/Indexing-Example.md"}}),a.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-sql-indexing-example.101a1afd2417ec7a4a77.js.map