{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Phoenix-Routing.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"wXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mBADR,mBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,kDADQ,mDAItBP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kBADR,kBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,mBADZ,8CAKLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,oBADZ,oMAaLR,OAAAE,EAAA,EAAAF,CAAA,6CAAwCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,qBAAxC,QAA8GN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,gBAA9G,wCAA+MN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,sBAA/M,2DAAyUN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAzU,KACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,oBADZ,ggBA6BLR,OAAAE,EAAA,EAAAF,CAAA,gBAAWA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,mCAAX,MAA6FN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAA7F,4OACAN,OAAAE,EAAA,EAAAF,CAAA,iSACAA,OAAAE,EAAA,EAAAF,CAAA,mJACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,oBADZ,8OAOTZ,EAAWa,gBAAiB","file":"static/js/manual-elixir-phoenix-routing.cbbe9dd0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"phoenix-routing\"\n    }}>{`Phoenix Routing`}</h1>\n    <h2 {...{\n      \"id\": \"useful-links\"\n    }}>{`Useful Links`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://hexdocs.pm/phoenix/1.4.0/routing.html\"\n        }}>{`https://hexdocs.pm/phoenix/1.4.0/routing.html`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <h3 {...{\n      \"id\": \"examing-routes\"\n    }}>{`Examing Routes`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mix compile # if needed\nmix phx.routes\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"pipelines\"\n    }}>{`Pipelines`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule HelloWeb.Router do\n  use HelloWeb, :router\n\n  # ...\n\n  scope \"/\" do\n    pipe_through [:authenticate_user, :ensure_admin]\n    forward \"/jobs\", BackgroundJob.Plug\n  end\nend\n`}</code></pre>\n    <p>{`This means that the plugs in the `}<inlineCode parentName=\"p\">{`authenticate_user`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ensure_admin`}</inlineCode>{` pipelines will be called before the `}<inlineCode parentName=\"p\">{`BackgroundJob.Plug`}</inlineCode>{` allowing them to send an appropriate response and call `}<inlineCode parentName=\"p\">{`halt()`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"routing\"\n    }}>{`Routing`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule HelloWeb.Router do\n  use HelloWeb, :router\n\n  pipeline :browser do\n    plug :accepts, [\"html\"]\n    plug :fetch_session\n    plug :fetch_flash\n    plug :protect_from_forgery\n    plug :put_secure_browser_headers\n  end\n\n  pipeline :api do\n    plug :accepts, [\"json\"]\n  end\n\n  scope \"/\", HelloWeb do\n    pipe_through :browser\n\n    get \"/\", PageController, :index\n  end\n\n  # Other scopes may use custom stacks.\n  # scope \"/api\", HelloWeb do\n  #   pipe_through :api\n  # end\nend\n`}</code></pre>\n    <p>{`For `}<inlineCode parentName=\"p\">{`get \"/\", PageController, :index`}</inlineCode>{` - `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` is a Phoenix macro which expands out to define one clause of the match/5 function. It corresponds to the HTTP verb GET. Similar macros exist for other HTTP verbs including POST, PUT, PATCH, DELETE, OPTIONS, CONNECT, TRACE and HEAD.`}</p>\n    <p>{`The first argument to these macros is the path. Here, it is the root of the application, /. The next two arguments are the controller and action we want to have handle this request. These macros may also take other options, which we will see throughout the rest of this guide.`}</p>\n    <p>{`If this were the only route in our router module, the clause of the match/5 function would look like this after the macro is expanded:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def match(:get, \"/\", PageController, :index, [])\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}