{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Kotlin/Kotlin-Basics.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"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","file":"static/js/manual-kotlin-kotlin-basics.03bdaff2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"kotlin-basics\"\n    }}>{`Kotlin Basics`}</h1>\n    <p>{`This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc.`}</p>\n    <h2 {...{\n      \"id\": \"kotlin-repl\"\n    }}>{`Kotlin REPL`}</h2>\n    <p>{`Brew install `}<inlineCode parentName=\"p\">{`kotlin`}</inlineCode>{` and then you'll have access to the REPL.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`kotlinc`}</inlineCode>{` with no arguments to enter the REPL.`}</p>\n    <p>{`To compile and run code from the command line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hello-kotlin\"\n    }}>{`Hello, Kotlin`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun main(args: Array<String>) {\n  println(\"Hello, Kotlin!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift-operators\"\n    }}>{`Shift Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`1 shl 3 // shift left\n32 shr 2 // shift right\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"math-functions\"\n    }}>{`Math Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-conversion\"\n    }}>{`Type Conversion`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer\n`}</code></pre>\n    <p>{`To do implicit conversion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chars-vs-strings\"\n    }}>{`Chars Vs Strings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes\n`}</code></pre>\n    <p>{`String interpolation happens with `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var name = \"Dick\"\nvar message = \"Hello my name is $name!\" // \"Hello my name is Dick!\"\n`}</code></pre>\n    <p>{`Multiline strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`let bigString = \"\"\"\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  \"\"\".trimMargin()\nprintln(bigString)\n`}</code></pre>\n    <p>{`The above will print:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`You can have a string\nthat contains multiple\nlines\nby\ndoing this.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pair--triples\"\n    }}>{`Pair + Triples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number-types\"\n    }}>{`Number types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"any-unit-and-nothing\"\n    }}>{`Any, Unit, and Nothing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val anyNum: Any = 1\nval anyString: Any = \"Yo\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes.`}</p>\n    <p>{`This can occur if a function either causes the program to stop completely by throwing an `}<inlineCode parentName=\"p\">{`Exception`}</inlineCode>{` or if it simply goes on forever without ever finishing.`}</p>\n    <h2 {...{\n      \"id\": \"control-logic\"\n    }}>{`Control Logic`}</h2>\n    <p>{`Worth noting if/else can be single line ie `}<inlineCode parentName=\"p\">{`val min = if (a < b) a else b`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"range\"\n    }}>{`Range`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"repeat\"\n    }}>{`Repeat`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stepping\"\n    }}>{`Stepping`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}\n`}</code></pre>\n    <p>{`You could even `}<inlineCode parentName=\"p\">{`downTo`}</inlineCode>{` step:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"labelled-statements\"\n    }}>{`Labelled Statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"when-expressions\"\n    }}>{`When Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number = 10\nwhen (number) {\n  0 -> println(\"Zero\")\n  else -> println(\"Non-zero\")\n}\n\n// multi-valued whens\nval string = \"Dog\"\nwhen (string) {\n  \"Cat\", \"Dog\" -> println(\"Animal is a house pet.\")\n  else -> println(\"Animal is not a house pet.\")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> \"Early morning\"\n  in 6..11 -> \"Morning\"\n  in 12..16 -> \"Afternoon\"\n  in 17..19 -> \"Evening\"\n  in 20..23 -> \"Late evening\"\n  else -> \"INVALID HOUR!\"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println(\"Origin\")\n  y == 0 && z == 0 -> println(\"On the x-axis at x = $x\")\n  x == 0 && z == 0 -> println(\"On the y-axis at y = $y\")\n  x == 0 && y == 0 -> println(\"On the z-axis at z = $z\")\n  else -> println(\"Somewhere in space at x = $x, y = $y, z = $z\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`Note that parameters are constants by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun printMyName() {\n  println(\"My name is Dick Lucas.\")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println(\"$value * 5 = \\${value * 5}\")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println(\"$multiplier * $andValue = \\${multiplier * andValue}\")\n}\nprintMultipleOf(4, 2)\n`}</code></pre>\n    <p>{`If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overloading\"\n    }}>{`Overloading`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return \"The value is $value\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-as-variables\"\n    }}>{`Functions As Variables`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}