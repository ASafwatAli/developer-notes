(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{"./manual/PHP/PHP-Unit-Tests.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),p={},r="wrapper";function i(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)(r,Object.assign({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"php-unit-testing"},"PHP Unit Testing"),Object(s.b)("p",null,"This is simply a basic example of the layout."),Object(s.b)("p",null,"Ensure ",Object(s.b)("inlineCode",{parentName:"p"},"phpunit")," is downloaded and add it to your ",Object(s.b)("inlineCode",{parentName:"p"},"$PATH"),"."),Object(s.b)("p",null,"From, here run ",Object(s.b)("inlineCode",{parentName:"p"},"phpunit.phar path/to/test.php"),"."),Object(s.b)("h2",{id:"basic-example"},"Basic example"),Object(s.b)("h3",{id:"anagram-function-to-test"},"Anagram function to test"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'<?php\n// anagrams.php\n\nfunction anagrams($a, $b)\n{\n    $regA = preg_replace("/[^a-z]/i", "", $a);\n    $regB = preg_replace("/[^a-z]/i", "", $b);\n\n    $regA = strtolower($regA);\n    $splitA = str_split($regA);\n    sort($splitA);\n\n    $regB = strtolower($regB);\n    $splitB = str_split($regB);\n    sort($splitB);\n\n    $resA = implode("", $splitA);\n    $resB = implode("", $splitB);\n\n    return $resA == $resB;\n}\n')),Object(s.b)("h3",{id:"running-the-test"},"Running the test"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"phpunit.phar anagrams_test.php")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'<?php\n// anagrams_test.php\nrequire "anagrams.php";\n\nclass AnagramsTest extends PHPUnit\\Framework\\TestCase\n{\n    public function testAnagramsBasic()\n    {\n        $a = "tokyo";\n        $b = "kyoto";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n\n    public function testAnagramsWithCapitals()\n    {\n        // $this->markTestSkipped(\'Skipped.\');\n        $a = "Tokyo";\n        $b = "kyoto";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n    public function testAnagramsWithPunctuation()\n    {\n        // $this->markTestSkipped(\'Skipped.\');\n        $a = "To  35k 2@4yo";\n        $b = "kYoTo223!!";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n}\n')))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/PHP/PHP-Unit-Tests.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-php-php-unit-tests.101a1afd2417ec7a4a77.js.map