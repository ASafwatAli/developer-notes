(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{"./manual/Scala/Scala-Expressions.md":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return o});var t=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),i={},l="wrapper";function o(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(s.b)(l,Object.assign({},i,a,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"scala-expressions-and-functions"},"Scala Expressions and Functions"),Object(s.b)("p",null,"As opposed to instructions, everything in Scala is considered an ",Object(s.b)("inlineCode",{parentName:"p"},"expression"),". Even if/else statements themselves in Scala are expressions."),Object(s.b)("h2",{id:"for-loops"},"For Loops"),Object(s.b)("p",null,"For loops are not recommended in Scala. They return ",Object(s.b)("inlineCode",{parentName:"p"},"Unit")," which in itself is equivalent to",Object(s.b)("inlineCode",{parentName:"p"},"null"),". This is the case for side effects - an intergral part of understanding Scala."),Object(s.b)("h2",{id:"code-blocks"},"Code Blocks"),Object(s.b)("p",null,"Note that if you write a code block, the last value in the code block is returned as the value."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),'val codeBlock = {\n    val a = 1\n    val b = 2\n\n    if(a < b) "hi" else "bye"\n}\n\nprintln(codeBlock)\n// evaluates to "hi"\n')),Object(s.b)("h2",{id:"examples-of-expressions-and-side-effects"},"Examples of Expressions and Side Effects"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),'"hello" // type String\nprintln("hello") // type Unit\n\n// type Boolean\nval a = {\n    2 < 3\n}\n\n// type Int value 10\nval b = {\n    if(a) 123 else 321\n    10\n}\n\n// c is of type Unit\nvar i = 0\nval c = while (i < 10) {\n    i += 1\n}\n')),Object(s.b)("h2",{id:"functions"},"Functions"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-scala"}),'object Functions extends App {\n    // this works because we know everything is an expression\n    def functionExample(a: String, b: Int): String = a + " " + b\n\n    def parameterlessFunc(): Int = 42\n    println(parameterlessFunc())\n    // also valid in Scala to call func\n    println(parameterlessFunc)\n\n    def repeterFunc(a: String, n: Int): String  = {\n        if (n == 1) a\n        else a + repeterFunc(a, n-1)\n    }\n}\n')))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Scala/Scala-Expressions.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-scala-scala-expressions.101a1afd2417ec7a4a77.js.map