(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{"./manual/Design-Patterns/State.md":function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return i});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),h={},c="wrapper";function i(n){var e=n.components,t=Object(a.a)(n,["components"]);return Object(s.b)(c,Object.assign({},h,t,{components:e,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"state"},"State"),Object(s.b)("p",null,"Object Behavioural Design Pattern."),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface ATMState {\n  name?: string;\n  takeCash(cash: number): void;\n}\n\nclass ATMHasCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    if (this._machine.cash < cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('Not enough cash');\n      return;\n    } else if (this._machine.cash === cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('No cash after cash token');\n    }\n    console.log(\n      `[current machine total - cash]: ${this._machine.cash} - ${cash}`\n    );\n    this._machine.cash -= cash;\n  }\n}\n\nclass ATMNoCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    throw new Error('ATMMachine has no cash');\n  }\n}\n\nclass ATMMachine implements ATMState {\n  private _hasCashState: ATMHasCashState;\n  private _noCashState: ATMNoCashState;\n\n  private _currentState: ATMState;\n\n  public cash: number;\n\n  constructor(cash: number) {\n    this.cash = cash;\n\n    this._hasCashState = new ATMHasCashState(this, 'HasCash');\n    this._noCashState = new ATMNoCashState(this, 'NoCash');\n\n    this._currentState = this.cash ? this._hasCashState : this._noCashState;\n  }\n\n  public set state(value: ATMState) {\n    console.log(`Current state is ${value.name}`);\n    this._currentState = value;\n  }\n\n  public get state() {\n    return this._currentState;\n  }\n\n  takeCash(cash: number): void {\n    this._currentState.takeCash(cash);\n  }\n\n  // Get states\n  public hasCashState() {\n    return this._hasCashState;\n  }\n\n  public noCashState() {\n    return this._noCashState;\n  }\n}\n\n(function main() {\n  const machine = new ATMMachine(1200);\n  machine.takeCash(200); // has cash\n  machine.takeCash(400); // has cash\n  machine.takeCash(1000); // not enough\n})();\n")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/State.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-design-patterns-state.101a1afd2417ec7a4a77.js.map