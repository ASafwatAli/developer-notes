(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{"./manual/Design-Patterns/Iterator.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),a={},i="wrapper";function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(i,Object.assign({},a,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"iterator"},"Iterator"),Object(r.b)("p",null,"A behavioural pattern that is used to access the elements of a collection object in sequential manner without a required understanding of the underlying representation."),Object(r.b)("h2",{id:"components"},"Components"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"ConcreteIterator: An interface to define how the ",Object(r.b)("inlineCode",{parentName:"li"},"next")," and ",Object(r.b)("inlineCode",{parentName:"li"},"hasNext")," methods work."),Object(r.b)("li",{parentName:"ul"},"ConcreteCollection: A collection that has knowledge of the iterator and creates the iterator.")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"In this basic example below, we will create a ",Object(r.b)("inlineCode",{parentName:"p"},"ConcreteCollection")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ConcreteIterator")," class to demonstrate how the ",Object(r.b)("inlineCode",{parentName:"p"},"Iterator")," design pattern works."),Object(r.b)("p",null,"Note that after create a collection, we can use the ",Object(r.b)("inlineCode",{parentName:"p"},"createIterator")," method as many times as we want to return seperate instances of an ",Object(r.b)("inlineCode",{parentName:"p"},"iterator")," - for demonstration purposes, we will create a second iterator to do just that."),Object(r.b)("p",null,"The last part of ",Object(r.b)("inlineCode",{parentName:"p"},'"main"')," will demo what happens when you intertwine iterator calls."),Object(r.b)("p",null,"Check the logs for results."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface Iterator<T> {\n  next(): T;\n  hasNext(): boolean;\n}\n\ninterface Collection {\n  createIterator(): Iterator<Number>;\n}\n\nclass ConcreteIterator implements Iterator<Number> {\n  private _collection: Number[];\n  private _index: number = 0;\n\n  constructor(newCollection: Number[]) {\n    this._collection = newCollection;\n  }\n\n  next(): any {\n    const result = this._collection[this._index];\n    this.log();\n    this._index += 1;\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this._index < this._collection.length;\n  }\n\n  private log(): void {\n    console.log(`Method called during index: ${this._collection[this._index]}`);\n  }\n}\n\nclass ConcreteCollection implements Collection {\n  private _collection: Number[] = [];\n\n  constructor(collection: Number[]) {\n    this._collection = collection;\n  }\n\n  createIterator(): Iterator<Number> {\n    return new ConcreteIterator(this._collection);\n  }\n}\n\n(function main() {\n  const collection: ConcreteCollection = new ConcreteCollection([0, 1, 2, 3]);\n  const iterator: Iterator<Number> = collection.createIterator();\n  const secondIterator: Iterator<Number> = collection.createIterator();\n\n  while (iterator.hasNext()) {\n    const number: Number = iterator.next();\n    console.log(`Logging: ${number.valueOf()}`);\n  }\n\n  while (secondIterator.hasNext()) {\n    const number: Number = secondIterator.next();\n    console.log(`Second Iterator Logging: ${number.valueOf()}`);\n  }\n\n  // third and fourth iterators intertwined\n  const thirdIterator: Iterator<Number> = collection.createIterator();\n  const fourthIterator: Iterator<Number> = collection.createIterator();\n\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n})();\n")),Object(r.b)("h2",{id:"resources"},"Resources"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Iterator_pattern"}),"Wikipedia")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://www.tutorialspoint.com/design_pattern/iterator_pattern.htm"}),"Tutorials Point"))))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/Iterator.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-design-patterns-iterator.101a1afd2417ec7a4a77.js.map