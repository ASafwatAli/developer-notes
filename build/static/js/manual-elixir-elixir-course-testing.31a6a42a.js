(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{"./manual/Elixir/Elixir-Course-Testing.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var i=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),s={},o="wrapper";function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)(o,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"elixir-course-testing-and-documentation"},"Elixir Course Testing And Documentation"),Object(a.b)("h2",{id:"documentation"},"Documentation"),Object(a.b)("p",null,"Two types:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Module documentation: purpose of module"),Object(a.b)("li",{parentName:"ol"},"Function documentation: purpose of individual functions")),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"ex_doc")," as the required module, add ",Object(a.b)("inlineCode",{parentName:"p"},'{:ex_doc, "~> 0.21.1"},')," to you deps (or the latest version) and after fetching deps, run ",Object(a.b)("inlineCode",{parentName:"p"},"mix docs")," to generate the documentation."),Object(a.b)("p",null,"Documentation can then be found at ",Object(a.b)("inlineCode",{parentName:"p"},"doc/index.html"),"."),Object(a.b)("p",null,"Examples:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'defmodule ModuleName.Queries do\n  @moduledoc """\n  Provides Ecto queries for querying important Action Framework requirement.\n  """\n\n  import Ecto.Query\n\n  @doc """\n  Does a thing\n\n  ## Examples\n\n      iex> query = "Hello, World!"\n      iex> query\n      "Hello, World!"\n  """\n  def hello_world() do\n    "Hello, World!"\n  end\nend\n')),Object(a.b)("h2",{id:"elixir-testing"},"Elixir Testing"),Object(a.b)("p",null,"There are two distinct types of tests we can write:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Assertion tests"),Object(a.b)("li",{parentName:"ol"},"Doc testing")),Object(a.b)("h2",{id:"example-test"},"Example Test"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'defmodule Cards do\n  def create_deck do\n    values = ["Ace", "Two"]\n    suits = ["Spades", "Clubs"]\n  end\n\n  # ... more\nend\n')),Object(a.b)("p",null,"Testing can be considered a first-class citizen. It comes built into Elixir."),Object(a.b)("p",null,"When you generate the project with ",Object(a.b)("inlineCode",{parentName:"p"},"mix"),", you get a test folder put in automatically."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"cards_test.exs")," file is specifically built for testing the functions used in ",Object(a.b)("inlineCode",{parentName:"p"},"cards_test.exs"),"."),Object(a.b)("p",null,"Note that running ",Object(a.b)("inlineCode",{parentName:"p"},"elixir test")," will end up with two tests run with 0 failures."),Object(a.b)("p",null,'The "mystery" test cmes frm the ',Object(a.b)("inlineCode",{parentName:"p"},"@doc")," tag ",Object(a.b)("inlineCode",{parentName:"p"},"## Examples")," - it will run that chunk of code as if it is a test!"),Object(a.b)("p",null,"Example, the following code will run as a test:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'@doc """\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    ["Ace of Spaces"]\n"""\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend\n')),Object(a.b)("h2",{id:"important-tidbits"},"Important Tidbits"),Object(a.b)("p",null,"Worth noting for a basic Elixir test example:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),"defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"doctest")," is used for testing the documentation examples."),Object(a.b)("h2",{id:"case-tests"},"Case Tests"),Object(a.b)("p",null,"For the terms ",Object(a.b)("inlineCode",{parentName:"p"},"use ExUnit.Case"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-elixir"}),'defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test "create_deck makes 20 cards" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend\n')),Object(a.b)("h2",{id:"assert-vs-refute"},"Assert vs Refute"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"refute")," keyword is just the opposite of ",Object(a.b)("inlineCode",{parentName:"p"},"assert"),"."))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Elixir/Elixir-Course-Testing.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-elixir-elixir-course-testing.101a1afd2417ec7a4a77.js.map