(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./manual/Algorithms/Case-Swap.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),s={},i="wrapper";function o(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(i,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"case-swap"},"Case Swap"),Object(r.b)("h2",{id:"resources"},"Resources"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://www.coderbyte.com/editor/Swap%20Case:Kotlin"}),"CoderByte - Kotlin"))),Object(r.b)("h2",{id:"question"},"Question"),Object(r.b)("p",null,"Have the function ",Object(r.b)("inlineCode",{parentName:"p"},"SwapCase(str)"),' take the str parameter and swap the case of each character. For example: if str is "Hello World" the output should be ',Object(r.b)("inlineCode",{parentName:"p"},"hELLO wORLD"),". Let numbers and symbols stay the way they are."),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'Input: "Hello-LOL"\nOutput: hELLO-lol\n')),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'Input: "Sup DUDE!!?"\nOutput: sUP dude!!?\n')),Object(r.b)("h2",{id:"answer"},"Answer"),Object(r.b)("p",null,"In JavaScript:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"function SwapCase(str) {\n  let retStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[a-z]/.test(str[i])) {\n      retStr += str[i].toUpperCase();\n    } else if (/[A-Z]/.test(str[i])) {\n      retStr += str[i].toLowerCase();\n    } else {\n      retStr += str[i];\n    }\n  }\n  // code goes here\n  return retStr;\n}\n")),Object(r.b)("p",null,"In Kotlin:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'fun SwapCase(str: String): String {\n  val regexLower = Regex(pattern = "[a-z]")\n  val regexUpper = Regex(pattern = "[A-Z]")\n  val list = mutableListOf<String>()\n\n  for (i in str.indices) {\n    if (regexLower.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toUpperCase())\n    } else if (regexUpper.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toLowerCase())\n    } else {\n      list.add(str[i].toString())\n    }\n  }\n  // code goes here\n  return list.joinToString("").trim();\n}\n\nfun main(args: Array<String>) {\n  println(SwapCase(readLine()))\n}\n')))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Algorithms/Case-Swap.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-algorithms-case-swap.101a1afd2417ec7a4a77.js.map