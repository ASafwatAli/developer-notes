{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/React-Native/React-Native-Redux.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent"],"mappings":"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","file":"static/js/manual-react-native-react-native-redux.2b02f267.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-native-with-redux\"\n    }}>{`React Native with Redux`}</h1>\n    <p>{`Now that ReduxThunk is set up, we can use it inside an action creator.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => console.log(user))\n    };\n};\n`}</code></pre>\n    <p>{`So, what is ReduxThunk doing for us?`}</p>\n    <p>{`Now that we have ReduxThunk, it will change how we call the action creator.`}</p>\n    <p>{`The Action Creator `}<inlineCode parentName=\"p\">{`WILL NOW RETURN A FUNCTION`}</inlineCode>{`. If ReduxThunk sees a function returned, it will send off an action with a dispatcher and immediately call that function.`}</p>\n    <p>{`This will then start our login request. The app will wait and the .then will automatically run and we will then dispatch our action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => {\n                dispatch({ type: 'LOGIN_USER_SUCCESS', payload: user });\n            });\n    };\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dealing-with-navigation\"\n    }}>{`Dealing with Navigation`}</h2>\n    <p>{`As opposed to React with `}<inlineCode parentName=\"p\">{`React-Router`}</inlineCode>{`, React Native doesn't necessarily have one.`}</p>\n    <p>{`In this case, we'll be using the solution called `}<inlineCode parentName=\"p\">{`React-Native-Router-Flux`}</inlineCode>{` to help with navigation.`}</p>\n    <p>{`How does it work?`}</p>\n    <p>{`Imagine an app that requires authentication. We could then have another scene where the is a Master-Detail relationship.`}</p>\n    <p>{`We essentially define a `}<inlineCode parentName=\"p\">{`Scene`}</inlineCode>{` for each distinct screens. For example.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<Scene key=\"login\" component={LoginForm} />\n<Scene key=\"employeeList\" component={EmployeeList} />\n<Scene key=\"employeeDetail\" component={EmployeeDetail} />\n\n// All the props you can pass to the scene\n\n<Scene\n    key=\"login\"                 // call Actions.login() to show this screen\n    component={LoginForm}       // component to show\n    title=\"Login\"               // make nav bar and give it a title - this is built in\n    initial                     // define the first screen to show\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"navigation-in-the-router\"\n    }}>{`Navigation in the Router`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// Create a router.js\n\nimport React from 'react';\nimport { Scene, Router } from 'react-native-router-flux';\n\n// scene-target\nimport ExampleComponent from './components/examplecomponent/ExampleComponent';\nimport Table from './components/table/Table';\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n            <Scene key=\"table\" component={Table} title=\"Table\" initial />\n        </Router>\n    );\n};\n\nexport default RouterComponent;\n\n// in app.js\n\n...\nimport Router from './router';\n\nconst App = () => {\n\n    const store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n    return (\n        <Provider store={store}>\n            <Router />\n        </Provider>\n    );\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`So how do we move between these scenes?`}</p>\n    <h2 {...{\n      \"id\": \"navigating-between-routes\"\n    }}>{`Navigating between routes`}</h2>\n    <p>{`Navigation will happen from an action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// import actions\nimport { Actions } from 'react-native-router-flux';\n\n// Action Creators\nexport const loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList(); // this method comes from the key property\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"grouping-scenes-with-buckets\"\n    }}>{`Grouping Scenes with 'Buckets'`}</h2>\n    <p>{`Making decisions on how the header should render.`}</p>\n    <p>{`We can do `}<inlineCode parentName=\"p\">{`scene nesting`}</inlineCode>{` to group these screens. There is one 'gotcha' though. Now for the actions, we need to actually use Actions.main().`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// router.js\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"auth\">\n                <Scene key=\"login\" component={Login} title=\"Login\" />\n            </Scene>\n            <Scene key=\"flow\">\n                <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n                <Scene\n                    // for action, you normally call Actions.key()\n                    onRight={() => console.log('right!!!')}\n                    rightTitle=\"Add\"\n                    key=\"table\"\n                    component={Table}\n                    title=\"Table\"\n                    initial\n                />\n            </Scene>\n        </Router>\n    );\n};\n`}</code></pre>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`initial`}</inlineCode>{` prop within these `}<inlineCode parentName=\"p\">{`buckets`}</inlineCode>{` to let which component within a bucket to have an initial prop`}</p>\n    <h2 {...{\n      \"id\": \"actions-to-navigate-between-buckets\"\n    }}>{`Actions to navigate between buckets`}</h2>\n    <p>{`These actions can be added using`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { Actions } from 'react-native-router-flux';\n\n// Action Creators - exammple thunk action creator\nconst loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList();\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"form-updates-at-a-reducer-level--dynamic-property-updates\"\n    }}>{`Form updates at a reducer level / Dynamic Property updates`}</h2>\n    <p>{`Example reducer function with ES6 dynamic change.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case EMPLOYEE_UPDATE:\n            return {...state, [action.payload.prop]: action.payload.value};\n        default:\n            return state;\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}