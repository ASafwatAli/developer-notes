(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{"./manual/Go/Go-Basic-Slices.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var s=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},c="wrapper";function r(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)(c,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"basic-slice-functions"},"Basic Slice Functions"),Object(a.b)("p",null,"Set up the folder with test and main file:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-go"}),'// slices_test.go\npackage slices\n\nimport (\n    "testing"\n)\n\n// slices.go\npackage slices\n')),Object(a.b)("h2",{id:"push"},"Push"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-go"}),'// slices_test.go\nfunc TestPushToIntSlice(t *testing.T) {\n    s := []int{1, 2, 3}\n    i := 4\n\n    exp := []int{1, 2, 3, 4}\n    res := Push(s, i)\n    for idx, val := range res {\n        if exp[idx] != val {\n            t.Fatalf("Expected %+v, got %+v", exp, res)\n        }\n    }\n}\n\n// Push append int to end of int slice\nfunc Push(a []int, b int) []int {\n    return append(a, b)\n}\n')),Object(a.b)("h2",{id:"pop"},"Pop"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-go"}),'// slices_test.go\nfunc TestPopIntFromSliceSlice(t *testing.T) {\n    s := []int{1, 2, 3, 4}\n\n    expArr := []int{1, 2, 3}\n    exp := 4\n\n    res, resArr := Pop(s)\n    for idx, val := range resArr {\n        if expArr[idx] != val {\n            t.Fatalf("Expected %+v, got %+v", exp, res)\n        }\n    }\n\n    if exp != res {\n        t.Fatalf("Popped integer not as expected")\n    }\n}\n\n// Pop return an integer from an array + array without last index\nfunc Pop(a []int) (int, []int) {\n    x, b := a[len(a)-1], a[:len(a)-1]\n    return x, b\n}\n')),Object(a.b)("h2",{id:"unshift"},"Unshift"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-go"}),"// slices_test.go\n\n// Unshift append as first element and return new slice\nfunc Unshift(a []int, b int) []int {\n    return append([]int{b}, a...)\n}\n")),Object(a.b)("h2",{id:"shift"},"Shift"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-go"}),"// slices_test.go\n\n// Shift remove from front and return int and new slice\nfunc Shift(a []int) (int, []int) {\n    x, b := a[0], a[1:]\n    return x, b\n}\n")))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Go/Go-Basic-Slices.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-go-go-basic-slices.101a1afd2417ec7a4a77.js.map