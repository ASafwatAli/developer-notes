(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{"./manual/Kotlin/Kotlin-Basics.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},s="wrapper";function r(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)(s,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"kotlin-basics"},"Kotlin Basics"),Object(l.b)("p",null,"This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc."),Object(l.b)("h2",{id:"kotlin-repl"},"Kotlin REPL"),Object(l.b)("p",null,"Brew install ",Object(l.b)("inlineCode",{parentName:"p"},"kotlin")," and then you'll have access to the REPL."),Object(l.b)("p",null,"Use ",Object(l.b)("inlineCode",{parentName:"p"},"kotlinc")," with no arguments to enter the REPL."),Object(l.b)("p",null,"To compile and run code from the command line:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar\n")),Object(l.b)("h2",{id:"hello-kotlin"},"Hello, Kotlin"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'fun main(args: Array<String>) {\n  println("Hello, Kotlin!")\n}\n')),Object(l.b)("h2",{id:"shift-operators"},"Shift Operators"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"1 shl 3 // shift left\n32 shr 2 // shift right\n")),Object(l.b)("h2",{id:"math-functions"},"Math Functions"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2\n")),Object(l.b)("h2",{id:"naming"},"Naming"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed\n")),Object(l.b)("h2",{id:"type-conversion"},"Type Conversion"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer\n")),Object(l.b)("p",null,"To do implicit conversion:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked\n")),Object(l.b)("h2",{id:"chars-vs-strings"},"Chars Vs Strings"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes\n")),Object(l.b)("p",null,"String interpolation happens with ",Object(l.b)("inlineCode",{parentName:"p"},"$"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'var name = "Dick"\nvar message = "Hello my name is $name!" // "Hello my name is Dick!"\n')),Object(l.b)("p",null,"Multiline strings:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'let bigString = """\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  """.trimMargin()\nprintln(bigString)\n')),Object(l.b)("p",null,"The above will print:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-text"}),"You can have a string\nthat contains multiple\nlines\nby\ndoing this.\n")),Object(l.b)("h2",{id:"pair--triples"},"Pair + Triples"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)\n")),Object(l.b)("h2",{id:"number-types"},"Number types"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int\n")),Object(l.b)("h2",{id:"any-unit-and-nothing"},"Any, Unit, and Nothing"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'val anyNum: Any = 1\nval anyString: Any = "Yo"\n')),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Unit")," is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Nothing")," is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes."),Object(l.b)("p",null,"This can occur if a function either causes the program to stop completely by throwing an ",Object(l.b)("inlineCode",{parentName:"p"},"Exception")," or if it simply goes on forever without ever finishing."),Object(l.b)("h2",{id:"control-logic"},"Control Logic"),Object(l.b)("p",null,"Worth noting if/else can be single line ie ",Object(l.b)("inlineCode",{parentName:"p"},"val min = if (a < b) a else b"),"."),Object(l.b)("h3",{id:"range"},"Range"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)\n")),Object(l.b)("h3",{id:"repeat"},"Repeat"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}\n")),Object(l.b)("h3",{id:"stepping"},"Stepping"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}\n")),Object(l.b)("p",null,"You could even ",Object(l.b)("inlineCode",{parentName:"p"},"downTo")," step:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}\n")),Object(l.b)("h3",{id:"labelled-statements"},"Labelled Statements"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}\n")),Object(l.b)("h2",{id:"when-expressions"},"When Expressions"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'val number = 10\nwhen (number) {\n  0 -> println("Zero")\n  else -> println("Non-zero")\n}\n\n// multi-valued whens\nval string = "Dog"\nwhen (string) {\n  "Cat", "Dog" -> println("Animal is a house pet.")\n  else -> println("Animal is not a house pet.")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> "Early morning"\n  in 6..11 -> "Morning"\n  in 12..16 -> "Afternoon"\n  in 17..19 -> "Evening"\n  in 20..23 -> "Late evening"\n  else -> "INVALID HOUR!"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println("Origin")\n  y == 0 && z == 0 -> println("On the x-axis at x = $x")\n  x == 0 && z == 0 -> println("On the y-axis at y = $y")\n  x == 0 && y == 0 -> println("On the z-axis at z = $z")\n  else -> println("Somewhere in space at x = $x, y = $y, z = $z")\n}\n')),Object(l.b)("h2",{id:"functions"},"Functions"),Object(l.b)("p",null,"Note that parameters are constants by default."),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'fun printMyName() {\n  println("My name is Dick Lucas.")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println("$value * 5 = ${value * 5}")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println("$multiplier * $andValue = ${multiplier * andValue}")\n}\nprintMultipleOf(4, 2)\n')),Object(l.b)("p",null,"If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier\n")),Object(l.b)("h3",{id:"overloading"},"Overloading"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return "The value is $value"\n}\n')),Object(l.b)("h3",{id:"functions-as-variables"},"Functions As Variables"),Object(l.b)("pre",null,Object(l.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works\n")))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Kotlin/Kotlin-Basics.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-kotlin-kotlin-basics.101a1afd2417ec7a4a77.js.map