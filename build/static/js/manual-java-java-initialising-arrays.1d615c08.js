(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{"./manual/Java/Java-Initialising-Arrays.md":function(n,e,a){"use strict";a.r(e),a.d(e,"default",function(){return o});var i=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),t=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),s={},r="wrapper";function o(n){var e=n.components,a=Object(i.a)(n,["components"]);return Object(t.b)(r,Object.assign({},s,a,{components:e,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"initialising-arrays-in-java"},"Initialising Arrays in Java"),Object(t.b)("p",null,"Basic example on how to declare, declare with allocated size and initialise with default values:"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"int[] allocArr = new int[2]; // init with memory for 2 spaces\nint[] declareArr; // declaration\nint[] withValues = { n.data }; // shorthand init with values\n")),Object(t.b)("h2",{id:"push-pop-shift-unshift"},"Push, pop, shift, unshift"),Object(t.b)("p",null,"This requires the use of ",Object(t.b)("inlineCode",{parentName:"p"},"List")," and ",Object(t.b)("inlineCode",{parentName:"p"},"ArrayList")),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"Array.push    -> ArrayList.add(Object o); // Append the list\nArray.pop     -> ArrayList.remove(int index); // Remove list[index]\nArray.shift   -> ArrayList.remove(0); // Remove first element\nArray.unshift -> ArrayList.add(int index, Object o); // Prepend the list\n")),Object(t.b)("p",null,"Example:"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        List<String> animals = new ArrayList<>();\n\n        animals.add("Lion");\n        animals.add("Tiger");\n        animals.add("Cat");\n        animals.add("Dog");\n\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add() -> push(): Add items to the end of an array\n        animals.add("Elephant");\n        System.out.println(animals);  // [Lion, Tiger, Cat, Dog, Elephant]\n\n        // remove() -> pop(): Remove an item from the end of an array\n        animals.remove(animals.size() - 1);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add(0,"xyz") -> unshift(): Add items to the beginning of an array\n        animals.add(0, "Penguin");\n        System.out.println(animals); // [Penguin, Lion, Tiger, Cat, Dog]\n\n        // remove(0) -> shift(): Remove an item from the beginning of an array\n        animals.remove(0);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n    }\n}\n')))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Java/Java-Initialising-Arrays.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-java-java-initialising-arrays.101a1afd2417ec7a4a77.js.map