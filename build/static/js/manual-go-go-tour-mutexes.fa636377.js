(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{"./manual/Go/Go-Tour-Mutexes.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),c={},u="wrapper";function i(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)(u,Object.assign({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"go-tour-mutexes"},"Go Tour Mutexes"),Object(a.b)("h2",{id:"syncmutex"},"sync.Mutex"),Object(a.b)("p",null,"We've seen how channels are great for communication among goroutines."),Object(a.b)("p",null,"But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?"),Object(a.b)("p",null,"This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex."),Object(a.b)("p",null,"Go's standard library provides mutual exclusion with ",Object(a.b)("inlineCode",{parentName:"p"},"sync.Mutex")," and its two methods:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Lock"),Object(a.b)("li",{parentName:"ul"},"Unlock")),Object(a.b)("p",null,"We can define a block of code to be executed in mutual exclusion by surrounding it with a call to ",Object(a.b)("inlineCode",{parentName:"p"},"Lock")," and ",Object(a.b)("inlineCode",{parentName:"p"},"Unlock")," as shown on the Inc method."),Object(a.b)("p",null,"We can also use ",Object(a.b)("inlineCode",{parentName:"p"},"defer")," to ensure the mutex will be unlocked as in the ",Object(a.b)("inlineCode",{parentName:"p"},"Value")," method."),Object(a.b)("h2",{id:"basic-mutex-example"},"Basic Mutex Example"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-golang"}),'package main\n\nimport (\n    "fmt"\n    "sync"\n    "time"\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    fmt.Println(c.v) // map[]\n\n    for i := 0; i < 1000; i++ {\n        go c.Inc("somekey")\n    }\n\n    time.Sleep(time.Second) // delay during async goroutine\n    fmt.Println(c.Value("somekey")) // 1000\n}\n')))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Go/Go-Tour-Mutexes.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-go-go-tour-mutexes.101a1afd2417ec7a4a77.js.map