{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Rust/Building-Rust-CLIs.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oCADR,oCAGAL,OAAAE,EAAA,EAAAF,CAAA,wDAAmDA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACrEC,KAAQ,sDADuC,cAAnD,KAGAP,OAAAE,EAAA,EAAAF,CAAA,4BAAuBA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACzCC,KAAQ,oCADW,QAAvB,kCAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,4CADQ,4CAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,+CADQ,+CAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,0CADQ,0CAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,0CADQ,0CAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,2CADQ,2CAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,QAEjBN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,oCAA+BA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,qCAA/B,KACAN,OAAAE,EAAA,EAAAF,CAAA,8GACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,eAGAL,OAAAE,EAAA,EAAAF,CAAA,sDACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,q4CAsCLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,eAGAL,OAAAE,EAAA,EAAAF,CAAA,iDACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,iBADZ,8tBA+BLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,mBADZ,uZAcTZ,EAAWa,gBAAiB","file":"static/js/manual-rust-building-rust-cl-is.6f64b06e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"building-rust-command-line-tools\"\n    }}>{`Building Rust Command Line Tools`}</h1>\n    <p>{`Initial findings based off a useful article `}<a parentName=\"p\" {...{\n        \"href\": \"https://mattgathu.github.io/writing-cli-app-rust/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`We're using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clap-rs/clap\"\n      }}>{`Clap`}</a>{` crate to help bootstrap CLIs.`}</p>\n    <h2 {...{\n      \"id\": \"useful-tools-to-consider\"\n    }}>{`Useful tools to consider`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rust-cli/human-panic\"\n        }}>{`https://github.com/rust-cli/human-panic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hniksic/rust-subprocess\"\n        }}>{`https://github.com/hniksic/rust-subprocess`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/oconnor663/duct.rs\"\n        }}>{`https://github.com/oconnor663/duct.rs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kkawakam/rustyline\"\n        }}>{`https://github.com/kkawakam/rustyline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mitsuhiko/indicatif\"\n        }}>{`https://github.com/mitsuhiko/indicatif`}</a></li>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Initialise an app using `}<inlineCode parentName=\"p\">{`cargo new app_name_you_want --bin`}</inlineCode>{`.`}</p>\n    <p>{`This example diverges from the above article by using the \"Clap\" crate with the YAML file config.`}</p>\n    <h3 {...{\n      \"id\": \"srcmainrs\"\n    }}>{`src/main.rs`}</h3>\n    <p>{`Update the file to reflect the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"srccliyml\"\n    }}>{`src/cli.yml`}</h3>\n    <p>{`For the CLI args, set the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-above-config\"\n    }}>{`Running the above config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}