(window.webpackJsonp=window.webpackJsonp||[]).push([[419],{"./manual/Redis/Redis-Kue-Nodejs.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},a="wrapper";function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)(a,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"redis-queues-and-forking-with-kue"},"Redis queues and forking with Kue"),Object(r.b)("p",null,"Reference these links:"),Object(r.b)("p",null,Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917"}),"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917"),"\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf"}),"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf"),"\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/Automattic/kue"}),"https://github.com/Automattic/kue")),Object(r.b)("h2",{id:"tldr"},"tl;dr"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const { fork } = require('child_process');\n\nconst kue = require('kue');\nkue.app.listen(3050);\nconst port = process.env.REDIS_PORT ? process.env.REDIS_PORT : '6379';\nconst host = process.env.REDIS_HOST ? process.env.REDIS_HOST : '127.0.0.1';\n\nlet queue = kue.createQueue({\n  redis: {\n    host: host,\n    port: port\n  }\n});\n\nqueue.process('build', 1, (job, done) => {\n  run(job, done);\n});\n\nconst run = async (job, done) => {\n  try {\n    const { data } = job.data;\n    // process is a forked process\n    const compute = fork('./processes/buildWeb.js');\n    compute.send(data);\n\n    compute.on('message', (_) => {\n      return done();\n    });\n  } catch (err) {\n    console.error(err);\n    return done(new Error(JSON.stringify(err)));\n  }\n};\n\nmodule.exports = (app) => {\n  app.post('/', async function(req, res) {\n    try {\n      // Create a fork for a process\n      const buildJob = queue\n        .create('build', {\n          // Job Type\n          project: project, // Job Data\n          data: req.body\n        })\n        .removeOnComplete(true) // REMOVE THE JOB FROM THE QUEUE ONCE IT'S COMPLETED\n        .attempts(5) // The maximum number of retries you want the job to have\n        .backoff({ delay: 60 * 1000, type: 'exponential' }) // Time between retries. Read docs.\n        .save(); // PERSIST THE DAMN JOB LOL\n\n      buildJob.on('failed', function(errorMessage) {\n        console.log('Job failed');\n        let error = JSON.parse(errorMessage);\n        // error now contains the object passed from the worker when the job failed\n        console.log(error); // Check it out for yourself\n        // call pagerduty or whatever jazz you wanna do in case of failure\n      });\n\n      res.status(200).send('Building ' + project);\n    } catch (err) {\n      return res.status(500).send('Failed');\n    }\n  });\n};\n\n// buildWeb.js\nconst run = async (data) => {\n  try {\n    setTimeout(() => {\n      process.send('Done');\n    }, 3000);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nprocess.on('message', (data) => {\n  run(data);\n});\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Redis/Redis-Kue-Nodejs.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-redis-redis-kue-nodejs.101a1afd2417ec7a4a77.js.map