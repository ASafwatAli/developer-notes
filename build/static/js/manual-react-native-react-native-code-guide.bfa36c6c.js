(window.webpackJsonp=window.webpackJsonp||[]).push([[397],{"./manual/React-Native/React-Native-Code-Guide.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),r={},s="wrapper";function i(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)(s,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"react-native-cheat-sheet-using-es6"},"React-Native Cheat Sheet using ES6"),Object(a.b)("h2",{id:"rn-1-importing-from-react"},"RN-1: Importing from React"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"in index.ios.js")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// import from React and React-Native\nimport React, { Component } from 'react';\n\n// required components go here -> check from the docs\nimport { AppRegistry, TabBarIOS, StyleSheet, Text, View } from 'react-native';\n\n// import from your own files\nimport { Featured } from './Featured.js';\nimport { Search } from './Search.js';\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"rn-2-example-classes"},"RN-2: Example classes"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// this is an example class\nclass BookSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTab: 'featured'\n    };\n  }\n\n  // this is where the view renders\n  render() {\n    return (\n      // JSX commands relate to imports from react-native\n      // {} is where the JSX compiles Javascript\n      <TabBarIOS selectedTab={this.state.selectedTab}>\n        <TabBarIOS.Item\n          title=\"Left Tab\"\n          selected={this.state.selectedTab === 'featured'}\n          icon={{ uri: base64Icon, scale: 3 }}\n          onPress={() => {\n            this.setState({\n              selectedTab: 'featured'\n            });\n          }}\n        >\n          <Featured />\n        </TabBarIOS.Item>\n        <TabBarIOS.Item\n          title=\"Right Tab\"\n          selected={this.state.selectedTab === 'search'}\n          icon={{ uri: base64Icon, scale: 3 }}\n          onPress={() => {\n            this.setState({\n              selectedTab: 'search'\n            });\n          }}\n        >\n          <Search />\n        </TabBarIOS.Item>\n      </TabBarIOS>\n    );\n  }\n}\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"rn-3-registry-for-an-app"},"RN-3: Registry for an App"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"AppRegistry.registerComponent('BookSearch', () => BookSearch);\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"rn-4-debugging---important-things-to-note"},"RN-4: Debugging - Important things to note"),Object(a.b)("p",null,"If the AppRegistry is not working (error regarding App not registered)"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Check all terminal sessions that have used React Native have closed"),Object(a.b)("li",{parentName:"ol"},"Try running the command npm link from the main directory of the project"),Object(a.b)("li",{parentName:"ol"},"Check the moduleName in the AppDelegate.m file in the Xcode Project")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"rn-5-stylesheetcreate"},"RN-5: StyleSheet.create"),Object(a.b)("p",null,"In this example, you can see how the 'const styles' variable is declared and how it is implemented in the render() function."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const styles = StyleSheet.create({\n  description: {\n    fontSize: 20,\n    backgroundColor: 'white'\n  },\n  container: {\n    flex: 1\n  }\n});\n\nclass Search extends Component {\n  render() {\n    return (\n      <NavigatorIOS\n        style={styles.container}\n        initialRoute={{\n          title: 'Search Books',\n          component: SearchBooks\n        }}\n      />\n    );\n  }\n}\n")),Object(a.b)("hr",null),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"iOS Views")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," ! important ")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"<View>")," tags are treated similar to as if they are ",Object(a.b)("inlineCode",{parentName:"p"},"<div>")," tags"),Object(a.b)("hr",null),Object(a.b)("h2",{id:"rn-6-navigation-view"},"RN-6: Navigation View"),Object(a.b)("p",null,"Example: Search.js from the BookSearch project"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"'use strict';\n\nimport React, { Component } from 'react';\nimport { StyleSheet, NavigatorIOS, Text } from 'react-native';\nimport { SearchBooks } from './SearchBooks.js';\n\nconst styles = StyleSheet.create({\n  description: {\n    fontSize: 20,\n    backgroundColor: 'white'\n  },\n  container: {\n    flex: 1\n  }\n});\n\nexport default class Search extends Component {\n  render() {\n    return (\n      <NavigatorIOS\n        style={styles.container}\n        initialRoute={{\n          title: 'Search Books',\n          component: SearchBooks\n        }}\n      />\n    );\n  }\n}\n")),Object(a.b)("h2",{id:"rn-7-uitablecellview-replica-listview"},"RN-7: UITableCellView replica (ListView)"),Object(a.b)("p",null,"BookList.js - taken from BookSearch"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"'use strict';\n\nimport React, { Component } from 'react';\n\nimport {\n  Image,\n  StyleSheet,\n  Text,\n  View,\n  ListView,\n  TouchableHighlight,\n  ActivityIndicatorIOS\n} from 'react-native';\n\nimport { BookDetail } from './BookDetail.js';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    padding: 10\n  },\n  thumbnail: {\n    width: 53,\n    height: 81,\n    marginRight: 10\n  },\n  rightContainer: {\n    flex: 1\n  },\n  title: {\n    fontSize: 20,\n    marginBottom: 8\n  },\n  author: {\n    color: '#656565'\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#dddddd'\n  },\n  listView: {\n    marginTop: 60,\n    backgroundColor: '#F5FCFF'\n  },\n  loading: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\n// the commented out code related to FAKE_BOOK_DATA is how you can stub some data\n\n// const FAKE_BOOK_DATA = [\n//     {volumeInfo: {title: 'The Catcher in the Rye', authors: \"J. D. Salinger\", imageLinks: {thumbnail: 'http://books.google.com/books/content?id=PCDengEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api'}}}\n// ];\n\nconst REQUEST_URL =\n  'https://www.googleapis.com/books/v1/volumes?q=subject:fiction';\n\nexport default class BookList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      dataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2\n      })\n    };\n  }\n\n  componentDidMount() {\n    // var books = FAKE_BOOK_DATA;\n    // this.setState({\n    //     dataSource: this.state.dataSource.cloneWithRows(books)\n    // });\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch(REQUEST_URL)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(responseData.items),\n          isLoading: false\n        });\n      })\n      .done();\n  }\n\n  render() {\n    // var book = FAKE_BOOK_DATA[0];\n    if (this.state.isLoading) {\n      return this.renderLoadingView();\n    }\n\n    return (\n      <ListView\n        dataSource={this.state.dataSource}\n        renderRow={this.renderBook.bind(this)}\n        style={styles.listView}\n      />\n    );\n  }\n\n  renderLoadingView() {\n    return (\n      <View style={styles.loading}>\n        <ActivityIndicatorIOS size=\"large\" />\n        <Text>Loading books...</Text>\n      </View>\n    );\n  }\n\n  renderBook(book) {\n    return (\n      <TouchableHighlight\n        onPress={() => this.showBookDetail(book)}\n        underlayColor=\"#dddddd\"\n      >\n        <View>\n          <View style={styles.container}>\n            <Image\n              source={{ uri: book.volumeInfo.imageLinks.thumbnail }}\n              style={styles.thumbnail}\n            />\n            <View style={styles.rightContainer}>\n              <Text style={styles.title}>{book.volumeInfo.title}</Text>\n              <Text style={styles.author}>{book.volumeInfo.authors}</Text>\n            </View>\n          </View>\n          <View style={styles.separator} />\n        </View>\n      </TouchableHighlight>\n    );\n  }\n\n  showBookDetail(book) {\n    this.props.navigator.push({\n      title: book.volumeInfo.title,\n      component: BookDetail,\n      passProps: { book }\n    });\n  }\n}\n")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/React-Native/React-Native-Code-Guide.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-react-native-react-native-code-guide.101a1afd2417ec7a4a77.js.map