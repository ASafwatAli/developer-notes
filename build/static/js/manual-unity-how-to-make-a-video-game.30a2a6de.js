(window.webpackJsonp=window.webpackJsonp||[]).push([[505],{"./manual/Unity/How-To-Make-A-Video-Game.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},r="wrapper";function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)(r,Object.assign({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"how-to-make-a-video-game"},"How to make a video game"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#how-to-make-a-video-game"}),"How to make a video game")," - ",Object(i.b)("a",Object.assign({parentName:"li"},{href:"#what-is-a-game-engine"}),"What is a game engine?"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#part-2"}),"Part 2"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#unity-interface"}),"Unity Interface"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#prefabs"}),"Prefabs")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#setup-the-project"}),"Setup the project")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#navigating-the-scene-view"}),"Navigating the Scene View")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#position-the-camera"}),"Position the camera")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#image-effects-and-asset-stores"}),"Image effects and asset stores")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#programming-games"}),"Programming Games"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#programming-with-c-with-unity"}),"Programming with C# with Unity")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#gather-player-input"}),"Gather Player Input")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#moving-a-player-with-animation"}),"Moving a player with animation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#quaternions"}),"Quaternions"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#target-rotation"}),"Target rotation")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#making-a-follow-camera"}),"Making a follow camera")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#section-3"}),"Section 3"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#adding-the-flies-to-the-swamp"}),"Adding the flies to the swamp")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#adding-the-fly-pickup"}),"Adding the Fly Pickup"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#pickup-particles"}),"Pickup Particles")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#creating-the-enemy-in-the-game"}),"Creating the enemy in the game")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#monitor-player-health"}),"Monitor Player Health")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#managing-the-game-state"}),"Managing the game state")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#adding-audio"}),"Adding Audio"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#game-audio"}),"Game audio")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#controlling-sounds-on-game-objects"}),"Controlling sounds on game objects")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#audio-mixing"}),"Audio mixing")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#exporting-the-game"}),"Exporting the game"))))))),Object(i.b)("p",null,"How are games made?"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Game designers"),Object(i.b)("li",{parentName:"ul"},"Game artists"),Object(i.b)("li",{parentName:"ul"},"Game developers")),Object(i.b)("p",null,"These roles can be between one or thousands of people."),Object(i.b)("p",null,"Game artists deal with what you see and hear in the game."),Object(i.b)("h3",{id:"what-is-a-game-engine"},"What is a game engine?"),Object(i.b)("p",null,"Game engines help deal with things like the physics and rendering graphics."),Object(i.b)("p",null,"A game engine is a framework for building games that helps coordinate things like assets and gives you all the tools you need to start coding."),Object(i.b)("p",null,"A game engine is not a 3D art engine."),Object(i.b)("p",null,"We are Unity as it is easier to learn when you are just getting started."),Object(i.b)("h2",{id:"part-2"},"Part 2"),Object(i.b)("h3",{id:"unity-interface"},"Unity Interface"),Object(i.b)("p",null,"Create a ",Object(i.b)("inlineCode",{parentName:"p"},"_Scenes")," folder."),Object(i.b)("p",null,"Game assets are ",Object(i.b)("inlineCode",{parentName:"p"},"a piece of media for the game"),". This could be sounds, scripts or models etc."),Object(i.b)("h4",{id:"prefabs"},"Prefabs"),Object(i.b)("p",null,"Stores several objects together. An example ",Object(i.b)("inlineCode",{parentName:"p"},"prefab")," is the frog which contains the 3d model, the texture and the animation together."),Object(i.b)("h3",{id:"setup-the-project"},"Setup the project"),Object(i.b)("p",null,"Games use ",Object(i.b)("inlineCode",{parentName:"p"},"real time rendering")," where it is drawn at the frame rate. Generally you want to aim for 60fps or higher. This will make is look as smooth as possible."),Object(i.b)("p",null,"We can go to ",Object(i.b)("inlineCode",{parentName:"p"},"Window > Lighting > Settings")," to adjust things about how the scene is lit."),Object(i.b)("p",null,"To adjust the player settings go to ",Object(i.b)("inlineCode",{parentName:"p"},"Edit > Project Settings > Player"),"."),Object(i.b)("p",null,"For quality, go to ",Object(i.b)("inlineCode",{parentName:"p"},"Edit > Project Settings > Quality"),"."),Object(i.b)("h3",{id:"navigating-the-scene-view"},"Navigating the Scene View"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"environment")," prefab links a bunch of Maya elements and groups them as a prefab."),Object(i.b)("p",null,"Our environment prefab already has a light associated with it. Ensure after adding that you re-generate the light in the settings."),Object(i.b)("p",null,"Anything with a green square is outlining a game object."),Object(i.b)("p",null,"After selecting an object, you can use the 3d axis to change the transform of the axis."),Object(i.b)("p",null,"On the top left, we can change the tools from position to rotation etc and with similar methods to before, we can rotate the axis."),Object(i.b)("p",null,"We can also just use the ",Object(i.b)("inlineCode",{parentName:"p"},"qwer")," keys to change between tools."),Object(i.b)("p",null,"We can also switch between ",Object(i.b)("inlineCode",{parentName:"p"},"global")," and ",Object(i.b)("inlineCode",{parentName:"p"},"local")," space to help move things around."),Object(i.b)("h3",{id:"position-the-camera"},"Position the camera"),Object(i.b)("p",null,"The scenes looks good so far, but it we need to update the camera."),Object(i.b)("p",null,"At the top of the scene window, we have ",Object(i.b)("inlineCode",{parentName:"p"},"scene"),", ",Object(i.b)("inlineCode",{parentName:"p"},"game")," tabs. If we select ",Object(i.b)("inlineCode",{parentName:"p"},"game"),", we get to see how the game will look when we play it. We can either write code to control to camera or change the transform."),Object(i.b)("h3",{id:"image-effects-and-asset-stores"},"Image effects and asset stores"),Object(i.b)("p",null,"An image effect can change things like colours etc."),Object(i.b)("p",null,"Once we click on the asset store, we can build or share models to use."),Object(i.b)("p",null,"Unity is component based so we can add things that way. We can now create a post processing profile to use."),Object(i.b)("h2",{id:"programming-games"},"Programming Games"),Object(i.b)("h3",{id:"programming-with-c-with-unity"},"Programming with C# with Unity"),Object(i.b)("p",null,"JavaScript is also able to be used, but far less adopted by the Unity commmunity."),Object(i.b)("p",null,"After creating a file, you will run into the ",Object(i.b)("inlineCode",{parentName:"p"},"Start")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Update")," methods that are able to run at each frame so that we can edit the code to do specific things."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n")),Object(i.b)("p",null,"Public and private are differing ",Object(i.b)("inlineCode",{parentName:"p"},"accessibility levels"),". The second keyword in a declaration is the ",Object(i.b)("inlineCode",{parentName:"p"},"type"),"."),Object(i.b)("h3",{id:"gather-player-input"},"Gather Player Input"),Object(i.b)("p",null,"We need to record which button they are pressing in each frame."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw("Horizontal");\n        moveVertical = Input.GetAxisRaw("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n}\n')),Object(i.b)("h3",{id:"moving-a-player-with-animation"},"Moving a player with animation"),Object(i.b)("p",null,"After adding the script to update the script, we need to animate the frog."),Object(i.b)("p",null,"The animator components with now be on the inspector for the player."),Object(i.b)("p",null,"We will use the playerAnimator to access to Animator component."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n        // special method to get the "Animator" component\n        playerAnimator = GetComponent<Animator>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw("Horizontal");\n        moveVertical = Input.GetAxisRaw("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the `update` method\n    // this method doesn\'t run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat("Speed", 3f);\n        } else {\n            playerAnimator.SetFloat("Speed", 0);\n        }\n    }\n}\n')),Object(i.b)("p",null,"So far we haven't told the frog how to change direction or to have the camera follow the movement."),Object(i.b)("h3",{id:"quaternions"},"Quaternions"),Object(i.b)("p",null,"Behind the scenes, Unity stores the rotational values as ",Object(i.b)("inlineCode",{parentName:"p"},"Quaternions"),". Most games ending will use these to solve rotational issues."),Object(i.b)("h4",{id:"target-rotation"},"Target rotation"),Object(i.b)("p",null,"The rigid body and box collider is how the objects like ",Object(i.b)("inlineCode",{parentName:"p"},"Player")," can interact with the physics and turning."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n    private float turningSpeed = 20f;\n    private Rigidbody playerRigidBody;\n\n    // Use this for initialization\n    void Start () {\n        // Gather components from the player object\n        // special method to get the "Animator" component\n        playerAnimator = GetComponent<Animator> ();\n        playerRigidBody = GetComponent<Rigidbody> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw ("Horizontal");\n        moveVertical = Input.GetAxisRaw ("Vertical");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the `update` method\n    // this method doesn\'t run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat ("Speed", 3f);\n        } else {\n            playerAnimator.SetFloat ("Speed", 0);\n        }\n    }\n}\n')),Object(i.b)("p",null,"We need to perform a ",Object(i.b)("inlineCode",{parentName:"p"},"Lerp")," to change the variable from one to another over time."),Object(i.b)("p",null,"Unity also doesn't save any change settings when you are playing the game."),Object(i.b)("h3",{id:"making-a-follow-camera"},"Making a follow camera"),Object(i.b)("p",null,"This will have the camera to always follow the parent."),Object(i.b)("p",null,"We can use ",Object(i.b)("inlineCode",{parentName:"p"},"[SerializeField]")," to expose fields from the code into the inspector."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FollowCamera : MonoBehaviour {\n\n    [SerializeField]\n    private Transform player;\n    [SerializeField]\n    private Vector3 offset;\n    private float cameraFollowSpeed = 5f;\n\n    // Update is called once per frame\n    void Update () {\n        Vector3 newPosition = player.position + offset;\n\n        // Smooth transition\n        transform.position = Vector3.Lerp(transform.position, newPosition, cameraFollowSpeed + Time.deltaTime);\n    }\n}\n")),Object(i.b)("h2",{id:"section-3"},"Section 3"),Object(i.b)("h3",{id:"adding-the-flies-to-the-swamp"},"Adding the flies to the swamp"),Object(i.b)("p",null,"Let's add an objective to the game (pickup)."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyMovement : MonoBehaviour {\n    [SerializeField]\n    private Transform center;\n    private float flySpeed;\n\n    // Use this for initialization\n    void Start () {\n        flySpeed = Random.Range (300f, 700f);\n    }\n\n    // Update is called once per frame\n    void Update () {\n        transform.RotateAround (center.position, Vector3.up, flySpeed * Time.deltaTime);\n    }\n}\n")),Object(i.b)("h3",{id:"adding-the-fly-pickup"},"Adding the Fly Pickup"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            Destroy (gameObject);\n        }\n    }\n}\n')),Object(i.b)("h4",{id:"pickup-particles"},"Pickup Particles"),Object(i.b)("p",null,"Particle systems are a game object which generates multiple systems."),Object(i.b)("p",null,"As for their destruction:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PickupParticlesDestruction : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n        Destroy (gameObject, 5f);\n    }\n}\n")),Object(i.b)("p",null,"You can also create scripts that aren't attached to a 3d model in the scene view."),Object(i.b)("p",null,"You can create an empty object from the left hand sidebar. Reset the transform and rename."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'// Fly Spawner\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'// Fly Pickup\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag ("Player")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n')),Object(i.b)("h3",{id:"creating-the-enemy-in-the-game"},"Creating the enemy in the game"),Object(i.b)("p",null,"The bird game object needs to know where the player is. It's known as path finding."),Object(i.b)("p",null,"Unity makes path finding very easy."),Object(i.b)("p",null,"With the ",Object(i.b)("inlineCode",{parentName:"p"},"Nav Mesh Agent"),", you can set the following for the bird:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{}),"Speed: 5\nAngular Speed: 720\nStopping Distance: 5\nRadius: 1\nHeight: 4\n")),Object(i.b)("p",null,"We now need to create a ",Object(i.b)("inlineCode",{parentName:"p"},"Nav Mesh"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"NavMeshAgent"),' allows us to set a destination target that the "enemy" can follow. It is a component that can be attached to a game object so that it can interact with the ',Object(i.b)("inlineCode",{parentName:"p"},"NavMesh"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"// BirdMovement.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BirdMovement : MonoBehaviour {\n\n    [SerializeField]\n    private Transform target;\n    private UnityEngine.AI.NavMeshAgent birdAgent;\n    private Animator birdAnimator;\n\n    // Use this for initialization\n    void Start () {\n        birdAgent = GetComponent<UnityEngine.AI.NavMeshAgent> ();\n        birdAnimator = GetComponent<Animator> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // Set the bird's destination\n        birdAgent.SetDestination (target.position);\n\n        // Measure the magnitude of the NavMeshAgent's velocity\n        float speed = birdAgent.velocity.magnitude;\n\n        // Pass the velocity to the animator component\n        birdAnimator.SetFloat(\"Speed\", speed);\n    }\n}\n")),Object(i.b)("h3",{id:"monitor-player-health"},"Monitor Player Health"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerHealth : MonoBehaviour {\n    public bool alive;\n    [SerializeField]\n    private GameObject pickupPrefab;\n    // Use this for initialization\n    void Start () {\n        alive = true;\n    }\n\n    void OnTriggerEnter(Collider other) {\n        if (other.CompareTag ("Enemy") && alive == true) {\n            alive = false;\n\n            // Create the pickup particles\n            Instantiate(pickupPrefab, transform.position, Quaternion.identity);\n        }\n    }\n}\n')),Object(i.b)("h3",{id:"managing-the-game-state"},"Managing the game state"),Object(i.b)("p",null,"How do we know when the game has started and when we need to restart?"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\n\npublic class GameState : MonoBehaviour {\n    private bool gameStarted = false;\n    [SerializeField]\n    private Text gameStateText;\n    [SerializeField]\n    private GameObject player;\n    [SerializeField]\n    private BirdMovement birdMovement;\n    [SerializeField]\n    private FollowCamera followCamera;\n    private float restartDelay = 3f;\n    private float restartTimer;\n    private PlayerMovement playerMovement;\n    private PlayerHealth playerHealth;\n\n    // Use this for initialization\n    void Start () {\n        Cursor.visible = false;\n\n        playerMovement = player.GetComponent<PlayerMovement> ();\n        playerHealth = player.GetComponent<PlayerHealth> ();\n\n        // do not allow player to move before the game\n        playerMovement.enabled = false;\n        // prevent bird\n        birdMovement.enabled = false;\n        // prevent follow camear\n        followCamera.enabled = false;\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // If the game is not sarted and the player presses the space bar...\n        if (gameStarted == false && Input.GetKeyUp(KeyCode.Space)) {\n            // ... start the game\n            StartGame();\n        }\n\n        // If player is no longer alive ...\n        if (playerHealth.alive == false) {\n            // ...end the game\n            EndGame();\n\n            // ... increment timer to count up to restarting...\n            restartTimer = restartTimer + Time.deltaTime;\n\n            // ...and if it reaches the restart delay...\n            if (restartTimer >= restartDelay) {\n                // reload scene\n                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            }\n        }\n    }\n\n    private void StartGame() {\n        gameStarted = true;\n\n        // set main text to see through\n        gameStateText.color = Color.clear;\n\n        // allow player to move\n        playerMovement.enabled = true;\n        birdMovement.enabled = true;\n        followCamera.enabled = true;\n    }\n\n    private void EndGame() {\n        gameStarted = false;\n\n        gameStateText.text = "Game Over";\n        // set main text to see through\n        gameStateText.color = Color.white;\n\n        // remove player from game\n        player.SetActive (false);\n    }\n}\n')),Object(i.b)("h2",{id:"adding-audio"},"Adding Audio"),Object(i.b)("h3",{id:"game-audio"},"Game audio"),Object(i.b)("p",null,"We can add the ",Object(i.b)("inlineCode",{parentName:"p"},"Audio Source")," component and select the sounds."),Object(i.b)("p",null,"We can also randomly generate a sound to help add something natural."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-csharp"}),"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RandomSoundPlayer : MonoBehaviour {\n    private AudioSource audioSource;\n    [SerializeField]\n    private List<AudioClip> soundClips = new List<AudioClip>();\n    [SerializeField]\n    private float soundTimerDelay = 3f;\n    private float soundTimer;\n\n    // Use this for initialization\n    void Start () {\n        audioSource = GetComponent<AudioSource>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // incredment a timer to count up to restarting\n        soundTimer = soundTimer + Time.deltaTime;\n\n        // if the timer reaches the delay...\n        if (soundTimer >= soundTimerDelay) {\n            soundTimer = 0f;\n            // choose a random sound\n            AudioClip randomSound = soundClips[Random.Range(0, soundClips.Count)];\n            audioSource.PlayOneShot (randomSound);\n        }\n    }\n}\n")),Object(i.b)("h3",{id:"controlling-sounds-on-game-objects"},"Controlling sounds on game objects"),Object(i.b)("p",null,"Add another empty game child and add the audio but select ",Object(i.b)("inlineCode",{parentName:"p"},"play on awake")," off."),Object(i.b)("p",null,"To make sounds 3d, we need to change the spatial blend. We also need to make sure the game camera and distance are set correctly."),Object(i.b)("p",null,"We need to update the scripts to ensure that these clips play at the appropriate time."),Object(i.b)("h3",{id:"audio-mixing"},"Audio mixing"),Object(i.b)("p",null,"Use the audio mixer, create groups and assign these groups via the ",Object(i.b)("inlineCode",{parentName:"p"},"AudioComponent")," on the hierarchy or prefab."),Object(i.b)("h3",{id:"exporting-the-game"},"Exporting the game"))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Unity/How-To-Make-A-Video-Game.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-unity-how-to-make-a-video-game.101a1afd2417ec7a4a77.js.map