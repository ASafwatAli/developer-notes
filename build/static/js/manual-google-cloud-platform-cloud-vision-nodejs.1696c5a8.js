(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{"./manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},c="wrapper";function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)(c,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"cloud-vision-w-nodejs"},"Cloud Vision w/ Nodejs"),Object(s.b)("h2",{id:"references"},"References"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs"}),"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs"))),Object(s.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(s.b)("p",null,"Ensure you have set up a GCP project with Cloud Vision enabled. Follow the link above if you need help."),Object(s.b)("p",null,"Move the project creds to the right directory and install ",Object(s.b)("inlineCode",{parentName:"p"},"@google-cloud/vision")," for the project."),Object(s.b)("h2",{id:"typescript-example"},"TypeScript Example"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"// src/index.ts\nconst vision = require('@google-cloud/vision');\nconst util = require('util');\nconst ss = require('string-similarity');\nconst cc = require('lodash.camelcase');\nconst up = require('lodash.capitalize');\nconst path = require('path');\n\nconst components: string[] = [\n  'Select',\n  'Text',\n  'Button',\n  'TextField',\n  'Image',\n  'Icon',\n];\n\nconst run = async () => {\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Base file required for the src folder detection\n  const fileName = './src/img/testFour.jpg';\n\n  // Performs text detection on the local file\n  const [result] = await client.textDetection(fileName);\n  const detections = result.textAnnotations;\n  console.log('=== STARTING ===');\n  const fullDetection = detections[0];\n  const { description } = fullDetection;\n\n  console.log('Description:', description);\n\n  let res = '';\n\n  description.split('\\n').map((line: string) => {\n    res += '<div>\\n';\n    line.split(',').map((text) => {\n      const { bestMatch } = ss.findBestMatch(up(cc(text)), components);\n      res += `\\t<${bestMatch.target} />\\n`;\n    });\n    res += '</div>\\n';\n  });\n  console.log('=== RES ===');\n  console.log(res);\n};\n\nrun();\n")),Object(s.b)("p",null,"Running ",Object(s.b)("inlineCode",{parentName:"p"},"node --require ts-node/register src/index.ts")," should result in the output we want."))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Google-Cloud-Platform/Cloud-Vision-Nodejs.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-google-cloud-platform-cloud-vision-nodejs.101a1afd2417ec7a4a77.js.map