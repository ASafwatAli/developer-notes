(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{"./manual/Principles/Principles.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),l={},s="wrapper";function r(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)(s,Object.assign({},l,r,{components:n,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#styling-guidelines-and-principles"}),"Styling Guidelines and Principles"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#challenges"}),"Challenges"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#current-challenges"}),"Current challenges")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#naming-challenges"}),"Naming challenges")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#naming-conventions"}),"Naming conventions"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#links"}),"Links")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#types"}),"Types")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#ordering"}),"Ordering")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#example-layout"}),"Example layout"))))),Object(i.b)("h1",{id:"styling-guidelines-and-principles"},"Styling Guidelines and Principles"),Object(i.b)("h2",{id:"challenges"},"Challenges"),Object(i.b)("h3",{id:"current-challenges"},"Current challenges"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Standardising style configuration:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"themes"),Object(i.b)("li",{parentName:"ul"},"colours"),Object(i.b)("li",{parentName:"ul"},"animation"),Object(i.b)("li",{parentName:"ul"},"elevation"),Object(i.b)("li",{parentName:"ul"},"typography"),Object(i.b)("li",{parentName:"ul"},"grid"),Object(i.b)("li",{parentName:"ul"},"breakpoints"),Object(i.b)("li",{parentName:"ul"},"iconography"),Object(i.b)("li",{parentName:"ul"},"naming conventions"),Object(i.b)("li",{parentName:"ul"},"style order"),Object(i.b)("li",{parentName:"ul"},"rules for classing"),Object(i.b)("li",{parentName:"ul"},"relation to design"))),Object(i.b)("li",{parentName:"ol"},"Standardising file system layout:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"themes"),Object(i.b)("li",{parentName:"ul"},"flexibility"),Object(i.b)("li",{parentName:"ul"},"subdirectory structure (images, fonts, utils)"))),Object(i.b)("li",{parentName:"ol"},"Code quality",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"documentaiton"),Object(i.b)("li",{parentName:"ul"},"testing"),Object(i.b)("li",{parentName:"ul"},"reusability"),Object(i.b)("li",{parentName:"ul"},"callback ability when updating repos"),Object(i.b)("li",{parentName:"ul"},"accessibility"),Object(i.b)("li",{parentName:"ul"},"dependency abuse"))),Object(i.b)("li",{parentName:"ol"},"Resources",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"references and direction"),Object(i.b)("li",{parentName:"ul"},"onboarding")))),Object(i.b)("h3",{id:"naming-challenges"},"Naming challenges"),Object(i.b)("p",null,"A list of challeneges when thinking of naming conventions:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"How can styling conventions apply between frameworks?"),Object(i.b)("li",{parentName:"ol"},"What conventions do we need to sacrifice between different frameworks?"),Object(i.b)("li",{parentName:"ol"},"How is this consumable for both the dev and designer ecosystem?"),Object(i.b)("li",{parentName:"ol"},"What file structures do we incorporate between partials to make them easily reusable."),Object(i.b)("li",{parentName:"ol"},"How can we define class names that work for all the different types of code we write?"),Object(i.b)("li",{parentName:"ol"},"How can we efficiently document and test our code?"),Object(i.b)("li",{parentName:"ol"},"How can we maintain consistency in the way we write our styling?"),Object(i.b)("li",{parentName:"ol"},"How can we enforce accessible, high standards for our HTML?"),Object(i.b)("li",{parentName:"ol"},"How can we decouple and standardise things such as grids, animation speeds, iconography etc.?")),Object(i.b)("h2",{id:"naming-conventions"},"Naming conventions"),Object(i.b)("h3",{id:"links"},"Links"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"http://thesassway.com/advanced/modular-css-naming-conventions"}),"Modular Sass")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"http://rscss.io/"}),"RSCSS")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"http://a11y-style-guide.com/style-guide/"}),"A11y Style Guide"))),Object(i.b)("h2",{id:"types"},"Types"),Object(i.b)("p",null,"Predetermined types by level:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-yml"}),"body:\n  header: # @classname header\n    # @children\n  # Top level for each section\n  section: # @classname section-name\n    # @children\n    container: # @classname container-name\n      # Base selection of rules\n      ? block\n      # @children\n      grid:\n        ? grid-item\n        # @children\n      table:\n        # @children\n        table-header:\n          # @children\n        table-data:\n          # @chidlren\n      list:\n        # react native only\n        list-item:\n          # @children\n      # ... more, maybe article etc\n      nav:\n        nav-item:\n          # @children\n  component: # @classname component-name\n    # Specific component based styling\n    # @children\n    # Base selection of rules\n    ? block\n    # @children\n    grid:\n      ? grid-item\n      # @children\n    table:\n      # @children\n      table-header:\n        # @children\n      table-data:\n        # @chidlren\n    list:\n      # react native only\n      list-item:\n        # @children\n    # ... more, maybe article etc\n    nav:\n      nav-item:\n        # @children\n  footer: # @classname footer - but maybe should be more specific\n    # @children\n")),Object(i.b)("h2",{id:"ordering"},"Ordering"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),".selector {\n    /* Mixins + Extends */\n    @extend .selector-to-extend-from;\n    @include mixin;\n\n    /* Positioning */\n    position: absolute;\n    z-index: 10;\n    top: 0;\n    right: 0;\n\n    /* Display & Box Model */\n    display: inline-block;\n    overflow: hidden;\n    box-sizing: border-box;\n    padding: 10px;\n    border: 10px solid #333;\n    margin: 10px;\n\n    /* Sizing */\n    max-width: 100px;\n    width: 100%;\n    height: 100px;\n\n    /* Background */\n    background-color: #000;\n\n    /* Text */\n    font-family: sans-serif;\n    font-size: 16px;\n    line-height: 1.4;\n    text-align: right;\n    color: #fff\n\n    /* Transitions */\n    transition: all $speed ease-out;\n\n    /* Other */\n    cursor: pointer;\n\n    /* Modifiers */\n    &:last-of-type {\n        // Repeat Ordering Rules\n    }\n\n    &:hover,\n    &:focus {\n        // Repeat Ordering Rules\n    }\n\n    /* Media Breaks */\n    @include grid-media($mobile-grid) {\n        // Repeat Ordering Rules\n    }\n\n    /* Second-tier elements */\n    .selector-child {\n        // Repeat Ordering Rules\n    }\n}\n")),Object(i.b)("h2",{id:"example-layout"},"Example layout"),Object(i.b)("p",null,Object(i.b)("img",{alt:"Example layout",src:t("./manual/assets/example-layout.png")})),Object(i.b)("p",null,"The aim is that regardless of whether or not we are using a template engine, JSX, html or whatever that uses/doesn't use partials or components of some form that we are able to maintain consistency."),Object(i.b)("p",null,"In the above image, let's look at how we would implement in a template engine like twig and then in React:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'\x3c!-- Section partial ~/partials/page-offers/section-offers.twig (TODO: decide naming strutures?) --\x3e\n<section class="section-offers">\n    <div class="container-content">\n        <div class="block-content"></div>\n        <div class="block-header"></div>\n        <div class="grid-offers">\n            {% for offer in offers %}\n                <div class="grid-offer">\n                    {% include \'partials/component-offer/offer.twig\' with {offer: offer} %}\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n</section>\n\n\x3c!-- Section partial ~/partials/page-offers/component-offer.twig (TODO: decide naming strutures?) --\x3e\n<div class="component-offer">\n    <div class="block-image">\n        <img src="{{ offer.imgSource }}" alt="{{ offer.alt }}" class="offer-image">\n    </div>\n    <div class="block-title">\n        <h3 class="offer-title">{{ offer.title }}</h3>\n    </div>\n</div>\n')),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'// components/SectionOffers/index.js\nimport React, { Component } from \'react\';\nimport Images from \'img/Image\';\nimport Offer from \'components/Offer\';\n\nclass SectionOffers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers = [...]\n        };\n    }\n\n    /**\n     * Render the <Home /> component\n     * @return {Home} Home page component\n     */\n    render() {\n        const { membershipCardId, profile } = this.props;\n\n        console.log(this.state.renderCode);\n        return (\n            <section className="section-offers">\n                <div className="container-content">\n                    <div className="block-content"></div>\n                    <div className="block-header"></div>\n                    <div className="grid-offers">\n                        {offers.map(d, i) => (\n                            <div className="grid-offer">\n                                <Offer offer={d} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default SectionOffers;\n\n// components/Offer/index.js\n// ENSURE THAT ANY COMPONENT WE BUILD FOR\n// IS STATELESS\nimport React, { Component } from \'react\';\nimport { Link } from \'react-router\';\nimport Images from \'img/Image\';\n\nexport default Offer = (props) => (\n    <div className="component-offer">\n        <div className="block-image">\n            <img src={props.imgSource} alt={props.imgAlt} className="offer-image">\n        </div>\n        <div className="block-title">\n            <h3 className="offer-title">{props.offerTitle</h3>\n        </div>\n    </div>\n);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// in other base files\n// base/_container.scss\n.container {\n  // keep vars elsewhere\n  max-width: $max-width;\n  // center\n  margin: 0 auto;\n  // set base padding rules\n  // containers should only have padding\n  padding: 80px 20px;\n\n  // set base overrides\n  @include grid-media($mobile) {\n    padding: 10px;\n  }\n}\n\n// base/_block.scss\n.block {\n  // if blocks get basic rules\n}\n\n// base/_grid.scss\n.grid {\n  // our base grid rules\n  // given we are enforcing STANDARD rules\n  // ensure you use the direct child selector\n  > .grid-item {\n    // item rules\n  }\n}\n\n// Component or partial: SectionOffers\n// sections/_section-offers.scss\n// every file should only go three levels deep\n// level one: parent\n// level two: any child of parent (parent should prevent bleed through)\n// level three: modifiers, sibling classes, media breaks\n.section-offers {\n  // should handle:\n  // padding\n  // background color\n  padding: 80px 20px;\n\n  @include grid-media($mobile) {\n    padding: 40px 20px;\n  }\n\n  .container-content {\n    // should handle central gutter\n    @extend .container;\n    // ^ brings in things like margin: 0 auto;\n  }\n\n  .block-content {\n    // blocks should only have margin-bottom\n    margin-bottom: 20px;\n\n    @include grid-media($mobile) {\n    }\n  }\n\n  .block-header {\n  }\n\n  // another pre-determined type\n  .grid-offers {\n    @extend .grid;\n  }\n\n  // note that this is still level two\n  // and doesn't fall in component scss\n  .grid-offer {\n    @extend .grid-item;\n  }\n}\n\n// components or react level styling\n// components/_offers.scss\n.component-offer {\n  // begin rules again\n  position: relative;\n  // ...\n\n  .block-image {\n    // ...\n  }\n\n  .offer-image {\n    // ...\n  }\n\n  .block-title {\n    // ...\n  }\n\n  .offer-title {\n    // ...\n  }\n}\n")),Object(i.b)("p",null,"In the case of a React Native app, set the styles object to be equivalent but without nesting:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'// Component or partial: SectionOffers\n// sections/_section-offers.scss\n// every file should only go three levels deep\n// level one: parent\n// level two: any child of parent (parent should prevent bleed through)\n// level three: modifiers, sibling classes, media breaks\nconst sectionOffers = {\n    containerContent {\n        @extend .container;\n    }\n\n    blockContent {\n        // blocks should only have margin-bottom\n        margin-bottom: 20px;\n\n        @include grid-media($mobile) {\n        }\n    }\n\n    blockHeader {\n    }\n\n    // another pre-determined type\n    gridOffers {\n        @extend .grid;\n    }\n\n    // note that this is still level two\n    // and doesn\'t fall in component scss\n    gridOffer {\n        @extend .grid-item;\n    }\n}\n\n// Offer component\nconst styles = {\n    // components or react level styling\n    // components/_offers.scss\n    offer: {\n        // begin rules again\n        position: "relative";\n        // ...\n    }\n\n    offerimage: {\n        // ...\n    }\n\n    offerTitle {\n        // ...\n    }\n}\n')))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Principles/Principles.md"}}),r.isMDXComponent=!0},"./manual/assets/example-layout.png":function(e,n,t){e.exports=t.p+"static/img/example-layout.dfc1aad3.png"}}]);
//# sourceMappingURL=manual-principles-principles.101a1afd2417ec7a4a77.js.map