(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{"./manual/Kafka/Hello-Kafka.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return i});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),r={},c="wrapper";function i(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(c,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"hello-kafka"},"Hello Kafka"),Object(o.b)("h2",{id:"resources"},"Resources"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://medium.com/big-data-engineering/hello-kafka-world-the-complete-guide-to-kafka-with-docker-and-python-f788e2588cfc"}),"Getting started with Kafka")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/SOHU-Co/kafka-node"}),"Kafka Node Github")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/wurstmeister/kafka-docker"}),"Original Kafka Docker Github"))),Object(o.b)("h2",{id:"getting-started-with-nodejs"},"Getting Started with Nodejs"),Object(o.b)("p",null,"Run ",Object(o.b)("inlineCode",{parentName:"p"},"git clone https://github.com/wurstmeister/kafka-docker.git")," to clone wurstmeister's repo."),Object(o.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"Make sure you have both Docker and Docker Compose installed."),Object(o.b)("h2",{id:"docker-composing"},"Docker Composing"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"docker-compose up -d\ndocker-compose scale kafka=3\n# to see processes\ndocker-compose ps\n# teardown\ndocker-compose stop\n")),Object(o.b)("h2",{id:"consumeproducing-from-within-docker-container"},"Consume/Producing from within Docker Container"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"# from your terminal run:\ndocker exec -i -t -u root $(docker ps | grep docker_kafka | cut -d' ' -f1) /bin/bash\n# $(docker ps | grep docker_kafka | cut -d' ' -f1) - Will return the docker process ID of the Kafka Docker running so you can access it\n\n# create topic1 and topic2 for our examples\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic1\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic2\n\n# optional: create a consumer\n$KAFKA_HOME/bin/kafka-console-consumer.sh --from-beginning --bootstrap-server localhost:9092 --topic=topic1\n\n# optional: create a producer\n$KAFKA_HOME/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic=topic1\n")),Object(o.b)("p",null,"Note: We use ",Object(o.b)("inlineCode",{parentName:"p"},"localhost:9092")," here instead of ",Object(o.b)("inlineCode",{parentName:"p"},"kafka:9092")," for our Node Kafka scripts."),Object(o.b)("p",null,"When sending messages as a producer, note that we are latching onto particular partitions in the Node app and so only messages that head to a particular partition will be consumed."),Object(o.b)("h2",{id:"node-kafka"},"Node Kafka"),Object(o.b)("p",null,"Start a new project and install and prep the files we need:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"yarn init -y\nyarn add node-kafka\ntouch consumer.js producer.js\n")),Object(o.b)("h2",{id:"producer"},"Producer"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"var kafka = require('kafka-node'),\n  Producer = kafka.Producer,\n  KeyedMessage = kafka.KeyedMessage,\n  client = new kafka.KafkaClient(),\n  producer = new Producer(client),\n  km = new KeyedMessage('key', 'message'),\n  payloads = [\n    { topic: 'topic1', messages: 'hi', partition: 0 },\n    { topic: 'topic2', messages: ['hello', 'world', km] },\n  ];\nproducer.on('ready', function() {\n  producer.send(payloads, function(err, data) {\n    console.log(data);\n  });\n});\n\nproducer.on('error', function(err) {});\n")),Object(o.b)("h2",{id:"consumer"},"Consumer"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"var kafka = require('kafka-node'),\n  Consumer = kafka.Consumer,\n  client = new kafka.KafkaClient(),\n  consumer = new Consumer(\n    client,\n    [{ topic: 'topic1', partition: 0 }, { topic: 'topic2', partition: 1 }],\n    {\n      autoCommit: false,\n    },\n  );\n")),Object(o.b)("h2",{id:"running-it-altogether"},"Running it altogether"),Object(o.b)("p",null,"Ensure that you've created ",Object(o.b)("inlineCode",{parentName:"p"},"topic1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"topic2")," from within the Docker container."),Object(o.b)("p",null,"Once created, we can run ",Object(o.b)("inlineCode",{parentName:"p"},"node consumer.js")," in one terminal to listen for those topics on particular partitions and ",Object(o.b)("inlineCode",{parentName:"p"},"node producer.js")," to fire off some notifications."),Object(o.b)("p",null,"All the received events on the consumer will then log to the terminal."))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Kafka/Hello-Kafka.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-kafka-hello-kafka.101a1afd2417ec7a4a77.js.map