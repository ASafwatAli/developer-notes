(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"./manual/Algorithms/Minimum-Swaps.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return s});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),r={},o="wrapper";function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)(o,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"minimum-swaps"},"Minimum Swaps"),Object(a.b)("h2",{id:"how-to"},"How to"),Object(a.b)("p",null,"Given array ",Object(a.b)("inlineCode",{parentName:"p"},"[7, 1, 3, 2, 4, 5, 6]"),", what are the minimum swaps to sort this algorithm?"),Object(a.b)("h2",{id:"notes"},"Notes"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"We want this to be efficient, so selection sort doesn't cut it.")),Object(a.b)("h2",{id:"solution"},"Solution"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Build an array of indexes for where the next ",Object(a.b)("inlineCode",{parentName:"li"},"indexOf")," for the element you want is."),Object(a.b)("li",{parentName:"ol"},"For ",Object(a.b)("inlineCode",{parentName:"li"},"i = 0..n-1"),", if ",Object(a.b)("inlineCode",{parentName:"li"},"arr[0] !== i + 1"),", then swap ",Object(a.b)("inlineCode",{parentName:"li"},"arr[i]")," with ",Object(a.b)("inlineCode",{parentName:"li"},"arr[indexes[i]]"),"."),Object(a.b)("li",{parentName:"ol"},"Finally, swap ",Object(a.b)("inlineCode",{parentName:"li"},"indexes[arr[i] = 1]")," with the new position ",Object(a.b)("inlineCode",{parentName:"li"},"indexes[i]"),"."),Object(a.b)("li",{parentName:"ol"},"Increment swaps."),Object(a.b)("li",{parentName:"ol"},"Continue.")),Object(a.b)("p",null,"This solution will have a run time of ",Object(a.b)("inlineCode",{parentName:"p"},"n"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// Complete the minimumSwaps function below.\nfunction minimumSwaps(arr) {\n  let swaps = 0;\n  // Build an array of indexes for where the next `indexOf` for the element you want is.\n  const indexes = arr.map((_, i) => arr.indexOf(i + 1));\n\n  for (let i = 0; i < arr.length; i++) {\n    // if !== 1\n    if (arr[i] !== i + 1) {\n      // 7\n      const temp = arr[i];\n      // set arr[1] to 1\n      arr[i] = arr[indexes[i]];\n      // set arr[1] to 7\n      arr[indexes[i]] = temp;\n      // set indexes[6] to\n      indexes[temp - 1] = indexes[i];\n      // increment swaps\n      swaps++;\n    }\n  }\n\n  return swaps;\n}\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Algorithms/Minimum-Swaps.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-algorithms-minimum-swaps.101a1afd2417ec7a4a77.js.map