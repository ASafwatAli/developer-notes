{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Python/Python-Slack-Bot.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"yXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,WACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,oCAA+BA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAA/B,cACAN,OAAAE,EAAA,EAAAF,CAAA,qEAAgEA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAhE,6CACAN,OAAAE,EAAA,EAAAF,CAAA,kDAA6CA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAA7C,wCACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oBADR,oBAGAL,OAAAE,EAAA,EAAAF,CAAA,mBAAcA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAd,4EAA8IN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAA9I,kDAAsPN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,gBAAtP,QAAuTN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kBAAvT,sBACAN,OAAAE,EAAA,EAAAF,CAAA,uDAAkDA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,+BAAlD,KACAN,OAAAE,EAAA,EAAAF,CAAA,+DACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,mBAAcA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAd,sBAAwFN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cACxFN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,oBADZ,s2BA2BTX,EAAWY,gBAAiB","file":"static/js/manual-python-python-slack-bot.adee0c2f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`First of all, clone the `}<inlineCode parentName=\"p\">{`python_rtmbot`}</inlineCode>{` git repo.`}</p>\n    <p>{`Then, head to slack.com for your personal account, click `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` from the apps page and add a custom bot.`}</p>\n    <p>{`Grab the API token and copy it into a `}<inlineCode parentName=\"p\">{`rtmbot.conf`}</inlineCode>{` file at the root of your directory.`}</p>\n    <h2 {...{\n      \"id\": \"creating-plugins\"\n    }}>{`Creating plugins`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` folder, create a folder with the name of the plugin and then within the `}<inlineCode parentName=\"p\">{`plugin.py`}</inlineCode>{` itself. Inside, you want to ensure you have a `}<inlineCode parentName=\"p\">{`outputs = []`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`crontable = []`}</inlineCode>{` list ready to go.`}</p>\n    <p>{`From here, you can define processes as so: `}<inlineCode parentName=\"p\">{`def process_namehere(data):`}</inlineCode>{`.`}</p>\n    <p>{`The data argument is the data recieved by the bot.`}</p>\n    <h2 {...{\n      \"id\": \"banana-plugin\"\n    }}>{`Banana Plugin`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` directory, create `}<inlineCode parentName=\"p\">{`banana.py`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import random\n\nfrom nltk.tokenize import sent_tokenizem wordpunct_tokenize\nfrom noun_hound import NounHound\n\ncrontable = []\noutputs = []\n\nnh = NounHound()\n\ndef process_message(data):\n        messaage = data['text']\n        sentences = sent_tokenize(message)\n        sentences_num = random.randint(0, len(sentences) - 1)\n        setence = sentences[stence_num]\n        words = wordpunct_tokenize(sentence)\n        nouns = nh.process(sentence)\n        replacement = random.choice(nouns['nouns'])\n        words[words.index(replacement) = 'banana']\n        sentences[sentence_num] = ' '.join(words)\n        outputs.append([data[\"channel\"], ' '.join(sentences)])\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}