{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/COMP3306-AI/2-Problem-Solving-And-Search.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","align","isMDXComponent"],"mappings":"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","file":"static/js/manual-com-p3306-ai-2-problem-solving-and-search.07a88798.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"problem-solving-and-search\"\n    }}>{`Problem Solving and Search`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#problem-solving-and-search\"\n        }}>{`Problem Solving and Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-problem-formulation\"\n        }}>{`Search Problem Formulation`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#searching-for-solutions\"\n        }}>{`Searching for solutions`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#tree-search-algorithm---pseudo-code\"\n        }}>{`Tree search algorithm - pseudo code`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#nodes-vs-states\"\n        }}>{`Nodes vs States`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-strategies\"\n        }}>{`Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#uninformed-blind-search-strategies\"\n        }}>{`Uninformed (Blind) Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#bfs---breadth-first-search\"\n        }}>{`BFS - Breadth First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ucs---uniform-cost-search\"\n        }}>{`UCS - Uniform Cost Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#dfs---depth-firth-search\"\n        }}>{`DFS - Depth-Firth Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ids---iterative-deepening-searh-ids\"\n        }}>{`IDS - Iterative Deepening Searh (IDS)`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#informed-vs-uninformed-search\"\n        }}>{`Informed vs Uninformed Search`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#best-first-search\"\n        }}>{`Best First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#greedy-search-gs\"\n        }}>{`Greedy Search (GS)`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Learning Aims`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed Search: BFS, DFS, UCS and IDS`}</li>\n      <li parentName=\"ol\">{`Informed Search: Greedy Best-First`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"search-problem-formulation\"\n    }}>{`Search Problem Formulation`}</h2>\n    <p>{`Defined by 4 items:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Initial state`}</li>\n      <li parentName=\"ol\">{`Goal state`}</li>\n      <li parentName=\"ol\">{`Operators = actions`}</li>\n      <li parentName=\"ol\">{`Path cost function`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Choosing States and Actions`}</strong></p>\n    <p>{`Real problems are too complex, to solve them we need to `}<em parentName=\"p\">{`abstract`}</em>{` them! Simplify them by removing unnecessary details.`}</p>\n    <p>{`Eg. If we need to find the path somewhere, we can ignore things such as weather, road conditions, scenary.`}</p>\n    <p>{`Actions need to be suitable specified eg not \"turn the steering wheel left by 5 degrees\".`}</p>\n    <p>{`The `}<em parentName=\"p\">{`level of abstraction`}</em>{` must be appropriate.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`State = set of real states`}</li>\n      <li parentName=\"ul\">{`Action = complex combination of real actions`}</li>\n      <li parentName=\"ul\">{`Solution = set of real paths that are solutions in the real world`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`8-Queens Problem`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Incremental - stat with empty space, add 1 queen at a time`}</li>\n      <li parentName=\"ol\">{`Complete-state - start with all 8 queens and move them around`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`For 1:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Add any queen to any square`}</li>\n      <li parentName=\"ul\">{`State space? 1.8 `}<em parentName=\"li\">{` 10^14 states (= 64 `}</em>{` 63 `}<em parentName=\"li\">{` ... `}</em>{` 57)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 2:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens, 1 in each column with no queen attacking each other`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Place a queen in the left-most-empty column such that it is not attacked by any other queen`}</li>\n      <li parentName=\"ul\">{`State space? 2057 states`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 100-queens:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`1: 10^400 states`}</li>\n      <li parentName=\"ul\">{`2: 10^52 states (hugh improvement but problem still not tractable)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"searching-for-solutions\"\n    }}>{`Searching for solutions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Searching the state space`}</li>\n      <li parentName=\"ul\">{`Generate a search tree starting from the initial state and applying the operators`}</li>\n      <li parentName=\"ul\">{`We can generate a search graph - in a graph the same state can be reached rom multiple paths`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tree-search-algorithm---pseudo-code\"\n    }}>{`Tree search algorithm - pseudo code`}</h2>\n    <p>{`Basic idea: offline exploration of the state space by generating successors of the explored states (i.e. exapnding states)`}</p>\n    <p><strong parentName=\"p\">{`We keep two lists:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Expanded - for nodes that have been expanded`}</li>\n      <li parentName=\"ul\">{`Fringe - for nodes that bae been generated but not expanded yet`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"nodes-vs-states\"\n    }}>{`Nodes vs States`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` is different than a `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`A node:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`represents a state`}</li>\n      <li parentName=\"ul\">{`is a data structure used in the search tree`}</li>\n      <li parentName=\"ul\">{`includes `}<inlineCode parentName=\"li\">{`parent`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`children`}</inlineCode>{`, and other relevant information e.g. `}<inlineCode parentName=\"li\">{`depth`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`path cost g`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"search-strategies\"\n    }}>{`Search Strategies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`search strategy`}</inlineCode>{` defines which node from the fringe is most promising and should be expanded next`}</li>\n      <li parentName=\"ul\">{`We always keep the nodes in the fringe orded based on the search strategy and always expand the first one`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Evaluation Critera`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Term`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Completeness`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find a solution if one exists?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optimality`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find an `}<inlineCode parentName=\"td\">{`optimal (least cost path)`}</inlineCode>{` solution?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Time complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`How long does it take to find the solution? (measured as no. of generated nodes)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Space complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`what is the max number of nodes in memory?`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Time and space complexity`}</strong></p>\n    <p>{`Measured in terms of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`b: max branching factor of the search tree (we can assume that it is finite)`}</li>\n      <li parentName=\"ul\">{`d: depth of the optimal (least cost) solution`}</li>\n      <li parentName=\"ul\">{`m: maximum depth of the state space (can be finite or not finite)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`There are two types of search methods:`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed (blind)`}</li>\n      <li parentName=\"ol\">{`Informed (heuristic)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"uninformed-blind-search-strategies\"\n    }}>{`Uninformed (Blind) Search Strategies`}</h2>\n    <p><strong parentName=\"p\">{`Uninformed strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Generate children in a systematic way eg level by level, from left to right`}</li>\n      <li parentName=\"ul\">{`Know if a child node is a goal or non-goal node`}</li>\n      <li parentName=\"ul\">{`Do not know if one non-goal child is better (more promising) than another one. By contrast, informed (heuristic) search strategies know this`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`5 uninformed search strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Breadth first`}</li>\n      <li parentName=\"ul\">{`Uniform-cost`}</li>\n      <li parentName=\"ul\">{`Depth-first`}</li>\n      <li parentName=\"ul\">{`Depth-limited`}</li>\n      <li parentName=\"ul\">{`Iterative deepening`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"bfs---breadth-first-search\"\n    }}>{`BFS - Breadth First Search`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Is the first node in the fringe a goal node?\n    Yes => stop and return solution\n    No => expand it:\n        - Move it to the expanded list\n        - Generate its children and put them in the fringe in a order defined by the search strategy\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes`}</li>\n      <li parentName=\"ul\">{`Optimal? Not optimal in general; Yes, if step cost is the same, e.g. =1`}</li>\n      <li parentName=\"ul\">{`Time? generated nodes = `}<inlineCode parentName=\"li\">{`1+b+b^2+ ... + b^d = O(b^d)`}</inlineCode>{`, exponential`}</li>\n      <li parentName=\"ul\">{`Space? O(b^d) (keeps every node in memory)`}</li>\n      <li parentName=\"ul\">{`Both time and space are problems as they grow exponentially with depth but space is the bigger problem!`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ucs---uniform-cost-search\"\n    }}>{`UCS - Uniform Cost Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes ( if step cost>0 )`}</li>\n      <li parentName=\"ul\">{`Optimal? Yes`}</li>\n      <li parentName=\"ul\">{`Time? # nodes with g  cost of optimal solution O(bd)`}</li>\n      <li parentName=\"ul\">{`Space? # nodes with g  cost of optimal solution O(bd)`}</li>\n    </ul>\n    <p>{`UCS is equivalent to BFS if the step cost is 1 or the same`}</p>\n    <h2 {...{\n      \"id\": \"dfs---depth-firth-search\"\n    }}>{`DFS - Depth-Firth Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Expands deepest unexpanded node`}</li>\n      <li parentName=\"ul\">{`Implementation: insert children at the front of the fringe Fringe: A\nExpanded: none`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ids---iterative-deepening-searh-ids\"\n    }}>{`IDS - Iterative Deepening Searh (IDS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Sidesteps issue o choosing the best depth limit by trying all possible depth limits in turn (0, 1, 2, etc.) and applying DFS.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Depth-limited search = DFS with depth limit l - i.e. it imposes a cutoff on the maximum depth`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Properties - similar to DFS - Complete? Yes (as the search depth is always finite) - Optimal? No - Time? 1+b^2+b^3+b^4 + ... +b^l = O(b^l) - Space? O(bl)`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Overhead of multiple expansion`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`May seem wasteful as many nodes are expanded multiple times`}</li>\n      <li parentName=\"ul\">{`But for most problems the overhead of this multiple expansion is small!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Common properties of IDS`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`b - branching factor\nd - depth of least cost solution\nm - max depth\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Combines the benefits of DFS and BFS`}</li>\n      <li parentName=\"ul\">{`Complete? As BFS: - Yes `}{`[DFS: yes, if m is finite; no otherwise]`}{`*`}</li>\n      <li parentName=\"ul\">{`Optimal? As BFS: - No in general; Yes if step cost=1 `}{`[DFS: not optimal, even if step cost=1]`}{` `}{`*`}</li>\n      <li parentName=\"ul\">{`Time? As BFS: - `}<inlineCode parentName=\"li\">{`(d+1)b^0+db^1+(d-1)b^2+ ... +bd = O(b^d) [DFS: O(bm)] *`}</inlineCode></li>\n      <li parentName=\"ul\">{`Space? As DFS: O(bd), linear`}</li>\n      <li parentName=\"ul\">{`Where are the improvements of IDS in comparison to DFS? - in completeness, optimality and time (shown with `}{`*`}{`)`}</li>\n      <li parentName=\"ul\">{`Can be modified to explore uniform-cost tree`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"informed-vs-uninformed-search\"\n    }}>{`Informed vs Uninformed Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A search strategy defines the order of node expansion`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Uniformed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Uninformed search strategies do not use problem specific knowledge beyond the definition of the problem, i.e. they do not use heuristic knowledge. - expand nodes systematically - know if node is goal or non-goal - cannot compare two non-goal nodes (do not know if one goal node is better than another) - typically inefficient`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Informed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Informed search strategies use problem-specific heuristic knowledge to select the order of node expansion. They: - can compare non-goal nodes – they know if one non-goal node is better than another one - are typically more efficient`}</li>\n    </ul>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"best-first-search\"\n    }}>{`Best First Search`}</h1>\n    <p>{`How can informed strategies compare non-goal nodes?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`By using domain specific knowledge to devise an evaluation function which estimates how good each node is`}</li>\n      <li parentName=\"ul\">{`The evaluation function assigns a value to each node`}</li>\n      <li parentName=\"ul\">{`At each step, the best node is expanded (the one with the best\nvalue)`}</li>\n      <li parentName=\"ul\">{`This is called best-first search - Note that we don’t really know which is the best node as we use an estimate based on the evaluation function. So best-first search expands the node that appears to be the best.`}</li>\n      <li parentName=\"ul\">{`Fringe: insert children in decreasing order of desirability`}</li>\n      <li parentName=\"ul\">{`We will study 2 best-first search algorithms: greedy and A`}{`*`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"greedy-search-gs\"\n    }}>{`Greedy Search (GS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value as an evaluation function (h - heuristic)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h(n)`}</inlineCode>{` for node `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` is the estimated cost from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to a `}<inlineCode parentName=\"li\">{`goal`}</inlineCode>{` node`}</li>\n      <li parentName=\"ul\">{`Eg for the Romania example we can use `}<inlineCode parentName=\"li\">{`h(n)=SLD(n, Bucharest)`}</inlineCode>{` = straight-line distance from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to Bucharest`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value of a goal node is 0, i.e. `}<inlineCode parentName=\"li\">{`h(goal)=0`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? As DFS - Yes in finite spaces (if `}<inlineCode parentName=\"li\">{`m`}</inlineCode>{` is finite) - No - fails in infinite spaces (can get stuck in a loop)`}</li>\n      <li parentName=\"ul\">{`Optimal? No`}</li>\n      <li parentName=\"ul\">{`Time? O(b^m) but good heauristic can give dramatic improvement`}</li>\n      <li parentName=\"ul\">{`Space? O(b^m), keeps every node in memory`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}