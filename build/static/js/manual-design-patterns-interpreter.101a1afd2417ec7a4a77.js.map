{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Interpreter.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"6XAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,8BADR,8BAGAL,OAAAE,EAAA,EAAAF,CAAA,8CAEAA,OAAAE,EAAA,EAAAF,CAAA,4FACAA,OAAAE,EAAA,EAAAF,CAAA,8MACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,sEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,sHACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wCACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,qHAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,2zBA2CLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCE,KAAQ,2CADQ,kBAGpBR,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCE,KAAQ,sDADQ,0NAO1BZ,EAAWa,gBAAiB","file":"static/js/manual-design-patterns-interpreter.6dee0ced.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"interpreter-design-pattern\"\n    }}>{`Interpreter Design Pattern`}</h1>\n    <p>{`Purpose: Behavioural\nType: Class`}</p>\n    <p>{`The Interpreter Design Pattern specifies how to evaluate sentences in a string.`}</p>\n    <p>{`The idea is to have a class for each symbol. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (intrepret) the sentence for a client.`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`AbstractExpression (declares interpret method common to all nodes)`}</li>\n      <li parentName=\"ul\">{`TerminalExpression (interpret terminal symbols in the grammar)`}</li>\n      <li parentName=\"ul\">{`NonTerminalExpression (maintains instance variables of type AbstractExpression for nonterminal symbols in grammar)`}</li>\n      <li parentName=\"ul\">{`Context (info global to interpreter)`}</li>\n      <li parentName=\"ul\">{`Client (builds abstract syntax tree representing a particular sentence in the language that the grammar defines)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Context {\n  private _input;\n\n  constructor(input) {\n    this._input = input;\n  }\n\n  public set input(value) {\n    this._input = value;\n  }\n}\n\ninterface Expression {\n  interpret(context: Context): void;\n}\n\nclass TerminalExpression implements Expression {\n  interpret(context: Context): void {\n    // process comma\n    console.log('interpret terminal');\n  }\n}\n\nclass NoneTerminalExpression implements Expression {\n  interpret(context: Context): void {\n    // process variable\n    console.log('interpret nonterminal');\n  }\n}\n\n(function main() {\n  const context: Context = new Context('1 bird can fly');\n  const list = [];\n  list.push(new TerminalExpression());\n  list.push(new NoneTerminalExpression());\n\n  list.map((exp: Expression) => {\n    exp.interpret(context);\n  });\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://ruslanspivak.com/lsbasi-part7/\"\n        }}>{`AST in action`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.baeldung.com/java-interpreter-pattern\"\n        }}>{`Java Interpreter for SQL`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}