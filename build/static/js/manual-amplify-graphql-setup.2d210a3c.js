(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"./manual/Amplify/Graphql-Setup.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},o="wrapper";function r(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)(o,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"graphql-setup"},"GraphQL Setup"),Object(i.b)("h2",{id:"links"},"Links"),Object(i.b)("p",null,Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2"}),"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2"),"\n",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde"}),"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde")),Object(i.b)("h2",{id:"to-get-it-running"},"To get it running"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y\n")),Object(i.b)("p",null,"Not that you can preset a schema to have used for Amplify."),Object(i.b)("p",null,"Example, create a ",Object(i.b)("inlineCode",{parentName:"p"},"schema.graphql")," file with following and pass the path during setup:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}\n")),Object(i.b)("h3",{id:"example-schema"},"Example schema"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}\n")),Object(i.b)("h3",{id:"example-mutation"},"Example mutation"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = `\n  mutation($name: String!, $description: String) {\n    createPet(input: {\n      name: $name\n      description: $description\n  }) {\n    id\n    name\n    description\n  }\n}`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};\n")),Object(i.b)("h3",{id:"example-query"},"Example query"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// define query\nconst listPets = `\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}\n")),Object(i.b)("h2",{id:"autogenerating-code-for-the-schema"},"Autogenerating code for the schema"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"amplify codegen add\n")),Object(i.b)("h2",{id:"1-many-many-to-many-relationship-schemas"},"1-many, many-to-many relationship schemas"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: "PostEditors")\n}\n# Create a join model and disable queries as you don\'t need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: "PostEditors")\n  editor: User! @connection(name: "UserEditors")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: "UserEditors")\n}\n')))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Amplify/Graphql-Setup.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-amplify-graphql-setup.101a1afd2417ec7a4a77.js.map