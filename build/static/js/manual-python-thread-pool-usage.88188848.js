(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{"./manual/Python/Thread-Pool-Usage.md":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return r});var t=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),a={},c="wrapper";function r(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(s.b)(c,Object.assign({},a,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"thread-pool-usage"},"Thread Pool Usage"),Object(s.b)("h2",{id:"resources"},"Resources"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",Object.assign({parentName:"li"},{href:"https://stackoverflow.com/questions/53751050/python-multiprocessing-understanding-logic-behind-chunksize"}),"Explanation behind chunksize"))),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-python"}),'"""\nprocesses=os.cpu_count() enables us to to utilise all\nprocessing cores.\n\nchunksize=1 tells us to pass one element on each execution. If you roughly know the time expecation of each function execution, you can increase this to chunk the args into bigger pieces for one process to tackle.\n"""\nfrom multiprocessing import Pool\n\ndef square(number):\n  return number * number\n\ndata  = [1,2,3]\nchunksize = 1\nproc_count = os.cpu_count()\nwith Pool(processes=proc_count) as pool:\n  result = pool.map(square, data, chunksize)\n  # result returns [1, 4, 9]\n')))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Python/Thread-Pool-Usage.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-python-thread-pool-usage.101a1afd2417ec7a4a77.js.map