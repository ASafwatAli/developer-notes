{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Iterator.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"0XAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,qLACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,oDAAyEN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,QAAzE,QAAmIN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAnI,kBACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kGAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,0DAAqDA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,sBAArD,QAA4HN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,oBAA5H,iCAA0NN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAA1N,0BACAN,OAAAE,EAAA,EAAAF,CAAA,gEAA2DA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kBAA3D,uEAA6LN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAA7L,oFACAN,OAAAE,EAAA,EAAAF,CAAA,6BAAwBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAxB,+DACAN,OAAAE,EAAA,EAAAF,CAAA,wCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,ulEA4ELP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCE,KAAQ,mDADQ,cAGpBR,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCE,KAAQ,uEADQ,8MAO1BZ,EAAWa,gBAAiB","file":"static/js/manual-design-patterns-iterator.82fb0ce0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"iterator\"\n    }}>{`Iterator`}</h1>\n    <p>{`A behavioural pattern that is used to access the elements of a collection object in sequential manner without a required understanding of the underlying representation.`}</p>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`ConcreteIterator: An interface to define how the `}<inlineCode parentName=\"li\">{`next`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`hasNext`}</inlineCode>{` methods work.`}</li>\n      <li parentName=\"ul\">{`ConcreteCollection: A collection that has knowledge of the iterator and creates the iterator.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In this basic example below, we will create a `}<inlineCode parentName=\"p\">{`ConcreteCollection`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ConcreteIterator`}</inlineCode>{` class to demonstrate how the `}<inlineCode parentName=\"p\">{`Iterator`}</inlineCode>{` design pattern works.`}</p>\n    <p>{`Note that after create a collection, we can use the `}<inlineCode parentName=\"p\">{`createIterator`}</inlineCode>{` method as many times as we want to return seperate instances of an `}<inlineCode parentName=\"p\">{`iterator`}</inlineCode>{` - for demonstration purposes, we will create a second iterator to do just that.`}</p>\n    <p>{`The last part of `}<inlineCode parentName=\"p\">{`\"main\"`}</inlineCode>{` will demo what happens when you intertwine iterator calls.`}</p>\n    <p>{`Check the logs for results.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Iterator<T> {\n  next(): T;\n  hasNext(): boolean;\n}\n\ninterface Collection {\n  createIterator(): Iterator<Number>;\n}\n\nclass ConcreteIterator implements Iterator<Number> {\n  private _collection: Number[];\n  private _index: number = 0;\n\n  constructor(newCollection: Number[]) {\n    this._collection = newCollection;\n  }\n\n  next(): any {\n    const result = this._collection[this._index];\n    this.log();\n    this._index += 1;\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this._index < this._collection.length;\n  }\n\n  private log(): void {\n    console.log(\\`Method called during index: \\${this._collection[this._index]}\\`);\n  }\n}\n\nclass ConcreteCollection implements Collection {\n  private _collection: Number[] = [];\n\n  constructor(collection: Number[]) {\n    this._collection = collection;\n  }\n\n  createIterator(): Iterator<Number> {\n    return new ConcreteIterator(this._collection);\n  }\n}\n\n(function main() {\n  const collection: ConcreteCollection = new ConcreteCollection([0, 1, 2, 3]);\n  const iterator: Iterator<Number> = collection.createIterator();\n  const secondIterator: Iterator<Number> = collection.createIterator();\n\n  while (iterator.hasNext()) {\n    const number: Number = iterator.next();\n    console.log(\\`Logging: \\${number.valueOf()}\\`);\n  }\n\n  while (secondIterator.hasNext()) {\n    const number: Number = secondIterator.next();\n    console.log(\\`Second Iterator Logging: \\${number.valueOf()}\\`);\n  }\n\n  // third and fourth iterators intertwined\n  const thirdIterator: Iterator<Number> = collection.createIterator();\n  const fourthIterator: Iterator<Number> = collection.createIterator();\n\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Iterator_pattern\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/design_pattern/iterator_pattern.htm\"\n        }}>{`Tutorials Point`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}