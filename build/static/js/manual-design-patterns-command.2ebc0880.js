(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{"./manual/Design-Patterns/Command.md":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return c});var a=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),t=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),i={},m="wrapper";function c(e){var n=e.components,o=Object(a.a)(e,["components"]);return Object(t.b)(m,Object.assign({},i,o,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"command"},"Command"),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"A behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. -- Wikipedia")),Object(t.b)("h2",{id:"terminology"},"Terminology"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Command: Knows about ",Object(t.b)("inlineCode",{parentName:"li"},"receiver")," and invokes a method of the ",Object(t.b)("inlineCode",{parentName:"li"},"receiver"),". Values for params of the receiver method are stored in the command. Values for receiver method params are stored in command."),Object(t.b)("li",{parentName:"ul"},"Receiver: Does the work when ",Object(t.b)("inlineCode",{parentName:"li"},"execute()")," is called in ",Object(t.b)("inlineCode",{parentName:"li"},"command")," object."),Object(t.b)("li",{parentName:"ul"},"Invoker: Knows how to execute a command and optionally does bookkeeping about command execution. Does not know anything about a concrete command, only the command interface."),Object(t.b)("li",{parentName:"ul"},"Client: Holds the ",Object(t.b)("inlineCode",{parentName:"li"},"command")," objects and ",Object(t.b)("inlineCode",{parentName:"li"},"receiver")," objects and assigns commands to the ",Object(t.b)("inlineCode",{parentName:"li"},"invoker"),". The client is also responsible for executing which commands at which points. It passes the ",Object(t.b)("inlineCode",{parentName:"li"},"command")," object to the ",Object(t.b)("inlineCode",{parentName:"li"},"invoker")," object.")),Object(t.b)("h2",{id:"github-repo-example"},"GitHub Repo Example"),Object(t.b)("p",null,"This example is an extension to some code taken directly from ",Object(t.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts"}),"gztchan's GitHub repo")," as it gives a nice and simple example."),Object(t.b)("p",null,"An extension made it to create a ",Object(t.b)("inlineCode",{parentName:"p"},"FireCommand")," to emulate how something like the Command Design could be used for a game."),Object(t.b)("p",null,"This simpler example focuses on the main participants: Handler (command interface), ConcreteHandler (commands), CommandReceiver (receiver), Invoker (invoker class), Client (invoker instance)."),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"// Receiver\ninterface Receive {\n  action(): void;\n}\n\nclass CommandReceiver implements Receive {\n  action(): void {\n    console.log('Receiver takes action');\n  }\n}\n\n// Command\ninterface Command {\n  execute(): void;\n}\n\n// ConcreteCommands\nclass LaunchCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Launch!!!');\n    this.receiver.action();\n  }\n}\n\nclass FireCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Fire!');\n    this.receiver.action();\n  }\n}\n\nclass StopCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Stop!!!');\n    this.receiver.action();\n  }\n}\n\n// Invoker\ninterface Invoke {\n  runCommand(command?: Command): void;\n}\n\nclass Invoker implements Invoke {\n  private commands: Command[];\n\n  constructor() {\n    this.commands = [];\n  }\n\n  addCommand(command: Command) {\n    this.commands.push(command);\n  }\n\n  runCommand(command?: Command) {\n    if (command) {\n      this.commands.push(command);\n    }\n    const command = this.commands.shift();\n    command.execute();\n  }\n}\n\n(function main() {\n  // 1. We create a receiver\n  const receiver = new CommandReceiver();\n\n  // 2. We create commands that implement the base command interface and pass the receiver object to the command\n  const launch = new LaunchCommand(receiver);\n  const fire = new FireCommand(receiver);\n  const stop = new StopCommand(receiver);\n\n  // 3. We create the invoker client to add commands to\n  const invoker = new Invoker();\n\n  // Example of adding and then running a command\n  invoker.addCommand(launch);\n  invoker.runCommand();\n\n  invoker.addCommand(fire);\n  invoker.runCommand();\n\n  invoker.addCommand(stop);\n  invoker.runCommand();\n\n  // Example of adding multiple commands and then running multiple executions\n  invoker.addCommand(launch);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(stop);\n\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n})();\n")),Object(t.b)("h2",{id:"resources"},"Resources"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts"}),"Command Design Pattern on Github")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",Object.assign({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Command_pattern"}),"Wikipedia Resource"))))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/Command.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-design-patterns-command.101a1afd2417ec7a4a77.js.map