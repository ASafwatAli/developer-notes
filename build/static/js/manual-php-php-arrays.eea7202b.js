(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{"./manual/PHP/PHP-Arrays.md":function(e,r,n){"use strict";n.r(r),n.d(r,"default",function(){return i});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),t=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},l="wrapper";function i(e){var r=e.components,n=Object(a.a)(e,["components"]);return Object(t.b)(l,Object.assign({},o,n,{components:r,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"php-array-method-applications"},"PHP Array Method Applications"),Object(t.b)("p",null,"This covers the basic actions of applying a push, pop, shift and unshift function with PHP."),Object(t.b)("p",null,"These functions are incredibly useful for data structure implementations."),Object(t.b)("h2",{id:"push"},"Push"),Object(t.b)("p",null,"Using ",Object(t.b)("inlineCode",{parentName:"p"},"array_push"),":"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 1 element\n$arr = array("one");\n// $count will be 3 and $arr will now be array("one","two","three");\n$count = array_push($arr,"two","three");\n')),Object(t.b)("p",null,"Alternative using ",Object(t.b)("inlineCode",{parentName:"p"},"$arr[]"),":"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 1 element\n$arr = array("one");\n// $arr will now be array("one","two");\n$arr[] = "two";\n// $arr will now be array("one","two","three");\n$arr[] = "three";\n// $count will be 3\n$count = count($arr)\n')),Object(t.b)("p",null,"Alternative using ",Object(t.b)("inlineCode",{parentName:"p"},"$array_merge()"),":"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 1 element\n$arr = array("one");\n// alternate method using array_merge()\n$arr = array_merge($arr,array("two","three")); // $arr will now be array("one","two","three");\n$count = count($arr); // $count will be 3\n')),Object(t.b)("h2",{id:"pop"},"Pop"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 3 elements\n$arr = array("one","two","three");\n// $value will be "three" and array\'s value will now be array("one","two");\n$value = array_pop($arr);\n')),Object(t.b)("h2",{id:"shift"},"Shift"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 3 elements\n$arr = array("one","two","three");\n// $value will be "one" and array\'s value will now be array("two","three");\n$value = array_shift($arr);\n')),Object(t.b)("h2",{id:"unshift"},"Unshift"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'// create our array with 3 elements\n$arr = array("three","four","five");\n// $count will now be 5 and array will hold one - five\n$count = array_unshift($arr,"one","two");\n')),Object(t.b)("h2",{id:"example-basic-tree-implementation"},"Example: Basic Tree Implementation"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-php"}),'<?php\n\nclass Tree {\n    function __construct($root = null) {\n        $this->root = $root;\n    }\n\n    public function bfs() {\n        // 1. shift val\n        // 2. if children, append to arr\n        // 3. append data to array to compare\n        if ($this->root == null) {\n            throw new Error("No tree root");\n        }\n\n        $arr = array($this->root);\n        $res = [];\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($arr, $x->children);\n            }\n\n            array_push($res, $x->data);\n        }\n        return $res;\n    }\n\n    public function dfs() {\n        // shift from arr\n        // if children exist, unshift array\n        // add data to res array\n\n        $res = [];\n        $arr = array($this->root);\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($x->children, $arr);\n            }\n\n            array_push($res, $x->data);\n        }\n\n        return $res;\n    }\n}\n\nclass Node {\n    function __construct($data = null, $children = null) {\n        $this->data = $data;\n        $this->children = $children;\n    }\n}\n')),Object(t.b)("h2",{id:"resources--extra-reading"},"Resources + Extra Reading"),Object(t.b)("p",null,Object(t.b)("a",Object.assign({parentName:"p"},{href:"http://www.thecave.info/php-array-push-pop-shift-and-unshift/"}),"http://www.thecave.info/php-array-push-pop-shift-and-unshift/")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/PHP/PHP-Arrays.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-php-php-arrays.101a1afd2417ec7a4a77.js.map