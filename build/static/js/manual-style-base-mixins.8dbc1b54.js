(window.webpackJsonp=window.webpackJsonp||[]).push([[474],{"./manual/Style/base-mixins.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return o});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),l={},s="wrapper";function o(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)(s,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"styles--base--mixins"},"Styles > Base > Mixins"),Object(a.b)("p",null,"The mixins file is the place to store all of the functional Sass mixins used throughout the project."),Object(a.b)("h2",{id:"inline-block-list"},"inline-block-list"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"// inline-block list\n@mixin inline-block-list($padding: false) {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    @include clearfix;\n\n    li {\n        list-style-type: none;\n        @include inline-block();\n        white-space: nowrap;\n        @if $padding {\n            padding: {\n                left: $padding;\n                right: $padding;\n            }\n        }\n    }\n}\n")),Object(a.b)("h2",{id:"omega-reset"},"omega-reset"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin omega-reset($nth) {\n    &:nth-child(#{$nth}) {\n        margin-right: flex-gutter();\n    }\n    &:nth-child(#{$nth} + 1) {\n        clear: none;\n    }\n}\n")),Object(a.b)("h2",{id:"font-size"},"font-size"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin font-size($fontSize, $lineHeight: null) {\n    font-size: $fontSize;\n    font-size: rem($fontSize) / 0.625;\n\n    @if ($lineHeight) {\n        line-height: em($lineHeight, $fontSize);\n    } @else {\n        line-height: inherit;\n    }\n}\n")),Object(a.b)("h2",{id:"inline-block"},"inline-block"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"// inline-block for old browsers\n@mixin inline-block() {\n    display: inline-block;\n    *zoom: 1;\n    *display: inline;\n}\n")),Object(a.b)("h2",{id:"reset-box-model"},"reset-box-model"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin reset-box-model {\n    margin: 0;\n    padding: 0;\n    border: 0;\n}\n")),Object(a.b)("h2",{id:"absolute-fill"},"absolute-fill"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin absolute-fill {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n")),Object(a.b)("h2",{id:"headings"},"headings"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin headings($from: 1, $to: 6) {\n    @for $i from $from through $to {\n        h#{$i} {\n            @content;\n        }\n    }\n}\n")),Object(a.b)("h2",{id:"background-image"},"background-image"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin background-image($path) {\n    background-image: url(../img/#{$path}.png);\n    background-image: linear-gradient(transparent, transparent), url(../img/#{$path}.svg);\n}\n")),Object(a.b)("h2",{id:"reset-ul"},"reset-ul"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"/* Reset unordered list style */\n@mixin reset-ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: auto;\n}\n")),Object(a.b)("h2",{id:"hide-text"},"hide-text"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin hide-text {\n    overflow: hidden;\n    text-indent: 101%;\n    white-space: nowrap;\n}\n")),Object(a.b)("h2",{id:"_neat-parse-media"},"_","neat-parse-media"),Object(a.b)("p",null,"Swaps neat 2.0 to desktop first"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),'@function _neat-parse-media($media) {\n    @if type-of($media) == number {\n        @return "only screen and (max-width: #{$media})";\n    } @else if type-of($media) == string {\n        @return "#{$media}";\n    }\n}\n')),Object(a.b)("h2",{id:"background-color"},"background-color"),Object(a.b)("p",null,"Set default background-color transition."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin background-color$color, $lighten: false) {\n    background-color: $color;\n    transition: background-color 600ms ease-in;\n\n    &:hover,\n    &:active {\n        @if $lighten {\n            background-color: lighten($color, 30%);\n        } @else {\n            background-color: darken($color, 30%);\n        }\n    }\n}\n")),Object(a.b)("h2",{id:"color"},"color"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"@mixin color($color, $lighten: false) {\n    color: $color;\n    transition: color 600ms ease-in;\n\n    &:hover,\n    &:active {\n        @if $lighten {\n            color: lighten($color, 30%);\n        } @else {\n            color: darken($color, 30%);\n        }\n    }\n}\n")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Style/base-mixins.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-style-base-mixins.101a1afd2417ec7a4a77.js.map