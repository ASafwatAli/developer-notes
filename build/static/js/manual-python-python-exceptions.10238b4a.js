(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{"./manual/Python/Python-Exceptions.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var s=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),o={},c="wrapper";function i(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)(c,Object.assign({},o,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"python-exceptions"},"Python Exceptions"),Object(a.b)("p",null,"The base example is to use a try/except block. You can raise exceptions in code that can be caught by the except block."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-python"}),"try:\n    linux_interaction()\nexcept:\n    print('Linux function was not executed')\n")),Object(a.b)("h2",{id:"example-case"},"Example case"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-python"}),'class LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def getFirst(self):\n        if self.head == None:\n            raise Exception("No items in list")\n        else:\n            return self.head\n\ntry:\n    ll = LinkedList()\n    ll.getFirst()\nexcept Exception, error:\n    print(error)\n')))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Python/Python-Exceptions.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-python-python-exceptions.101a1afd2417ec7a4a77.js.map