{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Zeit-Now/Typescript-Github-Example.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"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","file":"static/js/manual-zeit-now-typescript-github-example.ac23cb6f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"typescript--github-example\"\n    }}>{`TypeScript + Github Example`}</h1>\n    <p>{`In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`Initialise a project in a folder `}<inlineCode parentName=\"p\">{`yarn init -y`}</inlineCode>{`.`}</p>\n    <p>{`Prerequisites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-setup\"\n    }}>{`API Setup`}</h2>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`api/example.ts`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tsconfig\"\n    }}>{`TSConfig`}</h2>\n    <p>{`Add this is tsconfig.json (taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json\"\n      }}>{`this Zeit Now example`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"git-ignore\"\n    }}>{`Git Ignore`}</h2>\n    <p>{`Ignore npm modules + .env where we will store the local key in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node_modules/\n.env\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dotenv\"\n    }}>{`Dotenv`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.`}</p>\n    <p>{`If you need to create one, `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`follow this article from the GitHub site`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_TOKEN=TOKEN_VALUE\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nowjson\"\n    }}>{`Now.json`}</h2>\n    <p>{`We will use `}<inlineCode parentName=\"p\">{`now.json`}</inlineCode>{` to help define some env variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-github\"\n      }}>{`{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-json\"\n    }}>{`Test JSON`}</h2>\n    <p>{`For what we will upload, add this to `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hello\": \"world\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h2>\n    <p>{`Now we can develop locally. Run `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{` to get localhost running on port 3000.`}</p>\n    <p>{`Once the port is running, we can ping `}<inlineCode parentName=\"p\">{`http://localhost:3000/api/example`}</inlineCode>{` and pass some params to generate a new repo and add some JSON.`}</p>\n    <p>{`In this example, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"https://httpie.org/doc#json\"\n      }}>{`HTTPie`}</a>{` and running `}<inlineCode parentName=\"p\">{`http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json`}</inlineCode>{` on the command line will lead to the creation of a new private repo `}<inlineCode parentName=\"p\">{`temp-zeit-a`}</inlineCode>{` with content from the `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{` local file saved into the `}<inlineCode parentName=\"p\">{`hello.json`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`Hooray!`}</p>\n    <h2 {...{\n      \"id\": \"production\"\n    }}>{`Production`}</h2>\n    <p>{`To deploy to production, we simply run `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}