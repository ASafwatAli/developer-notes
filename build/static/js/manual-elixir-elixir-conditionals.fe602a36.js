(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{"./manual/Elixir/Elixir-Conditionals.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return o});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},l="wrapper";function o(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)(l,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"elixir-conditionals"},"Elixir Conditionals"),Object(i.b)("h2",{id:"if"},"If"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'iex> if String.valid?("Hello") do\n...>   "Valid string!"\n...> else\n...>   "Invalid string."\n...> end\n"Valid string!"\n\niex> if "a string value" do\n...>   "Truthy"\n...> end\n"Truthy"\n')),Object(i.b)("h2",{id:"unless"},"Unless"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'iex> unless is_integer("hello") do\n...>   "Not an Int"\n...> end\n"Not an Int"\n')),Object(i.b)("h2",{id:"case"},"Case"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'iex> case {:ok, "Hello World"} do\n...>   {:ok, result} -> result\n...>   {:error} -> "Uh oh!"\n...>   _ -> "Catch all"\n...> end\n"Hello World"\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"_")," is an important inclusion too:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'iex> case :even do\n...>   :odd -> "Odd"\n...> end\n** (CaseClauseError) no case clause matching: :even\n\niex> case :even do\n...>   :odd -> "Odd"\n...>   _ -> "Not Odd"\n...> end\n"Not Odd"\n')),Object(i.b)("p",null,"With pinning:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),'iex> pie = 3.14\n 3.14\niex> case "cherry pie" do\n...>   ^pie -> "Not so tasty"\n...>   pie -> "I bet #{pie} is tasty"\n...> end\n"I bet cherry pie is tasty"\n')))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Elixir/Elixir-Conditionals.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-elixir-elixir-conditionals.101a1afd2417ec7a4a77.js.map