{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Elixir/Elixir-Course-Testing.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"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","file":"static/js/manual-elixir-elixir-course-testing.31a6a42a.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"elixir-course-testing-and-documentation\"\n    }}>{`Elixir Course Testing And Documentation`}</h1>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Module documentation: purpose of module`}</li>\n      <li parentName=\"ol\">{`Function documentation: purpose of individual functions`}</li>\n    </ol>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`ex_doc`}</inlineCode>{` as the required module, add `}<inlineCode parentName=\"p\">{`{:ex_doc, \"~> 0.21.1\"},`}</inlineCode>{` to you deps (or the latest version) and after fetching deps, run `}<inlineCode parentName=\"p\">{`mix docs`}</inlineCode>{` to generate the documentation.`}</p>\n    <p>{`Documentation can then be found at `}<inlineCode parentName=\"p\">{`doc/index.html`}</inlineCode>{`.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule ModuleName.Queries do\n  @moduledoc \"\"\"\n  Provides Ecto queries for querying important Action Framework requirement.\n  \"\"\"\n\n  import Ecto.Query\n\n  @doc \"\"\"\n  Does a thing\n\n  ## Examples\n\n      iex> query = \"Hello, World!\"\n      iex> query\n      \"Hello, World!\"\n  \"\"\"\n  def hello_world() do\n    \"Hello, World!\"\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elixir-testing\"\n    }}>{`Elixir Testing`}</h2>\n    <p>{`There are two distinct types of tests we can write:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Assertion tests`}</li>\n      <li parentName=\"ol\">{`Doc testing`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-test\"\n    }}>{`Example Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule Cards do\n  def create_deck do\n    values = [\"Ace\", \"Two\"]\n    suits = [\"Spades\", \"Clubs\"]\n  end\n\n  # ... more\nend\n`}</code></pre>\n    <p>{`Testing can be considered a first-class citizen. It comes built into Elixir.`}</p>\n    <p>{`When you generate the project with `}<inlineCode parentName=\"p\">{`mix`}</inlineCode>{`, you get a test folder put in automatically.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{` file is specifically built for testing the functions used in `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{`.`}</p>\n    <p>{`Note that running `}<inlineCode parentName=\"p\">{`elixir test`}</inlineCode>{` will end up with two tests run with 0 failures.`}</p>\n    <p>{`The \"mystery\" test cmes frm the `}<inlineCode parentName=\"p\">{`@doc`}</inlineCode>{` tag `}<inlineCode parentName=\"p\">{`## Examples`}</inlineCode>{` - it will run that chunk of code as if it is a test!`}</p>\n    <p>{`Example, the following code will run as a test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`@doc \"\"\"\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spaces\"]\n\"\"\"\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"important-tidbits\"\n    }}>{`Important Tidbits`}</h2>\n    <p>{`Worth noting for a basic Elixir test example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`doctest`}</inlineCode>{` is used for testing the documentation examples.`}</p>\n    <h2 {...{\n      \"id\": \"case-tests\"\n    }}>{`Case Tests`}</h2>\n    <p>{`For the terms `}<inlineCode parentName=\"p\">{`use ExUnit.Case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test \"create_deck makes 20 cards\" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-vs-refute\"\n    }}>{`Assert vs Refute`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`refute`}</inlineCode>{` keyword is just the opposite of `}<inlineCode parentName=\"p\">{`assert`}</inlineCode>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}