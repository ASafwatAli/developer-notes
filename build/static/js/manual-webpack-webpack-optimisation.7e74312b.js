(window.webpackJsonp=window.webpackJsonp||[]).push([[522],{"./manual/Webpack/Webpack-Optimisation.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var l=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),a={},o="wrapper";function r(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)(o,Object.assign({},a,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"webpack-optimisation"},"Webpack Optimisation"),Object(i.b)("h2",{id:"loader-targeting"},"Loader targeting"),Object(i.b)("p",null,"Apply loaders to the minimal number of modules necessary."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// instead of...\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader'\n      }\n    ]\n  }\n};\n\n// try using the include target\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        include: path.resolve(__dirname, 'src'),\n        loader: 'babel-loader'\n      }\n    ]\n  }\n};\n")),Object(i.b)("h2",{id:"bootstrap"},"Bootstrap"),Object(i.b)("p",null,"Each additional loader/plugin has a bootup time. Try to use as few tools as possible."),Object(i.b)("h2",{id:"resolving"},"Resolving"),Object(i.b)("p",null,"The following can increase resolving speed:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Minimize the number of items in ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.modules"),", ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.extensions"),", ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.mainFiles"),", ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.descriptionFiles"),", as they increase the number of filesystem calls."),Object(i.b)("li",{parentName:"ul"},"Set ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.symlinks: false")," if you don't use symlinks (eg ",Object(i.b)("inlineCode",{parentName:"li"},"npm link")," or ",Object(i.b)("inlineCode",{parentName:"li"},"yarn link"),")."),Object(i.b)("li",{parentName:"ul"},"Set ",Object(i.b)("inlineCode",{parentName:"li"},"resolve.cacheWithContext: false")," if you use custom resolving plugins, that are not context specific.")),Object(i.b)("h2",{id:"dlls"},"Dlls"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"DllPlugin")," to move code that is changes less frequently into a separate compilation. This will improve app compilation speed, although it does increase complexity of the build process."),Object(i.b)("h2",{id:"smaller--faster"},"Smaller = Faster"),Object(i.b)("p",null,"Decrease the total size of the compilation to increase build performance. Try to keep chunks small."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use fewer/smaller libs"),Object(i.b)("li",{parentName:"ul"},"Use the ",Object(i.b)("inlineCode",{parentName:"li"},"SplitChunksPlugin")," in Multi-Page Applications"),Object(i.b)("li",{parentName:"ul"},"Use the ",Object(i.b)("inlineCode",{parentName:"li"},"SplitChunksPlugin")," in ",Object(i.b)("inlineCode",{parentName:"li"},"async")," mode in Multi-Page Applications"),Object(i.b)("li",{parentName:"ul"},"Remove unused code"),Object(i.b)("li",{parentName:"ul"},"Only compile the part of the code you are currently developing on")),Object(i.b)("h2",{id:"worker-pool"},"Worker Pool"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"thread-loader")," can be used to offload expensive loaders to a worker pool."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Don't use too many loaders. There is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.")),Object(i.b)("h2",{id:"persistent-cache"},"Persistent Cache"),Object(i.b)("p",null,"Enable persistent caching with the ",Object(i.b)("inlineCode",{parentName:"p"},"cache-loader"),'. Clear cache directory on "postinstall" in ',Object(i.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(i.b)("h2",{id:"custom-pluginsloaders"},"Custom plugins/loaders"),Object(i.b)("p",null,"Profile them to not introduce a performance problem here."),Object(i.b)("h2",{id:"incremental-builds"},"Incremental Builds"),Object(i.b)("p",null,"Use watch mode. Specifically Webpack's."),Object(i.b)("p",null,"If CPU overloads due to poling mode, you can increase the polling interval with ",Object(i.b)("inlineCode",{parentName:"p"},"watchOptions.poll"),"."),Object(i.b)("h2",{id:"compile-in-memory"},"Compile in Memory"),Object(i.b)("p",null,"Following utils improve performance by compilin and serving assets in memory rather than writing to disk:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"webpack-dev-server")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"webpack-hot-middleware")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"webpack-dev-middleware"))),Object(i.b)("h2",{id:"devtool"},"Devtool"),Object(i.b)("p",null,"Be aware of the performance differences between the different devtool settings."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},'"eval" has the best performance, but doesn\'t assist you for transpiled code.'),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"cheap-source-map")," variants are more performant if you can live with the slightly worse mapping quality."),Object(i.b)("li",{parentName:"ul"},"Use a ",Object(i.b)("inlineCode",{parentName:"li"},"eval-source-map")," variant for incremental builds.\n=> In most cases, ",Object(i.b)("inlineCode",{parentName:"li"},"cheap-module-eval-source-map")," is the best option.")),Object(i.b)("p",null,"[TO FINISH => up to https://webpack.js.org/guides/build-performance/#minimal-entry-chunk]"))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Webpack/Webpack-Optimisation.md"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-webpack-webpack-optimisation.101a1afd2417ec7a4a77.js.map