{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Packages.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"oXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,wBACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,+DADQ,gEAItBP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,kTACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,oJACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,+TAeLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wBADR,wBAGAL,OAAAE,EAAA,EAAAF,CAAA,wBAAmBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAnB,KACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,2BAILR,OAAAE,EAAA,EAAAF,CAAA,oCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,mBADZ,0FAMLR,OAAAE,EAAA,EAAAF,CAAA,0BACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,0JAWLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,sBADR,sBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,wQASLR,OAAAE,EAAA,EAAAF,CAAA,yCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,2JAaLR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,kBADZ,6rBA6BTZ,EAAWa,gBAAiB","file":"static/js/manual-java-java-packages.319eaa2e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java-packages\"\n    }}>{`Java Packages`}</h1>\n    <p>{`References:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.programiz.com/java-programming/packages-import\"\n        }}>{`https://www.programiz.com/java-programming/packages-import`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`A package is simply a container that groups related types (Java classes, interfaces, enumerations and annotations). For example, in core Java, the ResultSet interface belongs to java.sql package. The package contains all the related types that are needed for SQL query and database connection.`}</p>\n    <h2 {...{\n      \"id\": \"built-in-packages\"\n    }}>{`Built-in Packages`}</h2>\n    <p>{`Built-in packages are existing java packages that come along with the JDK. For example, java.lang, java.util, java.io etc. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.ArrayList;\nclass ArrayListUtilization {\n    public static void main(String[] args) {\n        ArrayList<Integer> myList = new ArrayList<>(3);\n        myList.add(3);\n        myList.add(2);\n        myList.add(1);\n        System.out.println(myList);\n    }\n}\n\n// output: myList = [3, 2, 1]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"user-defined-package\"\n    }}>{`User-defined Package`}</h2>\n    <p>{`Use keyword `}<inlineCode parentName=\"p\">{`package`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package packagename;\n`}</code></pre>\n    <p>{`Tree structure example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`└── com\n  └── test\n    └── Test.java\n`}</code></pre>\n    <p>{`For the code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Test.java\npackage com.test;\n\nclass Test {\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"importing-packages\"\n    }}>{`Importing Packages`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import package.name.ClassName;   // To import a certain class only\nimport package.name.*;   // To import the whole package\n\n// example\nimport java.util.Date; // imports only Date class\nimport java.io.*;      // imports everything inside java.io package\n`}</code></pre>\n    <p>{`The following are equivocal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.Date;\n\nclass MyClass implements Date {\n    // body\n}\n\n// same as...\nclass MyClass implements java.util.Date {\n    //body\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"full-example\"\n    }}>{`Full Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// one file\npackage com.programiz;\n\npublic class Helper {\n    public static String getFormattedDollar (double value){\n        return String.format(\"$%.2f\", value);\n    }\n}\n\n// second file\nimport com.programiz.Helper;\n\nclass UseHelper {\n    public static void main(String[] args) {\n\n        double value = 99.5;\n        String formattedValue = Helper.getFormattedDollar(value);\n        System.out.println(\"formattedValue = \" + formattedValue);\n    }\n\n}\n\n// running gives formattedValue = $99.50\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}