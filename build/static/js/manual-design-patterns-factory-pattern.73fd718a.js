(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{"./manual/Design-Patterns/Factory-Pattern.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},a="wrapper";function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)(a,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"factory-pattern"},"Factory Pattern"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// Factory Pattern\n// first, create our products\ninterface Customer {\n    addPoints(): void;\n    addDiscount(): void;\n}\n\ninterface IGoldCustomer extends Customer {\n    goldOperation(): void;\n}\n\nclass GoldCustomer implements IGoldCustomer {\n    addPoints() {\n        console.log('Gold Customer - Points Added');\n    }\n\n    addDiscount() {\n        console.log('Gold Customer - Discount Added');\n    }\n\n    goldOperation() {\n        console.log('Specific Gold Customer operation');\n    }\n}\n\ninterface ISilverCustomer extends Customer {\n    silverOperation(): void;\n}\n\nclass SilverCustomer implements ISilverCustomer {\n    addPoints() {\n        console.log('Gold Customer - Points Added');\n    }\n\n    addDiscount() {\n        console.log('Gold Customer - Discount Added');\n    }\n\n    silverOperation() {\n        console.log('Specific Silver Customer operation');\n    }\n}\n\n// build a simple factory\n// ensure we use a generic for typing our createCustomer method correctly\nabstract class CustomerFactory<T extends Customer> {\n    getCustomer() {\n        const customer = this.createCustomer();\n        customer.addPoints();\n        customer.addDiscount();\n        return customer;\n    }\n\n    abstract createCustomer(): T;\n}\n\nclass GoldCustomerFactory extends CustomerFactory<IGoldCustomer> {\n    createCustomer(): GoldCustomer {\n        return new GoldCustomer();\n    }\n}\n\nclass SilverCustomerFactory extends CustomerFactory<ISilverCustomer> {\n    createCustomer(): SilverCustomer {\n        return new SilverCustomer();\n    }\n}\n\n// code in action\nconst goldCustomerFactory: GoldCustomerFactory = new GoldCustomerFactory();\nconst goldCustomer = goldCustomerFactory.getCustomer();\ngoldCustomer.goldOperation();\n\nconst silverCustomerFactory = new SilverCustomerFactory();\nconst silverCustomer = silverCustomerFactory.getCustomer();\nsilverCustomer.silverOperation();\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/Factory-Pattern.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-design-patterns-factory-pattern.101a1afd2417ec7a4a77.js.map