(window.webpackJsonp=window.webpackJsonp||[]).push([[420],{"./manual/Redis/Redis-Nodejs.md":function(e,r,n){"use strict";n.r(r),n.d(r,"default",function(){return l});var t=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},i="wrapper";function l(e){var r=e.components,n=Object(t.a)(e,["components"]);return Object(s.b)(i,Object.assign({},o,n,{components:r,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"redis-with-nodejs"},"Redis with Nodejs"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"yarn install redis")," and use the controller. Example controller setup. Use promises to enable sequential optionality."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const redis = require('redis');\n\nfunction setHashSet(key, field, value) {\n  return new Promise((resolve, reject) => {\n    client.hset(key, field, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getHashSet(key) {\n  return new Promise((resolve, reject) => {\n    client.hvals(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction delKey(key) {\n  return new Promise((resolve, reject) => {\n    client.del(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getKeys(key) {\n  return new Promise((resolve, reject) => {\n    client.hkeys(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getValue(key, field) {\n  return new Promise((resolve, reject) => {\n    client.hget(key, field, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction setArray(key, arr) {\n  return new Promise((resolve, reject) => {\n    client.sadd(key, ...arr, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getArray(key) {\n  return new Promise((resolve, reject) => {\n    client.smembers(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getListLen(key) {\n  return new Promise((resolve, reject) => {\n    client.llen(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction pushToListEnd(key) {\n  return new Promise((resolve, reject) => {\n    client.rpush(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction popFromListStart(key) {\n  return new Promise((resolve, reject) => {\n    client.lpop(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction deleteArrayMember(key, value) {\n  return new Promise((resolve, reject) => {\n    client.srem(key, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  setHashSet,\n  getHashSet,\n  getKeys,\n  getValue,\n  setArray,\n  getArray,\n  deleteArrayMember,\n  getListLen,\n  pushToListEnd,\n  popFromListStart\n};\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Redis/Redis-Nodejs.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-redis-redis-nodejs.101a1afd2417ec7a4a77.js.map