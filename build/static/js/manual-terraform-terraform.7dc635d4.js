(window.webpackJsonp=window.webpackJsonp||[]).push([[490],{"./manual/Terraform/Terraform.md":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return s});var n=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),o={},l="wrapper";function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)(l,Object.assign({},o,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"terraform"},"Terraform"),Object(r.b)("h2",{id:"course-content"},"Course Content"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"# Use this to get the content\n$ git clone https://github.com/wardviaene/terraform-course\n")),Object(r.b)("h2",{id:"useful-terraform-commands"},"Useful Terraform Commands"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"$ terraform plan # plan\n$ terraform apply # shortcut for plan and apply - avoid in production\n$ terraform plan -out out.terraform # terraform and write the plan to out file\n$ terraform apply out.terraform # apply terraform plan using out file\n$ terraform show # show current state\n$ cat terraform.tfstate\n")),Object(r.b)("h2",{id:"what-is-terraform"},"What is Terraform?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Infrastructure as ",Object(r.b)("strong",{parentName:"li"},"code")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Automation")," of infrastructure"),Object(r.b)("li",{parentName:"ul"},"Keep our infrastructure in a certain state (compliant)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"e.g. 2 web instances with 2 volumes + 1 load balancer"))),Object(r.b)("li",{parentName:"ul"},"Make infrastructure ",Object(r.b)("strong",{parentName:"li"},"auditable"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"You can keep your infrastructure change history in a ",Object(r.b)("strong",{parentName:"li"},"version control")," system like GIT"))),Object(r.b)("li",{parentName:"ul"},"Terraform can automate provisioning of the ",Object(r.b)("strong",{parentName:"li"},"infrastructure itself"),". ")),Object(r.b)("h2",{id:"installation-of-terraform"},"Installation of Terraform"),Object(r.b)("p",null,"Head onto the Terraform website, download the .zip file and then move the binary after unzipping into your path to access it from the CLI."),Object(r.b)("h2",{id:"hello-terraform"},"Hello Terraform!"),Object(r.b)("p",null,"Example hello using Terraform to spin up an EC2 micro instance."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'provider "aws" {\n  access_key = "ACCESS_KEY_HERE"\n  secret_key = "SECRET_KEY_HERE"\n  region     = "ap-southeast-1"\n}\n\nresource "aws_instance" "example" {\n  ami           = "ami-0d729a60"\n  instance_type = "t2.micro"\n}\n')),Object(r.b)("p",null,"To initialise and spin up the instance, run the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"$ terraform init\n$ terraform plan -out file.terraform\n$ terraform apply file.terraform\n$ terraform destory # tear down the instance\n")),Object(r.b)("h2",{id:"variables"},"Variables"),Object(r.b)("p",null,"To create variables, we create two files ",Object(r.b)("inlineCode",{parentName:"p"},"provider.tf")," and ",Object(r.b)("inlineCode",{parentName:"p"},"vars.tf")," that we can commit and one git ignored file ",Object(r.b)("inlineCode",{parentName:"p"},"terraform.tfvars")," to store these private variables in."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# provider.tf\nprovider "aws" {\n    access_key="${var.AWS_ACCESS_KEY}"\n    secret_key="${var.AWS_SECRET_KEY}"\n    region="${var.AWS_REGION}"\n}\n\n# vars.tf\nvariable "AWS_ACCESS_KEY" {}\nvariable "AWS_SECRET_KEY" {}\nvariable "AWS_REGION" {\n    default = "ap-southeast-2"\n}\n\n# terraform.tfvars\nAWS_ACCESS_KEY=""\nAWS_SECRET_KEY=""\nAWS_REGION=""\n')),Object(r.b)("p",null,"For env vars: Terraform will read environment variables in the form of ",Object(r.b)("inlineCode",{parentName:"p"},"TF_VAR_name")," to find the value for a variable. For example, the ",Object(r.b)("inlineCode",{parentName:"p"},"TF_VAR_access_key")," variable can be set to set the ",Object(r.b)("inlineCode",{parentName:"p"},"access_key")," variable."),Object(r.b)("h3",{id:"lookup-examples"},"Lookup examples"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# instance.tf\nresource "aws_instance" "example" {\n  ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n  instance_type = "t2.micro"\n}\n\n# provider.tf\nprovider "aws" {\n    access_key = "${var.AWS_ACCESS_KEY}"\n    secret_key = "${var.AWS_SECRET_KEY}"\n    region = "${var.AWS_REGION}"\n}\n\n# vars.tf\nvariable "AWS_ACCESS_KEY" {}\nvariable "AWS_SECRET_KEY" {}\nvariable "AWS_REGION" {\n  default = "eu-west-1"\n}\nvariable "AMIS" {\n  type = "map"\n  default = {\n    us-east-1 = "ami-13be557e"\n    us-west-2 = "ami-06b94666"\n    eu-west-1 = "ami-0d729a60"\n  }\n}\n\n# terraform.tfvars\nAWS_ACCESS_KEY=""\nAWS_SECRET_KEY=""\nAWS_REGION=""\n')),Object(r.b)("p",null,"For info on which ami results from where, checkout ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://cloud-images.ubuntu.com/locator/ec2/"}),"https://cloud-images.ubuntu.com/locator/ec2/"),"."),Object(r.b)("h2",{id:"software-provisioning"},"Software Provisioning"),Object(r.b)("p",null,"There are 2 ways to provision software:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Build your own custom AMI (ie Packer).")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Another way is to be standardized AMIs and then install the software you need on it: "),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Use file uploads")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Use remote exec")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Use automation tools like chef, puppet, ansible"))))),Object(r.b)("h3",{id:"file-uploads"},"File Uploads"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# instance.tf\nresource "aws_instance" "example" {\n    ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n    instance_type = "t2.micro"\n    \n    provisioner "file" {\n        source = "app.conf"\n        destination = "/etc/myapp.conf"\n    }\n}\n')),Object(r.b)("p",null,"The provisioner will have to use SSH etc."),Object(r.b)("p",null,"Another example with the connection:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# instance.tf\nresource "aws_instance" "example" {\n    ami           = "${lookup(var.AMIS, var.AWS_REGION)}"\n    instance_type = "t2.micro"\n    # IF SSH\n    key_name = "${aws_key_pem.mykey.key_name}"\n    # ENDIF\n    \n    provisioner "file" {\n        source = "app.conf"\n        destination = "/etc/myapp.conf"\n        # ! FOR PASSWORD\n        connection {\n            user = "${var.instance_username}"\n            password = "${var.instance_password}"\n        }\n        \n        connection {\n            user = "${var.instance_username}"\n            private_key = "${file(${var.path_to_private_key})}"\n        }\n    }\n    \n    # IF YOU UPLOAD A .sh FILE AND WANT TO RUN IT\n    provisioner "remote-exec" {\n        inline = [\n            "chmod +x /path/to/script.sh",\n            "/path/to/script.sh arguments"\n        ]\n    }\n}\n')),Object(r.b)("h2",{id:"attributes"},"Attributes"),Object(r.b)("h2",{id:"state"},"State"),Object(r.b)("p",null,"Terraform keeps state in ",Object(r.b)("inlineCode",{parentName:"p"},"terraform.tfstate"),"."),Object(r.b)("p",null,"To configure, you add a file ",Object(r.b)("inlineCode",{parentName:"p"},"backend.tf"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'terraform {\n    # IF Consul\n    backend "consul" {\n        address = "demo.consul.io" # host name of consul cluster\n        path = "terraform/myproject"\n    }\n    \n    # ELSEIF S3\n    backend "s3" {\n        bucket = "bucket"\n        key = "terraform/myproject"\n        region = "ap-southeast-2"\n    }\n    \n    #ENDIF\n}\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"$ terraform init")," will do what you require for it all to work."),Object(r.b)("h2",{id:"data-sources"},"Data Sources"),Object(r.b)("p",null,"Provide you with dynamic information."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A lot of data is available by AWS in a structured format using their API"),Object(r.b)("li",{parentName:"ul"},"Terraform also exposes this info using data sources.")),Object(r.b)("p",null,"Examples include the list of AMIs, list of AZs etc."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# provider.tf\nprovider "aws" { \n    region = "${var.AWS_REGION}"\n}\n\n# securitygroup.tf\ndata "aws_ip_ranges" "european_ec2" {\n  regions = [ "eu-west-1", "eu-central-1" ]\n  services = [ "ec2" ]\n}\n\nresource "aws_security_group" "from_europe" {\n name = "from_europe"\n\n  ingress {\n    from_port = "443"\n    to_port = "443"\n    protocol = "tcp"\n    cidr_blocks = [ "${data.aws_ip_ranges.european_ec2.cidr_blocks}" ]\n  }\n  tags {\n    CreateDate = "${data.aws_ip_ranges.european_ec2.create_date}"\n    SyncToken = "${data.aws_ip_ranges.european_ec2.sync_token}"\n  }\n\n}\n\n# vars.tf\nvariable "AWS_REGION" {\n  default = "eu-west-1"\n}\nvariable "AMIS" {\n  type = "map"\n  default = {\n    us-east-1 = "ami-13be557e"\n    us-west-2 = "ami-06b94666"\n    eu-west-1 = "ami-844e0bf7"\n  }\n}\n')),Object(r.b)("h2",{id:"templates"},"Templates"),Object(r.b)("p",null,"Can help create ",Object(r.b)("strong",{parentName:"p"},"customized configuration files"),"."),Object(r.b)("h2",{id:"modules"},"Modules"),Object(r.b)("p",null,"Help to make your terraform more organised. "),Object(r.b)("p",null,"You can also use third party modules (like modules from Github)."),Object(r.b)("p",null,"It also helps to ",Object(r.b)("strong",{parentName:"p"},"reuse")," parts of your code (eg set up network in AWS - VPC)."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# Install form git\nmodule "module-example" {\n    source = "github.com/wardviaene/terraform-module-example"\n}\n\n# Use module from local folder\nmodule "module-example" {\n    source = "./module-example"\n}\n\n# A module passing arguments \nmodule "module-example" {\n    source = "./module-example"\n    region = "us-west-1"\n    ip-range = "10.0.0.0/8"\n    cluster-size = "3"\n}\n')),Object(r.b)("p",null,"Inside of the module folder, you can also have Terraform files:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'# module-example/vars.tf\nvariable "region" {}\nvariable "ip-range" {}\nvariable "cluster-size" {}\n\n# module-example/cluster.tf\nresource "aws_instance" "instance-1" { ... }\nresource "aws_instance" "instance-2" { ... }\nresource "aws_instance" "instance-3" { ... }\n\n# module-example/output.tf\noutput "aws-cluster" {\n    value = "${aws_instance.instance-1.publicip}"\n}\n')),Object(r.b)("p",null,"You use the output from the module in the main part of your code!"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'output "some-output" {\n    value = "${module.module-example.aws-cluster}"\n}\n')),Object(r.b)("h3",{id:"downloading-a-module"},"Downloading a module"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"terraform get # this will fetch the modules and store it in .terraform/modules/\n")),Object(r.b)("h2",{id:"terraform-command-overview"},"Terraform Command Overview"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Command"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"terraform apply"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Applies state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"destroy"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Destroys all Terraform managed state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"fmt"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Rewrite terraform config files to canonical format and style.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"get"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Download and update modules.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"graph"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Create a visual representation of a configuration or execution plan.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"import <options> <ADDRESS> <ID>")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Find infrastructure resource identified with ID and import the state into terraform.tfstate with resource id ADDRESS.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"output <options> <NAME>")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Output any of your resources.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"plan"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Show changes made to infrastructure.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"refresh"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Refresh the remote state. Can identify differences between state file and remote state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"remote"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Configure remote state storage.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"show"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Show human readable output from a state or a plan.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"state"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Used for advanced state management eg rename resource")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"taint"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Destroy and recreate resource.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"validate"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Validate terraform syntax.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"untaint"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"Undo a taint.")))),Object(r.b)("h2",{id:""}))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Terraform/Terraform.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-terraform-terraform.101a1afd2417ec7a4a77.js.map