{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Adapter-Pattern.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"iYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,mBADR,mBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,ghBA4BLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,yCADR,yCAGAL,OAAAE,EAAA,EAAAF,CAAA,kCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,siFAoGTX,EAAWY,gBAAiB","file":"static/js/manual-design-patterns-adapter-pattern.ff7b90aa.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"adapter-pattern\"\n    }}>{`Adapter Pattern`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the base adapter\ninterface RequestAdapter {\n  request(newParam: string): void;\n}\n\n// The adapter utilising the old way\nclass InterfaceAdapter implements RequestAdapter {\n  request(newParam: string): void {\n    const old = new OldInterface();\n    old.requestInOldWay({\n      data: newParam\n    });\n  }\n}\n\nclass OldInterface {\n  requestInOldWay(oldParam: any): void {\n    console.log(oldParam);\n  }\n}\n\n(function main() {\n  const adapter = new InterfaceAdapter();\n  adapter.request('param');\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lightning-to-microusb-adapter-example\"\n    }}>{`Lightning To MicroUSB Adapter Example`}</h2>\n    <p>{`A great Java example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`interface LightningPhone {\n    void recharge();\n    void useLightning();\n}\n\ninterface MicroUsbPhone {\n    void recharge();\n    void useMicroUsb();\n}\n\nclass Iphone implements LightningPhone {\n    private boolean connector;\n\n    @Override\n    public void useLightning() {\n        connector = true;\n        System.out.println(\"Lightning connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect Lightning first\");\n        }\n    }\n}\n\nclass Android implements MicroUsbPhone {\n    private boolean connector;\n\n    @Override\n    public void useMicroUsb() {\n        connector = true;\n        System.out.println(\"MicroUsb connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect MicroUsb first\");\n        }\n    }\n}\n\nclass LightningToMicroUsbAdapter implements MicroUsbPhone {\n    private final LightningPhone lightningPhone;\n\n    public LightningToMicroUsbAdapter(LightningPhone lightningPhone) {\n        this.lightningPhone = lightningPhone;\n    }\n\n    @Override\n    public void useMicroUsb() {\n        System.out.println(\"MicroUsb connected\");\n        lightningPhone.useLightning();\n    }\n\n    @Override\n    public void recharge() {\n        lightningPhone.recharge();\n    }\n}\n\npublic class AdapterDemo {\n    static void rechargeMicroUsbPhone(MicroUsbPhone phone) {\n        phone.useMicroUsb();\n        phone.recharge();\n    }\n\n    static void rechargeLightningPhone(LightningPhone phone) {\n        phone.useLightning();\n        phone.recharge();\n    }\n\n    public static void main(String[] args) {\n        Android android = new Android();\n        Iphone iPhone = new Iphone();\n\n        System.out.println(\"Recharging android with MicroUsb\");\n        rechargeMicroUsbPhone(android);\n\n        System.out.println(\"Recharging iPhone with Lightning\");\n        rechargeLightningPhone(iPhone);\n\n        System.out.println(\"Recharging iPhone with MicroUsb\");\n        rechargeMicroUsbPhone(new LightningToMicroUsbAdapter(iPhone));\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}