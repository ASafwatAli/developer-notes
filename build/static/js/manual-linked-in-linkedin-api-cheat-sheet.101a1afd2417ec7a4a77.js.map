{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/LinkedIn/linkedin-api-cheat-sheet.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"mYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,2xLAyJTX,EAAWY,gBAAiB","file":"static/js/manual-linked-in-linkedin-api-cheat-sheet.06350684.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"linkedin-api-cheat-sheet\"\n    }}>{`LinkedIn API Cheat Sheet`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n    // Change these back to your things\n    define('API_KEY',      'YOUR API KEY');\n    define('API_SECRET',   'YOUR API SECRET');\n    define('REDIRECT_URI',  'http://localhost/');\n\n    // I've changed the scope to work for what we generally have access to\n    define('SCOPE', 'r_basicprofile r_emailaddress');\n\n    // This stuff I believe it used if you have a database\n    session_name('linkedin');\n    session_start();\n\n    // OAuth 2 Control Flow\n    if (isset($_GET['error'])) {\n        // LinkedIn returned an error\n        print $_GET['error'] . ': ' . $_GET['error_description'];\n        exit;\n    } elseif (isset($_GET['code'])) {\n        // User authorized your application\n        if ($_SESSION['state'] == $_GET['state']) {\n            // Get token so you can make API calls\n            getAccessToken();\n        } else {\n            // CSRF attack? Or did you mix up your states?\n            exit;\n        }\n    } else {\n        if ((empty($_SESSION['expires_at'])) || (time() > $_SESSION['expires_at'])) {\n            // Token has expired, clear the state\n            $_SESSION = array();\n        }\n        if (empty($_SESSION['access_token'])) {\n            // Start authorization process\n            getAuthorizationCode();\n        }\n    }\n\n    // You have a valid token. Now fetch your profile.\n    // I've just put in some dummy fields for now, but hopefully these should do it.\n    $user = fetch('GET', '/v1/people/~:(first-name,last-name,email-address,phone-numbers,num-connections,picture-url,location,positions,summary,specialties,industry)');\n\n    // I've just shoved the responses into some variables from the $user dict response\n\n    // STORE THE RESULTS IN AN ARRAY\n\n    $res = array();\n\n    $res[] = $user->firstName;\n    $res[] = $user->lastName;\n    $res[] = $user->emailAddress;\n    $res[] = $user->phoneNumbers;\n    $res[] = $user->numConnections;\n    $res[] = $user->pictureUrl;\n    $res[] = $user->location->country->code;\n    $res[] = $user->location->name;\n    $res[] = $user->summary;\n    $res[] = $user->specialties;\n    $res[] = $user->industry;\n    $res[] = $user->positions;\n\n    echo  nl2br(\"First name: \". $res[0] . \"\\\\n\");\n    echo  nl2br(\"Last name: \". $res[1] . \"\\\\n\");\n    echo  nl2br(\"Email Address: \" . $res[2] . \"\\\\n\");\n    echo  nl2br(\"Phone Numbers: \". $res[3] . \"\\\\n\");\n    echo  nl2br(\"Num Connections: \". $res[4] . \"\\\\n\");\n    echo  nl2br(\"Picture Url: \" . $res[5] . \"\\\\n\");\n    echo  nl2br(\"Location Country Code: \" . $res[6]. \"\\\\n\");\n    echo  nl2br(\"Location Name: \". $res[7] . \"\\\\n\");\n    echo  nl2br(\"Summary: \" . $res[8] . \"\\\\n\");\n    echo  nl2br(\"Specialties: \". $res[9] . \"\\\\n\");\n    echo  nl2br(\"Industry: \". $res[10] . \"\\\\n\");\n    echo  nl2br(\"Positions: \" . $res[11] . \"\\\\n\");\n\n    exit;\n\n    function getAuthorizationCode() {\n        $params = array('response_type' => 'code',\n                        'client_id' => API_KEY,\n                        'scope' => SCOPE,\n                        'state' => uniqid('', true), // unique long string\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n        // Authentication request\n        $url = 'https://www.linkedin.com/uas/oauth2/authorization?' . http_build_query($params);\n\n        // Needed to identify request when it returns to us\n        $_SESSION['state'] = $params['state'];\n        // Redirect user to authenticate\n        header(\"Location: $url\");\n        exit;\n    }\n\n    function getAccessToken() {\n        $params = array('grant_type' => 'authorization_code',\n                        'client_id' => API_KEY,\n                        'client_secret' => API_SECRET,\n                        'code' => $_GET['code'],\n                        'redirect_uri' => REDIRECT_URI,\n                  );\n\n        // Access Token request\n        $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);\n\n        // Tell streams to make a POST request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => 'POST',\n                            )\n                        )\n                    );\n        // Retrieve access token information\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        $token = json_decode($response);\n        // Store access token and expiration time\n        $_SESSION['access_token'] = $token->access_token; // guard this!\n        $_SESSION['expires_in']   = $token->expires_in; // relative time (in seconds)\n        $_SESSION['expires_at']   = time() + $_SESSION['expires_in']; // absolute time\n\n        return true;\n    }\n\n    // this fetch should be the main thing that you really need to add to what you already have!\n\n    function fetch($method, $resource, $body = '') {\n        $params = array('oauth2_access_token' => $_SESSION['access_token'],\n                        'format' => 'json',\n                  );\n\n        // Need to use HTTPS\n        $url = 'https://api.linkedin.com' . $resource . '?' . http_build_query($params);\n        // Tell streams to make a (GET, POST, PUT, or DELETE) request\n        $context = stream_context_create(\n                        array('http' =>\n                            array('method' => $method,\n                            )\n                        )\n                    );\n\n        // Hocus Pocus\n        $response = file_get_contents($url, false, $context);\n        // Native PHP object, please\n        return json_decode($response);\n    }\n\n?>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}