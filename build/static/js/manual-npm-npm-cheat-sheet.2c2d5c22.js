(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{"./manual/npm/npm-cheat-sheet.md":function(e,n,s){"use strict";s.r(n),s.d(n,"default",function(){return c});var r=s("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),t=(s("./node_modules/react/index.js"),s("./node_modules/@mdx-js/react/dist/index.es.js")),a={},o="wrapper";function c(e){var n=e.components,s=Object(r.a)(e,["components"]);return Object(t.b)(o,Object.assign({},a,s,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"npm-help-sheet"},"npm help sheet"),Object(t.b)("h2",{id:"install-npm-dependencies"},"install npm dependencies"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{}),"npm install\n")),Object(t.b)("h2",{id:"useful-npm-dependencies"},"USEFUL NPM DEPENDENCIES"),Object(t.b)("h4",{id:"mongoose---database-helper-for-mongodb"},"MONGOOSE - database helper for MongoDB"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{}),"npm install --save mongoose\n\nmongod // starts the daemon\nmongo // check out the documents\n")),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"var User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\nvar User = require('../models/user');\n")),Object(t.b)("h4",{id:"bcrypt---used-for-hashing-and-salting"},"BCRYPT - used for hashing and salting"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{}),"npm install --save bcrypt\n")),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// in User.js\nvar bcrypt = require('bcrypt');\nUserSchema.pre('save', function(next) {\n    var user = this;\n    bcrypt.hash(user.password, 10, function(err, hash) {\n        if (err) {\n            return next(err);\n        }\n        user.password = hash;\n        next();\n    })\n});\n\nUserSchema.statics.authenticate = function(email, password, callback) {\n    User.findOne({ email: email })\n        .exec(function (error, user) {\n            if (error) {\n                return callback(error);\n            } else if (!user) {\n                var err = new Error('User not found.');\n                err.status = 401;\n                return callback(err);\n            }\n            bcrypt.compare(password, user.password, function (error, result) {\n                if (result === true) {\n                    return callback(null, user);\n                } else {\n                    return callback();\n                }\n            });\n        });\n}\n\n// Example in app.js for Express\n\nrouter.post('/login', function(req, res, next) {\n    if (req.body.email && req.body.password) {\n        User.authenticate(req.body.email, req.body.password, function (error, user) {\n            if (error || !user) {\n                var err = new Error('Wrong email or password.');\n                err.status = 401;\n                return next(err);\n            } else {\n                req.session.userId = user._id;\n                return res.redirect('/profile');\n            }\n        });\n    } else {\n        var err = new Error('Email and password are required.');\n        err.status = 401;\n        return next(err);\n    }\n});\n")),Object(t.b)("h4",{id:"express-session---save-sessions-to-use-throughout-the-website"},"EXPRESS SESSION - save sessions to use throughout the website"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{}),"npm install express-session --save\n")),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// in app.js\n\nvar session = require('express-session');\n\n// use sessions for tracking logins - check more in the readme\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n}));\n\n// not useful when in production. check https://github.com/expressjs/session#compatible-session-stores\n")),Object(t.b)("h4",{id:"connect-mongo---used-for-quick-middleware-access-to-mongo"},"CONNECT-MONGO - used for quick middleware access to Mongo"),Object(t.b)("p",null,"connect-mongo is a middleware already written for us!"),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{}),"npm install connect-mongo --save\n")),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"require MongoStore = require('connect-mongo')(session);\n\n// in app.js\n\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n    store: new MongoStore({\n        mongooseConnection: db\n    })\n}));\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/npm/npm-cheat-sheet.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-npm-npm-cheat-sheet.101a1afd2417ec7a4a77.js.map