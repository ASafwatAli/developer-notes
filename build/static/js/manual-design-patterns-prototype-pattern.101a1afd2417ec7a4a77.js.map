{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Design-Patterns/Prototype-Pattern.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"mYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,sKACAA,OAAAE,EAAA,EAAAF,CAAA,iDACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wFACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,+EAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,48CAwELP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCE,KAAQ,mGADQ,kPAO1BZ,EAAWa,gBAAiB","file":"static/js/manual-design-patterns-prototype-pattern.3550b69f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"prototype-pattern\"\n    }}>{`Prototype Pattern`}</h1>\n    <p>{`GoF defines prototype pattern as \"Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype.\"`}</p>\n    <p>{`The components used in this pattern:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Prototype: An interface or abstract classes that defined the method to clone itself.`}</li>\n      <li parentName=\"ul\">{`ConcretePrototype: This is the concrete class that will clone itself.`}</li>\n      <li parentName=\"ul\">{`Client: The application object that needs the cloned copies of the object.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-code\"\n    }}>{`In code`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface PersonPrototype {\n    name: string;\n    clone(): PersonPrototype;\n}\n\nclass Tom implements PersonPrototype {\n    private _name:string = 'Tom';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Tom();\n    }\n}\n\nclass Dick implements PersonPrototype {\n    private _name:string = 'Dick';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Dick();\n    }\n}\n\nclass Harry implements PersonPrototype {\n    private _name:string = 'Harry';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Harry();\n    }\n}\n\n// create factory\nabstract class PersonFactory {\n    abstract createPerson(person: string): PersonPrototype;\n}\n\n// concrete factories\nclass PlayerPersonFactory extends PersonFactory {\n    private players: { [player: string]: PersonPrototype; } = {};\n\n    constructor() {\n        super();\n        this.players['Tom'] = new Tom();\n        this.players['Dick'] = new Dick();\n        this.players['Harry'] = new Harry();\n    }\n\n    createPerson(player: string): PersonPrototype {\n        return this.players[player].clone();\n    }\n}\n\n(function main() {\n    const factory = new PlayerPersonFactory();\n    const prototypes = ['Tom', 'Dick', 'Harry'].map((player) => {\n        return factory.createPerson(player)\n    });\n    console.log(prototypes);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references-and-resources\"\n    }}>{`References And Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.codeproject.com/Articles/476807/Understanding-and-Implementing-Prototype-Pattern-i\"\n        }}>{`Understanding The Prototype Design Pattern`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}