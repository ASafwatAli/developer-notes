(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{"./manual/Elm/Elm-Guide.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},o="wrapper";function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)(o,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"elm-guide"},"Elm Guide"),Object(s.b)("p",null,"This is a basic Elm guide that follows on from the ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://guide.elm-lang.org/core_language.html"}),"core language tour"),"."),Object(s.b)("h2",{id:"values"},"Values"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),'-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n\'a\'   : Char\n"abc" : String\n\n-- multi-line String\n"""\nThis is useful for holding JSON or other\ncontent that has "quotation marks".\n"""\n')),Object(s.b)("h2",{id:"comments"},"Comments"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}\n")),Object(s.b)("h2",{id:"lists"},"Lists"),Object(s.b)("p",null,"The following are equivocal:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []\n")),Object(s.b)("h2",{id:"conditionals"},"Conditionals"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),'if powerLevel > 9000 then "Over 9000!" else "dbz joke not applicable"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)\n')),Object(s.b)("h2",{id:"functions"},"Functions"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"square n =\n  n^2\n")),Object(s.b)("h2",{id:"records"},"Records"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }\n")),Object(s.b)("h2",{id:"pipes"},"Pipes"),Object(s.b)("p",null,'Note: "Pipes" is not the technical term in Elm.'),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),'viewNames1 names =\n  String.join ", " (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join ", "\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!\n')),Object(s.b)("h2",{id:"let-expressions"},"Let Expressions"),Object(s.b)("p",null,"This is useful once expressions get too big."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),'let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in "let" expressions\nlet\n  name : String\n  name =\n    "Hermann"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10\n')),Object(s.b)("h2",{id:"applying-functions"},"Applying Functions"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys\n")),Object(s.b)("h2",{id:"elm-modules"},"Elm Modules"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing\n")),Object(s.b)("h2",{id:"type-annotations--aliases"},"Type Annotations + Aliases"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),'-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  ("Steve", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }\n')),Object(s.b)("h2",{id:"custom-types"},"Custom Types"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"type User\n  = Regular String Int\n  | Visitor String\n")),Object(s.b)("h2",{id:"interoperability-with-js-and-porting"},"Interoperability with JS and Porting"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-elm"}),"-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg\n")),Object(s.b)("p",null,"To use this port from JS, you use this:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Elm/Elm-Guide.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-elm-elm-guide.101a1afd2417ec7a4a77.js.map