{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Docker/docker-cheat-sheet.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","isMDXComponent"],"mappings":"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","file":"static/js/manual-docker-docker-cheat-sheet.42a54daf.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"docker-cheat-sheet\"\n    }}>{`Docker Cheat Sheet`}</h1>\n    <h3 {...{\n      \"id\": \"3-parts-of-docker\"\n    }}>{`3 Parts of Docker`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Docker Engine`}</li>\n      <li parentName=\"ol\">{`Compose`}</li>\n      <li parentName=\"ol\">{`Machine`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`// see versions in shell\ndocker --version\ndocker-compose --version\ndocker-machine --version\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <p>{`Open a command-line terminal, and run some Docker commands to verify that Docker is working as expected.\nSome good commands to try are docker version to check that you have the latest release installed, and docker ps and docker run hello-world to verify that Docker is running.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker version\ndocker ps\ndocker run hello-world\n`}</code></pre>\n    <p>{`To start a Dockerized web server:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 80:80 --name webserver nginx\n`}</code></pre>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`docker ps`}</inlineCode>{` while your web server is running to see details on the webserver container.`}</p>\n    <h2 {...{\n      \"id\": \"adding-registries\"\n    }}>{`Adding registries`}</h2>\n    <p>{`As an alternative to using Docker Hub to store your public or private images or Docker Trusted Registry, you can use Docker to set up your own insecure registry. Add URLs for insecure registries and registry mirrors on which to host your images.`}</p>\n    <h2 {...{\n      \"id\": \"http-proxy-settings\"\n    }}>{`HTTP proxy settings`}</h2>\n    <p>{`Docker for Mac will detect HTTP/HTTPS Proxy Settings and automatically propagate these to Docker and to your containers. For example, if you set your proxy settings to `}<a parentName=\"p\" {...{\n        \"href\": \"http://proxy.example.com\"\n      }}>{`http://proxy.example.com`}</a>{`, Docker will use this proxy when pulling containers.`}</p>\n    <h2 {...{\n      \"id\": \"file-sharing\"\n    }}>{`File Sharing`}</h2>\n    <p>{`You can decide which directories on your Mac to share with containers.`}</p>\n    <p>{`Add a Directory - Click + and navigate to the directory you want to add.`}</p>\n    <p>{`Click Apply & Restart to make the directory available to containers using Docker’s bind mount (-v) feature.`}</p>\n    <p><strong parentName=\"p\">{`There are some limitations on the directories that can be shared:`}</strong></p>\n    <p>{`They cannot be a subdirectory of an already shared directory.\nThey cannot already exist inside of Docker.`}</p>\n    <h2 {...{\n      \"id\": \"uninstalling\"\n    }}>{`Uninstalling`}</h2>\n    <p>{`Docker for Mac can also be uninstalled using a command-line terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`(mdfind Docker.app)/Contents/MacOS/Docker --uninstall\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"autocompletion\"\n    }}>{`Autocompletion`}</h2>\n    <p>{`To activate bash completion, these files need to be copied or symlinked to your bash_completion.d directory. For example, if you use Homebrew:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd /usr/local/etc/bash_completion.d\nln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion\nln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion\nln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"get-started-with-docker-tutorial\"\n    }}>{`Get started with Docker tutorial`}</h1>\n    <h2 {...{\n      \"id\": \"show-all-of-your-containers\"\n    }}>{`Show all of your containers`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker ps -a\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-to-run-images\"\n    }}>{`How to run images`}</h2>\n    <p>{`Breakdown of `}<inlineCode parentName=\"p\">{`docker run hello-world`}</inlineCode></p>\n    <p>{`An image is a filesystem and parameters to use at runtime. It doesn’t have state and never changes. A container is a running instance of an image. When you ran the command, Docker Engine:`}</p>\n    <p>{`checked to see if you had the hello-world software image\ndownloaded the image from the Docker Hub (more about the hub later)\nloaded the image into the container and “ran” it\nDepending on how it was built, an image might run a simple, single command and then exit. This is what Hello-World did.`}</p>\n    <p>{`A Docker image, though, is capable of much more. An image can start software as complex as a database, wait for you (or someone else) to add data, store the data for later use, and then wait for the next person.`}</p>\n    <p>{`Who built the hello-world software image though? In this case, Docker did but anyone can. Docker Engine lets people (or companies) create and share software through Docker images. Using Docker Engine, you don’t have to worry about whether your computer can run the software in a Docker image — a Docker container can always run it.`}</p>\n    <h2 {...{\n      \"id\": \"find-and-run-the-whalesy-image\"\n    }}>{`Find and run the Whalesy Image`}</h2>\n    <h3 {...{\n      \"id\": \"print-random-fortune-cookie-message\"\n    }}>{`Print random fortune cookie message`}</h3>\n    <p>{`$ docker run mendlik/docker-whalesay`}</p>\n    <h3 {...{\n      \"id\": \"print-custom-message\"\n    }}>{`Print custom message`}</h3>\n    <p>{`$ docker run mendlik/docker-whalesay \"Your message\"`}</p>\n    <h3 {...{\n      \"id\": \"lets-see-whats-inside-the-container\"\n    }}>{`Let's see what's inside the container`}</h3>\n    <p>{`$ docker run -it --entrypoint /bin/bash mendlik/docker-whalesay`}</p>\n    <h2 {...{\n      \"id\": \"see-all-of-your-images\"\n    }}>{`See all of your images`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker images\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"create-your-own-image\"\n    }}>{`Create your own image`}</h1>\n    <ol>\n      <li parentName=\"ol\">{`Make directory - this serves as the `}<inlineCode parentName=\"li\">{`context`}</inlineCode>{` for the build. The context just means it contains all the things you need to build your image.`}</li>\n      <li parentName=\"ol\">{`Change into your new directory`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`touch Dockerfile`}</inlineCode></li>\n    </ol>\n    <p>{`Open this file, and add...`}</p>\n    <p><inlineCode parentName=\"p\">{`FROM docker/whalesay:latest`}</inlineCode></p>\n    <p>{`The FROM keyword tells Docker which image your image is based on. Whalesay is cute and has the cowsay program already, so we’ll start there.`}</p>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`RUN apt-get -y update && apt-get install -y fortunes`}</inlineCode></p>\n    <p>{`Now, to build...`}</p>\n    <p><inlineCode parentName=\"p\">{`docker build -t docker-whale .`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"the-build-process\"\n    }}>{`The build process`}</h2>\n    <p>{`The docker build -t docker-whale . command takes the Dockerfile in the current directory, and builds an image called docker-whale on your local machine. The command takes about a minute and its output looks really long and complex.`}</p>\n    <p>{`Once it is built, you can run it using the `}<inlineCode parentName=\"p\">{`docker run <name>`}</inlineCode>{` command! `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}