{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Algorithms/Polynomial-Expression.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"iYAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,yBADR,yBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,4BACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,+rDAyDTX,EAAWY,gBAAiB","file":"static/js/manual-algorithms-polynomial-expression.b9b2f61a.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"polynomial-expression\"\n    }}>{`Polynomial Expression`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`Not the answer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return \\`\\${newCoefficient}\\${variableA ? variableA[0] : ''}\\${newExponent}\\`;\n  };\n\n  const matches = str.match(/\\\\(.*?\\\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}