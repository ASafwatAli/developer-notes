(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{"./manual/JavaScript/Mongo-DB-Code-Guide.md":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return m});var t=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),r={},a="wrapper";function m(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(s.b)(a,Object.assign({},r,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"mongo-cheat-sheet"},"Mongo Cheat Sheet"),Object(s.b)("h2",{id:"mongo-1-mongo-install"},"MONGO-1: Mongo Install"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{}),"npm install mongoose --save\n\n// to run\n\nmongod // starts the daemon\nmongo // check out the documents\n")),Object(s.b)("h2",{id:"mongo-2-mongo-shell"},"MONGO-2: Mongo Shell"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{}),"show dbs \u2014 // display the databases\nuse bookworm \u2014 // specify the database you're going to work with\nshow collections \u2014 // shows the document collections for the selected database\ndb.users.find() \u2014 // display all the documents in the users collection\ndb.users.find().pretty() \u2014 // nicer format for output documents within the shell\ndb.users.drop() \u2014 // remove the users collection from the current database\n")),Object(s.b)("h2",{id:"mongo-3-mongo-sample-usage"},"MONGO-3: Mongo Sample Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"// models > user.js\n\nvar mongoose = require('mongoose');\n\nvar UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    unique: true,\n  },\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  favoriteBook: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\n\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\n\nvar User = require('../models/user');\n")),Object(s.b)("h2",{id:"mongo-4-building-an-example-schema-in-the-mock-folder"},"MONGO-4: Building an Example Schema in the ",Object(s.b)("inlineCode",{parentName:"h2"},"mock")," folder"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{}),"// mock/example.js\n\nimport mongoose from 'mongoose';\n\nconst schema = new mongoose.Schema({\n  question: String,\n  answer: String,\n  completed: Boolean\n});\n\nexport const model = mongoose.model('Layout', schema);\n")),Object(s.b)("h2",{id:"mongo-5-accessing-the-schema-results"},"MONGO-5: Accessing the Schema results"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{}),"// in a route file\nvar express = require('express');\nvar router = express.Router();\n\nimport {ExampleModel} from '../models/example';\n\n/* GET users listing. */\nrouter.get('/', (req, res) => {\n  console.log(ExampleModel);\n  ExampleModel.find({}, \"test string\", (err, results) => {\n    if (err) {\n      return res.status(500).json({message: err.message});  \n    }\n    res.json({ results: results });\n  });\n  // res.json({ todos: \"todos\" });\n    // res.send('respond with a resource');\n});\n\nmodule.exports = router;\n")))}m&&m===Object(m)&&Object.isExtensible(m)&&Object.defineProperty(m,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/JavaScript/Mongo-DB-Code-Guide.md"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-java-script-mongo-db-code-guide.101a1afd2417ec7a4a77.js.map