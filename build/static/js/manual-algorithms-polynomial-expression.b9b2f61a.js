(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"./manual/Algorithms/Polynomial-Expression.md":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return a});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},l="wrapper";function a(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)(l,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"polynomial-expression"},"Polynomial Expression"),Object(i.b)("h2",{id:"answer"},"Answer"),Object(i.b)("p",null,"Not the answer:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return `${newCoefficient}${variableA ? variableA[0] : ''}${newExponent}`;\n  };\n\n  const matches = str.match(/\\(.*?\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));\n")))}a&&a===Object(a)&&Object.isExtensible(a)&&Object.defineProperty(a,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"manual/Algorithms/Polynomial-Expression.md"}}),a.isMDXComponent=!0}}]);
//# sourceMappingURL=manual-algorithms-polynomial-expression.101a1afd2417ec7a4a77.js.map