{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Java/Java-Lambda-Funcs.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"wXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,4CAAuCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAAvC,gGACAN,OAAAE,EAAA,EAAAF,CAAA,kFACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,WAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,8XAuBLP,OAAAE,EAAA,EAAAF,CAAA,kCACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,gkBAuBTX,EAAWY,gBAAiB","file":"static/js/manual-java-java-lambda-funcs.c830ce98.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"java-lambda-funcs\"\n    }}>{`Java Lambda Funcs`}</h1>\n    <p>{`The basic gist is to generate a `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` with the lambda signature, then explicitly create a function preface by the interface type.`}</p>\n    <p>{`This will allow you to call the lambda function as a instance method.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Lambda.java\ninterface Anon {\n    String helloWorld();\n}\n\ninterface AnonInt {\n    int sum(int a, int b);\n}\n\nclass Lambda {\n    String hello() {\n        Anon anon = () -> \"Hello, World!\";\n        return anon.helloWorld();\n    }\n\n    int sumOnePlusTwo() {\n        AnonInt anon = (int a, int b) -> a + b;\n        return anon.sum(1, 2);\n    }\n}\n`}</code></pre>\n    <p>{`As for the test file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/tests/java/LambdaTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LambdaTest {\n    @Test\n    public void testLambda() {\n        assertEquals(\"Hello, World!\", new Lambda().hello());\n    }\n\n    @Test\n    public void testLambdaSum() {\n        assertEquals(3, new Lambda().sumOnePlusTwo());\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}