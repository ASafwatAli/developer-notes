{"version":3,"sources":["/Users/dennis.okeeffe/Project-Imposter/developer-notes/manual/Redis/Redis-Nodejs.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dennis_okeeffe_Project_Imposter_developer_notes_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"oXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,sBAAH,qGACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,+6EAuHTX,EAAWY,gBAAiB","file":"static/js/manual-redis-redis-nodejs.cca56c8f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"redis-with-nodejs\"\n    }}>{`Redis with Nodejs`}</h1>\n    <p><inlineCode parentName=\"p\">{`yarn install redis`}</inlineCode>{` and use the controller. Example controller setup. Use promises to enable sequential optionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const redis = require('redis');\n\nfunction setHashSet(key, field, value) {\n  return new Promise((resolve, reject) => {\n    client.hset(key, field, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getHashSet(key) {\n  return new Promise((resolve, reject) => {\n    client.hvals(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction delKey(key) {\n  return new Promise((resolve, reject) => {\n    client.del(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getKeys(key) {\n  return new Promise((resolve, reject) => {\n    client.hkeys(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getValue(key, field) {\n  return new Promise((resolve, reject) => {\n    client.hget(key, field, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction setArray(key, arr) {\n  return new Promise((resolve, reject) => {\n    client.sadd(key, ...arr, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getArray(key) {\n  return new Promise((resolve, reject) => {\n    client.smembers(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getListLen(key) {\n  return new Promise((resolve, reject) => {\n    client.llen(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction pushToListEnd(key) {\n  return new Promise((resolve, reject) => {\n    client.rpush(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction popFromListStart(key) {\n  return new Promise((resolve, reject) => {\n    client.lpop(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction deleteArrayMember(key, value) {\n  return new Promise((resolve, reject) => {\n    client.srem(key, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  setHashSet,\n  getHashSet,\n  getKeys,\n  getValue,\n  setArray,\n  getArray,\n  deleteArrayMember,\n  getListLen,\n  pushToListEnd,\n  popFromListStart\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}